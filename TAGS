
.stack-work/dist/x86_64-linux-tinfo6/Cabal-3.2.1.0/build/autogen/Paths_registry.hs,1414
module Paths_registry (Paths_registry4,108
version :: Versionversion28,675
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathsysconfdir30,725
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathlibexecdir30,725
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathlibdir30,725
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetSysconfDir39,1994
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetLibexecDir39,1994
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetLibDir39,1994
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetDynLibDir39,1994
getDataFileName :: FilePath -> IO FilePathgetDataFileName47,2537
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetDataDir39,1994
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetBinDir39,1994
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathdynlibdir30,725
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathdatadir30,725
catchIO :: IO a -> (Exception.IOException -> IO a) -> IO acatchIO18,446
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathbindir30,725

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Applicative.hs,742
module Control.Applicative (Applicative37,1368
newtype WrappedMonad m a = WrapMonad { unwrapMonad :: m a }WrappedMonad66,2027
newtype WrappedMonad m a = WrapMonad { unwrapMonad :: m a }WrapMonad66,2027
newtype WrappedMonad m a = WrapMonad { unwrapMonad :: m a }unwrapMonad66,2027
newtype WrappedArrow a b c = WrapArrow { unwrapArrow :: a b c }WrappedArrow87,2824
newtype WrappedArrow a b c = WrapArrow { unwrapArrow :: a b c }WrapArrow87,2824
newtype WrappedArrow a b c = WrapArrow { unwrapArrow :: a b c }unwrapArrow87,2824
newtype ZipList a = ZipList { getZipList :: [a] }ZipList108,3630
newtype ZipList a = ZipList { getZipList :: [a] }getZipList108,3630
optional :: Alternative f => f a -> f (Maybe a)optional144,5037

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Arrow.hs,1665
module Control.Arrow (Arrow33,1071
class Category a => Arrow a whereArrow92,2418
    arr :: (b -> c) -> a b carr96,2532
    first :: a b c -> a (b,d) (c,d)first100,2689
    second :: a b c -> a (d,b) (d,c)second107,2891
    (***) :: a b c -> a b' c' -> a (b,b') (c,c')***115,3196
    (&&&) :: a b c -> a b c' -> a b (c,c')&&&124,3537
newtype Kleisli m a b = Kleisli { runKleisli :: a -> m b }Kleisli154,4455
newtype Kleisli m a b = Kleisli { runKleisli :: a -> m b }runKleisli154,4455
class Arrow a => ArrowZero a whereArrowZero226,6683
    zeroArrow :: a b czeroArrow227,6718
class ArrowZero a => ArrowPlus a whereArrowPlus234,6875
    (<+>) :: a b c -> a b c -> a b c<+>236,6975
class Arrow a => ArrowChoice a whereArrowChoice266,7875
    left :: a b c -> a (Either b d) (Either c d)left271,8063
    right :: a b c -> a (Either d b) (Either d c)right278,8276
    (+++) :: a b c -> a b' c' -> a (Either b b') (Either c c')+++287,8613
    (|||) :: a b d -> a c d -> a (Either b c) d|||299,9068
class Arrow a => ArrowApply a whereArrowApply345,10450
    app :: a (a b c, b) capp346,10486
newtype ArrowMonad a b = ArrowMonad (a () b)ArrowMonad359,10845
class Arrow a => ArrowLoop a whereArrowLoop418,12851
    loop :: a (b,d) (c,d) -> a b cloop419,12886
returnA :: Arrow a => a b breturnA207,6139
leftApp :: ArrowApply a => a b c -> a (Either b d) (Either c d)leftApp386,11750
(^>>) :: Arrow a => (b -> c) -> a c d -> a b d^>>211,6227
(^<<) :: Arrow a => (c -> d) -> a b c -> a b d^<<223,6613
(>>^) :: Arrow a => a b c -> (c -> d) -> a b d>>^215,6340
(<<^) :: Arrow a => a c d -> (b -> c) -> a b d<<^219,6476

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Category.hs,302
module Control.Category whereCategory21,678
class Category cat whereCategory37,1060
    id :: cat a aid39,1116
    (.) :: cat b c -> cat a b -> cat a c.42,1165
(>>>) :: Category cat => cat a b -> cat b c -> cat a c>>>78,1920
(<<<) :: Category cat => cat b c -> cat a b -> cat a c<<<74,1821

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Concurrent.hs,1433
module Control.Concurrent (Concurrent27,831
foreign import ccall unsafe rtsSupportsBoundThreads :: BoolrtsSupportsBoundThreads257,8169
foreign import ccall "forkOS_entry" forkOS_entry_reimportedforkOS_entry_reimported284,9227
foreign import ccall forkOS_createThreadforkOS_createThread292,9458
foreign import ccall unsafe "rtsSupportsBoundThreads" threaded :: Boolthreaded486,17348
  fdReady :: CInt -> CBool -> Int64 -> CBool -> IO CIntfdReady503,17817
withThread :: IO a -> IO awithThread488,17420
waitFd :: Fd -> Bool -> IO ()waitFd497,17628
unsafeResult :: Either SomeException a -> IO aunsafeResult390,13228
threadWaitWriteSTM :: Fd -> IO (STM (), IO ())threadWaitWriteSTM467,16453
threadWaitWrite :: Fd -> IO ()threadWaitWrite428,14869
threadWaitReadSTM :: Fd -> IO (STM (), IO ())threadWaitReadSTM443,15354
threadWaitRead :: Fd -> IO ()threadWaitRead403,13757
runInUnboundThread :: IO a -> IO arunInUnboundThread376,12810
runInBoundThread :: IO a -> IO arunInBoundThread345,11531
isCurrentThreadBound :: IO BoolisCurrentThreadBound330,10970
forkOS_entry :: StablePtr (IO ()) -> IO ()forkOS_entry287,9322
forkOSWithUnmask :: ((forall a . IO a -> IO a) -> IO ()) -> IO ThreadIdforkOSWithUnmask324,10685
forkOS :: IO () -> IO ThreadIdforkOS279,9126
forkFinally :: IO a -> (Either SomeException a -> IO ()) -> IO ThreadIdforkFinally198,5525
failNonThreaded :: IO afailNonThreaded295,9536

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Concurrent/Chan.hs,511
module Control.Concurrent.ChanChan23,788
data Chan aChan50,1537
type Stream a = MVar (ChItem a)Stream55,1698
data ChItem a = ChItem a _UPK_(Stream a)ChItem57,1731
writeList2Chan :: Chan a -> [a] -> IO ()writeList2Chan141,4822
writeChan :: Chan a -> a -> IO ()writeChan82,2664
readChan :: Chan a -> IO areadChan107,3630
newChan :: IO (Chan a)newChan69,2244
getChanContents :: Chan a -> IO [a]getChanContents132,4605
dupChan :: Chan a -> IO (Chan a)dupChan122,4271
PACK #-} !(x)_UPK_43,1233

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Concurrent/MVar.hs,664
module Control.Concurrent.MVarMVar128,5247
withMVarMasked :: MVar a -> (a -> IO b) -> IO bwithMVarMasked199,7131
withMVar :: MVar a -> (a -> IO b) -> IO bwithMVar184,6781
swapMVar :: MVar a -> a -> IO aswapMVar167,6186
modifyMVar_ :: MVar a -> (a -> IO a) -> IO ()modifyMVar_215,7621
modifyMVarMasked_ :: MVar a -> (a -> IO a) -> IO ()modifyMVarMasked_242,8351
modifyMVarMasked :: MVar a -> (a -> IO (a,b)) -> IO bmodifyMVarMasked256,8693
modifyMVar :: MVar a -> (a -> IO (a,b)) -> IO bmodifyMVar227,7963
mkWeakMVar :: MVar a -> IO () -> IO (Weak (MVar a))mkWeakMVar272,9221
addMVarFinalizer :: MVar a -> IO () -> IO ()addMVarFinalizer265,8984

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Concurrent/QSem.hs,327
module Control.Concurrent.QSemQSem18,533
newtype QSem = QSem (MVar (Int, [MVar ()], [MVar ()]))QSem41,1274
waitQSem :: QSem -> IO ()waitQSem71,2472
signalQSem :: QSem -> IO ()signalQSem95,3195
signal :: (Int,[MVar ()],[MVar ()]) -> IO (Int,[MVar ()],[MVar ()])signal118,3931
newQSem :: Int -> IO QSemnewQSem63,2233

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Concurrent/QSemN.hs,472
module Control.Concurrent.QSemNQSemN20,637
data QSemN = QSemN !(IORef (Int, [(Int, MVar ())], [(Int, MVar ())]))QSemN45,1495
data MaybeMV a = JustMV !(MVar a) | NothingMVMaybeMV73,2586
data MaybeMV a = JustMV !(MVar a) | NothingMVJustMV73,2586
data MaybeMV a = JustMV !(MVar a) | NothingMVNothingMV73,2586
waitQSemN :: QSemN -> Int -> IO ()waitQSemN76,2689
signalQSemN :: QSemN -> Int -> IO ()signalQSemN103,3649
newQSemN :: Int -> IO QSemNnewQSemN65,2341

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Exception.hs,308
module Control.Exception (Exception34,1285
data Handler a = forall e . Exception e => Handler (e -> IO a)Handler142,3709
catchesHandler :: [Handler a] -> SomeException -> IO acatchesHandler169,4761
catches :: IO a -> [Handler a] -> IO acatches166,4664
allowInterrupt :: IO ()allowInterrupt227,6864

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Exception/Base.hs,1964
module Control.Exception.Base (Base19,623
newtype PatternMatchFail = PatternMatchFail StringPatternMatchFail263,8720
newtype RecSelError = RecSelError StringRecSelError279,9240
newtype RecConError = RecConError StringRecConError293,9578
newtype RecUpdError = RecUpdError StringRecUpdError309,10071
newtype NoMethodError = NoMethodError StringNoMethodError323,10461
newtype TypeError = TypeError StringTypeError339,10871
data NonTermination = NonTerminationNonTermination354,11304
data NestedAtomically = NestedAtomicallyNestedAtomically367,11630
  absentError, typeErrortypeError380,11979
tryJust :: Exception e => (e -> Maybe b) -> IO a -> IO (Either b a)tryJust180,5593
try :: Exception e => IO a -> IO (Either e a)try174,5289
recSelError, recConError, runtimeError,runtimeError378,11879
recSelError, recConError, runtimeError,recSelError378,11879
recSelError, recConError, runtimeError,recConError378,11879
  nonExhaustiveGuardsError, patError, noMethodBindingError,patError379,11919
onException :: IO a -> IO b -> IO aonException191,5979
nonTermination :: SomeExceptionnonTermination395,13008
  nonExhaustiveGuardsError, patError, noMethodBindingError,nonExhaustiveGuardsError379,11919
  nonExhaustiveGuardsError, patError, noMethodBindingError,noMethodBindingError379,11919
nestedAtomically :: SomeExceptionnestedAtomically399,13109
mapException :: (Exception e1, Exception e2) => (e1 -> e2) -> a -> amapException159,4615
handleJust :: Exception e => (e -> Maybe b) -> (b -> IO a) -> IO a -> IO ahandleJust148,4224
handle     :: Exception e => (e -> IO a) -> IO a -> IO ahandle143,4058
finally :: IO a         -- ^ computation to run firstfinally232,7488
catchJustcatchJust127,3445
bracket_ :: IO a -> IO b -> IO c -> IO cbracket_244,7946
bracketOnErrorbracketOnError249,8184
bracketbracket217,6954
absentSumFieldError :: aabsentSumFieldError403,13247
  absentError, typeErrorabsentError380,11979

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Monad.hs,1253
module Control.MonadMonad17,496
zipWithM_         :: (Applicative m) => (a -> b -> m c) -> [a] -> [b] -> m ()zipWithM_226,6076
zipWithM          :: (Applicative m) => (a -> b -> m c) -> [a] -> [b] -> m [c]zipWithM219,5718
unless            :: (Applicative f) => Bool -> f () -> f ()unless328,9391
replicateM_       :: (Applicative m) => Int -> m a -> m ()replicateM_315,9028
replicateM        :: (Applicative m) => Int -> m a -> m [a]replicateM303,8636
mfilter :: (MonadPlus m) => (a -> Bool) -> m a -> m amfilter369,10347
mapAndUnzipM      :: (Applicative m) => (a -> m (b,c)) -> [a] -> m ([b], [c])mapAndUnzipM212,5346
guard           :: (Alternative f) => Bool -> f ()guard132,2859
forever     :: (Applicative f) => f a -> f bforever200,4846
foldM_         :: (Foldable t, Monad m) => (b -> a -> m b) -> b -> t a -> m ()foldM_260,7154
foldM          :: (Foldable t, Monad m) => (b -> a -> m b) -> b -> t a -> m bfoldM253,6847
filterM          :: (Applicative m) => (a -> m Bool) -> [a] -> m [a]filterM139,3053
(>=>)       :: Monad m => (a -> m b) -> (b -> m c) -> (a -> m c)>=>152,3394
(<=<)       :: Monad m => (b -> m c) -> (a -> m b) -> (a -> m c)<=<162,3778
(<$!>) :: Monad m => (a -> b) -> m a -> m b<$!>339,9713

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Monad/Fail.hs,156
module Control.Monad.Fail ( MonadFail(fail) ) whereFail39,996
class Monad m => MonadFail m whereMonadFail65,1804
    fail :: String -> m afail66,1839

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Monad/Fix.hs,138
module Control.Monad.Fix (Fix22,743
class (Monad m) => MonadFix m whereMonadFix57,1866
        mfix :: (a -> m a) -> m amfix62,2152

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Monad/IO/Class.hs,136
module Control.Monad.IO.Class (Class16,532
class (Monad m) => MonadIO m whereMonadIO31,978
    liftIO :: IO a -> m aliftIO33,1062

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Monad/Instances.hs,162
module Control.Monad.Instances {-# DEPRECATED "This module now contains no instances and will be removed in the future" #-} -- deprecated in 7.8Instances18,545

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Monad/ST.hs,36
module Control.Monad.ST (ST23,894

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Monad/ST/Imp.hs,88
module Control.Monad.ST.Imp (Imp21,749
fixST :: (a -> ST s a) -> ST s afixST52,1802

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Monad/ST/Lazy.hs,43
module Control.Monad.ST.Lazy (Lazy19,689

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Monad/ST/Lazy/Imp.hs,685
module Control.Monad.ST.Lazy.Imp (Imp22,804
newtype ST s a = ST { unST :: State s -> (a, State s) }ST64,2029
newtype ST s a = ST { unST :: State s -> (a, State s) }unST64,2029
data State s = S# (State# s)State69,2287
data State s = S# (State# s)S#69,2287
unsafeInterleaveST :: ST s a -> ST s aunsafeInterleaveST253,8814
unsafeIOToST :: IO a -> ST s aunsafeIOToST256,8931
strictToLazyST :: ST.ST s a -> ST s astrictToLazyST230,8004
stToIO :: ST RealWorld a -> IO astToIO247,8644
runST :: (forall s. ST s a) -> arunST201,6940
noDup :: a -> anoDup103,4315
lazyToStrictST :: ST s a -> ST.ST s alazyToStrictST239,8241
fixST :: (a -> ST s a) -> ST s afixST207,7177

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Monad/ST/Lazy/Safe.hs,135
module Control.Monad.ST.Lazy.Safe {-# DEPRECATED "Safe is now the default, please use Control.Monad.ST.Lazy instead" #-} (Safe21,713

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Monad/ST/Lazy/Unsafe.hs,52
module Control.Monad.ST.Lazy.Unsafe (Unsafe21,707

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Monad/ST/Safe.hs,125
module Control.Monad.ST.Safe {-# DEPRECATED "Safe is now the default, please use Control.Monad.ST instead" #-} (Safe21,707

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Monad/ST/Strict.hs,47
module Control.Monad.ST.Strict (Strict17,559

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Monad/ST/Unsafe.hs,47
module Control.Monad.ST.Unsafe (Unsafe21,701

/home/effectfully/.fastdogs/base-4.14.3.0/Control/Monad/Zip.hs,259
module Control.Monad.Zip whereZip19,611
class Monad m => MonadZip m whereMonadZip42,1185
    mzip :: m a -> m b -> m (a,b)mzip45,1256
    mzipWith :: (a -> b -> c) -> m a -> m b -> m cmzipWith48,1315
    munzip :: m (a,b) -> (m a, m b)munzip51,1421

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Bifoldable.hs,2710
module Data.BifoldableBifoldable16,472
class Bifoldable p whereBifoldable92,2159
  bifold :: Monoid m => p m m -> mbifold100,2354
  bifoldMap :: Monoid m => (a -> m) -> (b -> m) -> p a b -> mbifoldMap110,2630
  bifoldr :: (a -> c -> c) -> (b -> c -> c) -> c -> p a b -> cbifoldr121,3093
  bifoldl :: (c -> a -> c) -> (c -> b -> c) -> c -> p a b -> cbifoldl137,3859
bitraverse_ :: (Bifoldable t, Applicative f)bitraverse_248,7514
bisum :: (Bifoldable t, Num a) => t a a -> abisum353,10592
bisequence_ :: (Bifoldable t, Applicative f) => t (f a) (f b) -> f ()bisequence_289,8725
bisequenceA_ :: (Bifoldable t, Applicative f) => t (f a) (f b) -> f ()bisequenceA_281,8427
biproduct :: (Bifoldable t, Num a) => t a a -> abiproduct360,10781
bior :: Bifoldable t => t Bool Bool -> Boolbior383,11666
binull :: Bifoldable t => t a b -> Boolbinull313,9379
binotElem :: (Bifoldable t, Eq a) => a -> t a a-> BoolbinotElem423,12945
bimsum :: (Bifoldable t, Alternative f) => t (f a) (f a) -> f abimsum301,9073
biminimumBy :: Bifoldable t => (a -> a -> Ordering) -> t a a -> abiminimumBy414,12679
biminimum :: forall t a. (Bifoldable t, Ord a) => t a a -> abiminimum345,10301
bimaximumBy :: Bifoldable t => (a -> a -> Ordering) -> t a a -> abimaximumBy404,12361
bimaximum :: forall t a. (Bifoldable t, Ord a) => t a a -> abimaximum337,10035
bimapM_ :: (Bifoldable t, Applicative f)bimapM_267,8098
bilength :: Bifoldable t => t a b -> Intbilength319,9560
bifor_ :: (Bifoldable t, Applicative f)bifor_260,7920
biforM_ :: (Bifoldable t, Applicative f)biforM_274,8262
bifoldrM :: (Bifoldable t, Monad m)bifoldrM202,5789
bifoldr1 :: Bifoldable t => (a -> a -> a) -> t a a -> abifoldr1191,5432
bifoldr' :: Bifoldable t => (a -> c -> c) -> (b -> c -> c) -> c -> t a b -> cbifoldr'182,5125
bifoldlM :: (Bifoldable t, Monad m)bifoldlM237,7063
bifoldl1 :: Bifoldable t => (a -> a -> a) -> t a a -> abifoldl1226,6707
bifoldl':: Bifoldable t => (a -> b -> a) -> (a -> c -> a) -> a -> t b c -> abifoldl'217,6401
bifind :: Bifoldable t => (a -> Bool) -> t a a -> Maybe abifind431,13236
bielem :: (Bifoldable t, Eq a) => a -> t a a -> Boolbielem325,9720
biconcatMap :: Bifoldable t => (a -> [c]) -> (b -> [c]) -> t a b -> [c]biconcatMap367,11031
biconcat :: Bifoldable t => t [a] [a] -> [a]biconcat331,9898
biasum :: (Bifoldable t, Alternative f) => t (f a) (f a) -> f abiasum295,8926
biany :: Bifoldable t => (a -> Bool) -> (b -> Bool) -> t a b -> Boolbiany390,11870
biand :: Bifoldable t => t Bool Bool -> Boolbiand375,11357
biall :: Bifoldable t => (a -> Bool) -> (b -> Bool) -> t a b -> Boolbiall397,12117
biList :: Bifoldable t => t a a -> [a]biList307,9247

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Bifunctor.hs,258
module Data.BifunctorBifunctor16,455
class Bifunctor p whereBifunctor64,1780
    bimap :: (a -> b) -> (c -> d) -> p a c -> p b dbimap80,2165
    first :: (a -> b) -> p a c -> p b cfirst94,2487
    second :: (b -> c) -> p a b -> p a csecond108,2779

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Bitraversable.hs,955
module Data.BitraversableBitraversable16,482
class (Bifunctor t, Bifoldable t) => Bitraversable t whereBitraversable95,2871
  bitraverse :: Applicative f => (a -> f c) -> (b -> f d) -> t a b -> f (t c d)bitraverse105,3292
bisequenceA :: (Bitraversable t, Applicative f) => t (f a) (f b) -> f (t a b)bisequenceA111,3467
bisequence :: (Bitraversable t, Applicative f) => t (f a) (f b) -> f (t a b)bisequence128,4002
bimapM :: (Bitraversable t, Applicative f)bimapM117,3622
bimapDefault :: forall t a b c d . Bitraversable tbimapDefault213,6813
bimapAccumR :: Bitraversable t => (a -> b -> (a, c)) -> (a -> d -> (a, e))bimapAccumR201,6405
bimapAccumL :: Bitraversable t => (a -> b -> (a, c)) -> (a -> d -> (a, e))bimapAccumL190,5940
biforM :: (Bitraversable t, Applicative f)biforM180,5562
bifor :: (Bitraversable t, Applicative f)bifor173,5386
bifoldMapDefault :: forall t m a b . (Bitraversable t, Monoid m)bifoldMapDefault228,7328

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Bits.hs,1857
module Data.Bits (Bits22,805
class Eq a => Bits a whereBits76,1873
    (.&.) :: a -> a -> a.&.83,2140
    (.|.) :: a -> a -> a.|.86,2190
    xor :: a -> a -> axor89,2241
    complement        :: a -> acomplement92,2313
    shift             :: a -> Int -> ashift103,2790
    rotate            :: a -> Int -> arotate117,3323
    zeroBits :: azeroBits151,4737
    bit               :: Int -> abit160,5002
    setBit            :: a -> Int -> asetBit163,5092
    clearBit          :: a -> Int -> aclearBit166,5202
    complementBit     :: a -> Int -> acomplementBit169,5308
    testBit           :: a -> Int -> BooltestBit175,5509
    bitSizeMaybe      :: a -> Maybe IntbitSizeMaybe183,5789
    bitSize           :: a -> IntbitSize192,6154
    isSigned          :: a -> BoolisSigned197,6375
    shiftL            :: a -> Int -> ashiftL213,6996
    unsafeShiftL            :: a -> Int -> aunsafeShiftL224,7380
    shiftR            :: a -> Int -> ashiftR240,8119
    unsafeShiftR            :: a -> Int -> aunsafeShiftR254,8641
    rotateL           :: a -> Int -> arotateL264,9026
    rotateR           :: a -> Int -> arotateR274,9396
    popCount          :: a -> IntpopCount285,9755
class Bits b => FiniteBits b whereFiniteBits290,9889
    finiteBitSize :: b -> IntfiniteBitSize301,10283
    countLeadingZeros :: b -> IntcountLeadingZeros321,10915
    countTrailingZeros :: b -> IntcountTrailingZeros351,11898
toIntegralSized :: (Integral a, Integral b, Bits a, Bits b) => a -> Maybe btoIntegralSized596,19648
testBitDefault ::  (Bits a, Num a) => a -> Int -> BooltestBitDefault379,12569
popCountDefault :: (Bits a, Num a) => a -> IntpopCountDefault389,12895
isBitSubType :: (Bits a, Bits b) => a -> b -> BoolisBitSubType627,20749
bitDefault :: (Bits a, Num a) => Int -> abitDefault370,12345

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Bool.hs,72
module Data.Bool (Bool18,523
bool :: a -> a -> Bool -> abool59,1337

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Char.hs,248
module Data.CharChar18,520
isSeparator :: Char -> BoolisSeparator286,7320
isNumber :: Char -> BoolisNumber241,6229
isMark :: Char -> BoolisMark198,5160
isLetter :: Char -> BoolisLetter154,3974
digitToInt :: Char -> IntdigitToInt95,2457

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Coerce.hs,33
module Data.CoerceCoerce23,680

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Complex.hs,630
module Data.ComplexComplex21,606
data Complex aComplex62,1750
  = !a :+ !a    -- ^ forms a complex number from its real and imaginary:+63,1765
realPart :: Complex a -> arealPart80,2504
polar            :: (RealFloat a) => Complex a -> (a,a)polar108,3624
phase :: (RealFloat a) => Complex a -> aphase123,4294
mkPolar          :: Floating a => a -> a -> Complex amkPolar94,2986
magnitude :: (RealFloat a) => Complex a -> amagnitude113,3833
imagPart :: Complex a -> aimagPart84,2609
conjugate        :: Num a => Complex a -> Complex aconjugate89,2765
cis              :: Floating a => a -> Complex acis100,3232

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Data.hs,5505
module Data.Data (Data39,1538
class Typeable a => Data a whereData229,8603
  gfoldl  :: (forall d b. Data d => c (d -> b) -> d -> c b)gfoldl238,8955
  gunfold :: (forall b r. Data b => c (b -> r) -> c r)gunfold259,9911
  toConstr   :: a -> ConstrtoConstr268,10268
  dataTypeOf  :: a -> DataTypedataTypeOf272,10344
  dataCast1 :: Typeable tdataCast1294,10905
  dataCast2 :: Typeable tdataCast2311,11362
  gmapT :: (forall b. Data b => b -> b) -> a -> agmapT330,11991
  gmapQl :: forall r r'. (r -> r' -> r) -> r -> (forall d. Data d => d -> r') -> a -> rgmapQl343,12459
  gmapQr :: forall r r'. (r' -> r -> r) -> r -> (forall d. Data d => d -> r') -> a -> rgmapQr352,12806
  gmapQ :: (forall d. Data d => d -> u) -> a -> [u]gmapQ362,13265
  gmapQi :: forall u. Int -> (forall d. Data d => d -> u) -> a -> ugmapQi367,13417
  gmapM :: forall m. Monad m => (forall d. Data d => d -> m d) -> a -> m agmapM381,14012
  gmapMp :: forall m. MonadPlus m => (forall d. Data d => d -> m d) -> a -> m agmapMp396,14509
  gmapMo :: forall m. MonadPlus m => (forall d. Data d => d -> m d) -> a -> m agmapMo419,15229
data Qi q a = Qi Int (Maybe q)Qi446,16076
newtype Qr r a = Qr { unQr  :: r -> r }Qr450,16164
newtype Qr r a = Qr { unQr  :: r -> r }unQr450,16164
newtype Mp m x = Mp { unMp :: m (x, Bool) }Mp454,16261
newtype Mp m x = Mp { unMp :: m (x, Bool) }unMp454,16261
data DataType = DataTypeDataType510,17660
                        { tycon   :: Stringtycon511,17685
                        , datarep :: DataRepdatarep512,17729
data Constr = ConstrConstr520,18032
                        { conrep    :: ConstrRepconrep521,18053
                        , constring :: Stringconstring522,18102
                        , confields :: [String] -- for AlgRep onlyconfields523,18148
                        , confixity :: Fixity   -- for AlgRep onlyconfixity524,18215
                        , datatype  :: DataTypedatatype525,18282
data DataRep = AlgRep [Constr]DataRep541,18582
data DataRep = AlgRep [Constr]AlgRep541,18582
             | IntRepIntRep542,18613
             | FloatRepFloatRep543,18635
             | CharRepCharRep544,18659
             | NoRepNoRep545,18682
data ConstrRep = AlgConstr    ConIndexConstrRep554,18943
data ConstrRep = AlgConstr    ConIndexAlgConstr554,18943
               | IntConstr    IntegerIntConstr555,18982
               | FloatConstr  RationalFloatConstr556,19020
               | CharConstr   CharCharConstr557,19059
type ConIndex = IntConIndex566,19338
data Fixity = PrefixFixity570,19388
data Fixity = PrefixPrefix570,19388
            | Infix     -- Later: add associativity and precedenceInfix571,19409
wordType :: DataTypewordType1030,34904
word8Type :: DataTypeword8Type1045,35407
word64Type :: DataTypeword64Type1090,36954
word32Type :: DataTypeword32Type1075,36436
word16Type :: DataTypeword16Type1060,35918
tyconUQname :: String -> StringtyconUQname846,28719
tyconModule :: String -> StringtyconModule853,28946
showConstr :: Constr -> StringshowConstr678,22631
repConstr :: DataType -> ConstrRep -> ConstrrepConstr607,20279
readConstr :: DataType -> String -> Maybe ConstrreadConstr683,22726
ratioDataType :: DataTyperatioDataType1108,37546
ratioConstr :: ConstrratioConstr1105,37472
nilConstr :: ConstrnilConstr1126,38212
naturalType :: DataTypenaturalType955,32341
mkRealConstr :: (Real a, Show a) => DataType -> a -> ConstrmkRealConstr798,26985
mkPrimType :: DataRep -> String -> DataTypemkPrimType774,25949
mkPrimCon :: DataType -> String -> ConstrRep -> ConstrmkPrimCon782,26172
mkNoRepType :: String -> DataTypemkNoRepType822,28082
mkIntegralConstr :: (Integral a, Show a) => DataType -> a -> ConstrmkIntegralConstr791,26573
mkIntType :: String -> DataTypemkIntType759,25640
mkFloatType :: String -> DataTypemkFloatType764,25737
mkDataType :: String -> [Constr] -> DataTypemkDataType626,20981
mkConstr :: DataType -> String -> [String] -> Fixity -> ConstrmkConstr634,21199
mkCharType :: String -> DataTypemkCharType769,25839
mkCharConstr :: DataType -> Char -> ConstrmkCharConstr806,27425
maxConstrIndex :: DataType -> ConIndexmaxConstrIndex742,24994
listDataType :: DataTypelistDataType1131,38358
isNorepType :: DataType -> BoolisNorepType829,28291
isAlgType :: DataType -> BoolisAlgType717,23903
integerType :: DataTypeintegerType938,31741
intType :: DataTypeintType923,31246
int8Type :: DataTypeint8Type970,32871
int64Type :: DataTypeint64Type1015,34394
int32Type :: DataTypeint32Type1000,33884
int16Type :: DataTypeint16Type985,33374
indexConstr :: DataType -> ConIndex -> ConstrindexConstr724,24099
fromConstrM :: forall m a. (Monad m, Data a)fromConstrM485,17032
fromConstrB :: Data afromConstrB471,16696
fromConstr :: Data a => Constr -> afromConstr466,16527
floatType :: DataTypefloatType893,30233
doubleType :: DataTypedoubleType908,30736
dataTypeRep :: DataType -> DataRepdataTypeRep592,19970
dataTypeName :: DataType -> StringdataTypeName586,19863
dataTypeConstrs :: DataType -> [Constr]dataTypeConstrs649,21673
constrType :: Constr -> DataTypeconstrType597,20069
constrRep :: Constr -> ConstrRepconstrRep602,20176
constrIndex :: Constr -> ConIndexconstrIndex733,24571
constrFixity :: Constr -> FixityconstrFixity665,22301
constrFields :: Constr -> [String]constrFields660,22201
consConstr :: ConstrconsConstr1128,38284
charType :: DataTypecharType878,29748

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Dynamic.hs,372
module Data.DynamicDynamic28,921
data Dynamic whereDynamic74,1961
toDyn :: Typeable a => a -> DynamictoDyn106,3102
fromDynamicfromDynamic123,3844
fromDyn :: Typeable afromDyn111,3285
dynTypeRep :: Dynamic -> SomeTypeRepdynTypeRep150,4911
dynApply :: Dynamic -> Dynamic -> Maybe DynamicdynApply135,4348
dynApp :: Dynamic -> Dynamic -> DynamicdynApp143,4595

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Either.hs,639
module Data.Either (Either21,676
data  Either a b  =  Left a | Right bEither125,3215
data  Either a b  =  Left a | Right bLeft125,3215
data  Either a b  =  Left a | Right bRight125,3215
rights   :: [Either a b] -> [b]rights208,5525
partitionEithers :: [Either a b] -> ([a],[b])partitionEithers232,6331
lefts   :: [Either a b] -> [a]lefts193,5122
isRight :: Either a b -> BoolisRight297,8076
isLeft :: Either a b -> BoolisLeft266,7263
fromRight :: b -> Either a b -> bfromRight331,8669
fromLeft :: a -> Either a b -> afromLeft314,8371
either                  :: (a -> c) -> (b -> c) -> Either a b -> ceither177,4712

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Eq.hs,27
module Data.Eq (Eq18,486

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Fixed.hs,1376
module Data.FixedFixed26,917
newtype Fixed (a :: k) = MkFixed IntegerFixed64,1830
newtype Fixed (a :: k) = MkFixed IntegerMkFixed64,1830
class HasResolution (a :: k) whereHasResolution83,2490
    resolution :: p a -> Integerresolution84,2525
data E0E0187,6609
type Uni = Fixed E0Uni193,6744
data E1E1195,6765
type Deci = Fixed E1Deci201,6878
data E2E2203,6900
type Centi = Fixed E2Centi209,7052
data E3E3211,7075
type Milli = Fixed E3Milli217,7192
data E6E6219,7215
type Micro = Fixed E6Micro225,7335
data E9E9227,7358
type Nano = Fixed E9Nano233,7487
data E12E12235,7509
type Pico = Fixed E12Pico241,7644
withType :: (Proxy a -> f a) -> f awithType90,2732
withResolution :: (HasResolution a) => (Integer -> f a) -> f awithResolution93,2794
withDot :: String -> StringwithDot149,4990
tyFixed :: DataTypetyFixed71,2126
showIntegerZeros :: Bool -> Int -> Integer -> StringshowIntegerZeros143,4744
showFixed :: (HasResolution a) => Bool -> Fixed a -> StringshowFixed154,5106
mod' :: (Real a) => a -> a -> amod'59,1673
divMod' :: (Real a,Integral b) => a -> a -> (b,a)divMod'54,1501
div' :: (Real a,Integral b) => a -> a -> bdiv'50,1348
convertFixed :: forall a . HasResolution a => Lexeme -> ReadPrec (Fixed a)convertFixed176,6087
conMkFixed :: ConstrconMkFixed73,2199
chopZeros :: Integer -> StringchopZeros137,4594

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Foldable.hs,2427
module Data.Foldable (Foldable23,712
class Foldable t whereFoldable119,2960
    fold :: Monoid m => t m -> mfold123,3081
    foldMap :: Monoid m => (a -> m) -> t a -> mfoldMap128,3225
    foldMap' :: Monoid m => (a -> m) -> t a -> mfoldMap'136,3507
    foldr :: (a -> b -> b) -> b -> t a -> bfoldr156,4367
    foldr' :: (a -> b -> b) -> b -> t a -> bfoldr'163,4593
    foldl :: (b -> a -> b) -> b -> t a -> bfoldl192,5884
    foldl' :: (b -> a -> b) -> b -> t a -> bfoldl'211,6710
    foldr1 :: (a -> a -> a) -> t a -> afoldr1219,6999
    foldl1 :: (a -> a -> a) -> t a -> afoldl1231,7457
    toList :: t a -> [a]toList242,7836
    null :: t a -> Boolnull251,8154
    length :: t a -> Intlength259,8462
    elem :: Eq a => a -> t a -> Boolelem265,8603
    maximum :: forall a . Ord a => t a -> amaximum271,8747
    minimum :: forall a . Ord a => t a -> aminimum278,9008
    sum :: Num a => t a -> asum285,9292
    product :: Num a => t a -> aproduct292,9474
traverse_ :: (Foldable t, Applicative f) => (a -> f b) -> t a -> f ()traverse_557,16438
sequence_ :: (Foldable t, Monad m) => t (m a) -> m ()sequence_611,18356
sequenceA_ :: (Foldable t, Applicative f) => t (f a) -> f ()sequenceA_599,17895
or :: Foldable t => t Bool -> Boolor653,19980
notElem :: (Foldable t, Eq a) => a -> t a -> BoolnotElem685,21080
msum :: (Foldable t, MonadPlus m) => t (m a) -> m amsum627,18915
minimumBy :: Foldable t => (a -> a -> Ordering) -> t a -> aminimumBy678,20850
maximumBy :: Foldable t => (a -> a -> Ordering) -> t a -> amaximumBy668,20517
mapM_ :: (Foldable t, Monad m) => (a -> m b) -> t a -> m ()mapM_582,17223
for_ :: (Foldable t, Applicative f) => t a -> (a -> f b) -> f ()for_571,16824
forM_ :: (Foldable t, Monad m) => t a -> (a -> m b) -> m ()forM_592,17621
foldrM :: (Foldable t, Monad m) => (a -> b -> m b) -> b -> t a -> m bfoldrM540,15696
foldlM :: (Foldable t, Monad m) => (b -> a -> m b) -> b -> t a -> m bfoldlM548,16018
find :: Foldable t => (a -> Bool) -> t a -> Maybe afind691,21337
concatMap :: Foldable t => (a -> [b]) -> t a -> [b]concatMap638,19286
concat :: Foldable t => t [a] -> [a]concat632,19068
asum :: (Foldable t, Alternative f) => t (f a) -> f aasum621,18677
any :: Foldable t => (a -> Bool) -> t a -> Boolany657,20121
and :: Foldable t => t Bool -> Booland647,19712
all :: Foldable t => (a -> Bool) -> t a -> Boolall661,20284

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Function.hs,165
module Data.FunctionFunction19,589
on :: (b -> b -> c) -> (a -> b) -> a -> a -> con68,2069
fix :: (a -> a) -> afix50,1461
(&) :: a -> (a -> b) -> b&119,3160

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Functor.hs,247
module Data.FunctorFunctor40,1481
void :: Functor f => f a -> f ()void223,5248
(<&>) :: Functor f => f a -> (a -> b) -> f b<&>121,3107
(<$>) :: Functor f => (a -> b) -> f a -> f b<$>96,2729
($>) :: Functor f => f a -> b -> f b$>169,4165

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Functor/Classes.hs,3999
module Data.Functor.Classes (Classes37,1354
class Eq1 f whereEq184,2656
    liftEq :: (a -> b -> Bool) -> f a -> f b -> BoolliftEq93,2999
class (Eq1 f) => Ord1 f whereOrd1104,3288
    liftCompare :: (a -> b -> Ordering) -> f a -> f b -> OrderingliftCompare113,3648
class Read1 f whereRead1137,4465
    liftReadsPrec :: (Int -> ReadS a) -> ReadS [a] -> Int -> ReadS (f a)liftReadsPrec144,4713
    liftReadList :: (Int -> ReadS a) -> ReadS [a] -> ReadS [f a]liftReadList154,5168
    liftReadPrec :: ReadPrec a -> ReadPrec [a] -> ReadPrec (f a)liftReadPrec162,5532
    liftReadListPrec :: ReadPrec a -> ReadPrec [a] -> ReadPrec [f a]liftReadListPrec174,6063
class Show1 f whereShow1212,7454
    liftShowsPrec :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->liftShowsPrec217,7652
    liftShowList :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->liftShowList226,8015
class Eq2 f whereEq2240,8459
    liftEq2 :: (a -> b -> Bool) -> (c -> d -> Bool) -> f a c -> f b d -> BoolliftEq2249,8800
class (Eq2 f) => Ord2 f whereOrd2260,9131
    liftCompare2 :: (a -> b -> Ordering) -> (c -> d -> Ordering) ->liftCompare2269,9491
class Read2 f whereRead2293,10370
    liftReadsPrec2 :: (Int -> ReadS a) -> ReadS [a] ->liftReadsPrec2300,10621
    liftReadList2 :: (Int -> ReadS a) -> ReadS [a] ->liftReadList2312,11205
    liftReadPrec2 :: ReadPrec a -> ReadPrec [a] ->liftReadPrec2322,11704
    liftReadListPrec2 :: ReadPrec a -> ReadPrec [a] ->liftReadListPrec2336,12360
class Show2 f whereShow2376,14056
    liftShowsPrec2 :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->liftShowsPrec2381,14255
    liftShowList2 :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->liftShowList2390,14663
showsUnaryWith :: (Int -> a -> ShowS) -> String -> Int -> a -> ShowSshowsUnaryWith734,25029
showsUnary1 :: (Show1 f, Show a) => String -> Int -> f a -> ShowSshowsUnary1794,27532
showsUnary :: (Show a) => String -> Int -> a -> ShowSshowsUnary785,27129
showsPrec2 :: (Show2 f, Show a, Show b) => Int -> f a b -> ShowSshowsPrec2398,14979
showsPrec1 :: (Show1 f, Show a) => Int -> f a -> ShowSshowsPrec1234,8276
showsBinaryWith :: (Int -> a -> ShowS) -> (Int -> b -> ShowS) ->showsBinaryWith743,25394
showsBinary1 :: (Show1 f, Show1 g, Show a) =>showsBinary1805,27973
readsUnaryWith :: (Int -> ReadS a) -> String -> (a -> t) -> String -> ReadS treadsUnaryWith692,23598
readsUnary1 :: (Read1 f, Read a) => String -> (f a -> t) -> String -> ReadS treadsUnary1764,26255
readsUnary :: (Read a) => String -> (a -> t) -> String -> ReadS treadsUnary755,25879
readsPrec2 :: (Read2 f, Read a, Read b) => Int -> ReadS (f a b)readsPrec2345,12756
readsPrec1 :: (Read1 f, Read a) => Int -> ReadS (f a)readsPrec1182,6359
readsData :: (String -> ReadS a) -> Int -> ReadS areadsData674,22889
readsBinaryWith :: (Int -> ReadS a) -> (Int -> ReadS b) ->readsBinaryWith711,24240
readsBinary1 :: (Read1 f, Read1 g, Read a) =>readsBinary1774,26656
readUnaryWith :: ReadPrec a -> String -> (a -> t) -> ReadPrec treadUnaryWith700,23902
readPrec2 :: (Read2 f, Read a, Read b) => ReadPrec (f a b)readPrec2351,12982
readPrec1 :: (Read1 f, Read a) => ReadPrec (f a)readPrec1189,6578
readData :: ReadPrec a -> ReadPrec areadData685,23374
readBinaryWith :: ReadPrec a -> ReadPrec b ->readBinaryWith721,24637
liftReadListPrecDefault :: Read1 f => ReadPrec a -> ReadPrec [a]liftReadListPrecDefault205,7206
liftReadListPrec2Default :: Read2 f => ReadPrec a -> ReadPrec [a] ->liftReadListPrec2Default369,13772
liftReadListDefault :: Read1 f => (Int -> ReadS a) -> ReadS [a] -> ReadS [f a]liftReadListDefault197,6884
liftReadList2Default :: Read2 f => (Int -> ReadS a) -> ReadS [a] ->liftReadList2Default359,13324
eq2 :: (Eq2 f, Eq a, Eq b) => f a b -> f a b -> Booleq2254,8971
eq1 :: (Eq1 f, Eq a) => f a -> f a -> Booleq198,3145
compare2 :: (Ord2 f, Ord a, Ord b) => f a b -> f a b -> Orderingcompare2275,9688
compare1 :: (Ord1 f, Ord a) => f a -> f a -> Orderingcompare1118,3808

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Functor/Compose.hs,196
module Data.Functor.Compose (Compose23,660
newtype Compose f g a = Compose { getCompose :: f (g a) }Compose41,1175
newtype Compose f g a = Compose { getCompose :: f (g a) }getCompose41,1175

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Functor/Const.hs,176
module Data.Functor.Const (Const(..)) whereConst22,598
newtype Const a b = Const { getConst :: a }Const39,1112
newtype Const a b = Const { getConst :: a }getConst39,1112

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Functor/Contravariant.hs,1339
module Data.Functor.Contravariant (Contravariant24,822
class Contravariant f whereContravariant96,2889
  contramap :: (a -> b) -> f b -> f acontramap97,2917
  (>$) :: b -> f b -> f a>$102,3139
newtype Predicate a = Predicate { getPredicate :: a -> Bool }Predicate173,5432
newtype Predicate a = Predicate { getPredicate :: a -> Bool }getPredicate173,5432
newtype Comparison a = Comparison { getComparison :: a -> a -> Ordering }Comparison190,6080
newtype Comparison a = Comparison { getComparison :: a -> a -> Ordering }getComparison190,6080
newtype Equivalence a = Equivalence { getEquivalence :: a -> a -> Bool }Equivalence216,7071
newtype Equivalence a = Equivalence { getEquivalence :: a -> a -> Bool }getEquivalence216,7071
newtype Op a b = Op { getOp :: b -> a }Op240,7938
newtype Op a b = Op { getOp :: b -> a }getOp240,7938
phantom :: (Functor f, Contravariant f) => f a -> f bphantom116,3559
defaultEquivalence :: Eq a => Equivalence adefaultEquivalence233,7699
defaultComparison :: Ord a => Comparison adefaultComparison201,6513
comparisonEquivalence :: Comparison a -> Equivalence acomparisonEquivalence236,7782
(>$<) :: Contravariant f => (a -> b) -> f b -> f a>$<126,3820
(>$$<) :: Contravariant f => f b -> (a -> b) -> f a>$$<130,3963
($<) :: Contravariant f => f b -> b -> f a$<122,3714

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Functor/Identity.hs,187
module Data.Functor.Identity (Identity34,1192
newtype Identity a = Identity { runIdentity :: a }Identity59,1947
newtype Identity a = Identity { runIdentity :: a }runIdentity59,1947

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Functor/Product.hs,148
module Data.Functor.Product (Product20,567
data Product f g a = Pair (f a) (g a)Product34,967
data Product f g a = Pair (f a) (g a)Pair34,967

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Functor/Sum.hs,187
module Data.Functor.Sum (Sum20,559
data Sum f g a = InL (f a) | InR (g a)Sum31,832
data Sum f g a = InL (f a) | InR (g a)InL31,832
data Sum f g a = InL (f a) | InR (g a)InR31,832

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Functor/Utils.hs,620
module Data.Functor.Utils whereUtils10,414
newtype Max a = Max {getMax :: Maybe a}Max22,981
newtype Max a = Max {getMax :: Maybe a}getMax22,981
newtype Min a = Min {getMin :: Maybe a}Min23,1021
newtype Min a = Min {getMin :: Maybe a}getMin23,1021
newtype StateL s a = StateL { runStateL :: s -> (s, a) }StateL52,1736
newtype StateL s a = StateL { runStateL :: s -> (s, a) }runStateL52,1736
newtype StateR s a = StateR { runStateR :: s -> (s, a) }StateR71,2307
newtype StateR s a = StateR { runStateR :: s -> (s, a) }runStateR71,2307
(#.) :: Coercible b c => (b -> c) -> (a -> b) -> (a -> c)#.90,2869

/home/effectfully/.fastdogs/base-4.14.3.0/Data/IORef.hs,383
module Data.IORefIORef19,578
modifyIORef' :: IORef a -> (a -> a) -> IO ()modifyIORef'68,2054
modifyIORef :: IORef a -> (a -> a) -> IO ()modifyIORef62,1895
mkWeakIORef :: IORef a -> IO () -> IO (Weak (IORef a))mkWeakIORef45,1152
atomicWriteIORef :: IORef a -> a -> IO ()atomicWriteIORef102,3284
atomicModifyIORef :: IORef a -> (a -> (a,b)) -> IO batomicModifyIORef93,3012

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Int.hs,27
module Data.IntInt18,505

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Ix.hs,25
module Data.IxIx19,628

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Kind.hs,56
module Data.Kind ( Type, Constraint ) whereKind17,455

/home/effectfully/.fastdogs/base-4.14.3.0/Data/List.hs,102
module Data.ListList18,499
isSubsequenceOf :: (Eq a) => [a] -> [a] -> BoolisSubsequenceOf239,4390

/home/effectfully/.fastdogs/base-4.14.3.0/Data/List/NonEmpty.hs,3634
module Data.List.NonEmpty (NonEmpty25,896
zipWith :: (a -> b -> c) -> NonEmpty a -> NonEmpty b -> NonEmpty czipWith408,15960
zip :: NonEmpty a -> NonEmpty b -> NonEmpty (a,b)zip402,15694
xor :: NonEmpty Bool -> Boolxor119,5543
unzip :: Functor f => f (a,b) -> (f a, f b)unzip412,16156
unfoldr :: (a -> (b, Maybe a)) -> a -> NonEmpty bunfoldr148,6635
unfold :: (a -> (b, Maybe a)) -> a -> NonEmpty bunfold128,5919
uncons :: NonEmpty a -> (a, Maybe (NonEmpty a))uncons143,6457
transpose :: NonEmpty (NonEmpty a) -> NonEmpty (NonEmpty a)transpose432,17024
toList :: NonEmpty a -> [a]toList191,7778
takeWhile :: (a -> Bool) -> NonEmpty a -> [a]takeWhile302,11691
take :: Int -> NonEmpty a -> [a]take284,11037
tails   :: Foldable f => f a -> NonEmpty [a]tails212,8482
tail :: NonEmpty a -> [a]tail160,6953
splitAt :: Int -> NonEmpty a -> ([a],[a])splitAt297,11504
span :: (a -> Bool) -> NonEmpty a -> ([a], [a])span315,12176
sortWith :: Ord o => (a -> o) -> NonEmpty a -> NonEmpty asortWith444,17423
sortBy :: (a -> a -> Ordering) -> NonEmpty a -> NonEmpty asortBy438,17251
sort :: Ord a => NonEmpty a -> NonEmpty asort180,7437
some1 :: Alternative f => f a -> f (NonEmpty a)some1222,8947
scanr1 :: (a -> a -> a) -> NonEmpty a -> NonEmpty ascanr1250,9953
scanr   :: Foldable f => (a -> b -> b) -> b -> f a -> NonEmpty bscanr240,9500
scanl1 :: (a -> a -> a) -> NonEmpty a -> NonEmpty ascanl1246,9774
scanl   :: Foldable f => (b -> a -> b) -> b -> f a -> NonEmpty bscanl233,9269
reverse :: NonEmpty a -> NonEmpty areverse275,10771
repeat :: a -> NonEmpty arepeat280,10921
partition :: (a -> Bool) -> NonEmpty a -> ([a], [a])partition332,12875
nubBy :: (a -> a -> Bool) -> NonEmpty a -> NonEmpty anubBy426,16720
nub :: Eq a => NonEmpty a -> NonEmpty anub420,16514
nonEmpty :: [a] -> Maybe (NonEmpty a)nonEmpty137,6252
map :: (a -> b) -> NonEmpty a -> NonEmpty bmap202,8128
lift :: Foldable f => ([a] -> [b]) -> f a -> NonEmpty blift198,7985
length :: NonEmpty a -> Intlength115,5405
last :: NonEmpty a -> alast164,7046
iterate :: (a -> a) -> a -> NonEmpty aiterate265,10467
isPrefixOf :: Eq a => [a] -> NonEmpty a -> BoolisPrefixOf385,15100
intersperse :: a -> NonEmpty a -> NonEmpty aintersperse256,10189
insert  :: (Foldable f, Ord a) => a -> f a -> NonEmpty ainsert218,8785
inits :: Foldable f => f a -> NonEmpty [a]inits207,8303
init :: NonEmpty a -> [a]init168,7171
head :: NonEmpty a -> ahead156,6857
groupWith1 :: (Eq b) => (a -> b) -> NonEmpty a -> NonEmpty (NonEmpty a)groupWith1376,14694
groupWith :: (Foldable f, Eq b) => (a -> b) -> f a -> [NonEmpty a]groupWith356,13835
groupBy1 :: (a -> a -> Bool) -> NonEmpty a -> NonEmpty (NonEmpty a)groupBy1371,14473
groupBy :: Foldable f => (a -> a -> Bool) -> f a -> [NonEmpty a]groupBy347,13510
groupAllWith1 :: (Ord b) => (a -> b) -> NonEmpty a -> NonEmpty (NonEmpty a)groupAllWith1380,14881
groupAllWith :: (Ord b) => (a -> b) -> [a] -> [NonEmpty a]groupAllWith362,14085
group1 :: Eq a => NonEmpty a -> NonEmpty (NonEmpty a)group1367,14336
group :: (Foldable f, Eq a) => f a -> [NonEmpty a]group342,13338
fromList :: [a] -> NonEmpty afromList186,7600
filter :: (a -> Bool) -> NonEmpty a -> [a]filter323,12474
dropWhile :: (a -> Bool) -> NonEmpty a -> [a]dropWhile307,11860
drop :: Int -> NonEmpty a -> [a]drop289,11188
cycle :: NonEmpty a -> NonEmpty acycle271,10656
cons :: a -> NonEmpty a -> NonEmpty acons176,7366
break :: (a -> Bool) -> NonEmpty a -> ([a], [a])break319,12322
(<|) :: a -> NonEmpty a -> NonEmpty a<|172,7274
(!!) :: NonEmpty a -> Int -> a!!393,15424

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Maybe.hs,636
module Data.MaybeMaybe18,522
maybeToList            :: Maybe a -> [a]maybeToList199,4550
maybe :: b -> (a -> b) -> Maybe a -> bmaybe78,1985
mapMaybeFB :: (b -> r -> r) -> (a -> Maybe b) -> a -> r -> rmapMaybeFB301,7353
mapMaybe          :: (a -> Maybe b) -> [a] -> [b]mapMaybe285,6878
listToMaybe :: [a] -> Maybe alistToMaybe232,5227
isNothing         :: Maybe a -> BoolisNothing127,2832
isJust         :: Maybe a -> BoolisJust103,2411
fromMaybe     :: a -> Maybe a -> afromMaybe174,3970
fromJust          :: HasCallStack => Maybe a -> afromJust147,3235
catMaybes              :: [Maybe a] -> [a]catMaybes259,6043

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Monoid.hs,387
module Data.Monoid (Monoid59,2024
newtype First a = First { getFirst :: Maybe a }First142,4531
newtype First a = First { getFirst :: Maybe a }getFirst142,4531
newtype Last a = Last { getLast :: Maybe a }Last181,5961
newtype Last a = Last { getLast :: Maybe a }getLast181,5961
newtype Ap f a = Ap { getAp :: f a }Ap207,6828
newtype Ap f a = Ap { getAp :: f a }getAp207,6828

/home/effectfully/.fastdogs/base-4.14.3.0/Data/OldList.hs,6461
module Data.OldListOldList19,563
data SnocBuilder a = SnocBuilder {-# UNPACK #-} !Word [a] [a]SnocBuilder1472,51935
zipWith7FB :: (h->xs->xs') -> (a->b->c->d->e->f->g->h) ->zipWith7FB837,27624
zipWith7                :: (a->b->c->d->e->f->g->h) ->zipWith7808,26325
zipWith6FB :: (g->xs->xs') -> (a->b->c->d->e->f->g) ->zipWith6FB832,27395
zipWith6                :: (a->b->c->d->e->f->g) ->zipWith6796,25737
zipWith5FB :: (f->xs->xs') -> (a->b->c->d->e->f) ->zipWith5FB827,27176
zipWith5                :: (a->b->c->d->e->f) ->zipWith5784,25173
zipWith4FB :: (e->xs->xs') -> (a->b->c->d->e) ->zipWith4FB822,26967
zipWith4                :: (a->b->c->d->e) -> [a]->[b]->[c]->[d]->[e]zipWith4773,24653
zip7                    :: [a] -> [b] -> [c] -> [d] -> [e] -> [f] ->zip7763,24165
zip6                    :: [a] -> [b] -> [c] -> [d] -> [e] -> [f] ->zip6754,23775
zip5                    :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a,b,c,d,e)]zip5746,23429
zip4                    :: [a] -> [b] -> [c] -> [d] -> [(a,b,c,d)]zip4738,23091
wordsFB :: ([Char] -> b -> b) -> b -> String -> bwordsFB1405,49191
words                   :: String -> [String]words1393,48700
unzip7          :: [(a,b,c,d,e,f,g)] -> ([a],[b],[c],[d],[e],[f],[g])unzip7983,33732
unzip6                  :: [(a,b,c,d,e,f)] -> ([a],[b],[c],[d],[e],[f])unzip6973,33219
unzip5                  :: [(a,b,c,d,e)] -> ([a],[b],[c],[d],[e])unzip5963,32729
unzip4                  :: [(a,b,c,d)] -> ([a],[b],[c],[d])unzip4953,32256
unwordsFB               :: String -> String -> StringunwordsFB1451,50717
unwords                 :: [String] -> Stringunwords1419,49647
unlines                 :: [String] -> Stringunlines1378,48286
unionBy                 :: (a -> a -> Bool) -> [a] -> [a] -> [a]unionBy484,12628
union                   :: (Eq a) => [a] -> [a] -> [a]union480,12463
unfoldr :: (b -> Maybe (a, b)) -> b -> [a]unfoldr1319,46505
transpose               :: [[a]] -> [[a]]transpose549,14974
toListSB :: SnocBuilder a -> [a]toListSB1500,52925
tails                   :: [a] -> [[a]]tails1040,35926
tailUnwords           :: String -> StringtailUnwords1446,50591
subsequences            :: [a] -> [[a]]subsequences1052,36339
stripPrefix :: Eq a => [a] -> [a] -> Maybe [a]stripPrefix259,4835
strictGenericLength     :: (Num i) => [b] -> istrictGenericLength690,20954
sortOn :: Ord b => (a -> b) -> [a] -> [a]sortOn1268,44371
sortBy :: (a -> a -> Ordering) -> [a] -> [a]sortBy1099,38140
sort :: (Ord a) => [a] -> [a]sort1093,37918
snocSB :: SnocBuilder a -> a -> SnocBuilder asnocSB1495,52794
select :: (a -> Bool) -> a -> ([a], [a]) -> ([a], [a])select567,15612
sb :: Word -> [a] -> [a] -> SnocBuilder asb1483,52485
prependToAll            :: a -> [a] -> [a]prependToAll526,14183
permutations            :: [a] -> [[a]]permutations1070,36987
partition               :: (a -> Bool) -> [a] -> ([a],[a])partition563,15482
pairWithNil :: acc -> (acc, [y])pairWithNil592,16811
nubBy                   :: (a -> a -> Bool) -> [a] -> [a]nubBy407,10014
nub                     :: (Eq a) => [a] -> [a]nub398,9711
nonEmptySubsequences         :: [a] -> [[a]]nonEmptySubsequences1060,36638
minimumBy               :: (a -> a -> Ordering) -> [a] -> aminimumBy663,19920
maximumBy               :: (a -> a -> Ordering) -> [a] -> amaximumBy647,19205
mapAccumR :: (acc -> x -> (acc, y))     -- Function of elt of input listmapAccumR609,17499
mapAccumLF :: (acc -> x -> (acc, y)) -> x -> (acc -> (acc, [y])) -> acc -> (acc, [y])mapAccumLF596,16900
mapAccumL :: (acc -> x -> (acc, y)) -- Function of elt of input listmapAccumL575,16024
lines                   :: String -> [String]lines1360,47492
isSuffixOf              :: (Eq a) => [a] -> [a] -> BoolisSuffixOf344,7653
isPrefixOf              :: (Eq a) => [a] -> [a] -> BoolisPrefixOf330,7220
isInfixOf               :: (Eq a) => [a] -> [a] -> BoolisInfixOf388,9238
intersperse             :: a -> [a] -> [a]intersperse517,13830
intersectBy             :: (a -> a -> Bool) -> [a] -> [a] -> [a]intersectBy506,13432
intersect               :: (Eq a) => [a] -> [a] -> [a]intersect502,13254
intercalate :: [a] -> [[a]] -> [a]intercalate536,14564
insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]insertBy632,18670
insert :: Ord a => a -> [a] -> [a]insert628,18531
inits                   :: [a] -> [[a]]inits1024,35341
groupBy                 :: (a -> a -> Bool) -> [a] -> [[a]]groupBy1008,34841
group                   :: Eq a => [a] -> [[a]]group1004,34682
genericTake             :: (Integral i) => i -> [a] -> [a]genericTake698,21327
genericSplitAt          :: (Integral i) => i -> [a] -> ([a], [a])genericSplitAt713,21957
genericReplicate        :: (Integral i) => i -> a -> [a]genericReplicate730,22754
genericLength           :: (Num i) => [a] -> igenericLength680,20619
genericIndex :: (Integral i) => [a] -> i -> agenericIndex721,22305
genericDrop             :: (Integral i) => i -> [a] -> [a]genericDrop705,21640
foldr7_left :: (a->b->c->d->e->f->g->h->i)->foldr7_left894,29635
foldr7 :: (a->b->c->d->e->f->g->h->h) ->foldr7867,28578
foldr6_left :: (a->b->c->d->e->f->g->h)->foldr6_left887,29343
foldr6 :: (a->b->c->d->e->f->g->g) ->foldr6858,28294
foldr5_left :: (a->b->c->d->e->f->g)->foldr5_left881,29087
foldr5 :: (a->b->c->d->e->f->f) ->foldr5850,28046
foldr4_left :: (a->b->c->d->e->f)->foldr4_left875,28863
foldr4 :: (a->b->c->d->e->e) ->foldr4842,27825
findIndices      :: (a -> Bool) -> [a] -> [Int]findIndices308,6456
findIndex       :: (a -> Bool) -> [a] -> Maybe IntfindIndex300,6150
find            :: (a -> Bool) -> [a] -> Maybe afind291,5818
emptySB :: SnocBuilder aemptySB1490,52696
elem_by :: (a -> a -> Bool) -> a -> [a] -> Boolelem_by427,10735
elemIndices     :: Eq a => a -> [a] -> [Int]elemIndices279,5491
elemIndex       :: Eq a => a -> [a] -> Maybe IntelemIndex271,5213
dropWhileEnd :: (a -> Bool) -> [a] -> [a]dropWhileEnd241,4301
dropLengthMaybe :: [a] -> [b] -> Maybe [b]dropLengthMaybe374,8805
dropLength :: [a] -> [b] -> [b]dropLength364,8527
deleteFirstsBy          :: (a -> a -> Bool) -> [a] -> [a] -> [a]deleteFirstsBy992,34162
deleteBy                :: (a -> a -> Bool) -> a -> [a] -> [a]deleteBy449,11417
delete                  :: (Eq a) => a -> [a] -> [a]delete441,11143
(\\)                    :: (Eq a) => [a] -> [a] -> [a]\\465,11974

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Ord.hs,193
module Data.Ord (Ord19,531
newtype Down a = DownDown55,1642
    { getDown :: a -- ^ @since 4.14.0.0getDown56,1664
comparing :: (Ord a) => (b -> a) -> b -> b -> Orderingcomparing44,1102

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Proxy.hs,211
module Data.ProxyProxy19,530
data Proxy t = Proxy deriving ( Bounded -- ^ @since 4.7.0.0Proxy56,1342
data KProxy (t :: Type) = KProxyKProxy62,1643
asProxyTypeOf :: a -> proxy a -> aasProxyTypeOf155,4153

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Ratio.hs,107
module Data.RatioRatio17,477
approxRational :: (RealFrac a) => a -> a -> RationalapproxRational50,1631

/home/effectfully/.fastdogs/base-4.14.3.0/Data/STRef.hs,171
module Data.STRef (STRef17,523
modifySTRef' :: STRef s a -> (a -> a) -> ST s ()modifySTRef'64,1771
modifySTRef :: STRef s a -> (a -> a) -> ST s ()modifySTRef58,1607

/home/effectfully/.fastdogs/base-4.14.3.0/Data/STRef/Lazy.hs,280
module Data.STRef.Lazy (Lazy17,523
writeSTRef  :: ST.STRef s a -> a -> ST s ()writeSTRef31,833
readSTRef   :: ST.STRef s a -> ST s areadSTRef30,795
newSTRef    :: a -> ST s (ST.STRef s a)newSTRef29,755
modifySTRef :: ST.STRef s a -> (a -> a) -> ST s ()modifySTRef32,877

/home/effectfully/.fastdogs/base-4.14.3.0/Data/STRef/Strict.hs,41
module Data.STRef.Strict (Strict17,557

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Semigroup.hs,1231
module Data.Semigroup (Semigroup75,2948
newtype Min a = Min { getMin :: a }Min131,4223
newtype Min a = Min { getMin :: a }getMin131,4223
newtype Max a = Max { getMax :: a }Max202,6046
newtype Max a = Max { getMax :: a }getMax202,6046
data Arg a b = Arg a b derivingArg274,8005
type ArgMin a b = Min (Arg a b)ArgMin282,8207
type ArgMax a b = Max (Arg a b)ArgMax283,8239
newtype First a = First { getFirst :: a }First325,9244
newtype First a = First { getFirst :: a }getFirst325,9244
newtype Last a = Last { getLast :: a }Last383,10818
newtype Last a = Last { getLast :: a }getLast383,10818
newtype WrappedMonoid m = WrapMonoid { unwrapMonoid :: m }WrappedMonoid444,12495
newtype WrappedMonoid m = WrapMonoid { unwrapMonoid :: m }WrapMonoid444,12495
newtype WrappedMonoid m = WrapMonoid { unwrapMonoid :: m }unwrapMonoid444,12495
newtype Option a = Option { getOption :: Maybe a }Option498,14560
newtype Option a = Option { getOption :: Maybe a }getOption498,14560
option :: b -> (a -> b) -> Option a -> boption551,16001
mtimesDefault :: (Integral b, Monoid a) => b -> a -> amtimesDefault482,13884
diff :: Semigroup m => m -> Endo mdiff128,4168
cycle1 :: Semigroup m => m -> mcycle1124,4024

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Semigroup/Internal.hs,1299
module Data.Semigroup.Internal whereInternal21,708
newtype Dual a = Dual { getDual :: a }Dual110,3838
newtype Dual a = Dual { getDual :: a }getDual110,3838
newtype Endo a = Endo { appEndo :: a -> a }Endo147,4882
newtype Endo a = Endo { appEndo :: a -> a }appEndo147,4882
newtype All = All { getAll :: Bool }All167,5411
newtype All = All { getAll :: Bool }getAll167,5411
newtype Any = Any { getAny :: Bool }Any192,6101
newtype Any = Any { getAny :: Bool }getAny192,6101
newtype Sum a = Sum { getSum :: a }Sum214,6690
newtype Sum a = Sum { getSum :: a }getSum214,6690
newtype Product a = Product { getProduct :: a }Product251,7686
newtype Product a = Product { getProduct :: a }getProduct251,7686
newtype Alt f a = Alt {getAlt :: f a}Alt295,8793
newtype Alt f a = Alt {getAlt :: f a}getAlt295,8793
stimesMonoid :: (Integral b, Monoid a) => b -> a -> astimesMonoid54,1873
stimesMaybe :: (Integral b, Semigroup a) => b -> Maybe a -> Maybe astimesMaybe91,3220
stimesList  :: Integral b => b -> [a] -> [a]stimesList98,3482
stimesIdempotentMonoid :: (Integral b, Monoid a) => b -> a -> astimesIdempotentMonoid44,1479
stimesIdempotent :: Integral b => b -> a -> astimesIdempotent35,1091
stimesDefault :: (Integral b, Semigroup a) => b -> a -> astimesDefault71,2536

/home/effectfully/.fastdogs/base-4.14.3.0/Data/String.hs,124
module Data.String (String22,676
class IsString a whereIsString40,1079
    fromString :: String -> afromString41,1102

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Traversable.hs,902
module Data.Traversable (Traversable41,1498
class (Functor t, Foldable t) => Traversable t whereTraversable150,4961
    traverse :: Applicative f => (a -> f b) -> t a -> f (t b)traverse156,5263
    sequenceA :: Applicative f => t (f a) -> f (t a)sequenceA163,5605
    mapM :: Monad m => (a -> m b) -> t a -> m (t b)mapM170,5964
    sequence :: Monad m => t (m a) -> m (t a)sequence177,6283
mapAccumR :: Traversable t => (a -> b -> (a, c)) -> a -> t b -> (a, t c)mapAccumR386,12364
mapAccumL :: Traversable t => (a -> b -> (a, c)) -> a -> t b -> (a, t c)mapAccumL379,11938
forM :: (Traversable t, Monad m) => t a -> (a -> m b) -> m (t b)forM371,11544
for :: (Traversable t, Applicative f) => t a -> (a -> f b) -> f (t b)for365,11315
foldMapDefault :: forall t m a . (Traversable t, Monoid m)foldMapDefault409,13239
fmapDefault :: forall t a b . Traversable tfmapDefault397,12822

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Tuple.hs,328
module Data.TupleTuple18,533
uncurry                 :: (a -> b -> c) -> ((a, b) -> c)uncurry62,1495
swap                    :: (a,b) -> (b,a)swap66,1635
snd                     :: (a,b) -> bsnd38,990
fst                     :: (a,b) -> afst34,877
curry                   :: ((a, b) -> c) -> a -> b -> ccurry47,1178

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Type/Bool.hs,204
module Data.Type.Bool (Bool18,572
type family If cond tru fls whereIf29,886
type family a && b where&&34,997
type family a || b where||43,1181
type family Not a = res | res -> a whereNot54,1429

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Type/Coercion.hs,506
module Data.Type.CoercionCoercion27,864
data Coercion a b whereCoercion51,1465
class TestCoercion f whereTestCoercion105,3090
  testCoercion :: f a -> f b -> Maybe (Coercion a b)testCoercion107,3190
trans :: Coercion a b -> Coercion b c -> Coercion a ctrans73,2152
sym :: Coercion a b -> Coercion b asym69,2044
repr :: (a Eq.:~: b) -> Coercion a brepr77,2317
gcoerceWith :: Coercion a b -> (Coercible a b => r) -> rgcoerceWith65,1916
coerceWith :: Coercion a b -> a -> bcoerceWith59,1751

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Type/Equality.hs,761
module Data.Type.Equality (Equality35,1184
data a :~: b where  -- See Note [The equality types story] in TysPrim:~:65,1935
  Refl :: a :~: aRefl66,2005
data a :~~: b where:~~:127,3658
   HRefl :: a :~~: aHRefl128,3678
class TestEquality f whereTestEquality153,4364
  testEquality :: f a -> f b -> Maybe (a :~: b)testEquality155,4447
type family a == b where==169,4780
trans :: (a :~: b) -> (b :~: c) -> (a :~: c)trans77,2291
sym :: (a :~: b) -> (b :~: a)sym73,2214
outer :: (f a :~: g b) -> (f :~: g)outer97,2927
inner :: (f a :~: g b) -> (a :~: b)inner93,2795
gcastWith :: (a :~: b) -> ((a ~ b) => r) -> rgcastWith85,2532
castWith :: (a :~: b) -> a -> bcastWith81,2410
apply :: (f :~: g) -> (a :~: b) -> (f a :~: g b)apply89,2649

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Typeable.hs,1664
module Data.TypeableTypeable47,2075
type TypeRep = I.SomeTypeRepTypeRep106,3474
typeRepTyCon :: TypeRep -> TyContypeRepTyCon189,6500
typeRepFingerprint :: TypeRep -> FingerprinttypeRepFingerprint196,6675
typeRepArgs :: TypeRep -> [TypeRep]typeRepArgs185,6332
typeRep :: forall proxy a. Typeable a => proxy a -> TypeReptypeRep116,3763
typeOf7 :: forall t (a :: Type) (b :: Type) (c :: Type)typeOf7228,7823
typeOf6 :: forall t (a :: Type) (b :: Type) (c :: Type)typeOf6223,7614
typeOf5 :: forall t (a :: Type) (b :: Type) (c :: Type) (d :: Type) (e :: Type).typeOf5219,7439
typeOf4 :: forall t (a :: Type) (b :: Type) (c :: Type) (d :: Type).typeOf4215,7278
typeOf3 :: forall t (a :: Type) (b :: Type) (c :: Type).typeOf3211,7131
typeOf2 :: forall t (a :: Type) (b :: Type). Typeable t => t a b -> TypeReptypeOf2208,7009
typeOf1 :: forall t (a :: Type). Typeable t => t a -> TypeReptypeOf1205,6901
typeOf :: forall a. Typeable a => a -> TypeReptypeOf109,3564
splitTyConApp :: TypeRep -> (TyCon, [TypeRep])splitTyConApp181,6179
showsTypeRep :: TypeRep -> ShowSshowsTypeRep120,3880
rnfTypeRep :: TypeRep -> ()rnfTypeRep200,6806
mkFunTy :: TypeRep -> TypeRep -> TypeRepmkFunTy169,5598
gcast2 :: forall c t t' a b. (Typeable t, Typeable t')gcast2153,4911
gcast1 :: forall c t t' a. (Typeable t, Typeable t')gcast1148,4732
gcast :: forall a b c. (Typeable a, Typeable b) => c a -> Maybe (c b)gcast144,4582
funResultTy :: TypeRep -> TypeRep -> Maybe TypeRepfunResultTy160,5278
eqT :: forall a b. (Typeable a, Typeable b) => Maybe (a :~: b)eqT135,4278
cast :: forall a b. (Typeable a, Typeable b) => a -> Maybe bcast124,3969

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Typeable/Internal.hs,6342
module Data.Typeable.Internal (Internal35,1158
data TypeRep a whereTypeRep183,5467
    TrType :: TypeRep TypeTrType185,5551
    TrTyCon :: { -- See Note [TypeRep fingerprints]TrTyCon186,5578
                 trTyConFingerprint :: {-# UNPACK #-} !FingerprinttrTyConFingerprint187,5630
               , trTyCon :: !TyContrTyCon193,5959
               , trKindVars :: [SomeTypeRep]trKindVars194,5994
               , trTyConKind :: !(TypeRep k) }  -- See Note [Kind caching]trTyConKind195,6039
    TrApp   :: forall k1 k2 (a :: k1 -> k2) (b :: k1).TrApp200,6301
    TrFun   :: forall (r1 :: RuntimeRep) (r2 :: RuntimeRep)TrFun214,7024
data SomeTypeRep whereSomeTypeRep310,10529
pattern Fun :: forall k (fun :: k). ()Fun331,11038
pattern Fun arg res <- TrFun {trFunArg = arg, trFunRes = res}Fun338,11322
pattern App :: forall k2 (t :: k2). ()App450,14966
pattern App f x <- (splitApp -> IsApp f x)App453,15118
data AppOrCon (a :: k) whereAppOrCon456,15199
    IsApp :: forall k k' (f :: k' -> k) (x :: k'). ()IsApp457,15228
    IsCon :: IsApplication a ~ "" => TyCon -> [SomeTypeRep] -> AppOrCon aIsCon460,15367
type family IsApplication (x :: k) :: Symbol whereIsApplication462,15442
newtype Gift a (r :: TYPE rep) = Gift (Typeable a => r)Gift488,16496
pattern Con :: forall k (a :: k). ()Con491,16594
pattern Con con <- (splitApp -> IsCon con _)Con494,16728
pattern Con' :: forall k (a :: k). ()Con'513,17106
pattern Con' con ks <- (splitApp -> IsCon con ks)Con'516,17260
data SomeKindedTypeRep k whereSomeKindedTypeRep635,21801
data IsTYPE (a :: Type) whereIsTYPE726,25106
class Typeable (a :: k) whereTypeable751,25947
  typeRep# :: TypeRep atypeRep#752,25977
pattern KindRepTypeLit :: TypeLitSort -> String -> KindRepKindRepTypeLit906,31514
withTypeable :: forall k (a :: k) rep (r :: TYPE rep). ()withTypeable481,16240
vecElemTypeRep :: VecElem -> SomeKindedTypeRep VecElemvecElemTypeRep698,23986
vecCountTypeRep :: VecCount -> SomeKindedTypeRep VecCountvecCountTypeRep685,23613
unsafeCoerceRep :: SomeTypeRep -> TypeRep aunsafeCoerceRep629,21598
unkindedTypeRep :: SomeKindedTypeRep k -> SomeTypeRepunkindedTypeRep632,21692
typeSymbolTypeRep :: KnownSymbol a => Proxy# a -> TypeRep atypeSymbolTypeRep979,34516
typeRepTyCon :: TypeRep a -> TyContypeRepTyCon556,18738
typeRepKind :: TypeRep (a :: k) -> TypeRep ktypeRepKind587,19819
typeRepFingerprint :: TypeRep a -> FingerprinttypeRepFingerprint344,11500
typeRep :: Typeable a => TypeRep atypeRep754,26002
typeOf :: Typeable a => a -> TypeRep atypeOf757,26057
typeNatTypeRep :: KnownNat a => Proxy# a -> TypeRep atypeNatTypeRep975,34337
typeLitTypeRep :: forall k (a :: k). (Typeable k) =>typeLitTypeRep995,35087
tyConTYPE :: TyContyConTYPE838,29010
tyConPackage :: TyCon -> StringtyConPackage117,3343
tyConName :: TyCon -> StringtyConName123,3506
tyConModule :: TyCon -> StringtyConModule120,3427
tyConKindRep :: TyCon -> KindReptyConKindRep137,3883
tyConKindArgs :: TyCon -> InttyConKindArgs134,3811
tyConKind :: TyCon -> [SomeTypeRep] -> SomeTypeReptyConKind593,20028
tyConFingerprint :: TyCon -> FingerprinttyConFingerprint130,3694
trTYPE :: TypeRep TYPEtrTYPE380,12816
trNameString :: TrName -> StringtrNameString126,3583
trLiftedRep :: TypeRep 'LiftedReptrLiftedRep383,12857
tcSymbol :: TyContcSymbol988,34904
tcNat :: TyContcNat991,34965
splitApps :: TypeRep a -> (TyCon, [SomeTypeRep])splitApps811,27764
splitApp :: forall k (a :: k). ()splitApp469,15774
someTypeRepTyCon :: SomeTypeRep -> TyConsomeTypeRepTyCon552,18587
someTypeRepFingerprint :: SomeTypeRep -> FingerprintsomeTypeRepFingerprint768,26366
someTypeRep :: forall proxy a. Typeable a => proxy a -> SomeTypeRepsomeTypeRep764,26223
showTypeable :: Int -> TypeRep (a :: k) -> ShowSshowTypeable779,26702
showTyCon :: TyCon -> ShowSshowTyCon874,30311
showArgs :: Show a => ShowS -> [a] -> ShowSshowArgs877,30406
sameTypeRep :: forall k1 k2 (a :: k1) (b :: k2).sameTypeRep576,19472
runtimeRepTypeRep :: RuntimeRep -> SomeKindedTypeRep RuntimeRepruntimeRepTypeRep656,22478
rnfTypeRep :: TypeRep a -> ()rnfTypeRep885,30675
rnfTyCon :: TyCon -> ()rnfTyCon170,4900
rnfTrName :: TrName -> ()rnfTrName146,4135
rnfString :: [Char] -> ()rnfString167,4842
rnfSomeTypeRep :: SomeTypeRep -> ()rnfSomeTypeRep896,31064
rnfRuntimeRep :: RuntimeRep -> ()rnfRuntimeRep159,4624
rnfModule :: Module -> ()rnfModule143,4053
rnfList :: (a -> ()) -> [a] -> ()rnfList163,4727
rnfKindRep :: KindRep -> ()rnfKindRep150,4225
modulePackage :: Module -> StringmodulePackage111,3191
moduleName :: Module -> StringmoduleName114,3270
mkTypeLitTyCon :: String -> TyCon -> TyConmkTypeLitTyCon969,34109
mkTypeLitFromString :: TypeLitSort -> String -> SomeTypeRepmkTypeLitFromString982,34645
mkTyConFingerprint :: String -- ^ package namemkTyConFingerprint958,33731
mkTyCon# :: Addr#       -- ^ package namemkTyCon#920,32094
mkTyCon :: String       -- ^ package namemkTyCon941,32988
mkTrType :: TypeRep TypemkTrType351,11790
mkTrFun :: forall (r1 :: RuntimeRep) (r2 :: RuntimeRep)mkTrFun1000,35284
mkTrCon :: forall k (a :: k). TyCon -> [SomeTypeRep] -> TypeRep amkTrCon359,12005
mkTrAppChecked :: forall k1 k2 (a :: k1 -> k2) (b :: k1).mkTrAppChecked417,13951
mkTrApp :: forall k1 k2 (a :: k1 -> k2) (b :: k1).mkTrApp391,13127
kindedTypeRep :: forall k (a :: k). Typeable a => SomeKindedTypeRep kkindedTypeRep645,22113
kApp :: SomeKindedTypeRep (k -> k')kApp639,21932
isTupleTyCon :: TyCon -> BoolisTupleTyCon850,29393
isTYPE :: TypeRep (a :: Type) -> Maybe (IsTYPE a)isTYPE730,25245
isOperatorTyCon :: TyCon -> BoolisOperatorTyCon868,30134
isListTyCon :: TyCon -> BoolisListTyCon847,29303
instantiateKindRep :: A.Array KindBndr SomeTypeRep -> KindRep -> SomeTypeRepinstantiateKindRep599,20304
getRuntimeRep :: forall (r :: RuntimeRep). TypeRep (TYPE r) -> TypeRep rgetRuntimeRep737,25463
getKindRepTypeLit :: KindRep -> Maybe (TypeLitSort, String)getKindRepTypeLit914,31816
funTyCon :: TyConfunTyCon844,29244
fpTYPELiftedRep :: FingerprintfpTYPELiftedRep373,12519
eqTypeRep :: forall k1 k2 (a :: k1) (b :: k2).eqTypeRep565,19010
buildList :: forall k. Typeable kbuildList648,22231
bareArrow :: forall (r1 :: RuntimeRep) (r2 :: RuntimeRep)bareArrow715,24636

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Unique.hs,234
module Data.Unique (Unique18,534
newtype Unique = Unique Integer deriving (Eq,Ord)Unique42,966
uniqSource :: IORef IntegeruniqSource44,1017
newUnique :: IO UniquenewUnique52,1360
hashUnique :: Unique -> InthashUnique79,2549

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Version.hs,358
module Data.Version (Version30,1225
data Version =Version77,3096
  Version { versionBranch :: [Int],versionBranch78,3111
           versionTags :: [String]  -- really a bagversionTags92,3954
showVersion :: Version -> StringshowVersion121,5133
parseVersion :: ReadP VersionparseVersion128,5349
makeVersion :: [Int] -> VersionmakeVersion136,5646

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Void.hs,149
module Data.VoidVoid22,687
data Void derivingVoid37,937
vacuous :: Functor f => f Void -> f avacuous93,2228
absurd :: Void -> aabsurd76,1848

/home/effectfully/.fastdogs/base-4.14.3.0/Data/Word.hs,29
module Data.WordWord18,501

/home/effectfully/.fastdogs/base-4.14.3.0/Debug/Trace.hs,779
module Debug.Trace (Trace23,709
   debugBelch :: CString -> CString -> IO ()debugBelch95,2812
traceStack :: String -> a -> atraceStack223,6051
traceShowM :: (Show a, Applicative f) => a -> f ()traceShowM210,5527
traceShowId :: Show a => a -> atraceShowId161,4409
traceShow :: Show a => a -> b -> btraceShow149,4175
traceMarkerIO :: String -> IO ()traceMarkerIO318,9780
traceMarker :: String -> a -> atraceMarker306,9403
traceM :: Applicative f => String -> f ()traceM190,5233
traceId :: String -> StringtraceId134,3804
traceIO :: String -> IO ()traceIO80,2200
traceEventIO :: String -> IO ()traceEventIO268,7701
traceEvent :: String -> a -> atraceEvent256,7329
trace :: String -> a -> atrace120,3580
putTraceMsg :: String -> IO ()putTraceMsg98,2863

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign.hs,30
module ForeignForeign19,567

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/C.hs,26
module Foreign.CC18,513

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/C/Error.hs,11691
module Foreign.C.Error (Error18,550
newtype Errno = Errno CIntErrno112,3270
foreign import ccall unsafe "HsBase.h __hscore_get_errno" get_errno :: IO CIntget_errno268,9756
foreign import ccall unsafe "HsBase.h __hscore_set_errno" set_errno :: CInt -> IO ()set_errno276,9999
foreign import ccall unsafe "string.h" strerror :: Errno -> IO (Ptr CChar)strerror579,22927
throwErrnoPathIf_ :: (a -> Bool) -> String -> FilePath -> IO a -> IO ()throwErrnoPathIf_439,15995
throwErrnoPathIfNull :: String -> FilePath -> IO (Ptr a) -> IO (Ptr a)throwErrnoPathIfNull445,16237
throwErrnoPathIfMinus1_ :: (Eq a, Num a) => String -> FilePath -> IO a -> IO ()throwErrnoPathIfMinus1_457,16681
throwErrnoPathIfMinus1 :: (Eq a, Num a) => String -> FilePath -> IO a -> IO athrowErrnoPathIfMinus1451,16457
throwErrnoPathIf :: (a -> Bool) -> String -> FilePath -> IO a -> IO athrowErrnoPathIf430,15721
throwErrnoPath :: String -> FilePath -> IO athrowErrnoPath421,15475
throwErrnoIf_   :: (a -> Bool) -> String -> IO a -> IO ()throwErrnoIf_310,11153
throwErrnoIfRetry_            :: (a -> Bool) -> String -> IO a -> IO ()throwErrnoIfRetry_357,12867
throwErrnoIfRetryMayBlock_ :: (a -> Bool) -> String -> IO a -> IO b -> IO ()throwErrnoIfRetryMayBlock_362,13074
throwErrnoIfRetryMayBlockthrowErrnoIfRetryMayBlock333,11913
throwErrnoIfRetry            :: (a -> Bool) -> String -> IO a -> IO athrowErrnoIfRetry317,11446
throwErrnoIfNullRetryMayBlock :: String -> IO (Ptr a) -> IO b -> IO (Ptr a)throwErrnoIfNullRetryMayBlock416,15245
throwErrnoIfNullRetry :: String -> IO (Ptr a) -> IO (Ptr a)throwErrnoIfNullRetry411,15048
throwErrnoIfNull :: String -> IO (Ptr a) -> IO (Ptr a)throwErrnoIfNull404,14779
throwErrnoIfMinus1_ :: (Eq a, Num a) => String -> IO a -> IO ()throwErrnoIfMinus1_374,13544
throwErrnoIfMinus1Retry_ :: (Eq a, Num a) => String -> IO a -> IO ()throwErrnoIfMinus1Retry_386,14009
throwErrnoIfMinus1RetryMayBlock_ :: (Eq a, Num a)throwErrnoIfMinus1RetryMayBlock_397,14472
throwErrnoIfMinus1RetryMayBlock :: (Eq a, Num a)throwErrnoIfMinus1RetryMayBlock391,14216
throwErrnoIfMinus1Retry :: (Eq a, Num a) => String -> IO a -> IO athrowErrnoIfMinus1Retry381,13830
throwErrnoIfMinus1 :: (Eq a, Num a) => String -> IO a -> IO athrowErrnoIfMinus1369,13380
throwErrnoIf    :: (a -> Bool)  -- ^ predicate to apply to the result valuethrowErrnoIf297,10659
throwErrno     :: String        -- ^ textual description of the error locationthrowErrno283,10225
resetErrno :: IO ()resetErrno272,9896
isValidErrno               :: Errno -> BoolisValidErrno246,8896
getErrno :: IO ErrnogetErrno261,9393
errnoToIOError  :: String       -- ^ the location where the error occurrederrnoToIOError467,17063
  eTOOMANYREFS, eTXTBSY, eUSERS, eWOULDBLOCK, eXDEV                    :: ErrnoeXDEV135,4458
  eTOOMANYREFS, eTXTBSY, eUSERS, eWOULDBLOCK, eXDEV                    :: ErrnoeWOULDBLOCK135,4458
  eTOOMANYREFS, eTXTBSY, eUSERS, eWOULDBLOCK, eXDEV                    :: ErrnoeUSERS135,4458
  eTOOMANYREFS, eTXTBSY, eUSERS, eWOULDBLOCK, eXDEV                    :: ErrnoeTXTBSY135,4458
  eTOOMANYREFS, eTXTBSY, eUSERS, eWOULDBLOCK, eXDEV                    :: ErrnoeTOOMANYREFS135,4458
  eSOCKTNOSUPPORT, eSPIPE, eSRCH, eSRMNT, eSTALE, eTIME, eTIMEDOUT,eTIMEDOUT134,4390
  eSOCKTNOSUPPORT, eSPIPE, eSRCH, eSRMNT, eSTALE, eTIME, eTIMEDOUT,eTIME134,4390
  eSOCKTNOSUPPORT, eSPIPE, eSRCH, eSRMNT, eSTALE, eTIME, eTIMEDOUT,eSTALE134,4390
  eSOCKTNOSUPPORT, eSPIPE, eSRCH, eSRMNT, eSTALE, eTIME, eTIMEDOUT,eSRMNT134,4390
  eSOCKTNOSUPPORT, eSPIPE, eSRCH, eSRMNT, eSTALE, eTIME, eTIMEDOUT,eSRCH134,4390
  eSOCKTNOSUPPORT, eSPIPE, eSRCH, eSRMNT, eSTALE, eTIME, eTIMEDOUT,eSPIPE134,4390
  eSOCKTNOSUPPORT, eSPIPE, eSRCH, eSRMNT, eSTALE, eTIME, eTIMEDOUT,eSOCKTNOSUPPORT134,4390
  eRANGE, eREMCHG, eREMOTE, eROFS, eRPCMISMATCH, eRREMOTE, eSHUTDOWN,eSHUTDOWN133,4320
  eRANGE, eREMCHG, eREMOTE, eROFS, eRPCMISMATCH, eRREMOTE, eSHUTDOWN,eRREMOTE133,4320
  eRANGE, eREMCHG, eREMOTE, eROFS, eRPCMISMATCH, eRREMOTE, eSHUTDOWN,eRPCMISMATCH133,4320
  eRANGE, eREMCHG, eREMOTE, eROFS, eRPCMISMATCH, eRREMOTE, eSHUTDOWN,eROFS133,4320
  eRANGE, eREMCHG, eREMOTE, eROFS, eRPCMISMATCH, eRREMOTE, eSHUTDOWN,eREMOTE133,4320
  eRANGE, eREMCHG, eREMOTE, eROFS, eRPCMISMATCH, eRREMOTE, eSHUTDOWN,eREMCHG133,4320
  eRANGE, eREMCHG, eREMOTE, eROFS, eRPCMISMATCH, eRREMOTE, eSHUTDOWN,eRANGE133,4320
  ePROGMISMATCH, ePROGUNAVAIL, ePROTO, ePROTONOSUPPORT, ePROTOTYPE,ePROTOTYPE132,4252
  ePROGMISMATCH, ePROGUNAVAIL, ePROTO, ePROTONOSUPPORT, ePROTOTYPE,ePROTONOSUPPORT132,4252
  ePROGMISMATCH, ePROGUNAVAIL, ePROTO, ePROTONOSUPPORT, ePROTOTYPE,ePROTO132,4252
  ePROGMISMATCH, ePROGUNAVAIL, ePROTO, ePROTONOSUPPORT, ePROTOTYPE,ePROGUNAVAIL132,4252
  ePROGMISMATCH, ePROGUNAVAIL, ePROTO, ePROTONOSUPPORT, ePROTOTYPE,ePROGMISMATCH132,4252
  eOPNOTSUPP, ePERM, ePFNOSUPPORT, ePIPE, ePROCLIM, ePROCUNAVAIL,ePROCUNAVAIL131,4186
  eOPNOTSUPP, ePERM, ePFNOSUPPORT, ePIPE, ePROCLIM, ePROCUNAVAIL,ePROCLIM131,4186
  eOPNOTSUPP, ePERM, ePFNOSUPPORT, ePIPE, ePROCLIM, ePROCUNAVAIL,ePIPE131,4186
  eOPNOTSUPP, ePERM, ePFNOSUPPORT, ePIPE, ePROCLIM, ePROCUNAVAIL,ePFNOSUPPORT131,4186
  eOPNOTSUPP, ePERM, ePFNOSUPPORT, ePIPE, ePROCLIM, ePROCUNAVAIL,ePERM131,4186
  eOPNOTSUPP, ePERM, ePFNOSUPPORT, ePIPE, ePROCLIM, ePROCUNAVAIL,eOPNOTSUPP131,4186
eOK, e2BIG, eACCES, eADDRINUSE, eADDRNOTAVAIL, eADV, eAFNOSUPPORT, eAGAIN,eOK122,3531
  eNOTBLK, eNOTCONN, eNOTDIR, eNOTEMPTY, eNOTSOCK, eNOTSUP, eNOTTY, eNXIO,eNXIO130,4111
  eNOTBLK, eNOTCONN, eNOTDIR, eNOTEMPTY, eNOTSOCK, eNOTSUP, eNOTTY, eNXIO,eNOTTY130,4111
  eNOTBLK, eNOTCONN, eNOTDIR, eNOTEMPTY, eNOTSOCK, eNOTSUP, eNOTTY, eNXIO,eNOTSUP130,4111
  eNOTBLK, eNOTCONN, eNOTDIR, eNOTEMPTY, eNOTSOCK, eNOTSUP, eNOTTY, eNXIO,eNOTSOCK130,4111
  eNOTBLK, eNOTCONN, eNOTDIR, eNOTEMPTY, eNOTSOCK, eNOTSUP, eNOTTY, eNXIO,eNOTEMPTY130,4111
  eNOTBLK, eNOTCONN, eNOTDIR, eNOTEMPTY, eNOTSOCK, eNOTSUP, eNOTTY, eNXIO,eNOTDIR130,4111
  eNOTBLK, eNOTCONN, eNOTDIR, eNOTEMPTY, eNOTSOCK, eNOTSUP, eNOTTY, eNXIO,eNOTCONN130,4111
  eNOTBLK, eNOTCONN, eNOTDIR, eNOTEMPTY, eNOTSOCK, eNOTSUP, eNOTTY, eNXIO,eNOTBLK130,4111
  eNOMEM, eNOMSG, eNONET, eNOPROTOOPT, eNOSPC, eNOSR, eNOSTR, eNOSYS,eNOSYS129,4041
  eNOMEM, eNOMSG, eNONET, eNOPROTOOPT, eNOSPC, eNOSR, eNOSTR, eNOSYS,eNOSTR129,4041
  eNOMEM, eNOMSG, eNONET, eNOPROTOOPT, eNOSPC, eNOSR, eNOSTR, eNOSYS,eNOSR129,4041
  eNOMEM, eNOMSG, eNONET, eNOPROTOOPT, eNOSPC, eNOSR, eNOSTR, eNOSYS,eNOSPC129,4041
  eNOMEM, eNOMSG, eNONET, eNOPROTOOPT, eNOSPC, eNOSR, eNOSTR, eNOSYS,eNOPROTOOPT129,4041
  eNOMEM, eNOMSG, eNONET, eNOPROTOOPT, eNOSPC, eNOSR, eNOSTR, eNOSYS,eNONET129,4041
  eNOMEM, eNOMSG, eNONET, eNOPROTOOPT, eNOSPC, eNOSR, eNOSTR, eNOSYS,eNOMSG129,4041
  eNOMEM, eNOMSG, eNONET, eNOPROTOOPT, eNOSPC, eNOSR, eNOSTR, eNOSYS,eNOMEM129,4041
  eNFILE, eNOBUFS, eNODATA, eNODEV, eNOENT, eNOEXEC, eNOLCK, eNOLINK,eNOLINK128,3971
  eNFILE, eNOBUFS, eNODATA, eNODEV, eNOENT, eNOEXEC, eNOLCK, eNOLINK,eNOLCK128,3971
  eNFILE, eNOBUFS, eNODATA, eNODEV, eNOENT, eNOEXEC, eNOLCK, eNOLINK,eNOEXEC128,3971
  eNFILE, eNOBUFS, eNODATA, eNODEV, eNOENT, eNOEXEC, eNOLCK, eNOLINK,eNOENT128,3971
  eNFILE, eNOBUFS, eNODATA, eNODEV, eNOENT, eNOEXEC, eNOLCK, eNOLINK,eNODEV128,3971
  eNFILE, eNOBUFS, eNODATA, eNODEV, eNOENT, eNOEXEC, eNOLCK, eNOLINK,eNODATA128,3971
  eNFILE, eNOBUFS, eNODATA, eNODEV, eNOENT, eNOEXEC, eNOLCK, eNOLINK,eNOBUFS128,3971
  eNFILE, eNOBUFS, eNODATA, eNODEV, eNOENT, eNOEXEC, eNOLCK, eNOLINK,eNFILE128,3971
  eMSGSIZE, eMULTIHOP, eNAMETOOLONG, eNETDOWN, eNETRESET, eNETUNREACH,eNETUNREACH127,3900
  eMSGSIZE, eMULTIHOP, eNAMETOOLONG, eNETDOWN, eNETRESET, eNETUNREACH,eNETRESET127,3900
  eMSGSIZE, eMULTIHOP, eNAMETOOLONG, eNETDOWN, eNETRESET, eNETUNREACH,eNETDOWN127,3900
  eMSGSIZE, eMULTIHOP, eNAMETOOLONG, eNETDOWN, eNETRESET, eNETUNREACH,eNAMETOOLONG127,3900
  eMSGSIZE, eMULTIHOP, eNAMETOOLONG, eNETDOWN, eNETRESET, eNETUNREACH,eMULTIHOP127,3900
  eMSGSIZE, eMULTIHOP, eNAMETOOLONG, eNETDOWN, eNETRESET, eNETUNREACH,eMSGSIZE127,3900
  eINPROGRESS, eINTR, eINVAL, eIO, eISCONN, eISDIR, eLOOP, eMFILE, eMLINK,eMLINK126,3825
  eINPROGRESS, eINTR, eINVAL, eIO, eISCONN, eISDIR, eLOOP, eMFILE, eMLINK,eMFILE126,3825
  eINPROGRESS, eINTR, eINVAL, eIO, eISCONN, eISDIR, eLOOP, eMFILE, eMLINK,eLOOP126,3825
  eINPROGRESS, eINTR, eINVAL, eIO, eISCONN, eISDIR, eLOOP, eMFILE, eMLINK,eISDIR126,3825
  eINPROGRESS, eINTR, eINVAL, eIO, eISCONN, eISDIR, eLOOP, eMFILE, eMLINK,eISCONN126,3825
  eINPROGRESS, eINTR, eINVAL, eIO, eISCONN, eISDIR, eLOOP, eMFILE, eMLINK,eIO126,3825
  eINPROGRESS, eINTR, eINVAL, eIO, eISCONN, eISDIR, eLOOP, eMFILE, eMLINK,eINVAL126,3825
  eINPROGRESS, eINTR, eINVAL, eIO, eISCONN, eISDIR, eLOOP, eMFILE, eMLINK,eINTR126,3825
  eINPROGRESS, eINTR, eINVAL, eIO, eISCONN, eISDIR, eLOOP, eMFILE, eMLINK,eINPROGRESS126,3825
  eEXIST, eFAULT, eFBIG, eFTYPE, eHOSTDOWN, eHOSTUNREACH, eIDRM, eILSEQ,eILSEQ125,3752
  eEXIST, eFAULT, eFBIG, eFTYPE, eHOSTDOWN, eHOSTUNREACH, eIDRM, eILSEQ,eIDRM125,3752
  eEXIST, eFAULT, eFBIG, eFTYPE, eHOSTDOWN, eHOSTUNREACH, eIDRM, eILSEQ,eHOSTUNREACH125,3752
  eEXIST, eFAULT, eFBIG, eFTYPE, eHOSTDOWN, eHOSTUNREACH, eIDRM, eILSEQ,eHOSTDOWN125,3752
  eEXIST, eFAULT, eFBIG, eFTYPE, eHOSTDOWN, eHOSTUNREACH, eIDRM, eILSEQ,eFTYPE125,3752
  eEXIST, eFAULT, eFBIG, eFTYPE, eHOSTDOWN, eHOSTUNREACH, eIDRM, eILSEQ,eFBIG125,3752
  eEXIST, eFAULT, eFBIG, eFTYPE, eHOSTDOWN, eHOSTUNREACH, eIDRM, eILSEQ,eFAULT125,3752
  eEXIST, eFAULT, eFBIG, eFTYPE, eHOSTDOWN, eHOSTUNREACH, eIDRM, eILSEQ,eEXIST125,3752
  eCONNREFUSED, eCONNRESET, eDEADLK, eDESTADDRREQ, eDIRTY, eDOM, eDQUOT,eDQUOT124,3679
  eCONNREFUSED, eCONNRESET, eDEADLK, eDESTADDRREQ, eDIRTY, eDOM, eDQUOT,eDOM124,3679
  eCONNREFUSED, eCONNRESET, eDEADLK, eDESTADDRREQ, eDIRTY, eDOM, eDQUOT,eDIRTY124,3679
  eCONNREFUSED, eCONNRESET, eDEADLK, eDESTADDRREQ, eDIRTY, eDOM, eDQUOT,eDESTADDRREQ124,3679
  eCONNREFUSED, eCONNRESET, eDEADLK, eDESTADDRREQ, eDIRTY, eDOM, eDQUOT,eDEADLK124,3679
  eCONNREFUSED, eCONNRESET, eDEADLK, eDESTADDRREQ, eDIRTY, eDOM, eDQUOT,eCONNRESET124,3679
  eCONNREFUSED, eCONNRESET, eDEADLK, eDESTADDRREQ, eDIRTY, eDOM, eDQUOT,eCONNREFUSED124,3679
  eALREADY, eBADF, eBADMSG, eBADRPC, eBUSY, eCHILD, eCOMM, eCONNABORTED,eCONNABORTED123,3606
  eALREADY, eBADF, eBADMSG, eBADRPC, eBUSY, eCHILD, eCOMM, eCONNABORTED,eCOMM123,3606
  eALREADY, eBADF, eBADMSG, eBADRPC, eBUSY, eCHILD, eCOMM, eCONNABORTED,eCHILD123,3606
  eALREADY, eBADF, eBADMSG, eBADRPC, eBUSY, eCHILD, eCOMM, eCONNABORTED,eBUSY123,3606
  eALREADY, eBADF, eBADMSG, eBADRPC, eBUSY, eCHILD, eCOMM, eCONNABORTED,eBADRPC123,3606
  eALREADY, eBADF, eBADMSG, eBADRPC, eBUSY, eCHILD, eCOMM, eCONNABORTED,eBADMSG123,3606
  eALREADY, eBADF, eBADMSG, eBADRPC, eBUSY, eCHILD, eCOMM, eCONNABORTED,eBADF123,3606
  eALREADY, eBADF, eBADMSG, eBADRPC, eBUSY, eCHILD, eCOMM, eCONNABORTED,eALREADY123,3606
eOK, e2BIG, eACCES, eADDRINUSE, eADDRNOTAVAIL, eADV, eAFNOSUPPORT, eAGAIN,eAGAIN122,3531
eOK, e2BIG, eACCES, eADDRINUSE, eADDRNOTAVAIL, eADV, eAFNOSUPPORT, eAGAIN,eAFNOSUPPORT122,3531
eOK, e2BIG, eACCES, eADDRINUSE, eADDRNOTAVAIL, eADV, eAFNOSUPPORT, eAGAIN,eADV122,3531
eOK, e2BIG, eACCES, eADDRINUSE, eADDRNOTAVAIL, eADV, eAFNOSUPPORT, eAGAIN,eADDRNOTAVAIL122,3531
eOK, e2BIG, eACCES, eADDRINUSE, eADDRNOTAVAIL, eADV, eAFNOSUPPORT, eAGAIN,eADDRINUSE122,3531
eOK, e2BIG, eACCES, eADDRINUSE, eADDRNOTAVAIL, eADV, eAFNOSUPPORT, eAGAIN,eACCES122,3531
eOK, e2BIG, eACCES, eADDRINUSE, eADDRNOTAVAIL, eADV, eAFNOSUPPORT, eAGAIN,e2BIG122,3531

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/C/String.hs,2396
module Foreign.C.String (   -- representation of strings in CString26,1007
type CString    = Ptr CCharCString121,3088
type CStringLen = (Ptr CChar, Int)CStringLen125,3260
type CWString    = Ptr CWcharCWString348,10997
type CWStringLen = (Ptr CWchar, Int)CWStringLen353,11193
withCWStringLen         :: String -> (CWStringLen -> IO a) -> IO awithCWStringLen410,13194
withCWString :: String -> (CWString -> IO a) -> IO awithCWString399,12764
withCStringLen         :: String -> (CStringLen -> IO a) -> IO awithCStringLen183,5406
withCString :: String -> (CString -> IO a) -> IO awithCString173,4968
withCAStringLen         :: String -> (CStringLen -> IO a) -> IO awithCAStringLen314,10072
withCAString :: String -> (CString -> IO a) -> IO awithCAString297,9478
wNUL :: CWcharwNUL417,13405
peekCWStringLen           :: CWStringLen -> IO StringpeekCWStringLen364,11497
peekCWString    :: CWString -> IO StringpeekCWString357,11301
peekCStringLen           :: CStringLen -> IO StringpeekCStringLen140,3731
peekCString    :: CString -> IO StringpeekCString135,3558
peekCAStringLen           :: CStringLen -> IO StringpeekCAStringLen240,7619
peekCAString    :: CString -> IO StringpeekCAString228,7243
newCWStringLen     :: String -> IO CWStringLennewCWStringLen387,12317
newCWString :: String -> IO CWStringnewCWString377,11943
newCStringLen     :: String -> IO CStringLennewCStringLen161,4517
newCString :: String -> IO CStringnewCString151,4147
newCAStringLen     :: String -> IO CStringLennewCAStringLen277,8837
newCAString :: String -> IO CStringnewCAString261,8320
newArrayLen        :: Storable a => [a] -> IO (Ptr a, Int)newArrayLen335,10604
nUL :: CCharnUL331,10503
charsToCWchars :: [Char] -> [CWchar]charsToCWchars421,13467
charIsRepresentable :: Char -> IO BoolcharIsRepresentable188,5722
castCharToCWchar :: Char -> CWcharcastCharToCWchar455,14564
castCharToCUChar :: Char -> CUCharcastCharToCUChar213,6685
castCharToCSChar :: Char -> CSCharcastCharToCSChar223,7098
castCharToCChar :: Char -> CCharcastCharToCChar203,6271
castCWcharToChar :: CWchar -> CharcastCWcharToChar452,14483
castCUCharToChar :: CUChar -> CharcastCUCharToChar208,6459
castCSCharToChar :: CSChar -> CharcastCSCharToChar218,6874
castCCharToChar :: CChar -> CharcastCCharToChar198,6054
cWcharsToChars :: [CWchar] -> [Char]cWcharsToChars420,13430

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/C/Types.hs,147
module Foreign.C.TypesTypes26,861
data CFile = CFileCFile244,11076
data CFpos = CFposCFpos247,11226
data CJmpBuf = CJmpBufCJmpBuf250,11377

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/Concurrent.hs,207
module Foreign.ConcurrentConcurrent18,587
newForeignPtr :: Ptr a -> IO () -> IO (ForeignPtr a)newForeignPtr37,1199
addForeignPtrFinalizer :: ForeignPtr a -> IO () -> IO ()addForeignPtrFinalizer56,2156

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/ForeignPtr.hs,47
module Foreign.ForeignPtr ( ForeignPtr23,741

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/ForeignPtr/Imp.hs,448
module Foreign.ForeignPtr.ImpImp21,679
withForeignPtr :: ForeignPtr a -> (Ptr a -> IO b) -> IO bwithForeignPtr69,2008
newForeignPtrEnv ::newForeignPtrEnv98,3311
newForeignPtr :: FinalizerPtr a -> Ptr a -> IO (ForeignPtr a)newForeignPtr58,1512
mallocForeignPtrArray0      :: Storable a => Int -> IO (ForeignPtr a)mallocForeignPtrArray0119,4373
mallocForeignPtrArray :: Storable a => Int -> IO (ForeignPtr a)mallocForeignPtrArray109,3824

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/ForeignPtr/Safe.hs,129
module Foreign.ForeignPtr.Safe {-# DEPRECATED "Safe is now the default, please use Foreign.ForeignPtr instead" #-} (Safe22,673

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/ForeignPtr/Unsafe.hs,49
module Foreign.ForeignPtr.Unsafe (Unsafe22,672

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/Marshal.hs,38
module Foreign.MarshalMarshal18,490

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/Marshal/Alloc.hs,1275
module Foreign.Marshal.Alloc (Alloc42,1999
foreign import ccall unsafe "stdlib.h malloc"  _malloc  ::          CSize -> IO (Ptr a)_malloc223,8631
foreign import ccall unsafe "stdlib.h calloc"  _calloc  :: CSize -> CSize -> IO (Ptr a)_calloc224,8719
foreign import ccall unsafe "stdlib.h realloc" _realloc :: Ptr a -> CSize -> IO (Ptr b)_realloc225,8807
foreign import ccall unsafe "stdlib.h free"    _free    :: Ptr a -> IO ()_free226,8895
foreign import ccall unsafe "stdlib.h &free" finalizerFree :: FinalizerPtr afinalizerFree231,9186
reallocBytes          :: Ptr a -> Int -> IO (Ptr a)reallocBytes193,7714
realloc :: forall a b . Storable b => Ptr a -> IO (Ptr b)realloc176,6921
mallocBytes      :: Int -> IO (Ptr a)mallocBytes99,3470
malloc :: forall a . Storable a => IO (Ptr a)malloc83,2893
free :: Ptr a -> IO ()free203,8132
failWhenNULL :: String -> IO (Ptr a) -> IO (Ptr a)failWhenNULL213,8311
callocBytes :: Int -> IO (Ptr a)callocBytes104,3655
calloc :: forall a . Storable a => IO (Ptr a)calloc89,3078
allocaBytesAligned :: Int -> Int -> (Ptr a -> IO b) -> IO ballocaBytesAligned153,5865
allocaBytes :: Int -> (Ptr a -> IO b) -> IO ballocaBytes140,5372
alloca :: forall a b . Storable a => (Ptr a -> IO b) -> IO balloca115,4100

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/Marshal/Array.hs,1860
module Foreign.Marshal.Array (Array19,652
withArrayLen0 :: Storable a => a -> [a] -> (Int -> Ptr a -> IO b) -> IO bwithArrayLen0213,6314
withArrayLen :: Storable a => [a] -> (Int -> Ptr a -> IO b) -> IO bwithArrayLen198,5847
withArray0 :: Storable a => a -> [a] -> (Ptr a -> IO b) -> IO bwithArray0208,6114
withArray :: Storable a => [a] -> (Ptr a -> IO b) -> IO bwithArray192,5649
reallocArray0          :: Storable a => Ptr a -> Int -> IO (Ptr a)reallocArray0128,3419
reallocArray :: forall a . Storable a => Ptr a -> Int -> IO (Ptr a)reallocArray123,3193
pokeArray0 :: Storable a => a -> Ptr a -> [a] -> IO ()pokeArray0162,4570
pokeArray :: Storable a => Ptr a -> [a] -> IO ()pokeArray154,4264
peekArray0            :: (Storable a, Eq a) => a -> Ptr a -> IO [a]peekArray0147,4057
peekArray          :: Storable a => Int -> Ptr a -> IO [a]peekArray138,3709
newArray0             :: Storable a => a -> [a] -> IO (Ptr a)newArray0183,5352
newArray      :: Storable a => [a] -> IO (Ptr a)newArray174,5057
moveArray :: forall a . Storable a => Ptr a -> Ptr a -> Int -> IO ()moveArray235,7053
mallocArray0      :: Storable a => Int -> IO (Ptr a)mallocArray091,1965
mallocArray :: forall a . Storable a => Int -> IO (Ptr a)mallocArray85,1746
lengthArray0            :: (Storable a, Eq a) => a -> Ptr a -> IO IntlengthArray0244,7323
copyArray :: forall a . Storable a => Ptr a -> Ptr a -> Int -> IO ()copyArray229,6763
callocArray0 :: Storable a => Int -> IO (Ptr a)callocArray0102,2358
callocArray :: forall a . Storable a => Int -> IO (Ptr a)callocArray96,2147
allocaArray0      :: Storable a => Int -> (Ptr a -> IO b) -> IO ballocaArray0115,2894
allocaArray :: forall a b . Storable a => Int -> (Ptr a -> IO b) -> IO ballocaArray108,2587
advancePtr :: forall a . Storable a => Ptr a -> Int -> Ptr aadvancePtr257,7637

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/Marshal/Error.hs,503
module Foreign.Marshal.Error (Error19,607
void     :: IO a -> IO ()void76,2129
throwIf_                 :: (a -> Bool) -> (a -> String) -> IO a -> IO ()throwIf_56,1531
throwIfNull :: String -> IO (Ptr a) -> IO (Ptr a)throwIfNull71,1984
throwIfNeg_ :: (Ord a, Num a) => (a -> String) -> IO a -> IO ()throwIfNeg_66,1853
throwIfNeg :: (Ord a, Num a) => (a -> String) -> IO a -> IO athrowIfNeg61,1710
throwIf :: (a -> Bool)  -- ^ error condition on the result of the 'IO' actionthrowIf44,1086

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/Marshal/Pool.hs,1197
module Foreign.Marshal.Pool (Pool23,922
newtype Pool = Pool (IORef [Ptr ()])Pool71,2248
withPool :: (Pool -> IO b) -> IO bwithPool89,2777
pooledReallocBytes :: Pool -> Ptr a -> Int -> IO (Ptr a)pooledReallocBytes125,4067
pooledReallocArray0 :: Storable a => Pool -> Ptr a -> Int -> IO (Ptr a)pooledReallocArray0156,5269
pooledReallocArray :: forall a . Storable a => Pool -> Ptr a -> Int -> IO (Ptr a)pooledReallocArray150,5014
pooledRealloc :: forall a . Storable a => Pool -> Ptr a -> IO (Ptr a)pooledRealloc120,3841
pooledNewArray0 :: Storable a => Pool -> a -> [a] -> IO (Ptr a)pooledNewArray0183,6170
pooledNewArray :: Storable a => Pool -> [a] -> IO (Ptr a)pooledNewArray174,5844
pooledNew :: Storable a => Pool -> a -> IO (Ptr a)pooledNew165,5599
pooledMallocBytes :: Pool -> Int -> IO (Ptr a)pooledMallocBytes110,3546
pooledMallocArray0 :: Storable a => Pool -> Int -> IO (Ptr a)pooledMallocArray0144,4830
pooledMallocArray :: forall a . Storable a => Pool -> Int -> IO (Ptr a)pooledMallocArray137,4508
pooledMalloc :: forall a . Storable a => Pool -> IO (Ptr a)pooledMalloc105,3351
newPool :: IO PoolnewPool75,2322
freePool :: Pool -> IO ()freePool81,2471

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/Marshal/Safe.hs,121
module Foreign.Marshal.Safe {-# DEPRECATED "Safe is now the default, please use Foreign.Marshal instead" #-}Safe20,516

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/Marshal/Unsafe.hs,101
module Foreign.Marshal.Unsafe (Unsafe18,512
unsafeLocalState :: IO a -> aunsafeLocalState43,1412

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/Marshal/Utils.hs,1135
module Foreign.Marshal.Utils (Utils18,518
foreign import ccall unsafe "string.h" memcpy  :: Ptr a -> Ptr a -> CSize -> IO (Ptr a)memcpy185,5487
foreign import ccall unsafe "string.h" memmove :: Ptr a -> Ptr a -> CSize -> IO (Ptr a)memmove186,5575
foreign import ccall unsafe "string.h" memset  :: Ptr a -> CInt  -> CSize -> IO (Ptr a)memset187,5663
withMany :: (a -> (b -> res) -> res)  -- withXXX combinator for one objectwithMany143,3964
with       :: Storable a => a -> (Ptr a -> IO b) -> IO bwith88,2394
toBool :: (Eq a, Num a) => a -> BooltoBool107,2848
new     :: Storable a => a -> IO (Ptr a)new74,1926
moveBytes               :: Ptr a -> Ptr a -> Int -> IO ()moveBytes165,4877
maybeWith :: (      a -> (Ptr b -> IO c) -> IO c) maybeWith125,3339
maybePeek                           :: (Ptr a -> IO b) -> Ptr a -> IO (Maybe b)maybePeek132,3566
maybeNew :: (      a -> IO (Ptr b))maybeNew118,3096
fromBool       :: Num a => Bool -> afromBool101,2700
fillBytes               :: Ptr a -> Word8 -> Int -> IO ()fillBytes175,5231
copyBytes               :: Ptr a -> Ptr a -> Int -> IO ()copyBytes158,4573

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/Ptr.hs,313
module Foreign.Ptr (Ptr25,803
    freeHaskellFunPtr :: FunPtr a -> IO ()freeHaskellFunPtr75,1953
wordPtrToPtr :: WordPtr -> Ptr awordPtrToPtr97,2785
ptrToWordPtr :: Ptr a -> WordPtrptrToWordPtr93,2653
ptrToIntPtr :: Ptr a -> IntPtrptrToIntPtr101,2917
intPtrToPtr :: IntPtr -> Ptr aintPtrToPtr105,3033

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/Safe.hs,105
module Foreign.Safe {-# DEPRECATED "Safe is now the default, please use Foreign instead" #-}Safe21,593

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/StablePtr.hs,42
module Foreign.StablePtrStablePtr20,605

/home/effectfully/.fastdogs/base-4.14.3.0/Foreign/Storable.hs,728
module Foreign.StorableStorable21,730
class Storable a whereStorable75,2630
   sizeOf      :: a -> IntsizeOf80,2793
   alignment   :: a -> Intalignment84,2936
   peekElemOff :: Ptr a -> Int      -> IO apeekElemOff89,3150
   pokeElemOff :: Ptr a -> Int -> a -> IO ()pokeElemOff103,3793
   peekByteOff :: Ptr b -> Int      -> IO apeekByteOff110,4070
   pokeByteOff :: Ptr b -> Int -> a -> IO ()pokeByteOff116,4309
   peek        :: Ptr a      -> IO apeek122,4554
   poke        :: Ptr a -> a -> IO ()poke132,5000
pokeFingerprint :: Ptr Fingerprint -> Fingerprint -> IO ()pokeFingerprint271,9353
peekFingerprint :: Ptr Fingerprint -> IO FingerprintpeekFingerprint258,8884
lemOff = write }STORABLE169,6344

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Arr.hs,3781
module GHC.Arr (Arr20,612
data Array i eArray57,1665
data STArray s i eSTArray74,2309
writeSTArray :: Ix i => STArray s i e -> i -> e -> ST s ()writeSTArray600,21832
unsafeWriteSTArray :: STArray s i e -> Int -> e -> ST s ()unsafeWriteSTArray605,22020
unsafeThawSTArray :: Array i e -> ST s (STArray s i e)unsafeThawSTArray643,23666
unsafeReplace :: Array i e -> [(Int, e)] -> Array i eunsafeReplace416,15280
unsafeReadSTArray :: STArray s i e -> Int -> ST s eunsafeReadSTArray595,21660
unsafeFreezeSTArray :: STArray s i e -> ST s (Array i e)unsafeFreezeSTArray626,22929
unsafeAtA :: Applicative funsafeAtA248,9388
unsafeAt# :: Array i e -> Int -> (# e #)unsafeAt#244,9248
unsafeAt :: Array i e -> Int -> eunsafeAt239,9075
unsafeArray' :: (i,i) -> Int -> [(Int, e)] -> Array i eunsafeArray'150,5820
unsafeArray :: Ix i => (i,i) -> [(Int, e)] -> Array i eunsafeArray146,5682
unsafeAccumArray' :: (e -> a -> e) -> e -> (i,i) -> Int -> [(Int, a)] -> Array i eunsafeAccumArray'373,13590
unsafeAccumArray :: Ix i => (e -> a -> e) -> e -> (i,i) -> [(Int, a)] -> Array i eunsafeAccumArray369,13390
unsafeAccum :: (e -> a -> e) -> Array i e -> [(Int, a)] -> Array i eunsafeAccum435,16079
thawSTArray :: Array i e -> ST s (STArray s i e)thawSTArray631,23142
safeRangeSize :: Ix i => (i, i) -> IntsafeRangeSize201,7594
safeIndex :: Ix i => (i, i) -> Int -> i -> IntsafeIndex214,8096
readSTArray :: Ix i => STArray s i e -> i -> ST s ereadSTArray590,21486
numElementsSTArray :: STArray s i e -> IntnumElementsSTArray586,21374
numElements :: Array i e -> IntnumElements259,9718
newSTArray :: Ix i => (i,i) -> e -> ST s (STArray s i e)newSTArray575,20971
negRange :: Int   -- Uninformative, but Ix does not provide ShownegRange207,7818
listArray :: Ix i => (i,i) -> [e] -> Array i elistArray175,6722
lessSafeIndex :: Ix i => (i, i) -> Int -> i -> IntlessSafeIndex228,8637
ixmap :: (Ix i, Ix j) => (i,i) -> (i -> j) -> Array j e -> Array i eixmap489,17996
indices :: Ix i => Array i e -> [i]indices264,9863
freezeSTArray :: STArray s i e -> ST s (Array i e)freezeSTArray613,22326
foldrElems' :: (a -> b -> b) -> b -> Array i a -> bfoldrElems'295,10726
foldrElems :: (a -> b -> b) -> b -> Array i a -> bfoldrElems275,10183
foldr1Elems :: (a -> a -> a) -> Array i a -> afoldr1Elems326,11696
foldlElems' :: (b -> a -> b) -> b -> Array i a -> bfoldlElems'305,11018
foldlElems :: (b -> a -> b) -> b -> Array i a -> bfoldlElems285,10448
foldl1Elems :: (a -> a -> a) -> Array i a -> afoldl1Elems315,11327
fill :: MutableArray# s e -> (Int, e) -> STRep s a -> STRep s afill157,6081
eqArray :: (Ix i, Eq e) => Array i e -> Array i e -> BooleqArray494,18161
elems :: Array i e -> [e]elems269,10013
done :: i -> i -> Int -> MutableArray# s e -> STRep s (Array i e)done165,6357
cmpIntArray :: Ord e => Array Int e -> Array Int e -> OrderingcmpIntArray505,18582
cmpArray :: (Ix i, Ord e) => Array i e -> Array i e -> OrderingcmpArray501,18433
boundsSTArray :: STArray s i e -> (i,i)boundsSTArray582,21259
bounds :: Array i e -> (i,i)bounds254,9588
badSafeIndex :: Int -> Int -> IntbadSafeIndex234,8870
assocs :: Ix i => Array i e -> [(i, e)]assocs337,12054
array :: Ix iarray127,4705
arrEleBottom :: aarrEleBottom98,3331
amap :: (a -> b) -> Array i a -> Array i bamap441,16327
adjust' :: (e -> a -> e)adjust'388,14235
adjust :: (e -> a -> e) -> MutableArray# s e -> (Int, a) -> STRep s b -> STRep s badjust379,13892
accumArray :: Ix iaccumArray357,12920
accum :: Ix i => (e -> a -> e) -> Array i e -> [(i, a)] -> Array i eaccum430,15883
(//) :: Ix i => Array i e -> [(i, e)] -> Array i e//411,15105
(!#) :: Ix i => Array i e -> i -> (# e #)!#197,7457
(!) :: Ix i => Array i e -> i -> e!193,7338

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Base.hs,5131
module GHC.BaseBase111,3869
class Semigroup a whereSemigroup222,7242
        (<>) :: a -> a -> a<>227,7375
        sconcat :: NonEmpty a -> asconcat237,7710
        stimes :: Integral b => b -> a -> astimes255,8419
class Semigroup a => Monoid a whereMonoid276,9306
        mempty  :: amempty281,9452
        mappend :: a -> a -> amappend290,9897
        mconcat :: [a] -> amconcat302,10348
class  Functor f  whereFunctor501,16797
    fmap        :: (a -> b) -> f a -> f bfmap511,17036
    (<$)        :: a -> f b -> f a<$526,17471
class Functor f => Applicative f whereApplicative593,19186
    pure :: a -> f apure596,19291
    (<*>) :: f (a -> b) -> f a -> f b<*>611,19647
    liftA2 :: (a -> b -> c) -> f a -> f b -> f cliftA2633,20355
    (*>) :: f a -> f b -> f b*>654,20896
    (<*) :: f a -> f b -> f a<*675,21767
class Applicative m => Monad m whereMonad802,25408
    (>>=)       :: forall a b. m a -> (a -> m b) -> m b>>=812,25696
    (>>)        :: forall a b. m a -> m b -> m b>>824,26052
    return      :: a -> m areturn829,26255
class Applicative f => Alternative f whereAlternative1025,32916
    empty :: f aempty1027,32990
    (<|>) :: f a -> f a -> f a<|>1029,33048
    some :: f a -> f [a]some1032,33102
    many :: f a -> f [a]many1039,33256
class (Alternative m, Monad m) => MonadPlus m whereMonadPlus1056,33669
   mzero :: m amzero1067,33940
   mplus :: m a -> m a -> m amplus1075,34078
data NonEmpty a = a :| [a]NonEmpty1089,34320
data NonEmpty a = a :| [a]:|1089,34320
type String = [Char]String1357,43059
data Opaque = forall a. O aOpaque1433,45391
data Opaque = forall a. O aO1433,45391
when      :: (Applicative f) => Bool -> f () -> f ()when865,27563
until                   :: (a -> Bool) -> (a -> a) -> a -> auntil1482,47099
unsafeChr :: Int -> CharunsafeChr1359,43081
unIO :: IO a -> (State# RealWorld -> (# State# RealWorld, a #))unIO1543,48766
thenIO :: IO a -> IO b -> IO bthenIO1533,48403
shiftRL# :: Word# -> Int# -> Word#shiftRL#1608,51301
shiftL# :: Word# -> Int# -> Word#shiftL#1600,50895
sequence :: Monad m => [m a] -> m [a]sequence873,27873
returnIO :: a -> IO areturnIO1527,48228
quotInt, remInt, divInt, modInt :: Int -> Int -> IntremInt1564,49295
quotRemInt :: Int -> Int -> (Int, Int)quotRemInt1570,49537
quotInt, remInt, divInt, modInt :: Int -> Int -> IntquotInt1564,49295
otherwise               :: Boolotherwise1346,42726
ord :: Char -> Intord1363,43216
quotInt, remInt, divInt, modInt :: Int -> Int -> IntmodInt1564,49295
maxInt, minInt :: IntminInt1382,43825
maxInt, minInt :: IntmaxInt1382,43825
mapM :: Monad m => (a -> m b) -> [a] -> m [b]mapM879,28041
mapFB ::  (elt -> lst -> lst) -> (a -> elt) -> a -> lst -> lstmapFB1266,39992
map :: (a -> b) -> [a] -> [b]map1257,39700
liftM5  :: (Monad m) => (a1 -> a2 -> a3 -> a4 -> a5 -> r) -> m a1 -> m a2 -> m a3 -> m a4 -> m a5 -> m rliftM5929,29899
liftM4  :: (Monad m) => (a1 -> a2 -> a3 -> a4 -> r) -> m a1 -> m a2 -> m a3 -> m a4 -> m rliftM4924,29606
liftM3  :: (Monad m) => (a1 -> a2 -> a3 -> r) -> m a1 -> m a2 -> m a3 -> m rliftM3919,29340
liftM2  :: (Monad m) => (a1 -> a2 -> r) -> m a1 -> m a2 -> m rliftM2912,28993
liftM   :: (Monad m) => (a1 -> r) -> m a1 -> m rliftM903,28693
liftA3 :: Applicative f => (a -> b -> c -> d) -> f a -> f b -> f c -> f dliftA3721,22881
liftA :: Applicative f => (a -> b) -> f a -> f bliftA705,22487
join              :: (Monad m) => m (m a) -> m ajoin771,24317
id                      :: a -> aid1403,44334
iShiftRL# :: Int# -> Int# -> Int#iShiftRL#1630,52414
iShiftRA# :: Int# -> Int# -> Int#iShiftRA#1621,51913
iShiftL# :: Int# -> Int# -> Int#iShiftL#1614,51569
getTag :: a -> Int#getTag1551,48988
foldr            :: (a -> b -> b) -> b -> [a] -> bfoldr1163,36192
flip                    :: (a -> b -> c) -> b -> a -> cflip1455,46020
failIO :: String -> IO afailIO1540,48699
eqString :: String -> String -> BooleqString1368,43361
divModInt# :: Int# -> Int# -> (# Int#, Int# #)divModInt#1579,49868
divModInt :: Int -> Int -> (Int, Int)divModInt1575,49721
quotInt, remInt, divInt, modInt :: Int -> Int -> IntdivInt1564,49295
const                   :: a -> b -> aconst1441,45575
build   :: forall a. (forall b. (a -> b -> b) -> b -> b) -> [a]build1184,36923
breakpointCond :: Bool -> a -> abreakpointCond1430,45334
breakpoint :: a -> abreakpoint1427,45295
bindIO :: IO a -> (a -> IO b) -> IO bbindIO1530,48287
augment :: forall a. (forall b. (a->b->b) -> b -> b) -> [a] -> [a]augment1204,37688
assert :: Bool -> a -> aassert1424,45250
asTypeOf                :: a -> a -> aasTypeOf1491,47460
ap                :: (Monad m) => m (a -> b) -> m a -> m bap959,31300
(=<<)           :: Monad m => (a -> m b) -> m a -> m b=<<856,27259
(<**>) :: Applicative f => f a -> f (a -> b) -> f b<**>688,22025
(.)    :: (b -> c) -> (a -> b) -> a -> c.1448,45825
(++) :: [a] -> [a] -> [a]++1329,42205
($!) :: forall r a (b :: TYPE r). (a -> b) -> a -> b$!1478,46932
($) :: forall r a (b :: TYPE r). (a -> b) -> a -> b$1471,46675

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/ByteOrder.hs,311
module GHC.ByteOrder whereByteOrder18,486
data ByteOrderByteOrder24,592
    = BigEndian    -- ^ most-significant-byte occurs in lowest address.BigEndian25,607
    | LittleEndian -- ^ least-significant-byte occurs in lowest address.LittleEndian26,679
targetByteOrder :: ByteOrdertargetByteOrder36,1078

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Char.hs,56
module GHC.CharChar4,76
chr :: Int -> Charchr17,371

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Clock.hsc,148
module GHC.ClockClock4,65
    getMonotonicTimeNSec :: IO Word64getMonotonicTimeNSec24,582
getMonotonicTime :: IO DoublegetMonotonicTime16,294

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Conc.hs,28
module GHC.ConcConc25,855

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Conc/IO.hs,740
module GHC.Conc.IOIO29,927
foreign import ccall unsafe "rtsSupportsBoundThreads" threaded :: Boolthreaded204,6551
threadWaitWriteSTM :: Fd -> IO (Sync.STM (), IO ())threadWaitWriteSTM140,4368
threadWaitWrite :: Fd -> IO ()threadWaitWrite107,3191
threadWaitReadSTM :: Fd -> IO (Sync.STM (), IO ())threadWaitReadSTM121,3664
threadWaitRead :: Fd -> IO ()threadWaitRead91,2619
threadDelay :: Int -> IO ()threadDelay179,5818
registerDelay :: Int -> IO (TVar Bool)registerDelay195,6290
ioManagerCapabilitiesChanged :: IO ()ioManagerCapabilitiesChanged78,2114
ensureIOManagerIsRunning :: IO ()ensureIOManagerIsRunning71,1918
closeFdWith :: (Fd -> IO ()) -- ^ Low-level action that performs the real close.closeFdWith163,5268

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Conc/Signal.hs,641
module GHC.Conc.SignalSignal4,65
type Signal = CIntSignal32,972
type HandlerFun = ForeignPtr Word8 -> IO ()HandlerFun37,1019
  getOrSetGHCConcSignalSignalHandlerStore :: Ptr a -> IO (Ptr a)getOrSetGHCConcSignalSignalHandlerStore50,1573
signal_handlers :: MVar (IOArray Int (Maybe (HandlerFun,Dynamic)))signal_handlers42,1250
sharedCAF :: a -> (Ptr a -> IO (Ptr a)) -> IO asharedCAF89,3078
setHandler :: Signal -> Maybe (HandlerFun, Dynamic)setHandler52,1639
runHandlersPtr :: Ptr Word8 -> Signal -> IO ()runHandlersPtr77,2592
runHandlers :: ForeignPtr Word8 -> Signal -> IO ()runHandlers63,2076
maxSig :: IntmaxSig34,992

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Conc/Sync.hs,4828
module GHC.Conc.SyncSync34,1039
data ThreadId = ThreadId ThreadId#ThreadId126,3097
foreign import ccall unsafe "rts_getThreadId" getThreadId :: ThreadId# -> CIntgetThreadId152,4096
foreign import ccall unsafe "cmp_thread" cmp_thread :: ThreadId# -> ThreadId# -> CIntcmp_thread157,4233
  rts_enableThreadAllocationLimit :: ThreadId# -> IO ()rts_enableThreadAllocationLimit243,7353
  rts_disableThreadAllocationLimit :: ThreadId# -> IO ()rts_disableThreadAllocationLimit246,7473
  c_setNumCapabilities :: CUInt -> IO ()c_setNumCapabilities374,12572
  c_getNumberOfProcessors :: IO CUIntc_getNumberOfProcessors383,12829
foreign import ccall "&enabled_capabilities" enabled_capabilities :: Ptr CIntenabled_capabilities389,13031
data BlockReasonBlockReason529,19175
  = BlockedOnMVarBlockedOnMVar530,19192
  | BlockedOnBlackHoleBlockedOnBlackHole536,19356
  | BlockedOnExceptionBlockedOnException538,19446
  | BlockedOnSTMBlockedOnSTM540,19502
  | BlockedOnForeignCallBlockedOnForeignCall542,19572
  | BlockedOnOtherBlockedOnOther544,19637
data ThreadStatusThreadStatus554,20029
  = ThreadRunningThreadRunning555,20047
  | ThreadFinishedThreadFinished557,20121
  | ThreadBlocked  BlockReasonThreadBlocked559,20176
  | ThreadDiedThreadDied561,20258
data PrimMVarPrimMVar620,22703
newtype STM a = STM (State# RealWorld -> (# State# RealWorld, a #))STM639,23475
data TVar a = TVar (TVar# RealWorld a)TVar792,29367
        c_reportStackOverflow :: ThreadId# -> IO ()c_reportStackOverflow893,32776
        reportHeapOverflow :: IO ()reportHeapOverflow896,32878
   errorBelch :: CString -> CString -> IO ()errorBelch915,33669
yield :: IO ()yield481,17538
writeTVar :: TVar a -> a -> STM ()writeTVar828,30589
withMVar :: MVar a -> (a -> IO b) -> IO bwithMVar839,31048
unsafeIOToSTM :: IO a -> STM aunsafeIOToSTM707,25532
uncaughtExceptionHandler :: IORef (SomeException -> IO ())uncaughtExceptionHandler899,32957
unSTM :: STM a -> (State# RealWorld -> (# State# RealWorld, a #))unSTM641,23544
throwTo :: Exception e => ThreadId -> e -> IO ()throwTo467,16966
throwSTM :: Exception e => e -> STM athrowSTM775,28675
threadStatus :: ThreadId -> IO ThreadStatusthreadStatus568,20455
threadCapability :: ThreadId -> IO (Int, Bool)threadCapability593,21538
thenSTM :: STM a -> STM b -> STM bthenSTM670,24159
sharedCAF :: a -> (Ptr a -> IO (Ptr a)) -> IO asharedCAF869,32048
setUncaughtExceptionHandler :: (SomeException -> IO ()) -> IO ()setUncaughtExceptionHandler917,33715
setNumCapabilities :: Int -> IO ()setNumCapabilities368,12318
setAllocationCounter :: Int64 -> IO ()setAllocationCounter195,5396
runSparks :: IO ()runSparks521,18934
returnSTM :: a -> STM areturnSTM676,24281
retry :: STM aretry740,27167
reportStackOverflow :: IO ()reportStackOverflow880,32401
reportError :: SomeException -> IO ()reportError885,32519
real_handler :: SomeException -> IO ()real_handler398,13443
readTVarIO :: TVar a -> IO areadTVarIO820,30322
readTVar :: TVar a -> STM areadTVar824,30460
pseq :: a -> b -> bpseq513,18748
par :: a -> b -> bpar517,18816
orElse :: STM a -> STM a -> STM aorElse749,27517
numSparks :: IO IntnumSparks386,12936
numCapabilities :: IntnumCapabilities339,11324
newTVarIO :: a -> IO (TVar a)newTVarIO808,29933
newTVar :: a -> STM (TVar a)newTVar799,29580
newStablePtrPrimMVar :: MVar () -> IO (StablePtr PrimMVar)newStablePtrPrimMVar626,22946
myThreadId :: IO ThreadIdmyThreadId472,17185
modifyMVar_ :: MVar a -> (a -> IO a) -> IO ()modifyMVar_849,31295
mkWeakThreadId :: ThreadId -> IO (Weak ThreadId)mkWeakThreadId614,22533
labelThread :: ThreadId -> String -> IO ()labelThread495,18081
killThread :: ThreadId -> IO ()killThread412,13994
id2TSO :: ThreadId -> ThreadId#id2TSO154,4176
getUncaughtExceptionHandler :: IO (SomeException -> IO ())getUncaughtExceptionHandler920,33847
getNumProcessors :: IO IntgetNumProcessors379,12688
getNumCapabilities :: IO IntgetNumCapabilities349,11601
getAllocationCounter :: IO Int64getAllocationCounter203,5644
forkOnWithUnmask :: Int -> ((forall a . IO a -> IO a) -> IO ()) -> IO ThreadIdforkOnWithUnmask328,10834
forkOn :: Int -> IO () -> IO ThreadIdforkOn316,10407
forkIOWithUnmask :: ((forall a . IO a -> IO a) -> IO ()) -> IO ThreadIdforkIOWithUnmask290,9192
forkIO :: IO () -> IO ThreadIdforkIO266,8249
enableAllocationLimit :: IO ()enableAllocationLimit229,6958
disableAllocationLimit :: IO ()disableAllocationLimit237,7166
cmpThread :: ThreadId -> ThreadId -> OrderingcmpThread160,4340
childHandler :: SomeException -> IO ()childHandler391,13110
catchSTM :: Exception e => STM a -> (e -> STM a) -> STM acatchSTM784,29038
bindSTM :: STM a -> (a -> STM b) -> STM bbindSTM664,24026
atomically :: STM a -> IO aatomically732,26762

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Conc/Windows.hs,3275
module GHC.Conc.WindowsWindows21,632
foreign import ccall unsafe "rtsSupportsBoundThreads" threaded :: Boolthreaded128,4146
data DelayReqDelayReq152,4851
  = Delay    {-# UNPACK #-} !USecs {-# UNPACK #-} !(MVar ())Delay153,4865
  | DelaySTM {-# UNPACK #-} !USecs {-# UNPACK #-} !(TVar Bool)DelaySTM154,4926
    getOrSetGHCConcWindowsPendingDelaysStore :: Ptr a -> IO (Ptr a)getOrSetGHCConcWindowsPendingDelaysStore163,5240
    getOrSetGHCConcWindowsIOManagerThreadStore :: Ptr a -> IO (Ptr a)getOrSetGHCConcWindowsIOManagerThreadStore172,5578
type USecs = Word64USecs202,6447
type NSecs = Word64NSecs203,6467
  getMonotonicNSec :: IO NSecsgetMonotonicNSec206,6535
    getOrSetGHCConcWindowsProddingStore :: Ptr a -> IO (Ptr a)getOrSetGHCConcWindowsProddingStore218,6873
data ConsoleEventConsoleEvent273,8663
 = ControlCControlC274,8681
 | BreakBreak275,8693
 | CloseClose276,8702
 | LogoffLogoff278,8751
 | ShutdownShutdown279,8761
  c_getIOManagerEvent :: IO HANDLEc_getIOManagerEvent331,10643
  c_readIOManagerEvent :: IO Word32c_readIOManagerEvent334,10759
  c_sendIOManagerEvent :: Word32 -> IO ()c_sendIOManagerEvent337,10876
   c_WaitForSingleObject :: HANDLE -> DWORD -> IO DWORDc_WaitForSingleObject340,10970
win32ConsoleHandler :: MVar (ConsoleEvent -> IO ())win32ConsoleHandler305,9604
wakeupIOManager :: IO ()wakeupIOManager308,9752
waitForDelayEventSTM :: Int -> IO (TVar Bool)waitForDelayEventSTM139,4464
waitForDelayEvent :: Int -> IO ()waitForDelayEvent130,4218
toWin32ConsoleEvent :: (Eq a, Num a) => a -> Maybe ConsoleEventtoWin32ConsoleEvent295,9233
threadDelay :: Int -> IO ()threadDelay112,3619
start_console_handler :: Word32 -> IO ()start_console_handler287,8971
startIOManagerThread :: IO ()startIOManagerThread179,5772
service_loop :: HANDLE          -- read end of pipeservice_loop236,7424
service_cont :: HANDLE -> [DelayReq] -> IO ()service_cont263,8366
registerDelay :: Int -> IO (TVar Bool)registerDelay123,3969
prodding :: IORef Boolprodding212,6677
prodServiceThread :: IO ()prodServiceThread220,6937
pendingDelays :: IORef [DelayReq]pendingDelays157,5021
io_MANAGER_WAKEUP, io_MANAGER_DIE :: Word32io_MANAGER_WAKEUP269,8556
io_MANAGER_WAKEUP, io_MANAGER_DIE :: Word32io_MANAGER_DIE269,8556
ioManagerThread :: MVar (Maybe ThreadId)ioManagerThread166,5342
ioManager :: IO ()ioManager231,7332
insertDelay :: DelayReq -> [DelayReq] -> [DelayReq]insertDelay192,6151
getMonotonicUSec :: IO USecsgetMonotonicUSec208,6567
getDelay :: USecs -> [DelayReq] -> IO ([DelayReq], DWORD)getDelay314,9998
ensureIOManagerIsRunning :: IO ()ensureIOManagerIsRunning174,5649
delayTime :: DelayReq -> USecsdelayTime198,6360
calculateTarget :: Int -> IO USecscalculateTarget147,4720
asyncWriteBA :: Int -> Int -> Int -> Int -> MutableByteArray# RealWorld -> IO (Int,Int)asyncWriteBA98,3013
asyncWrite :: Int -> Int -> Int -> Ptr a -> IO (Int, Int)asyncWrite78,2073
asyncReadBA :: Int -> Int -> Int -> Int -> MutableByteArray# RealWorld -> IO (Int,Int)asyncReadBA94,2798
asyncRead :: Int -> Int -> Int -> Ptr a -> IO (Int, Int)asyncRead73,1843
asyncDoProc :: FunPtr (Ptr a -> IO Int) -> Ptr a -> IO IntasyncDoProc83,2306
e WINDOWS_CCONV stdcallWINDOWS_CCONV58,1379

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/ConsoleHandler.hs,629
module GHC.ConsoleHandlerConsoleHandler21,607
data HandlerHandler55,1364
 = DefaultDefault56,1377
 | IgnoreIgnore57,1388
 | Catch (ConsoleEvent -> IO ())Catch58,1398
foreign import ccall unsafe "rtsSupportsBoundThreads" threaded :: Boolthreaded140,4402
  rts_installHandler :: CInt -> Ptr (StablePtr (CInt -> IO ())) -> IO CIntrts_installHandler143,4542
  rts_ConsoleHandlerDone :: CInt -> IO ()rts_ConsoleHandlerDone145,4684
        flush_console_fd :: CInt -> IO CIntflush_console_fd160,5214
installHandler :: Handler -> IO HandlerinstallHandler79,2292
flushConsole :: Handle -> IO ()flushConsole148,4728

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Constants.hs,42
module GHC.Constants whereConstants4,65

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Desugar.hs,360
module GHC.Desugar ((>>>), AnnotationWrapper(..), toAnnotationWrapper) whereDesugar22,616
data AnnotationWrapper = forall a. (Data a) => AnnotationWrapper aAnnotationWrapper37,1296
toAnnotationWrapper :: (Data a) => a -> AnnotationWrappertoAnnotationWrapper39,1364
(>>>) :: forall arr. Arrow arr => forall a b c. arr a b -> arr b c -> arr a c>>>29,849

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Enum.hs,4206
module GHC.Enum(Enum25,687
class  Bounded a  whereBounded51,1549
    minBound, maxBound :: aminBound52,1573
    minBound, maxBound :: amaxBound52,1573
class  Enum a   whereEnum83,2762
    succ                :: a -> asucc85,2854
    pred                :: a -> apred87,2965
    toEnum              :: Int -> atoEnum89,3031
    fromEnum            :: a -> IntfromEnum93,3228
    enumFrom            :: a -> [a]enumFrom101,3572
    enumFromThen        :: a -> a -> [a]enumFromThen114,4170
    enumFromTo          :: a -> a -> [a]enumFromTo124,4573
    enumFromThenTo      :: a -> a -> a -> [a]enumFromThenTo140,5261
up_list :: Integer -> Integer -> Integer -> [Integer]up_list907,34893
up_fb :: (Integer -> a -> a) -> a -> Integer -> Integer -> Integer -> aup_fb896,34390
toEnumError :: (Show a) => String -> Int -> (a,a) -> btoEnumError166,6374
succError :: String -> asuccError182,6940
predError :: String -> apredError187,7107
maxIntWord :: WordmaxIntWord671,24497
go_up_char_list :: Int# -> Int# -> Int# -> Stringgo_up_char_list432,15818
go_up_char_fb :: (Char -> a -> a) -> a -> Int# -> Int# -> Int# -> ago_up_char_fb418,15362
go_dn_char_list :: Int# -> Int# -> Int# -> Stringgo_dn_char_list439,16025
go_dn_char_fb :: (Char -> a -> a) -> a -> Int# -> Int# -> Int# -> ago_dn_char_fb425,15590
fromEnumError :: (Show a) => String -> a -> bfromEnumError174,6647
enumNegDeltaToNatural :: Natural -> Natural -> Natural -> [Natural]enumNegDeltaToNatural959,36736
enumDeltaToNatural :: Natural -> Natural -> Natural -> [Natural]enumDeltaToNatural953,36556
enumDeltaToIntegerFB :: (Integer -> a -> a) -> aenumDeltaToIntegerFB866,33200
enumDeltaToInteger1FB :: (Integer -> a -> a) -> aenumDeltaToInteger1FB875,33589
enumDeltaToInteger1 :: Integer -> Integer -> [Integer]enumDeltaToInteger1889,34126
enumDeltaToInteger :: Integer -> Integer -> Integer -> [Integer]enumDeltaToInteger883,33914
enumDeltaNatural :: Natural -> Natural -> [Natural]enumDeltaNatural950,36450
enumDeltaIntegerFB :: (Integer -> b -> b) -> Integer -> Integer -> benumDeltaIntegerFB852,32670
enumDeltaInteger :: Integer -> Integer -> [Integer]enumDeltaInteger857,32852
eftWordFB :: (Word -> r -> r) -> r -> Word# -> Word# -> reftWordFB699,25508
eftWord :: Word# -> Word# -> [Word]eftWord689,25110
eftIntFB :: (Int -> r -> r) -> r -> Int# -> Int# -> reftIntFB518,18441
eftInt :: Int# -> Int# -> [Int]eftInt508,18084
eftCharFB :: (Char -> a -> a) -> a -> Int# -> Int# -> aeftCharFB373,13825
eftChar :: Int# -> Int# -> StringeftChar380,14084
efdtWordUpFB :: (Word -> r -> r) -> r -> Word# -> Word# -> Word# -> refdtWordUpFB759,28069
efdtWordUp :: Word# -> Word# -> Word# -> [Word]efdtWordUp743,27222
efdtWordFB :: (Word -> r -> r) -> r -> Word# -> Word# -> Word# -> refdtWordFB737,26997
efdtWordDnFB :: (Word -> r -> r) -> r -> Word# -> Word# -> Word# -> refdtWordDnFB790,29715
efdtWordDn :: Word# -> Word# -> Word# -> [Word]efdtWordDn774,28877
efdtWord :: Word# -> Word# -> Word# -> [Word]efdtWord730,26743
efdtIntUpFB :: (Int -> r -> r) -> r -> Int# -> Int# -> Int# -> refdtIntUpFB578,20823
efdtIntUp :: Int# -> Int# -> Int# -> [Int]efdtIntUp562,20040
efdtIntFB :: (Int -> r -> r) -> r -> Int# -> Int# -> Int# -> refdtIntFB556,19835
efdtIntDnFB :: (Int -> r -> r) -> r -> Int# -> Int# -> Int# -> refdtIntDnFB609,22342
efdtIntDn :: Int# -> Int# -> Int# -> [Int]efdtIntDn593,21568
efdtInt :: Int# -> Int# -> Int# -> [Int]efdtInt549,19602
efdtCharFB :: (Char -> a -> a) -> a -> Int# -> Int# -> Int# -> aefdtCharFB403,14882
efdtChar :: Int# -> Int# -> Int# -> StringefdtChar411,15153
efdWord :: Word# -> Word# -> [Word]efdWord723,26492
efdInt :: Int# -> Int# -> [Int]efdInt542,19376
efdCharFB :: (Char -> a -> a) -> a -> Int# -> Int# -> aefdCharFB387,14345
efdChar :: Int# -> Int# -> StringefdChar395,14606
dn_list :: Integer -> Integer -> Integer -> [Integer]dn_list912,35121
dn_fb :: (Integer -> a -> a) -> a -> Integer -> Integer -> Integer -> adn_fb901,34641
boundedEnumFromThen :: (Enum a, Bounded a) => a -> a -> [a]boundedEnumFromThen153,5875
boundedEnumFrom :: (Enum a, Bounded a) => a -> [a]boundedEnumFrom150,5743

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Environment.hs,237
module GHC.Environment (getFullArgs) whereEnvironment5,86
    getFullProgArgv :: Ptr CInt -> Ptr (Ptr CString) -> IO ()getFullProgArgv39,1107
getFullArgs :: IO [String]getFullArgs28,763
e WINDOWS_CCONV stdcallWINDOWS_CCONV16,337

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Err.hs,375
module GHC.Err( absentErr, error, errorWithoutStackTrace, undefined ) whereErr25,926
undefined :: forall (r :: RuntimeRep). forall (a :: TYPE r).undefined77,3360
errorWithoutStackTrace :: forall (r :: RuntimeRep). forall (a :: TYPE r).errorWithoutStackTrace50,2093
error :: forall (r :: RuntimeRep). forall (a :: TYPE r).error39,1590
absentErr :: aabsentErr83,3580

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Event.hs,30
module GHC.EventEvent12,374

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Event/Arr.hs,250
module GHC.Event.ArrArr3,62
data Arr a = Arr (MutableArray# RealWorld a)Arr17,335
write :: Arr a -> Int -> a -> IO ()write30,714
size :: Arr a -> Intsize23,521
read :: Arr a -> Int -> IO aread26,585
new :: a -> Int -> IO (Arr a)new19,381

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Event/Array.hs,2007
module GHC.Event.ArrayArray4,84
newtype Array a = Array (IORef (AC a))Array54,1381
data AC a = ACAC57,1450
    memcpy :: Ptr a -> Ptr a -> CSize -> IO (Ptr a)memcpy308,9890
    memmove :: Ptr a -> Ptr a -> CSize -> IO (Ptr a)memmove311,9990
useAsPtr :: Array a -> (Ptr a -> Int -> IO b) -> IO buseAsPtr160,4519
unsafeWrite' :: Storable a => AC a -> Int -> a -> IO ()unsafeWrite'129,3607
unsafeWrite :: Storable a => Array a -> Int -> a -> IO ()unsafeWrite124,3465
unsafeRead :: Storable a => Array a -> Int -> IO aunsafeRead117,3254
unsafeLoad :: Array a -> (Ptr a -> Int -> IO Int) -> IO IntunsafeLoad135,3800
snoc :: Storable a => Array a -> a -> IO ()snoc165,4673
removeAt :: Storable a => Array a -> Int -> IO ()removeAt264,8326
reallocArray :: Storable a => ForeignPtr a -> Int -> Int -> IO (ForeignPtr a)reallocArray73,1912
new :: Storable a => Int -> IO (Array a)new87,2458
loop :: Storable a => Array a -> b -> (b -> a -> IO (b,Bool)) -> IO ()loop193,5531
length :: Array a -> IO Intlength107,3050
forM_ :: Storable a => Array a -> (a -> IO ()) -> IO ()forM_178,5035
firstPowerOf2 :: Int -> IntfirstPowerOf2290,9398
findIndex :: Storable a => (a -> Bool) -> Array a -> IO (Maybe (Int,a))findIndex210,6144
ensureCapacity' :: Storable a => AC a -> Int -> IO (AC a)ensureCapacity'149,4252
ensureCapacity :: Storable a => Array a -> Int -> IO ()ensureCapacity142,4028
empty :: IO (Array a)empty62,1599
duplicate :: Storable a => Array a -> IO (Array a)duplicate94,2610
copy' :: Storable a => AC a -> Int -> AC a -> Int -> Int -> IO (AC a)copy'244,7417
copy :: Storable a => Array a -> Int -> Array a -> Int -> Int -> IO ()copy236,7078
concat :: Storable a => Array a -> Array a -> IO ()concat228,6762
clear :: Array a -> IO ()clear173,4914
capacity :: Array a -> IO Intcapacity112,3150
allocArray :: Storable a => Int -> IO (ForeignPtr a)allocArray67,1698
+ show (_len_)) elseCHECK_BOUNDS48,1276
efine BOUNDS_CHECKING 1BOUNDS_CHECKING42,898

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Event/Control.hs,1600
module GHC.Event.ControlControl8,138
data ControlMessage = CMsgWakeupControlMessage56,1447
data ControlMessage = CMsgWakeupCMsgWakeup56,1447
                    | CMsgDieCMsgDie57,1480
                    | CMsgSignal {-# UNPACK #-} !(ForeignPtr Word8)CMsgSignal58,1510
data Control = W {Control65,1796
data Control = W {W65,1796
      controlReadFd  :: {-# UNPACK #-} !FdcontrolReadFd66,1815
    , controlWriteFd :: {-# UNPACK #-} !FdcontrolWriteFd67,1858
    , controlEventFd :: {-# UNPACK #-} !FdcontrolEventFd69,1927
    , wakeupReadFd   :: {-# UNPACK #-} !FdwakeupReadFd71,1976
    , wakeupWriteFd  :: {-# UNPACK #-} !FdwakeupWriteFd72,2019
    , didRegisterWakeupFd :: !BooldidRegisterWakeupFd74,2069
    , controlIsDead  :: !(IORef Bool)controlIsDead76,2156
    sizeof_siginfo_t :: CSizesizeof_siginfo_t150,4751
   c_eventfd :: CInt -> CInt -> IO CIntc_eventfd227,7866
   c_eventfd_write :: CInt -> CULLong -> IO CIntc_eventfd_write230,7965
   c_setIOManagerWakeupFd :: CInt -> IO ()c_setIOManagerWakeupFd234,8073
wakeupReadFd :: Control -> FdwakeupReadFd80,2227
sendWakeup :: Control -> IO ()sendWakeup185,6200
sendMessage :: Fd -> ControlMessage -> IO IntsendMessage217,7444
sendDie :: Control -> IO ()sendDie213,7320
readControlMessage :: Control -> Fd -> IO ControlMessagereadControlMessage152,4782
newControl :: Bool -> IO ControlnewControl87,2431
io_MANAGER_WAKEUP, io_MANAGER_DIE :: Word8io_MANAGER_WAKEUP145,4608
io_MANAGER_WAKEUP, io_MANAGER_DIE :: Word8io_MANAGER_DIE145,4608
closeControl :: Control -> IO ()closeControl131,4145

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Event/EPoll.hsc,2155
module GHC.Event.EPollEPoll19,605
data EPoll = EPoll {EPoll64,1680
      epollFd     :: {-# UNPACK #-} !EPollFdepollFd65,1701
    , epollEvents :: {-# UNPACK #-} !(A.Array Event)epollEvents66,1746
newtype EPollFd = EPollFd {EPollFd130,3910
      fromEPollFd :: CIntfromEPollFd131,3938
data Event = Event {Event134,3991
      eventTypes :: EventTypeeventTypes135,4012
    , eventFd    :: FdeventFd136,4042
newtype ControlOp = ControlOp CIntControlOp154,4580
 , controlOpAdd    = EPOLL_CTL_ADDcontrolOpAdd157,4644
 , controlOpModify = EPOLL_CTL_MODcontrolOpModify158,4679
 , controlOpDelete = EPOLL_CTL_DELcontrolOpDelete159,4714
newtype EventType = EventType {EventType162,4753
      unEventType :: Word32unEventType163,4785
 , epollIn  = EPOLLINepollIn172,5099
 , epollOut = EPOLLOUTepollOut173,5121
 , epollErr = EPOLLERRepollErr174,5144
 , epollHup = EPOLLHUPepollHup175,5167
 , epollOneShot = EPOLLONESHOTepollOneShot176,5190
    c_epoll_create :: CInt -> IO CIntc_epoll_create236,7363
    c_epoll_ctl :: CInt -> CInt -> CInt -> Ptr Event -> IO CIntc_epoll_ctl239,7454
    c_epoll_wait :: CInt -> Ptr Event -> CInt -> CInt -> IO CIntc_epoll_wait242,7570
    c_epoll_wait_unsafe :: CInt -> Ptr Event -> CInt -> CInt -> IO CIntc_epoll_wait_unsafe245,7689
toEvent :: EventType -> E.EventtoEvent222,6852
poll :: EPoll                     -- ^ statepoll110,3192
new :: IO E.Backendnew31,782
modifyFdOnce :: EPoll -> Fd -> E.Event -> IO BoolmodifyFdOnce93,2504
modifyFd :: EPoll -> Fd -> E.Event -> E.Event -> IO BoolmodifyFd84,2176
fromTimeout :: Timeout -> IntfromTimeout229,7119
fromEvent :: E.Event -> EventTypefromEvent215,6640
epollWaitNonBlock :: EPollFd -> Ptr Event -> Int -> IO IntepollWaitNonBlock209,6393
epollWait :: EPollFd -> Ptr Event -> Int -> Int -> IO IntepollWait203,6135
epollCreate :: IO EPollFdepollCreate187,5599
epollControl_ :: EPollFd -> ControlOp -> Fd -> Ptr Event -> IO CIntepollControl_199,5973
epollControl :: EPollFd -> ControlOp -> Fd -> Ptr Event -> IO ()epollControl195,5803
delete :: EPoll -> IO ()delete77,1996
available :: Boolavailable34,883

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Event/IntTable.hs,1066
module GHC.Event.IntTableIntTable5,136
newtype IntTable a = IntTable (IORef (IT a))IntTable33,987
data IT a = IT {IT35,1033
      tabArr  :: {-# UNPACK #-} !(Arr (Bucket a))tabArr36,1050
    , tabSize :: {-# UNPACK #-} !(ForeignPtr Int)tabSize37,1100
data Bucket a = EmptyBucket40,1157
data Bucket a = EmptyEmpty40,1157
              | Bucket {Bucket41,1179
      bucketKey   :: {-# UNPACK #-} !IntbucketKey42,1204
    , bucketValue :: abucketValue43,1245
    , bucketNext  :: Bucket abucketNext44,1268
updateWith :: (a -> Maybe a) -> Int -> IntTable a -> IO (Maybe a)updateWith125,4191
reset :: Int -> Maybe a -> IntTable a -> IO ()reset114,3792
new_ :: Int -> IO (IT a)new_60,1685
new :: Int -> IO (IntTable a)new57,1593
lookup :: Int -> IntTable a -> IO (Maybe a)lookup47,1305
insertWith :: (a -> a -> a) -> Int -> a -> IntTable a -> IO (Maybe a)insertWith89,2766
indexOf :: Int -> IT a -> IntindexOf118,3950
grow :: IT a -> IORef (IT a) -> Int -> IO ()grow69,1902
delete :: Int -> IntTable a -> IO (Maybe a)delete122,4102

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Event/Internal.hs,1881
module GHC.Event.InternalInternal4,87
newtype Event = Event IntEvent42,862
data Lifetime = OneShot   -- ^ the registration will be active for only oneLifetime97,2223
data Lifetime = OneShot   -- ^ the registration will be active for only oneOneShot97,2223
              | MultiShot -- ^ the registration will trigger multiple timesMultiShot99,2334
newtype EventLifetime = EL IntEventLifetime125,3080
newtype EventLifetime = EL IntEL125,3080
data Timeout = Timeout {-# UNPACK #-} !Word64Timeout154,3914
             | ForeverForever155,3960
data Backend = forall a. Backend {Backend159,4066
      _beState :: !a_beState160,4101
    , _bePoll :: a                          -- backend state_bePoll164,4243
    , _beModifyFd :: a_beModifyFd171,4601
    , _beModifyFdOnce :: a_beModifyFdOnce179,4978
    , _beDelete :: a -> IO ()_beDelete184,5152
throwErrnoIfMinus1NoRetry :: (Eq a, Num a) => String -> IO a -> IO athrowErrnoIfMinus1NoRetry224,6652
poll :: Backend -> Maybe Timeout -> (Fd -> Event -> IO ()) -> IO Intpoll197,5536
modifyFdOnce :: Backend -> Fd -> Event -> IO BoolmodifyFdOnce211,6112
modifyFd :: Backend -> Fd -> Event -> Event -> IO BoolmodifyFd204,5823
evtWrite :: EventevtWrite55,1140
evtRead :: EventevtRead50,1028
evtNothing :: EventevtNothing45,925
evtConcat :: [Event] -> EventevtConcat90,2061
evtCombine :: Event -> Event -> EventevtCombine86,1947
evtClose :: EventevtClose60,1250
eventLifetime :: Event -> Lifetime -> EventLifetimeeventLifetime138,3429
eventIs :: Event -> Event -> BooleventIs64,1312
elSupremum :: Lifetime -> Lifetime -> LifetimeelSupremum105,2570
elLifetime :: EventLifetime -> LifetimeelLifetime145,3632
elEvent :: EventLifetime -> EventelEvent149,3763
delete :: Backend -> IO ()delete215,6264
backend :: (a -> Maybe Timeout -> (Fd -> Event -> IO ()) -> IO Int)backend187,5189

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Event/KQueue.hsc,2491
module GHC.Event.KQueueKQueue9,183
data KQueue = KQueue {KQueue72,1781
      kqueueFd     :: {-# UNPACK #-} !KQueueFdkqueueFd73,1804
    , kqueueEvents :: {-# UNPACK #-} !(A.Array Event)kqueueEvents74,1851
newtype KQueueFd = KQueueFd {KQueueFd125,3410
      fromKQueueFd :: CIntfromKQueueFd126,3440
data Event = KEvent {Event131,3569
data Event = KEvent {KEvent131,3569
      ident  :: {-# UNPACK #-} !CUIntPtrident132,3591
    , filter :: {-# UNPACK #-} !Filterfilter133,3632
    , flags  :: {-# UNPACK #-} !Flagflags134,3671
    , fflags :: {-# UNPACK #-} !FFlagfflags135,3708
    , data_  :: {-# UNPACK #-} !Int64data_137,3774
    , udata  :: {-# UNPACK #-} !(Ptr ())udata141,3865
newtype FFlag = FFlag Word32FFlag171,5034
 , noteEOF = NOTE_EOFnoteEOF178,5231
newtype Flag = Flag Word32Flag182,5324
 , flagAdd     = EV_ADDflagAdd195,5701
 , flagDelete  = EV_DELETEflagDelete196,5725
 , flagOneshot = EV_ONESHOTflagOneshot197,5752
newtype Filter = Filter Int32Filter201,5851
data TimeSpec = TimeSpec {TimeSpec216,6245
      tv_sec  :: {-# UNPACK #-} !CTimetv_sec217,6272
    , tv_nsec :: {-# UNPACK #-} !CLongtv_nsec218,6311
    c_kqueue :: IO CIntc_kqueue294,9051
    c_kevent :: KQueueFd -> Ptr Event -> CInt -> Ptr Event -> CIntc_kevent298,9147
    c_kevent_unsafe :: KQueueFd -> Ptr Event -> CInt -> Ptr Event -> CIntc_kevent_unsafe302,9292
withTimeSpec :: TimeSpec -> (Ptr TimeSpec -> IO a) -> IO awithTimeSpec272,8344
toFilter :: E.Event -> [Filter]toFilter96,2411
toEvents :: Fd -> [Filter] -> Flag -> FFlag -> [Event]toEvents144,3947
toEvent :: Filter -> E.EventtoEvent287,8801
poll :: KQueuepoll105,2770
new :: IO E.Backendnew21,362
modifyFdOnce :: KQueue -> Fd -> E.Event -> IO BoolmodifyFdOnce101,2598
modifyFd :: KQueue -> Fd -> E.Event -> E.Event -> IO BoolmodifyFd89,2169
kqueueWaitNonBlock :: KQueueFd -> Ptr Event -> Int -> IO IntkqueueWaitNonBlock259,7686
kqueueWait :: KQueueFd -> Ptr Event -> Int -> TimeSpec -> IO IntkqueueWait254,7477
kqueueControl :: KQueueFd -> [Event] -> IO BoolkqueueControl239,6911
kqueue :: IO KQueueFdkqueue236,6826
kevent :: Bool -> KQueueFd -> Ptr Event -> Int -> Ptr Event -> Int -> Ptr TimeSpeckevent266,8038
fromTimeout :: Timeout -> TimeSpecfromTimeout277,8510
filterWrite :: FilterfilterWrite213,6178
filterRead :: FilterfilterRead211,6116
delete :: KQueue -> IO ()delete84,2069
available :: Boolavailable24,464
define NOTE_EOF 0NOTE_EOF62,1598

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Event/Manager.hs,2861
module GHC.Event.ManagerManager21,681
data FdData = FdData {FdData103,2704
      fdKey       :: {-# UNPACK #-} !FdKeyfdKey104,2727
    , fdEvents    :: {-# UNPACK #-} !EventLifetimefdEvents105,2770
    , _fdCallback :: !IOCallback_fdCallback106,2821
data FdKey = FdKey {FdKey110,2905
      keyFd     :: {-# UNPACK #-} !FdkeyFd111,2926
    , keyUnique :: {-# UNPACK #-} !UniquekeyUnique112,2964
type IOCallback = FdKey -> Event -> IO ()IOCallback118,3145
data State = CreatedState120,3188
data State = CreatedCreated120,3188
           | RunningRunning121,3209
           | DyingDying122,3230
           | ReleasingReleasing123,3249
           | FinishedFinished124,3272
data EventManager = EventManagerEventManager130,3447
    { emBackend      :: !BackendemBackend131,3480
    , emFds          :: {-# UNPACK #-} !(Array Int (MVar (IntTable [FdData])))emFds132,3513
    , emState        :: {-# UNPACK #-} !(IORef State)emState133,3592
    , emUniqueSource :: {-# UNPACK #-} !UniqueSourceemUniqueSource134,3646
    , emControl      :: {-# UNPACK #-} !ControlemControl135,3699
    , emLock         :: {-# UNPACK #-} !(MVar ())emLock136,3747
wakeManager :: EventManager -> IO ()wakeManager378,12428
unregisterFd_ :: EventManager -> FdKey -> IO BoolunregisterFd_394,12982
unregisterFd :: EventManager -> FdKey -> IO ()unregisterFd415,13952
unless :: Monad m => Bool -> m () -> m ()unless523,18322
step :: EventManager -> IO Statestep291,9165
shutdown :: EventManager -> IO ()shutdown227,6600
release :: EventManager -> IO ()release234,6849
registerFd_ :: EventManager -> IOCallback -> Fd -> Event -> LifetimeregisterFd_317,10122
registerFd :: EventManager -> IOCallback -> Fd -> Event -> Lifetime -> IO FdKeyregisterFd361,11842
registerControlFd :: EventManager -> Fd -> Event -> IO ()registerControlFd221,6360
onFdEvent :: EventManager -> Fd -> Event -> IO ()onFdEvent461,15610
nullToNothing :: [a] -> Maybe [a]nullToNothing519,18221
newWith :: Backend -> IO EventManagernewWith187,5154
newDefaultBackend :: IO BackendnewDefaultBackend171,4709
new :: IO EventManagernew183,5029
loop :: EventManager -> IO ()loop257,7597
haveOneShot :: BoolhaveOneShot151,4122
hashFd :: Fd -> InthashFd143,3875
handleControlEvent :: EventManager -> Fd -> Event -> IO ()handleControlEvent163,4429
finished :: EventManager -> IO Boolfinished239,7023
failOnInvalidFile :: String -> Fd -> IO Bool -> IO ()failOnInvalidFile213,6088
eventsOf :: [FdData] -> EventLifetimeeventsOf387,12697
closeFd_ :: EventManagercloseFd_440,14947
closeFd :: EventManager -> (Fd -> IO ()) -> Fd -> IO ()closeFd421,14137
cleanup :: EventManager -> IO ()cleanup242,7121
callbackTableVar :: EventManager -> Fd -> MVar (IntTable [FdData])callbackTableVar147,3974
callbackArraySize :: IntcallbackArraySize140,3826

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Event/PSQ.hs,2167
module GHC.Event.PSQPSQ11,316
type Prio = Word64Prio70,1473
type Nat = WordNat72,1493
type Key = UniqueKey74,1510
type Mask = IntMask77,1604
type PSQ a = IntPSQ aPSQ79,1621
data Elem a = EElem82,1698
data Elem a = EE82,1698
    { key   :: {-# UNPACK #-} !Keykey83,1714
    , prio  :: {-# UNPACK #-} !Prioprio84,1749
    , value :: avalue85,1785
data IntPSQ vIntPSQ90,1953
    = Bin {-# UNPACK #-} !Key {-# UNPACK #-} !Prio !v {-# UNPACK #-} !Mask !(IntPSQ v) !(IntPSQ v)Bin91,1967
    | Tip {-# UNPACK #-} !Key {-# UNPACK #-} !Prio !vTip92,2066
    | NilNil93,2120
zero :: Key -> Mask -> Boolzero127,2783
xor :: Nat -> Nat -> Natxor102,2257
unsafeInsertNew :: Key -> Prio -> v -> IntPSQ v -> IntPSQ vunsafeInsertNew216,5377
toList :: IntPSQ v -> [Elem v]toList336,9525
size :: IntPSQ v -> Intsize165,3835
singleton :: Key -> Prio -> v -> IntPSQ vsingleton206,5030
null :: IntPSQ v -> Boolnull160,3720
nomatch :: Key -> Key -> Mask -> Boolnomatch132,2895
natFromInt :: Int -> NatnatFromInt119,2633
minView :: IntPSQ v -> Maybe (Elem v, IntPSQ v)minView382,11196
merge :: Mask -> IntPSQ v -> IntPSQ v -> IntPSQ vmerge416,12404
maskW :: Nat -> NatmaskW139,3076
lookup :: Key -> IntPSQ v -> Maybe (Prio, v)lookup173,4120
link :: Key -> Prio -> v -> Key -> IntPSQ v -> IntPSQ v -> IntPSQ vlink244,6310
intFromNat :: Nat -> IntintFromNat123,2711
highestBitMask :: Nat -> NathighestBitMask150,3327
findMin :: IntPSQ v -> Maybe (Elem v)findMin190,4581
empty :: IntPSQ vempty202,4955
deleteView :: Key -> IntPSQ v -> Maybe (Prio, v, IntPSQ v)deleteView353,10127
deleteMin :: IntPSQ v -> IntPSQ vdeleteMin279,7543
delete :: Key -> IntPSQ v -> IntPSQ vdelete259,6911
complement :: Nat -> Natcomplement106,2342
branchMask :: Key -> Key -> MaskbranchMask143,3158
binShrinkR :: Key -> Prio -> v -> Mask -> IntPSQ v -> IntPSQ v -> IntPSQ vbinShrinkR326,9045
binShrinkL :: Key -> Prio -> v -> Mask -> IntPSQ v -> IntPSQ v -> IntPSQ vbinShrinkL319,8734
atMost :: Prio -> IntPSQ v -> ([Elem v], IntPSQ v)atMost392,11631
alteralter300,8137
adjustadjust285,7656
(.&.) :: Nat -> Nat -> Nat.&.98,2166

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Event/Poll.hsc,1220
module GHC.Event.PollPoll7,133
data Poll = Poll {Poll48,1060
      pollChanges :: {-# UNPACK #-} !(MVar (A.Array PollFd))pollChanges49,1079
    , pollFd      :: {-# UNPACK #-} !(A.Array PollFd)pollFd50,1140
data PollFd = PollFd {PollFd149,4871
      pfdFd      :: {-# UNPACK #-} !FdpfdFd150,4894
    , pfdEvents  :: {-# UNPACK #-} !EventpfdEvents151,4933
    , pfdRevents :: {-# UNPACK #-} !EventpfdRevents152,4975
newtype Event = Event CShortEvent155,5058
 , pollIn    = POLLINpollIn165,5399
 , pollOut   = POLLOUTpollOut166,5421
 , pollErr   = POLLERRpollErr167,5444
 , pollHup   = POLLHUPpollHup168,5467
    c_poll :: Ptr PollFd -> CNfds -> CInt -> IO CIntc_poll203,6542
    c_poll_unsafe :: Ptr PollFd -> CNfds -> CInt -> IO CIntc_poll_unsafe206,6638
toEvent :: Event -> E.EventtoEvent178,5700
reworkFd :: Poll -> PollFd -> IO ()reworkFd66,1672
poll :: Pollpoll79,2112
new :: IO E.Backendnew19,310
modifyFdOnce :: Poll -> Fd -> E.Event -> IO BoolmodifyFdOnce63,1539
modifyFd :: Poll -> Fd -> E.Event -> E.Event -> IO BoolmodifyFd57,1339
fromTimeout :: E.Timeout -> IntfromTimeout143,4676
fromEvent :: E.Event -> EventfromEvent171,5494
available :: Boolavailable22,410

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Event/Thread.hs,2521
module GHC.Event.ThreadThread4,79
    getOrSetSystemEventThreadEventManagerStore :: Ptr a -> IO (Ptr a)getOrSetSystemEventThreadEventManagerStore188,7557
    getOrSetSystemEventThreadIOManagerThreadStore :: Ptr a -> IO (Ptr a)getOrSetSystemEventThreadIOManagerThreadStore204,8171
    getOrSetSystemTimerThreadEventManagerStore :: Ptr a -> IO (Ptr a)getOrSetSystemTimerThreadEventManagerStore220,8739
    getOrSetSystemTimerThreadIOManagerThreadStore :: Ptr a -> IO (Ptr a)getOrSetSystemTimerThreadIOManagerThreadStore229,9086
foreign import ccall unsafe "rtsSupportsBoundThreads" threaded :: Boolthreaded323,12399
   c_setIOManagerControlFd :: CUInt -> CInt -> IO ()c_setIOManagerControlFd359,14053
   c_setTimerManagerControlFd :: CInt -> IO ()c_setTimerManagerControlFd362,14162
timerManagerThreadVar :: MVar (Maybe ThreadId)timerManagerThreadVar232,9199
timerManager :: IORef (Maybe TM.TimerManager)timerManager222,8810
threadWaitWriteSTM :: Fd -> IO (STM (), IO ())threadWaitWriteSTM163,6722
threadWaitWrite :: Fd -> IO ()threadWaitWrite88,3346
threadWaitSTM :: Event -> Fd -> IO (STM (), IO ())threadWaitSTM128,4955
threadWaitReadSTM :: Fd -> IO (STM (), IO ())threadWaitReadSTM151,6047
threadWaitRead :: Fd -> IO ()threadWaitRead78,2947
threadWait :: Event -> Fd -> IO ()threadWait114,4428
threadDelay :: Int -> IO ()threadDelay55,2071
startTimerManagerThread :: IO ()startTimerManagerThread293,11269
startIOManagerThreads :: IO ()startIOManagerThreads244,9543
startIOManagerThread :: IOArray Int (Maybe (ThreadId, EventManager))startIOManagerThread262,10094
show_int :: Int -> Stringshow_int252,9844
restartPollLoop :: EventManager -> Int -> IO ThreadIdrestartPollLoop255,9905
registerDelay :: Int -> IO (TVar Bool)registerDelay65,2431
numEnabledEventManagers :: IORef IntnumEnabledEventManagers198,7956
ioManagerLock :: MVar ()ioManagerLock209,8401
ioManagerCapabilitiesChanged :: IO ()ioManagerCapabilitiesChanged325,12471
getSystemTimerManager :: IO TM.TimerManagergetSystemTimerManager214,8544
getSystemEventManager_ :: IO EventManagergetSystemEventManager_181,7326
getSystemEventManager :: IO (Maybe EventManager)getSystemEventManager173,7083
eventManager :: IORef (IOArray Int (Maybe (ThreadId, EventManager)))eventManager190,7628
ensureIOManagerIsRunning :: IO ()ensureIOManagerIsRunning237,9377
closeFdWith :: (Fd -> IO ())        -- ^ Action that performs the close.closeFdWith97,3659
blockedOnBadFD :: SomeExceptionblockedOnBadFD125,4841

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Event/TimerManager.hs,1850
module GHC.Event.TimerManagerTimerManager10,214
newtype TimeoutKey   = TK UniqueTimeoutKey70,1654
newtype TimeoutKey   = TK UniqueTK70,1654
type TimeoutCallback = IO ()TimeoutCallback74,1765
data State = CreatedState76,1795
data State = CreatedCreated76,1795
           | RunningRunning77,1816
           | DyingDying78,1837
           | FinishedFinished79,1856
type TimeoutQueue = Q.PSQ TimeoutCallbackTimeoutQueue85,2060
type TimeoutEdit = TimeoutQueue -> TimeoutQueueTimeoutEdit88,2146
data TimerManager = TimerManagerTimerManager91,2225
    { emBackend      :: !BackendemBackend92,2258
    , emTimeouts     :: {-# UNPACK #-} !(IORef TimeoutQueue)emTimeouts93,2291
    , emState        :: {-# UNPACK #-} !(IORef State)emState94,2352
    , emUniqueSource :: {-# UNPACK #-} !UniqueSourceemUniqueSource95,2406
    , emControl      :: {-# UNPACK #-} !ControlemControl96,2459
wakeManager :: TimerManager -> IO ()wakeManager206,6108
updateTimeout :: TimerManager -> TimeoutKey -> Int -> IO ()updateTimeout247,7708
unregisterTimeout :: TimerManager -> TimeoutKey -> IO ()unregisterTimeout241,7502
step :: TimerManager -> IO Boolstep180,5128
shutdown :: TimerManager -> IO ()shutdown143,3955
registerTimeout :: TimerManager -> Int -> TimeoutCallback -> IO TimeoutKeyregisterTimeout228,7031
newWith :: Backend -> IO TimerManagernewWith121,3153
newDefaultBackend :: IO BackendnewDefaultBackend110,2887
new :: IO TimerManagernew118,3093
loop :: TimerManager -> IO ()loop165,4672
handleControlEvent :: TimerManager -> Fd -> Event -> IO ()handleControlEvent102,2600
finished :: TimerManager -> IO Boolfinished148,4123
expirationTime :: Int -> IO Q.PrioexpirationTime212,6307
editTimeouts :: TimerManager -> TimeoutEdit -> IO ()editTimeouts252,7885
cleanup :: TimerManager -> IO ()cleanup151,4221

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Event/Unique.hs,384
module GHC.Event.UniqueUnique5,140
data UniqueSource = US (MutableByteArray# RealWorld)UniqueSource19,337
data UniqueSource = US (MutableByteArray# RealWorld)US19,337
newtype Unique = Unique { asInt :: Int }Unique21,391
newtype Unique = Unique { asInt :: Int }asInt21,391
newUnique :: UniqueSource -> IO UniquenewUnique38,797
newSource :: IO UniqueSourcenewSource31,637

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Exception.hs,769
module GHC.ExceptionException25,716
data ErrorCall = ErrorCallWithLocation String StringErrorCall54,1682
data ErrorCall = ErrorCallWithLocation String StringErrorCallWithLocation54,1682
pattern ErrorCall :: String -> ErrorCallErrorCall59,1829
throw :: forall (r :: RuntimeRep). forall (a :: TYPE r). forall e.throw48,1412
showCCSStack :: [String] -> [String]showCCSStack86,2764
prettySrcLoc :: SrcLoc -> StringprettySrcLoc96,3065
prettyCallStackLines :: CallStack -> [String]prettyCallStackLines111,3437
prettyCallStack :: CallStack -> StringprettyCallStack108,3339
errorCallWithCallStackException :: String -> CallStack -> SomeExceptionerrorCallWithCallStackException77,2366
errorCallException :: String -> SomeExceptionerrorCallException74,2270

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Exception/Type.hs,1190
module GHC.Exception.TypeType24,693
data SomeException = forall e . Exception e => SomeException eSomeException42,1236
class (Typeable e, Show e) => Exception e whereException134,4655
    toException   :: e -> SomeExceptiontoException135,4703
    fromException :: SomeException -> Maybe efromException136,4743
    displayException :: e -> StringdisplayException146,5010
data ArithExceptionArithException156,5267
  = OverflowOverflow157,5287
  | UnderflowUnderflow158,5300
  | LossOfPrecisionLossOfPrecision159,5314
  | DivideByZeroDivideByZero160,5334
  | DenormalDenormal161,5351
  | RatioZeroDenominator -- ^ @since 4.6.0.0RatioZeroDenominator162,5364
divZeroException, overflowException, ratioZeroDenomException, underflowException  :: SomeExceptionunderflowException167,5489
divZeroException, overflowException, ratioZeroDenomException, underflowException  :: SomeExceptionratioZeroDenomException167,5489
divZeroException, overflowException, ratioZeroDenomException, underflowException  :: SomeExceptionoverflowException167,5489
divZeroException, overflowException, ratioZeroDenomException, underflowException  :: SomeExceptiondivZeroException167,5489

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/ExecutionStack.hs,170
module GHC.ExecutionStack (ExecutionStack32,866
showStackTrace :: IO (Maybe String)showStackTrace49,1353
getStackTrace :: IO (Maybe [Location])getStackTrace45,1175

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/ExecutionStack/Internal.hsc,2142
module GHC.ExecutionStack.Internal (Internal22,597
data SrcLoc = SrcLoc { sourceFile   :: StringSrcLoc47,1271
data SrcLoc = SrcLoc { sourceFile   :: StringsourceFile47,1271
                     , sourceLine   :: IntsourceLine48,1317
                     , sourceColumn :: IntsourceColumn49,1360
data Location = Location { objectName   :: StringLocation53,1488
data Location = Location { objectName   :: StringobjectName53,1488
                         , functionName :: StringfunctionName54,1538
                         , srcLoc       :: Maybe SrcLocsrcLoc55,1588
data Chunk = Chunk { chunkFrames     :: !WordChunk59,1705
data Chunk = Chunk { chunkFrames     :: !WordchunkFrames59,1705
                   , chunkNext       :: !(Ptr Chunk)chunkNext60,1751
                   , chunkFirstFrame :: !(Ptr Addr)chunkFirstFrame61,1804
newtype StackTrace = StackTrace (ForeignPtr StackTrace)StackTrace65,1916
type Addr = Ptr ()Addr68,1989
data SessionSession182,6542
    libdw_pool_take :: IO (Ptr Session)libdw_pool_take185,6600
    libdw_pool_release :: FunPtr (Ptr Session -> IO ())libdw_pool_release188,6689
    libdw_pool_clear :: IO ()libdw_pool_clear191,6791
    libdw_lookup_location :: Ptr Session -> Ptr Location -> Addr -> IO CIntlibdw_lookup_location194,6872
    libdw_get_backtrace :: Ptr Session -> IO (Ptr StackTrace)libdw_get_backtrace197,6997
    backtrace_free :: FunPtr (Ptr StackTrace -> IO ())backtrace_free200,7105
withSession :: (ForeignPtr Session -> IO a) -> IO (Maybe a)withSession70,2009
stackFrames :: StackTrace -> Maybe [Location]stackFrames133,4389
stackDepth :: StackTrace -> IntstackDepth80,2361
showStackFrames :: [Location] -> ShowSshowStackFrames214,7604
showLocation :: Location -> ShowSshowLocation223,7867
peekLocation :: Ptr Location -> IO LocationpeekLocation106,3262
peekChunk :: Ptr Chunk -> IO ChunkpeekChunk87,2582
locationSize :: IntlocationSize129,4288
invalidateDebugCache :: IO ()invalidateDebugCache210,7496
collectStackTrace :: IO (Maybe StackTrace)collectStackTrace203,7190
chunksList :: StackTrace -> IO [Chunk]chunksList95,2887

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Exts.hs,949
module GHC.ExtsExts20,720
data SpecConstrAnnotation = NoSpecConstr | ForceSpecConstrSpecConstrAnnotation171,5399
data SpecConstrAnnotation = NoSpecConstr | ForceSpecConstrNoSpecConstr171,5399
data SpecConstrAnnotation = NoSpecConstr | ForceSpecConstrForceSpecConstr171,5399
class IsList l whereIsList187,6103
  type Item lItem190,6211
  fromList  :: [Item l] -> lfromList194,6325
  fromListN :: Int -> [Item l] -> lfromListN201,6706
  toList :: l -> [Item l]toList206,6898
traceEvent :: String -> IO ()traceEvent153,4566
the :: Eq a => [a] -> athe124,3334
sortWith :: Ord b => (a -> b) -> [a] -> [a]sortWith132,3675
resizeSmallMutableArray#resizeSmallMutableArray#280,9053
maxTupleSize :: IntmaxTupleSize119,3188
groupWith :: Ord b => (a -> b) -> [a] -> [[a]]groupWith139,4017
groupByFB :: ([a] -> lst -> lst) -> lst -> (a -> a -> Bool) -> [a] -> lstgroupByFB143,4224
atomicModifyMutVar#atomicModifyMutVar#259,8210

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Fingerprint.hs,644
module GHC.Fingerprint (Fingerprint16,431
data MD5ContextMD5Context106,3086
   c_MD5Init   :: Ptr MD5Context -> IO ()c_MD5Init109,3150
   c_MD5Update :: Ptr MD5Context -> Ptr Word8 -> CInt -> IO ()c_MD5Update111,3241
   c_MD5Final  :: Ptr Word8 -> Ptr MD5Context -> IO ()c_MD5Final113,3352
getFileHash :: FilePath -> IO FingerprintgetFileHash75,2109
fingerprintString :: String -> FingerprintfingerprintString59,1517
fingerprintFingerprints :: [Fingerprint] -> FingerprintfingerprintFingerprints45,998
fingerprintData :: Ptr Word8 -> Int -> IO FingerprintfingerprintData50,1199
fingerprint0 :: Fingerprintfingerprint042,938

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Fingerprint/Type.hs,160
module GHC.Fingerprint.Type (Fingerprint(..)) whereType13,386
data Fingerprint = Fingerprint {-# UNPACK #-} !Word64 {-# UNPACK #-} !Word64Fingerprint24,608

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Float.hs,9862
module GHC.FloatFloat34,1066
class  (Fractional a) => Floating a  whereFloating75,2190
    pi                  :: api76,2233
    exp, log, sqrt      :: a -> aexp77,2262
    exp, log, sqrt      :: a -> alog77,2262
    exp, log, sqrt      :: a -> asqrt77,2262
    (**), logBase       :: a -> a -> a**78,2296
    (**), logBase       :: a -> a -> alogBase78,2296
    sin, cos, tan       :: a -> asin79,2335
    sin, cos, tan       :: a -> acos79,2335
    sin, cos, tan       :: a -> atan79,2335
    asin, acos, atan    :: a -> aasin80,2369
    asin, acos, atan    :: a -> aacos80,2369
    asin, acos, atan    :: a -> aatan80,2369
    sinh, cosh, tanh    :: a -> asinh81,2403
    sinh, cosh, tanh    :: a -> acosh81,2403
    sinh, cosh, tanh    :: a -> atanh81,2403
    asinh, acosh, atanh :: a -> aasinh82,2437
    asinh, acosh, atanh :: a -> aacosh82,2437
    asinh, acosh, atanh :: a -> aatanh82,2437
    log1p               :: a -> alog1p88,2637
    expm1               :: a -> aexpm194,2835
    log1pexp            :: a -> alog1pexp108,3297
    log1mexp            :: a -> alog1mexp122,3758
class  (RealFrac a, Floating a) => RealFloat a  whereRealFloat154,4756
    floatRadix          :: a -> IntegerfloatRadix157,4901
    floatDigits         :: a -> IntfloatDigits160,5044
    floatRange          :: a -> (Int,Int)floatRange163,5181
    decodeFloat         :: a -> (Integer,Int)decodeFloat175,5944
    encodeFloat         :: Integer -> Int -> aencodeFloat183,6455
    exponent            :: a -> Intexponent191,6925
    significand         :: a -> asignificand196,7218
    scaleFloat          :: Int -> a -> ascaleFloat198,7329
    isNaN               :: a -> BoolisNaN200,7442
    isInfinite          :: a -> BoolisInfinite202,7552
    isDenormalized      :: a -> BoolisDenormalized205,7680
    isNegativeZero      :: a -> BoolisNegativeZero207,7774
    isIEEE              :: a -> BoolisIEEE209,7876
    atan2               :: a -> a -> aatan2219,8539
data FFFormat = FFExponent | FFFixed | FFGenericFFFormat697,25952
data FFFormat = FFExponent | FFFixed | FFGenericFFExponent697,25952
data FFFormat = FFExponent | FFFixed | FFGenericFFFixed697,25952
data FFFormat = FFExponent | FFFixed | FFGenericFFGeneric697,25952
foreign import ccall unsafe "isFloatNaN" isFloatNaN :: Float -> IntisFloatNaN1227,46857
foreign import ccall unsafe "isFloatInfinite" isFloatInfinite :: Float -> IntisFloatInfinite1228,46925
foreign import ccall unsafe "isFloatDenormalized" isFloatDenormalized :: Float -> IntisFloatDenormalized1229,47003
foreign import ccall unsafe "isFloatNegativeZero" isFloatNegativeZero :: Float -> IntisFloatNegativeZero1230,47089
foreign import ccall unsafe "isFloatFinite" isFloatFinite :: Float -> IntisFloatFinite1231,47175
foreign import ccall unsafe "isDoubleNaN" isDoubleNaN :: Double -> IntisDoubleNaN1233,47250
foreign import ccall unsafe "isDoubleInfinite" isDoubleInfinite :: Double -> IntisDoubleInfinite1234,47321
foreign import ccall unsafe "isDoubleDenormalized" isDoubleDenormalized :: Double -> IntisDoubleDenormalized1235,47402
foreign import ccall unsafe "isDoubleNegativeZero" isDoubleNegativeZero :: Double -> IntisDoubleNegativeZero1236,47491
foreign import ccall unsafe "isDoubleFinite" isDoubleFinite :: Double -> IntisDoubleFinite1237,47580
    stgWord32ToFloat :: Word# -> Float#stgWord32ToFloat1356,51711
    stgFloatToWord32 :: Float# -> Word#stgFloatToWord321369,52050
    stgWord64ToDouble :: Word# -> Double#stgWord64ToDouble1384,52423
    stgDoubleToWord64 :: Double# -> Word#stgDoubleToWord641401,52855
word2Float :: Word -> Floatword2Float1246,47895
word2Double :: Word -> Doubleword2Double1243,47823
plusFloat, minusFloat, timesFloat, divideFloat :: Float -> Float -> FloattimesFloat1132,43143
plusDouble, minusDouble, timesDouble, divideDouble :: Double -> Double -> DoubletimesDouble1178,44956
sinhFloat, coshFloat, tanhFloat  :: Float -> FloattanhFloat1151,43958
sinhDouble, coshDouble, tanhDouble  :: Double -> DoubletanhDouble1203,45917
sinFloat, cosFloat, tanFloat  :: Float -> FloattanFloat1149,43859
sinDouble, cosDouble, tanDouble  :: Double -> DoubletanDouble1201,45808
logFloat, log1pFloat, sqrtFloat, fabsFloat :: Float -> FloatsqrtFloat1148,43798
logDouble, log1pDouble, sqrtDouble, fabsDouble :: Double -> DoublesqrtDouble1200,45741
sinhFloat, coshFloat, tanhFloat  :: Float -> FloatsinhFloat1151,43958
sinhDouble, coshDouble, tanhDouble  :: Double -> DoublesinhDouble1203,45917
sinFloat, cosFloat, tanFloat  :: Float -> FloatsinFloat1149,43859
sinDouble, cosDouble, tanDouble  :: Double -> DoublesinDouble1201,45808
showSignedFloat :: (RealFloat a)showSignedFloat1303,49707
showFloat :: (RealFloat a) => a -> ShowSshowFloat692,25785
roundTo :: Int -> Int -> [Int] -> (Int,[Int])roundTo781,28856
rationalToFloat :: Integer -> Integer -> FloatrationalToFloat313,12205
rationalToDouble :: Integer -> Integer -> DoublerationalToDouble509,19074
powerFloat :: Float -> Float -> FloatpowerFloat1172,44766
powerDouble :: Double -> Double -> DoublepowerDouble1224,46771
plusFloat, minusFloat, timesFloat, divideFloat :: Float -> Float -> FloatplusFloat1132,43143
plusDouble, minusDouble, timesDouble, divideDouble :: Double -> Double -> DoubleplusDouble1178,44956
negateFloat :: Float -> FloatnegateFloat1138,43414
negateDouble :: Double -> DoublenegateDouble1184,45206
plusFloat, minusFloat, timesFloat, divideFloat :: Float -> Float -> FloatminusFloat1132,43143
plusDouble, minusDouble, timesDouble, divideDouble :: Double -> Double -> DoubleminusDouble1178,44956
minExpt, maxExpt :: IntminExpt1008,37441
maxExpt10 :: IntmaxExpt101025,37818
minExpt, maxExpt :: IntmaxExpt1008,37441
gtFloat, geFloat, ltFloat, leFloat :: Float -> Float -> BoolltFloat1141,43493
gtDouble, geDouble, leDouble, ltDouble :: Double -> Double -> BoolltDouble1187,45290
logFloat, log1pFloat, sqrtFloat, fabsFloat :: Float -> FloatlogFloat1148,43798
logDouble, log1pDouble, sqrtDouble, fabsDouble :: Double -> DoublelogDouble1200,45741
logFloat, log1pFloat, sqrtFloat, fabsFloat :: Float -> Floatlog1pFloat1148,43798
logDouble, log1pDouble, sqrtDouble, fabsDouble :: Double -> Doublelog1pDouble1200,45741
log1mexpOrd :: (Ord a, Floating a) => a -> alog1mexpOrd146,4491
gtFloat, geFloat, ltFloat, leFloat :: Float -> Float -> BoolleFloat1141,43493
gtDouble, geDouble, leDouble, ltDouble :: Double -> Double -> BoolleDouble1187,45290
integerLogBase :: Integer -> Integer -> IntintegerLogBase1037,38350
gtFloat, geFloat, ltFloat, leFloat :: Float -> Float -> BoolgtFloat1141,43493
gtDouble, geDouble, leDouble, ltDouble :: Double -> Double -> BoolgtDouble1187,45290
gtFloat, geFloat, ltFloat, leFloat :: Float -> Float -> BoolgeFloat1141,43493
gtDouble, geDouble, leDouble, ltDouble :: Double -> Double -> BoolgeDouble1187,45290
fromRat'' :: RealFloat a => Int -> Int -> Integer -> Integer -> afromRat''1060,39171
fromRat' :: (RealFloat a) => Rational -> afromRat'989,36500
fromRat :: (RealFloat a) => Rational -> afromRat970,35677
formatRealFloatAlt :: (RealFloat a) => FFFormat -> Maybe Int -> Bool -> aformatRealFloatAlt704,26227
formatRealFloat :: (RealFloat a) => FFFormat -> Maybe Int -> a -> StringformatRealFloat701,26088
floatToDigits :: (RealFloat a) => Integer -> a -> ([Int], Int)floatToDigits818,29938
float2Double :: Float -> Doublefloat2Double1196,45622
logFloat, log1pFloat, sqrtFloat, fabsFloat :: Float -> FloatfabsFloat1148,43798
logDouble, log1pDouble, sqrtDouble, fabsDouble :: Double -> DoublefabsDouble1200,45741
expts10 :: Array Int Integerexpts101028,37852
expts :: Array Int Integerexpts1022,37720
expt :: Integer -> Int -> Integerexpt1012,37493
expFloat, expm1Float :: Float -> Floatexpm1Float1147,43759
expDouble, expm1Double :: Double -> Doubleexpm1Double1199,45698
expFloat, expm1Float :: Float -> FloatexpFloat1147,43759
expDouble, expm1Double :: Double -> DoubleexpDouble1199,45698
double2Float :: Double -> Floatdouble2Float1193,45546
plusFloat, minusFloat, timesFloat, divideFloat :: Float -> Float -> FloatdivideFloat1132,43143
plusDouble, minusDouble, timesDouble, divideDouble :: Double -> Double -> DoubledivideDouble1178,44956
sinhFloat, coshFloat, tanhFloat  :: Float -> FloatcoshFloat1151,43958
sinhDouble, coshDouble, tanhDouble  :: Double -> DoublecoshDouble1203,45917
sinFloat, cosFloat, tanFloat  :: Float -> FloatcosFloat1149,43859
sinDouble, cosDouble, tanDouble  :: Double -> DoublecosDouble1201,45808
clamp :: Int -> Int -> Intclamp1319,50323
castWord64ToDouble :: Word64 -> DoublecastWord64ToDouble1379,52257
castWord32ToFloat :: Word32 -> FloatcastWord32ToFloat1352,51576
castFloatToWord32 :: Float -> Word32castFloatToWord321365,51915
castDoubleToWord64 :: Double -> Word64castDoubleToWord641396,52687
asinhFloat, acoshFloat, atanhFloat  :: Float -> FloatatanhFloat1152,44009
asinhDouble, acoshDouble, atanhDouble  :: Double -> DoubleatanhDouble1204,45973
asinFloat, acosFloat, atanFloat  :: Float -> FloatatanFloat1150,43907
asinDouble, acosDouble, atanDouble  :: Double -> DoubleatanDouble1202,45861
asinhFloat, acoshFloat, atanhFloat  :: Float -> FloatasinhFloat1152,44009
asinhDouble, acoshDouble, atanhDouble  :: Double -> DoubleasinhDouble1204,45973
asinFloat, acosFloat, atanFloat  :: Float -> FloatasinFloat1150,43907
asinDouble, acosDouble, atanDouble  :: Double -> DoubleasinDouble1202,45861
asinhFloat, acoshFloat, atanhFloat  :: Float -> FloatacoshFloat1152,44009
asinhDouble, acoshDouble, atanhDouble  :: Double -> DoubleacoshDouble1204,45973
asinFloat, acosFloat, atanFloat  :: Float -> FloatacosFloat1150,43907
asinDouble, acosDouble, atanDouble  :: Double -> DoubleacosDouble1202,45861

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Float/ConversionUtils.hs,551
module GHC.Float.ConversionUtils ( elimZerosInteger, elimZerosInt# ) whereConversionUtils22,653
data BA = BA ByteArray#BA78,2221
zeroCountArr :: BAzeroCountArr81,2288
zeroCount :: Int# -> Int#zeroCount69,2044
toByte64# :: Int64# -> Int#toByte64#36,892
toByte# :: Int# -> Int#toByte#74,2146
elimZerosInteger :: Integer -> Int# -> (# Integer, Int# #)elimZerosInteger58,1566
elimZerosInt# :: Int# -> Int# -> (# Integer, Int# #)elimZerosInt#61,1668
elim64# :: Int64# -> Int# -> (# Integer, Int# #)elim64#40,1038
tegerToInt64TO6434,878

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Float/RealFracMethods.hs,1986
module GHC.Float.RealFracMethodsRealFracMethods24,735
    c_rintDouble :: Double -> Doublec_rintDouble338,11651
    c_rintFloat :: Float -> Floatc_rintFloat341,11729
uncheckedIShiftRA64# :: Int# -> Int# -> Int#uncheckedIShiftRA64#78,1897
uncheckedIShiftL64# :: Int# -> Int# -> Int#uncheckedIShiftL64#81,1985
truncateFloatInteger :: Float -> IntegertruncateFloatInteger154,4783
truncateDoubleInteger :: Double -> IntegertruncateDoubleInteger258,8770
roundFloatInteger :: Float -> IntegerroundFloatInteger181,5781
roundFloatInt :: Float -> IntroundFloatInt119,3261
roundDoubleInteger :: Double -> IntegerroundDoubleInteger284,9671
roundDoubleInt :: Double -> IntroundDoubleInt215,7021
properFractionFloatInteger :: Float -> (Integer, Float)properFractionFloatInteger134,3859
properFractionFloatInt :: Float -> (Int, Float)properFractionFloatInt98,2591
properFractionDoubleInteger :: Double -> (Integer, Double)properFractionDoubleInteger232,7665
properFractionDoubleInt :: Double -> (Int, Double)properFractionDoubleInt194,6373
int2Float :: Int -> Floatint2Float300,10138
int2Double :: Int -> Doubleint2Double294,10006
floorFloatInteger :: Float -> IntegerfloorFloatInteger162,5059
floorFloatInt :: Float -> IntfloorFloatInt107,2867
floorDoubleInteger :: Double -> IntegerfloorDoubleInteger266,9051
floorDoubleInt :: Double -> IntfloorDoubleInt203,6643
float2Integer :: Float -> Integerfloat2Integer321,10826
float2Int :: Float -> Intfloat2Int297,10074
double2Integer :: Double -> Integerdouble2Integer311,10524
double2Int :: Double -> Intdouble2Int291,9938
ceilingFloatInteger :: Float -> IntegerceilingFloatInteger176,5618
ceilingFloatInt :: Float -> IntceilingFloatInt113,3062
ceilingDoubleInteger :: Double -> IntegerceilingDoubleInteger279,9502
ceilingDoubleInt :: Double -> IntceilingDoubleInt209,6830
tegerToInt64TO6466,1682
E64 negateInt64#NEGATE6469,1766
S64 minusInt64#MINUS6468,1737
int64ToIntegerFROM6467,1710

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Foreign.hs,1439
module GHC.Foreign (Foreign20,607
type CString    = Ptr CCharCString78,1744
type CStringLen = (Ptr CChar, Int)CStringLen79,1772
withEncodedCString :: TextEncoding         -- ^ Encoding of CString to createwithEncodedCString224,7807
withCStringsLen :: TextEncodingwithCStringsLen148,4328
withCStringLen         :: TextEncoding -> String -> (CStringLen -> IO a) -> IO awithCStringLen136,3836
withCStringBuffer :: Buffer Word8 -> Bool -> (CStringLen -> IO r) -> IO rwithCStringBuffer246,9025
withCString :: TextEncoding -> String -> (CString -> IO a) -> IO awithCString126,3378
tryFillBuffer :: TextEncoder dstate -> Bool -> Buffer Char -> Ptr Word8 -> InttryFillBuffer278,10561
putDebugMsg :: String -> IO ()putDebugMsg72,1525
peekEncodedCString :: TextEncoding -- ^ Encoding of CStringpeekEncodedCString195,5940
peekCStringLen           :: TextEncoding -> CStringLen -> IO StringpeekCStringLen93,2147
peekCString    :: TextEncoding -> CString -> IO StringpeekCString86,1918
newEncodedCString :: TextEncoding  -- ^ Encoding of CString to createnewEncodedCString254,9407
newCStringLen     :: TextEncoding -> String -> IO CStringLennewCStringLen114,2929
newCString :: TextEncoding -> String -> IO CStringnewCString104,2547
nUL :: CCharnUL186,5796
charIsRepresentable :: TextEncoding -> Char -> IO BoolcharIsRepresentable163,4887
c_DEBUG_DUMP :: Boolc_DEBUG_DUMP69,1482
cCharSize :: IntcCharSize190,5847

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/ForeignPtr.hs,2629
module GHC.ForeignPtrForeignPtr24,683
data ForeignPtr a = ForeignPtr Addr# ForeignPtrContentsForeignPtr74,2403
data FinalizersFinalizers87,3191
  = NoFinalizersNoFinalizers88,3207
  | CFinalizers (Weak# ())CFinalizers89,3224
  | HaskellFinalizers [IO ()]HaskellFinalizers90,3251
data ForeignPtrContentsForeignPtrContents92,3282
  = PlainForeignPtr !(IORef Finalizers)PlainForeignPtr93,3306
  | MallocPtr      (MutableByteArray# RealWorld) !(IORef Finalizers)MallocPtr94,3346
  | PlainPtr       (MutableByteArray# RealWorld)PlainPtr95,3415
type FinalizerPtr a        = FunPtr (Ptr a -> IO ())FinalizerPtr116,4115
type FinalizerEnvPtr env a = FunPtr (Ptr env -> Ptr a -> IO ())FinalizerEnvPtr117,4168
data MyWeak = MyWeak (Weak# ())MyWeak331,14268
unsafeForeignPtrToPtr :: ForeignPtr a -> Ptr aunsafeForeignPtrToPtr419,18015
touchForeignPtr :: ForeignPtr a -> IO ()touchForeignPtr389,16568
touch :: ForeignPtrContents -> IO ()touch416,17918
plusForeignPtr :: ForeignPtr a -> Int -> ForeignPtr bplusForeignPtr441,19052
noMixingError :: anoMixingError366,15754
newForeignPtr_ :: Ptr a -> IO (ForeignPtr a)newForeignPtr_382,16281
newConcForeignPtr :: Ptr a -> IO () -> IO (ForeignPtr a)newConcForeignPtr119,4233
mallocPlainForeignPtrBytes :: Int -> IO (ForeignPtr a)mallocPlainForeignPtrBytes231,9498
mallocPlainForeignPtrAlignedBytes :: Int -> Int -> IO (ForeignPtr a)mallocPlainForeignPtrAlignedBytes244,10143
mallocPlainForeignPtr :: Storable a => IO (ForeignPtr a)mallocPlainForeignPtr214,8665
mallocForeignPtrBytes :: Int -> IO (ForeignPtr a)mallocForeignPtrBytes176,6832
mallocForeignPtrAlignedBytes :: Int -> Int -> IO (ForeignPtr a)mallocForeignPtrAlignedBytes190,7425
mallocForeignPtr :: Storable a => IO (ForeignPtr a)mallocForeignPtr141,5237
insertHaskellFinalizer :: IORef Finalizers -> IO () -> IO BoolinsertHaskellFinalizer322,13892
insertCFinalizer ::insertCFinalizer333,14301
foreignPtrFinalizer :: IORef Finalizers -> IO ()foreignPtrFinalizer371,15908
finalizeForeignPtr :: ForeignPtr a -> IO ()finalizeForeignPtr457,19800
ensureCFinalizerWeak :: IORef Finalizers -> value -> IO MyWeakensureCFinalizerWeak346,14907
castForeignPtr :: ForeignPtr a -> ForeignPtr bcastForeignPtr436,18893
addForeignPtrFinalizerEnv ::addForeignPtrFinalizerEnv271,11595
addForeignPtrFinalizer :: FinalizerPtr a -> ForeignPtr a -> IO ()addForeignPtrFinalizer253,10616
addForeignPtrConcFinalizer_ :: ForeignPtrContents -> IO () -> IO ()addForeignPtrConcFinalizer_299,12961
addForeignPtrConcFinalizer :: ForeignPtr a -> IO () -> IO ()addForeignPtrConcFinalizer280,12069

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/GHCi.hs,293
module GHC.GHCi {-# WARNING "This is an unstable interface." #-} (GHCi20,546
class (Monad m) => GHCiSandboxIO m whereGHCiSandboxIO28,855
    ghciStepIO :: m a -> IO aghciStepIO29,896
newtype NoIO a = NoIO { noio :: IO a }NoIO36,1040
newtype NoIO a = NoIO { noio :: IO a }noio36,1040

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/GHCi/Helpers.hs,192
module GHC.GHCi.HelpersHelpers15,448
flushAll :: IO ()flushAll29,727
evalWrapper :: String -> [String] -> IO a -> IO aevalWrapper34,792
disableBuffering :: IO ()disableBuffering23,574

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Generics.hs,7296
module GHC.Generics  (Generics38,1431
data V1 (p :: k)V1757,27359
data U1 (p :: k) = U1U1772,27802
newtype Par1 p = Par1 { unPar1 :: p }Par1823,28712
newtype Par1 p = Par1 { unPar1 :: p }unPar1823,28712
newtype Rec1 (f :: k -> Type) (p :: k) = Rec1 { unRec1 :: f p }Rec1851,29459
newtype Rec1 (f :: k -> Type) (p :: k) = Rec1 { unRec1 :: f p }unRec1851,29459
newtype K1 (i :: Type) c (p :: k) = K1 { unK1 :: c }K1881,30387
newtype K1 (i :: Type) c (p :: k) = K1 { unK1 :: c }unK1881,30387
newtype M1 (i :: Type) (c :: Meta) (f :: k -> Type) (p :: k) =M1922,31582
    M1 { unM1 :: f p }unM1923,31645
data (:+:) (f :: k -> Type) (g :: k -> Type) (p :: k) = L1 (f p) | R1 (g p):+:935,32035
data (:+:) (f :: k -> Type) (g :: k -> Type) (p :: k) = L1 (f p) | R1 (g p)L1935,32035
data (:+:) (f :: k -> Type) (g :: k -> Type) (p :: k) = L1 (f p) | R1 (g p)R1935,32035
data (:*:) (f :: k -> Type) (g :: k -> Type) (p :: k) = f p :*: g p:*:947,32489
newtype (:.:) (f :: k2 -> Type) (g :: k1 -> k2) (p :: k1) =:.:988,33884
    Comp1 { unComp1 :: f (g p) }Comp1989,33944
    Comp1 { unComp1 :: f (g p) }unComp1989,33944
data family URec (a :: Type) (p :: k)URec1020,34976
data instance URec (Ptr ()) (p :: k) = UAddr { uAddr# :: Addr# }UAddr1025,35081
data instance URec (Ptr ()) (p :: k) = UAddr { uAddr# :: Addr# }uAddr#1025,35081
data instance URec Char (p :: k) = UChar { uChar# :: Char# }UChar1036,35436
data instance URec Char (p :: k) = UChar { uChar# :: Char# }uChar#1036,35436
data instance URec Double (p :: k) = UDouble { uDouble# :: Double# }UDouble1048,35831
data instance URec Double (p :: k) = UDouble { uDouble# :: Double# }uDouble#1048,35831
data instance URec Float (p :: k) = UFloat { uFloat# :: Float# }UFloat1060,36233
data instance URec Float (p :: k) = UFloat { uFloat# :: Float# }uFloat#1060,36233
data instance URec Int (p :: k) = UInt { uInt# :: Int# }UInt1070,36509
data instance URec Int (p :: k) = UInt { uInt# :: Int# }uInt#1070,36509
data instance URec Word (p :: k) = UWord { uWord# :: Word# }UWord1082,36898
data instance URec Word (p :: k) = UWord { uWord# :: Word# }uWord#1082,36898
type UAddr   = URec (Ptr ())UAddr1094,37285
type UChar   = URec CharUChar1098,37374
type UDouble = URec DoubleUDouble1103,37462
type UFloat  = URec FloatUFloat1108,37551
type UInt    = URec IntUInt1113,37637
type UWord   = URec WordUWord1118,37722
data RR1121,37792
type Rec0  = K1 RRec01124,37858
data DD1127,37903
data CC1129,37939
data SS1131,37979
type D1 = M1 DD11134,38049
type C1 = M1 CC11137,38130
type S1 = M1 SS11140,38215
class Datatype d whereDatatype1143,38281
  datatypeName :: t d (f :: k -> Type) (a :: k) -> [Char]datatypeName1145,38350
  moduleName   :: t d (f :: k -> Type) (a :: k) -> [Char]moduleName1147,38481
  packageName :: t d (f :: k -> Type) (a :: k) -> [Char]packageName1151,38629
  isNewtype    :: t d (f :: k -> Type) (a :: k) -> BoolisNewtype1155,38762
class Constructor c whereConstructor1167,39220
  conName :: t c (f :: k -> Type) (a :: k) -> [Char]conName1169,39281
  conFixity :: t c (f :: k -> Type) (a :: k) -> FixityconFixity1172,39372
  conIsRecord :: t c (f :: k -> Type) (a :: k) -> BoolconIsRecord1176,39496
data Fixity = Prefix | Infix Associativity IntFixity1188,39955
data Fixity = Prefix | Infix Associativity IntPrefix1188,39955
data Fixity = Prefix | Infix Associativity IntInfix1188,39955
data FixityI = PrefixI | InfixI Associativity NatFixityI1199,40304
data FixityI = PrefixI | InfixI Associativity NatPrefixI1199,40304
data FixityI = PrefixI | InfixI Associativity NatInfixI1199,40304
data Associativity = LeftAssociativeAssociativity1207,40526
data Associativity = LeftAssociativeLeftAssociative1207,40526
                   | RightAssociativeRightAssociative1208,40563
                   | NotAssociativeNotAssociative1209,40601
data SourceUnpackedness = NoSourceUnpackednessSourceUnpackedness1233,41381
data SourceUnpackedness = NoSourceUnpackednessNoSourceUnpackedness1233,41381
                        | SourceNoUnpackSourceNoUnpack1234,41428
                        | SourceUnpackSourceUnpack1235,41469
data SourceStrictness = NoSourceStrictnessSourceStrictness1257,42164
data SourceStrictness = NoSourceStrictnessNoSourceStrictness1257,42164
                      | SourceLazySourceLazy1258,42207
                      | SourceStrictSourceStrict1259,42242
data DecidedStrictness = DecidedLazyDecidedStrictness1292,43601
data DecidedStrictness = DecidedLazyDecidedLazy1292,43601
                       | DecidedStrictDecidedStrict1293,43638
                       | DecidedUnpackDecidedUnpack1294,43677
class Selector s whereSelector1306,44106
  selName :: t s (f :: k -> Type) (a :: k) -> [Char]selName1308,44161
  selSourceUnpackedness :: t s (f :: k -> Type) (a :: k) -> SourceUnpackednessselSourceUnpackedness1312,44294
  selSourceStrictness :: t s (f :: k -> Type) (a :: k) -> SourceStrictnessselSourceStrictness1316,44451
  selDecidedStrictness :: t s (f :: k -> Type) (a :: k) -> DecidedStrictnessselDecidedStrictness1320,44617
class Generic a whereGeneric1339,45275
  type Rep a :: Type -> TypeRep1341,45332
  from  :: a -> (Rep a) xfrom1343,45416
  to    :: (Rep a) x -> ato1345,45497
class Generic1 (f :: k -> Type) whereGeneric11358,45829
  type Rep1 f :: k -> TypeRep11360,45902
  from1  :: f a -> (Rep1 f) afrom11362,45984
  to1    :: (Rep1 f) a -> f ato11364,46069
data Meta = MetaData Symbol Symbol Symbol BoolMeta1386,47088
data Meta = MetaData Symbol Symbol Symbol BoolMetaData1386,47088
          | MetaCons Symbol FixityI BoolMetaCons1387,47135
          | MetaSel  (Maybe Symbol)MetaSel1388,47176
data family Sing (a :: k)Sing1482,49316
class SingI (a :: k) whereSingI1485,49416
  sing :: Sing asing1488,49583
class SingKind k whereSingKind1493,49831
  type DemoteRep k :: TypeDemoteRep1496,49973
  fromSing :: Sing (a :: k) -> DemoteRep kfromSing1499,50054
  SSym :: KnownSymbol s => Sing sSSym1503,50158
  STrue  :: Sing 'TrueSTrue1515,50469
  SFalse :: Sing 'FalseSFalse1516,50492
  SNothing :: Sing 'NothingSNothing1532,50831
  SJust    :: Sing a -> Sing ('Just a)SJust1533,50859
  SPrefix :: Sing 'PrefixISPrefix1549,51309
  SInfix  :: Sing a -> Integer -> Sing ('InfixI a n)SInfix1550,51336
  SLeftAssociative  :: Sing 'LeftAssociativeSLeftAssociative1567,51858
  SRightAssociative :: Sing 'RightAssociativeSRightAssociative1568,51903
  SNotAssociative   :: Sing 'NotAssociativeSNotAssociative1569,51949
  SNoSourceUnpackedness :: Sing 'NoSourceUnpackednessSNoSourceUnpackedness1589,52576
  SSourceNoUnpack       :: Sing 'SourceNoUnpackSSourceNoUnpack1590,52630
  SSourceUnpack         :: Sing 'SourceUnpackSSourceUnpack1591,52678
  SNoSourceStrictness :: Sing 'NoSourceStrictnessSNoSourceStrictness1611,53344
  SSourceLazy         :: Sing 'SourceLazySSourceLazy1612,53394
  SSourceStrict       :: Sing 'SourceStrictSSourceStrict1613,53436
  SDecidedLazy   :: Sing 'DecidedLazySDecidedLazy1633,54072
  SDecidedStrict :: Sing 'DecidedStrictSDecidedStrict1634,54110
  SDecidedUnpack :: Sing 'DecidedUnpackSDecidedUnpack1635,54150
prec :: Fixity -> Intprec1202,40398

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO.hs,1761
module GHC.IO (IO26,733
type FilePath = StringFilePath118,3952
data MaskingStateMaskingState274,10301
  = Unmasked -- ^ asynchronous exceptions are unmasked (the normal state)Unmasked275,10319
  | MaskedInterruptibleMaskedInterruptible276,10393
  | MaskedUninterruptibleMaskedUninterruptible278,10538
unsafeUnmask :: IO a -> IO aunsafeUnmask250,9524
unsafeSTToIO :: ST s a -> IO aunsafeSTToIO110,3574
unsafeIOToST        :: IO a -> ST s aunsafeIOToST101,3175
uninterruptibleMask_ :: IO a -> IO auninterruptibleMask_359,14371
uninterruptibleMask :: ((forall a. IO a -> IO a) -> IO b) -> IO buninterruptibleMask355,14214
unblock :: IO a -> IO aunblock247,9476
throwIO :: Exception e => e -> IO athrowIO219,8217
stToIO        :: ST RealWorld a -> IO astToIO89,2696
onException :: IO a -> IO b -> IO aonException293,11132
mplusIO :: IO a -> IO a -> IO amplusIO201,7445
mkUserError       :: [Char]  -> SomeExceptionmkUserError460,18144
mask_ :: IO a -> IO amask_343,13629
mask  :: ((forall a. IO a -> IO a) -> IO b) -> IO bmask340,13504
liftIO :: IO a -> State# RealWorld -> STret RealWorld aliftIO79,2211
ioToST        :: IO a -> ST RealWorld aioToST95,2940
interruptible :: IO a -> IO ainterruptible261,9912
getMaskingState :: IO MaskingStategetMaskingState285,10841
finally :: IO a         -- ^ computation to run firstfinally391,15370
evaluate :: a -> IO aevaluate435,17148
catchException :: Exception e => IO a -> (e -> IO a) -> IO acatchException142,4751
catchAny :: IO a -> (forall e . Exception e => e -> IO a) -> IO acatchAny194,7103
catch   :: Exception ecatch178,6510
bracketbracket379,14924
blockUninterruptible :: IO a -> IO ablockUninterruptible269,10115
block :: IO a -> IO ablock239,9186

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Buffer.hs,2745
module GHC.IO.Buffer (Buffer19,573
type RawBuffer e = ForeignPtr eRawBuffer96,2311
type CharBufElem = Word16CharBufElem105,2619
type RawCharBuffer = RawBuffer CharBufElemRawCharBuffer110,2683
data Buffer eBuffer180,5347
        bufRaw   :: !(RawBuffer e),bufRaw182,5374
        bufState :: BufferState,bufState183,5410
        bufSize  :: !Int,          -- in elements, not bytesbufSize184,5443
        bufL     :: !Int,          -- offset of first item in the bufferbufL185,5504
        bufR     :: !Int           -- offset of last item + 1bufR186,5577
type CharBuffer = Buffer Word16CharBuffer190,5671
data BufferState = ReadBuffer | WriteBufferBufferState195,5747
data BufferState = ReadBuffer | WriteBufferReadBuffer195,5747
data BufferState = ReadBuffer | WriteBufferWriteBuffer195,5747
   memmove :: Ptr a -> Ptr a -> CSize -> IO (Ptr a)memmove265,8039
writeWord8Buf :: RawBuffer Word8 -> Int -> Word8 -> IO ()writeWord8Buf101,2462
writeCharBufPtr :: Ptr CharBufElem -> Int -> Char -> IO IntwriteCharBufPtr140,3771
writeCharBuf :: RawCharBuffer -> Int -> Char -> IO IntwriteCharBuf122,3090
withRawBuffer :: RawBuffer e -> (Ptr e -> IO a) -> IO awithRawBuffer201,5951
withBuffer :: Buffer e -> (Ptr e -> IO a) -> IO awithBuffer198,5826
summaryBuffer :: Buffer a -> StringsummaryBuffer267,8092
slideContents :: Buffer Word8 -> IO (Buffer Word8)slideContents256,7726
readWord8Buf :: RawBuffer Word8 -> Int -> IO Word8readWord8Buf98,2344
readCharBufPtr :: Ptr CharBufElem -> Int -> IO (Char, Int)readCharBufPtr126,3250
readCharBuf :: RawCharBuffer -> Int -> IO (Char, Int)readCharBuf118,2939
peekCharBuf :: RawCharBuffer -> Int -> IO CharpeekCharBuf112,2727
newCharBuffer :: Int -> BufferState -> IO CharBuffernewCharBuffer247,7407
newByteBuffer :: Int -> BufferState -> IO (Buffer Word8)newByteBuffer244,7311
newBuffer :: Int -> Int -> BufferState -> IO (Buffer e)newBuffer250,7512
isWriteBuffer :: Buffer e -> BoolisWriteBuffer218,6466
isFullCharBuffer :: Buffer e -> BoolisFullCharBuffer211,6309
isFullBuffer :: Buffer e -> BoolisFullBuffer207,6151
isEmptyBuffer :: Buffer e -> BoolisEmptyBuffer204,6068
emptyBuffer :: RawBuffer e -> Int -> BufferState -> Buffer eemptyBuffer240,7155
checkBuffer :: Buffer a -> IO ()checkBuffer280,8665
check :: Buffer a -> Bool -> IO ()check290,9004
charSize :: IntcharSize155,4322
bufferRemove :: Int -> Buffer e -> Buffer ebufferRemove229,6796
bufferElems :: Buffer e -> IntbufferElems223,6631
bufferAvailable :: Buffer e -> IntbufferAvailable226,6708
bufferAdjustL :: Int -> Buffer e -> Buffer ebufferAdjustL232,6903
bufferAdd :: Int -> Buffer e -> Buffer ebufferAdd237,7062
#define CHARBUF_UTF32CHARBUF_UTF3282,1789

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/BufferedIO.hs,1000
module GHC.IO.BufferedIO (BufferedIO19,557
class BufferedIO dev whereBufferedIO38,1163
  newBuffer         :: dev -> BufferState -> IO (Buffer Word8)newBuffer42,1368
  fillReadBuffer    :: dev -> Buffer Word8 -> IO (Int, Buffer Word8)fillReadBuffer47,1604
  fillReadBuffer0   :: dev -> Buffer Word8 -> IO (Maybe Int, Buffer Word8)fillReadBuffer052,1824
  emptyWriteBuffer  :: dev -> Buffer Word8 -> IO (Buffer Word8)emptyWriteBuffer62,2342
  flushWriteBuffer  :: dev -> Buffer Word8 -> IO (Buffer Word8)flushWriteBuffer68,2635
  flushWriteBuffer0 :: dev -> Buffer Word8 -> IO (Int, Buffer Word8)flushWriteBuffer073,2858
writeBufNonBlocking :: RawIO dev => dev -> Buffer Word8 -> IO (Int, Buffer Word8)writeBufNonBlocking120,4680
writeBuf :: RawIO dev => dev -> Buffer Word8 -> IO (Buffer Word8)writeBuf112,4430
readBufNonBlocking :: RawIO dev => dev -> Buffer Word8readBufNonBlocking100,3893
readBuf :: RawIO dev => dev -> Buffer Word8 -> IO (Int, Buffer Word8)readBuf92,3584

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Device.hs,1814
module GHC.IO.Device (Device18,519
class RawIO a whereRawIO37,912
  read                :: a -> Ptr Word8 -> Int -> IO Intread44,1314
  readNonBlocking     :: a -> Ptr Word8 -> Int -> IO (Maybe Int)readNonBlocking49,1532
  write               :: a -> Ptr Word8 -> Int -> IO ()write52,1642
  writeNonBlocking    :: a -> Ptr Word8 -> Int -> IO IntwriteNonBlocking56,1816
class IODevice a whereIODevice60,1943
  ready :: a -> Bool -> Int -> IO Boolready66,2192
  close :: a -> IO ()close70,2324
  isTerminal :: a -> IO BoolisTerminal73,2409
  isSeekable :: a -> IO BoolisSeekable77,2533
  seek :: a -> SeekMode -> Integer -> IO ()seek81,2644
  tell :: a -> IO Integertell85,2777
  getSize :: a -> IO IntegergetSize89,2876
  setSize :: a -> Integer -> IO ()setSize93,2981
  setEcho :: a -> Bool -> IO ()setEcho98,3145
  getEcho :: a -> IO BoolgetEcho102,3262
  setRaw :: a -> Bool -> IO ()setRaw108,3516
  devType :: a -> IO IODeviceTypedevType112,3652
  dup :: a -> IO adup116,3831
  dup2 :: a -> a -> IO adup2122,4102
data IODeviceTypeIODeviceType138,4727
  = Directory -- ^ The standard libraries do not have direct supportDirectory139,4745
  | Stream    -- ^ A duplex communications channel (results inStream147,5265
  | RegularFile -- ^ A file that may be read or written, and alsoRegularFile151,5525
  | RawDevice -- ^ A "raw" (disk) device which supports block binaryRawDevice153,5627
data SeekModeSeekMode164,6075
  = AbsoluteSeek        -- ^ the position of @hdl@ is set to @i@.AbsoluteSeek165,6089
  | RelativeSeek        -- ^ the position of @hdl@ is set to offset @i@RelativeSeek166,6155
  | SeekFromEnd         -- ^ the position of @hdl@ is set to offset @i@SeekFromEnd168,6281
ioe_unsupportedOperation :: IO aioe_unsupportedOperation125,4166

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Encoding.hs,1844
module GHC.IO.Encoding (Encoding19,542
utf8_bom  :: TextEncodingutf8_bom77,2548
utf8  :: TextEncodingutf866,2114
utf32le  :: TextEncodingutf32le99,3120
utf32be  :: TextEncodingutf32be103,3216
utf32  :: TextEncodingutf3295,3028
utf16le  :: TextEncodingutf16le86,2787
utf16be  :: TextEncodingutf16be90,2883
utf16  :: TextEncodingutf1682,2695
unknownEncodingErr :: String -> IO aunknownEncodingErr305,11930
setLocaleEncoding, setFileSystemEncoding, setForeignEncoding :: TextEncoding -> IO ()setLocaleEncoding132,4178
setLocaleEncoding, setFileSystemEncoding, setForeignEncoding :: TextEncoding -> IO ()setForeignEncoding132,4178
setLocaleEncoding, setFileSystemEncoding, setForeignEncoding :: TextEncoding -> IO ()setFileSystemEncoding132,4178
mkTextEncoding' :: CodingFailureMode -> String -> IO TextEncodingmkTextEncoding'250,9137
mkTextEncoding :: String -> IO TextEncodingmkTextEncoding237,8640
mkGlobal :: a -> (IO a, a -> IO ())mkGlobal138,4502
latin1_encode :: CharBuffer -> Buffer Word8 -> IO (CharBuffer, Buffer Word8)latin1_encode297,11347
latin1_decode :: Buffer Word8 -> CharBuffer -> IO (Buffer Word8, CharBuffer)latin1_decode301,11653
latin1  :: TextEncodinglatin162,2026
initLocaleEncoding, initFileSystemEncoding, initForeignEncoding :: TextEncodinginitLocaleEncoding144,4664
initLocaleEncoding, initFileSystemEncoding, initForeignEncoding :: TextEncodinginitForeignEncoding144,4664
initLocaleEncoding, initFileSystemEncoding, initForeignEncoding :: TextEncodinginitFileSystemEncoding144,4664
getLocaleEncoding :: IO TextEncodinggetLocaleEncoding109,3335
getForeignEncoding :: IO TextEncodinggetForeignEncoding129,4119
getFileSystemEncoding :: IO TextEncodinggetFileSystemEncoding122,3843
char8 :: TextEncodingchar8186,6441
argvEncoding :: IO TextEncodingargvEncoding170,5940

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Encoding/CodePage.hs,1311
module GHC.IO.Encoding.CodePage(CodePage5,134
    getConsoleCP :: IO Word32getConsoleCP56,1517
    getACP :: IO Word32getACP59,1603
simpleCodec :: (Buffer from -> Buffer to -> IO (Buffer from, Buffer to))simpleCodec91,2848
mkLocaleEncoding :: CodingFailureMode -> TextEncodingmkLocaleEncoding68,1828
mkCodePageEncoding :: CodingFailureMode -> Word32 -> TextEncodingmkCodePageEncoding75,2049
lookupConv :: ConvArray Char -> Word8 -> CharlookupConv156,5378
lookupCompact :: Char -> ConvArray Int -> ConvArray Word8 -> Char -> Maybe Word8lookupCompact160,5492
localeEncoding :: TextEncodinglocaleEncoding65,1741
indexWord8 :: ConvArray Word8 -> Int -> Word8indexWord8176,5978
indexInt :: ConvArray Int -> Int -> IntindexInt172,5851
indexChar :: ConvArray Char -> Int -> CharindexChar180,6113
getCurrentCodePage :: IO Word32getCurrentCodePage47,1231
encodeToSingleByte :: CompactArray Char Word8 -> EncodeBufferencodeToSingleByte124,4114
decodeFromSingleByte :: ConvArray Char -> DecodeBufferdecodeFromSingleByte102,3193
currentCodePage :: Word32currentCodePage62,1661
codePageEncoding :: Word32 -> TextEncodingcodePageEncoding72,1946
buildEncoding :: CodingFailureMode -> Word32 -> CodePageArrays -> TextEncodingbuildEncoding83,2449
e WINDOWS_CCONV stdcallWINDOWS_CCONV37,989

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Encoding/CodePage/API.hs,1784
module GHC.IO.Encoding.CodePage.API (API6,187
type LPCSTR = Ptr Word8LPCSTR54,1033
data CPINFO = CPINFO {CPINFO64,1236
    maxCharSize :: UINT,maxCharSize65,1259
    defaultChar :: [BYTE], -- ^ Always of length mAX_DEFAULTCHARdefaultChar66,1284
    leadByte    :: [BYTE]  -- ^ Always of length mAX_LEADBYTESleadByte67,1349
    c_GetCPInfo :: UINT       -- ^ CodePagec_GetCPInfo94,2575
    c_MultiByteToWideChar :: UINT   -- ^ CodePagec_MultiByteToWideChar99,2759
    c_WideCharToMultiByte :: UINT   -- ^ CodePagec_WideCharToMultiByte108,3181
    c_IsDBCSLeadByteEx :: UINT    -- ^ CodePagec_IsDBCSLeadByteEx119,3714
utf16_native_encode' :: EncodeBufferutf16_native_encode'161,5390
utf16_native_encode :: CodeBuffer Char CWcharutf16_native_encode198,7187
utf16_native_decode' :: DecodeBufferutf16_native_decode'162,5427
utf16_native_decode :: CodeBuffer CWchar Charutf16_native_decode203,7372
saner :: CodeBuffer from tosaner171,5659
pokeArray' :: Storable a => String -> Int -> Ptr a -> [a] -> IO ()pokeArray'88,2232
newCP :: (Buffer from -> Buffer to -> IO (Buffer from, Buffer to))newCP137,4494
mkCodePageEncoding :: CodingFailureMode -> Word32 -> TextEncodingmkCodePageEncoding129,4205
mAX_LEADBYTES :: IntmAX_LEADBYTES60,1103
mAX_DEFAULTCHAR :: IntmAX_DEFAULTCHAR57,1059
debugIO :: String -> IO ()debugIO39,777
cwcharView :: Buffer Word8 -> Buffer CWcharcwcharView193,6780
cpRecode :: forall from to. Storable fromcpRecode380,19084
cpEncode :: Word32 -> Int -> EncodeBuffercpEncode269,11700
cpDecode :: Word32 -> Int -> DecodeBuffercpDecode208,7557
c_DEBUG_DUMP :: Boolc_DEBUG_DUMP36,734
byteView :: Buffer CWchar -> Buffer Word8byteView190,6592
bSearch :: StringbSearch336,16099
 WINDOWS_CCONV stdcallWINDOWS_CCONV46,905

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Encoding/CodePage/Table.hs,672
module GHC.IO.Encoding.CodePage.Table whereTable36,610
data ConvArray a = ConvArray Addr#ConvArray41,703
data CompactArray a b = CompactArray {CompactArray42,738
    encoderMax :: !a,encoderMax43,777
    encoderIndices :: !(ConvArray Int),encoderIndices44,799
    encoderValues :: !(ConvArray b)encoderValues45,839
data CodePageArrays = SingleByteCP {CodePageArrays48,880
data CodePageArrays = SingleByteCP {SingleByteCP48,880
    decoderArray :: !(ConvArray Char),decoderArray49,917
    encoderArray :: !(CompactArray Char Word8)encoderArray50,956
codePageMap :: [(Word32, CodePageArrays)]codePageMap55,1045
blockBitSize :: IntblockBitSize53,1008

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Encoding/Failure.hs,994
module GHC.IO.Encoding.Failure (Failure18,537
data CodingFailureModeCodingFailureMode39,1018
  = ErrorOnCodingFailureErrorOnCodingFailure40,1041
  | IgnoreCodingFailureIgnoreCodingFailure42,1133
  | TransliterateCodingFailureTransliterateCodingFailure45,1247
  | RoundtripFailureRoundtripFailure48,1363
unrepresentableChar :: CharunrepresentableChar106,4009
unescapeRoundtripCharacterSurrogate :: Char -> Maybe Word8unescapeRoundtripCharacterSurrogate140,5499
recoverEncode :: CodingFailureMode -> Buffer Char -> Buffer Word8recoverEncode162,6496
recoverDecode :: CodingFailureMode -> Buffer Word8 -> Buffer CharrecoverDecode146,5734
isSurrogate :: Char -> BoolisSurrogate124,4820
ioe_encodingError :: IO aioe_encodingError200,8250
ioe_decodingError :: IO aioe_decodingError195,8089
escapeToRoundtripCharacterSurrogate :: Word8 -> CharescapeToRoundtripCharacterSurrogate131,5079
codingFailureModeSuffix :: CodingFailureMode -> StringcodingFailureModeSuffix95,3495

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Encoding/Iconv.hs,1037
module GHC.IO.Encoding.Iconv (Iconv22,627
type IConv = CLong -- ToDo: (#type iconv_t)IConv72,1937
    hs_iconv_open :: CString -> CString -> IO IConvhs_iconv_open75,2026
    hs_iconv_close :: IConv -> IO CInths_iconv_close78,2124
    hs_iconv :: IConv -> Ptr CString -> Ptr CSize -> Ptr CString -> Ptr CSizehs_iconv81,2203
    c_localeEncoding :: IO CStringc_localeEncoding85,2349
newIConv :: String -> StringnewIConv126,3885
mkIconvEncoding :: CodingFailureMode -> String -> IO (Maybe TextEncoding)mkIconvEncoding109,3089
localeEncodingName :: StringlocaleEncodingName63,1535
iconv_trace :: String -> IO ()iconv_trace54,1291
iconvRecode :: IConv -> Buffer a -> Int -> Buffer b -> InticonvRecode151,4897
iconvEncoding :: String -> IO (Maybe TextEncoding)iconvEncoding100,2695
iconvEncode :: IConv -> EncodeBuffericonvEncode148,4784
iconvDecode :: IConv -> DecodeBuffericonvDecode145,4671
haskellChar :: StringhaskellChar87,2385
char_shift :: Intchar_shift96,2614
c_DEBUG_DUMP :: Boolc_DEBUG_DUMP51,1248

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Encoding/Latin1.hs,1116
module GHC.IO.Encoding.Latin1 (Latin126,808
single_byte_checked_encode :: Int -> EncodeBuffersingle_byte_checked_encode209,6778
mkLatin1_checked :: CodingFailureMode -> TextEncodingmkLatin1_checked81,2281
mkLatin1 :: CodingFailureMode -> TextEncodingmkLatin152,1337
mkAscii :: CodingFailureMode -> TextEncodingmkAscii104,3071
latin1_encode :: EncodeBufferlatin1_encode182,5854
latin1_decode :: DecodeBufferlatin1_decode137,4149
latin1_checked_encode :: EncodeBufferlatin1_checked_encode201,6552
latin1_checked_EF :: CodingFailureMode -> IO (TextEncoder ())latin1_checked_EF86,2554
latin1_checked :: TextEncodinglatin1_checked77,2174
latin1_EF :: CodingFailureMode -> IO (TextEncoder ())latin1_EF67,1872
latin1_DF :: CodingFailureMode -> IO (TextDecoder ())latin1_DF57,1570
latin1 :: TextEncodinglatin148,1254
ascii_encode :: EncodeBufferascii_encode205,6674
ascii_decode :: DecodeBufferascii_decode158,4948
ascii_EF :: CodingFailureMode -> IO (TextEncoder ())ascii_EF119,3592
ascii_DF :: CodingFailureMode -> IO (TextDecoder ())ascii_DF109,3293
ascii :: TextEncodingascii100,2991

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Encoding/Types.hs,1550
module GHC.IO.Encoding.Types (Types19,584
data BufferCodec from to state = BufferCodec {BufferCodec36,961
  encode :: CodeBuffer from to,encode37,1008
  recover :: Buffer from -> Buffer to -> IO (Buffer from, Buffer to),recover53,1875
  close  :: IO (),close72,2875
  getState :: IO state,getState77,3044
  setState :: state -> IO ()setState90,3692
type CodeBuffer from to = Buffer from -> Buffer to -> IO (CodingProgress, Buffer from, Buffer to)CodeBuffer95,3820
type DecodeBuffer = CodeBuffer Word8 CharDecodeBuffer96,3918
type EncodeBuffer = CodeBuffer Char Word8EncodeBuffer97,3960
type TextDecoder state = BufferCodec Word8 CharBufElem stateTextDecoder99,4003
type TextEncoder state = BufferCodec CharBufElem Word8 stateTextEncoder100,4064
data TextEncodingTextEncoding107,4399
        textEncodingName :: String,textEncodingName109,4460
        mkTextDecoder :: IO (TextDecoder dstate),mkTextDecoder112,4640
        mkTextEncoder :: IO (TextEncoder estate)mkTextEncoder115,4881
data CodingProgress = InputUnderflow  -- ^ Stopped because the input contains insufficient available elements,CodingProgress126,5282
data CodingProgress = InputUnderflow  -- ^ Stopped because the input contains insufficient available elements,InputUnderflow126,5282
                    | OutputUnderflow -- ^ Stopped because the output contains insufficient free elementsOutputUnderflow128,5497
                    | InvalidSequence -- ^ Stopped because there are sufficient free elements in the outputInvalidSequence129,5603

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Encoding/UTF16.hs,1660
module GHC.IO.Encoding.UTF16 (UTF1627,798
validate2       ::  Word16 -> Word16 -> Boolvalidate2355,12686
validate1    :: Word16 -> Boolvalidate1351,12574
utf16le_encode :: EncodeBufferutf16le_encode305,10684
utf16le_decode :: DecodeBufferutf16le_decode234,7543
utf16le_EF :: CodingFailureMode -> IO (TextEncoder ())utf16le_EF189,5723
utf16le_DF :: CodingFailureMode -> IO (TextDecoder ())utf16le_DF179,5418
utf16le :: TextEncodingutf16le170,5095
utf16be_encode :: EncodeBufferutf16be_encode268,9057
utf16be_decode :: DecodeBufferutf16be_decode200,6029
utf16be_EF :: CodingFailureMode -> IO (TextEncoder ())utf16be_EF160,4790
utf16be_DF :: CodingFailureMode -> IO (TextDecoder ())utf16be_DF150,4485
utf16be :: TextEncodingutf16be141,4162
utf16_native_encode :: EncodeBufferutf16_native_encode132,3958
utf16_native_decode :: DecodeBufferutf16_native_decode129,3884
utf16_encode :: IORef Bool -> EncodeBufferutf16_encode86,2375
utf16_decode :: IORef (Maybe DecodeBuffer) -> DecodeBufferutf16_decode100,2907
utf16_EF :: CodingFailureMode -> IO (TextEncoder Bool)utf16_EF75,2022
utf16_DF :: CodingFailureMode -> IO (TextDecoder (Maybe DecodeBuffer))utf16_DF64,1651
utf16  :: TextEncodingutf1655,1344
mkUTF16le :: CodingFailureMode -> TextEncodingmkUTF16le174,5181
mkUTF16be :: CodingFailureMode -> TextEncodingmkUTF16be145,4248
mkUTF16 :: CodingFailureMode -> TextEncodingmkUTF1659,1425
chr2 :: Word16 -> Word16 -> Charchr2342,12308
bomB, bomL, bom1, bom2 :: Word8bomL124,3779
bomB, bomL, bom1, bom2 :: Word8bomB124,3779
bomB, bomL, bom1, bom2 :: Word8bom2124,3779
bomB, bomL, bom1, bom2 :: Word8bom1124,3779

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Encoding/UTF32.hs,1663
module GHC.IO.Encoding.UTF32 (UTF3227,798
validate    :: Char -> Boolvalidate332,10902
utf32le_encode :: EncodeBufferutf32le_encode284,9333
utf32le_decode :: DecodeBufferutf32le_decode232,7331
utf32le_EF :: CodingFailureMode -> IO (TextEncoder ())utf32le_EF193,5952
utf32le_DF :: CodingFailureMode -> IO (TextDecoder ())utf32le_DF183,5647
utf32le :: TextEncodingutf32le174,5324
utf32be_encode :: EncodeBufferutf32be_encode260,8404
utf32be_decode :: DecodeBufferutf32be_decode204,6258
utf32be_EF :: CodingFailureMode -> IO (TextEncoder ())utf32be_EF163,5018
utf32be_DF :: CodingFailureMode -> IO (TextDecoder ())utf32be_DF153,4713
utf32be :: TextEncodingutf32be144,4390
utf32_native_encode :: EncodeBufferutf32_native_encode138,4211
utf32_native_decode :: DecodeBufferutf32_native_decode135,4137
utf32_encode :: IORef Bool -> EncodeBufferutf32_encode86,2374
utf32_decode :: IORef (Maybe DecodeBuffer) -> DecodeBufferutf32_decode102,3009
utf32_EF :: CodingFailureMode -> IO (TextEncoder Bool)utf32_EF75,2021
utf32_DF :: CodingFailureMode -> IO (TextDecoder (Maybe DecodeBuffer))utf32_DF64,1650
utf32  :: TextEncodingutf3255,1346
ord4 :: Char -> (Word8,Word8,Word8,Word8)ord4322,10671
mkUTF32le :: CodingFailureMode -> TextEncodingmkUTF32le178,5410
mkUTF32be :: CodingFailureMode -> TextEncodingmkUTF32be148,4476
mkUTF32 :: CodingFailureMode -> TextEncodingmkUTF3259,1427
chr4 :: Word8 -> Word8 -> Word8 -> Word8 -> Charchr4308,10262
bom0, bom1, bom2, bom3 :: Word8bom3128,4014
bom0, bom1, bom2, bom3 :: Word8bom2128,4014
bom0, bom1, bom2, bom3 :: Word8bom1128,4014
bom0, bom1, bom2, bom3 :: Word8bom0128,4014

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Encoding/UTF8.hs,1475
module GHC.IO.Encoding.UTF8 (UTF827,795
validate4             :: Word8 -> Word8 -> Word8 -> Word8 -> Boolvalidate4344,12663
validate3          :: Word8 -> Word8 -> Word8 -> Boolvalidate3324,11960
utf8_encode :: EncodeBufferutf8_encode214,7897
utf8_decode :: DecodeBufferutf8_decode146,4475
utf8_bom_encode :: IORef Bool -> EncodeBufferutf8_bom_encode126,3839
utf8_bom_decode :: IORef Bool -> DecodeBufferutf8_bom_decode103,2955
utf8_bom_EF :: CodingFailureMode -> IO (TextEncoder Bool)utf8_bom_EF92,2612
utf8_bom_DF :: CodingFailureMode -> IO (TextDecoder Bool)utf8_bom_DF81,2269
utf8_bom :: TextEncodingutf8_bom73,1957
utf8_EF :: CodingFailureMode -> IO (TextEncoder ())utf8_EF63,1661
utf8_DF :: CodingFailureMode -> IO (TextDecoder ())utf8_DF53,1365
utf8 :: TextEncodingutf843,1071
ord4   :: Char -> (Word8,Word8,Word8,Word8)ord4274,10344
ord3   :: Char -> (Word8,Word8,Word8)ord3266,10068
ord2   :: Char -> (Word8,Word8)ord2259,9861
mkUTF8_bom :: CodingFailureMode -> TextEncodingmkUTF8_bom76,2026
mkUTF8 :: CodingFailureMode -> TextEncodingmkUTF847,1148
chr4             :: Word8 -> Word8 -> Word8 -> Word8 -> Charchr4303,11275
chr3          :: Word8 -> Word8 -> Word8 -> Charchr3292,10922
chr2       :: Word8 -> Word8 -> Charchr2283,10675
bom0, bom1, bom2 :: Word8bom2141,4412
bom0, bom1, bom2 :: Word8bom1141,4412
bom0, bom1, bom2 :: Word8bom0141,4412
between :: Word8                -- ^ byte to checkbetween317,11738

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Exception.hs,3921
module GHC.IO.Exception (Exception21,669
data BlockedIndefinitelyOnMVar = BlockedIndefinitelyOnMVarBlockedIndefinitelyOnMVar68,1853
data BlockedIndefinitelyOnSTM = BlockedIndefinitelyOnSTMBlockedIndefinitelyOnSTM84,2428
data Deadlock = DeadlockDeadlock100,2980
data AllocationLimitExceeded = AllocationLimitExceededAllocationLimitExceeded116,3322
newtype CompactionFailed = CompactionFailed StringCompactionFailed138,4002
newtype AssertionFailed = AssertionFailed StringAssertionFailed163,4732
data SomeAsyncException = forall e . Exception e => SomeAsyncException eSomeAsyncException177,5022
data AsyncExceptionAsyncException198,5625
  = StackOverflowStackOverflow199,5645
  | HeapOverflowHeapOverflow205,5924
  | ThreadKilledThreadKilled220,6680
  | UserInterruptUserInterrupt225,6896
data ArrayExceptionArrayException239,7409
  = IndexOutOfBounds    StringIndexOutOfBounds240,7429
  | UndefinedElement    StringUndefinedElement243,7550
data FixIOException = FixIOExceptionFixIOException280,8798
data ExitCodeExitCode296,9272
  = ExitSuccess -- ^ indicates successful termination;ExitSuccess297,9286
  | ExitFailure IntExitFailure298,9341
type IOError = IOExceptionIOError324,10313
data IOExceptionIOException330,10532
 = IOError {IOError331,10549
     ioe_handle   :: Maybe Handle,   -- the handle used by the action flaggingioe_handle332,10562
     ioe_type     :: IOErrorType,    -- what it was.ioe_type334,10692
     ioe_location :: String,         -- location.ioe_location335,10745
     ioe_description :: String,      -- error type specific information.ioe_description336,10795
     ioe_errno    :: Maybe CInt,     -- errno leading to this error, if any.ioe_errno337,10868
     ioe_filename :: Maybe FilePath  -- filename the error is related to.ioe_filename338,10945
data IOErrorTypeIOErrorType350,11351
  = AlreadyExistsAlreadyExists352,11387
  | NoSuchThingNoSuchThing353,11405
  | ResourceBusyResourceBusy354,11421
  | ResourceExhaustedResourceExhausted355,11438
  | EOFEOF356,11460
  | IllegalOperationIllegalOperation357,11468
  | PermissionDeniedPermissionDenied358,11489
  | UserErrorUserError359,11510
  | UnsatisfiedConstraintsUnsatisfiedConstraints361,11539
  | SystemErrorSystemError362,11566
  | ProtocolErrorProtocolError363,11582
  | OtherErrorOtherError364,11600
  | InvalidArgumentInvalidArgument365,11615
  | InappropriateTypeInappropriateType366,11635
  | HardwareFaultHardwareFault367,11657
  | UnsupportedOperationUnsupportedOperation368,11675
  | TimeExpiredTimeExpired369,11700
  | ResourceVanishedResourceVanished370,11716
  | InterruptedInterrupted371,11737
userError       :: String  -> IOErroruserError410,13068
untangle :: Addr# -> String -> Stringuntangle457,14661
unsupportedOperation :: IOErrorunsupportedOperation446,14372
stackOverflow, heapOverflow :: SomeExceptionstackOverflow254,7848
ioException     :: IOException -> IO aioException308,9728
ioError         :: IOError -> IO aioError312,9841
stackOverflow, heapOverflow :: SomeExceptionheapOverflow254,7848
cannotCompactPinned :: SomeException -- for the RTScannotCompactPinned152,4405
cannotCompactMutable :: SomeException -- for the RTScannotCompactMutable156,4545
cannotCompactFunction :: SomeException -- for the RTScannotCompactFunction148,4266
blockedIndefinitelyOnSTM :: SomeException -- for the RTSblockedIndefinitelyOnSTM93,2723
blockedIndefinitelyOnMVar :: SomeException -- for the RTSblockedIndefinitelyOnMVar77,2152
asyncExceptionToException :: Exception e => e -> SomeExceptionasyncExceptionToException187,5289
asyncExceptionFromException :: Exception e => SomeException -> Maybe easyncExceptionFromException191,5433
assertError :: (?callStack :: CallStack) => Bool -> a -> aassertError435,13940
allocationLimitExceeded :: SomeException -- for the RTSallocationLimitExceeded128,3688

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/FD.hs,4366
module GHC.IO.FD (FD24,685
data FD = FD {FD81,2145
  fdFD :: {-# UNPACK #-} !CInt,fdFD82,2160
  fdIsSocket_ :: {-# UNPACK #-} !IntfdIsSocket_86,2336
  setmode :: CInt -> Bool -> IO CIntsetmode293,9106
   c_closesocket :: CInt -> IO CIntc_closesocket343,10494
  fdReady :: CInt -> CBool -> Int64 -> CBool -> IO CIntfdReady413,12445
  unsafe_fdReady :: CInt -> CBool -> Int64 -> CBool -> IO CIntunsafe_fdReady576,19210
   c_safe_recv :: CInt -> Ptr Word8 -> CInt -> CInt{-flags-} -> IO CIntc_safe_recv659,23260
   c_safe_send :: CInt -> Ptr Word8 -> CInt -> CInt{-flags-} -> IO CIntc_safe_send662,23374
foreign import ccall unsafe "rtsSupportsBoundThreads" threaded :: Boolthreaded666,23455
  lockFile :: CInt -> Word64 -> Word64 -> CInt -> IO CIntlockFile691,24245
  unlockFile :: CInt -> IO CIntunlockFile694,24345
  c_getUniqueFileInfo :: CInt -> Ptr Word64 -> Ptr Word64 -> IO ()c_getUniqueFileInfo698,24458
std_flags, output_flags, read_flags, write_flags, rw_flags,write_flags210,6219
writeRawBufferPtrNoBlock :: String -> FD -> Ptr Word8 -> Int -> CSize -> IO CIntwriteRawBufferPtrNoBlock557,18319
writeRawBufferPtr :: String -> FD -> Ptr Word8 -> Int -> CSize -> IO CIntwriteRawBufferPtr542,17537
writeBuf' :: FD -> Buffer Word8 -> IO (Buffer Word8)writeBuf'152,4350
throwErrnoIfMinus1RetryOnBlock  :: String -> IO CSsize -> IO CSsize -> IO CSsizethrowErrnoIfMinus1RetryOnBlock672,23648
tell :: FD -> IO Integertell362,10991
stdin, stdout, stderr :: FDstdout311,9600
stdin, stdout, stderr :: FDstdin311,9600
stdin, stdout, stderr :: FDstderr311,9600
std_flags, output_flags, read_flags, write_flags, rw_flags,std_flags210,6219
stdFD :: CInt -> FDstdFD299,9262
setSize :: FD -> Integer -> IO ()setSize371,11188
setRaw :: FD -> Bool -> IO ()setRaw433,13012
setNonBlockingMode :: FD -> Bool -> IO FDsetNonBlockingMode391,11802
setEcho :: FD -> Bool -> IO ()setEcho427,12840
seek :: FD -> SeekMode -> Integer -> IO ()seek351,10650
std_flags, output_flags, read_flags, write_flags, rw_flags,rw_flags210,6219
release :: FD -> IO ()release337,10314
ready :: FD -> Bool -> Int -> IO Boolready400,12009
std_flags, output_flags, read_flags, write_flags, rw_flags,read_flags210,6219
readRawBufferPtrNoBlock :: String -> FD -> Ptr Word8 -> Int -> CSize -> IO IntreadRawBufferPtrNoBlock526,16758
readRawBufferPtr :: String -> FD -> Ptr Word8 -> Int -> CSize -> IO IntreadRawBufferPtr509,15887
readBuf' :: FD -> Buffer Word8 -> IO (Int, Buffer Word8)readBuf'143,4053
std_flags, output_flags, read_flags, write_flags, rw_flags,output_flags210,6219
openFileopenFile163,4752
    append_flags, nonblock_flags :: CIntnonblock_flags211,6279
mkFD :: CIntmkFD225,6854
isTerminal :: FD -> IO BoolisTerminal418,12608
isSeekable :: FD -> IO BoolisSeekable346,10538
isNonBlocking :: FD -> BoolisNonBlocking572,19100
getUniqueFileInfo :: CInt -> CDev -> CIno -> IO (Word64, Word64)getUniqueFileInfo280,8677
getSize :: FD -> IO IntegergetSize368,11125
getEcho :: FD -> IO BoolgetEcho430,12932
fdWriteNonBlocking :: FD -> Ptr Word8 -> Int -> IO IntfdWriteNonBlocking464,14064
fdWrite :: FD -> Ptr Word8 -> Int -> IO ()fdWrite454,13728
fdReadNonBlocking :: FD -> Ptr Word8 -> Int -> IO (Maybe Int)fdReadNonBlocking445,13428
fdRead :: FD -> Ptr Word8 -> Int -> IO IntfdRead439,13217
fdIsSocket :: FD -> BoolfdIsSocket96,2645
dup2 :: FD -> FD -> IO FDdup2384,11550
dup :: FD -> IO FDdup379,11426
devType :: FD -> IO IODeviceTypedevType376,11336
dEFAULT_FD_BUFFER_SIZE :: IntdEFAULT_FD_BUFFER_SIZE132,3672
close :: FD -> IO ()close319,9796
clampWriteSize, clampReadSize :: Int -> IntclampWriteSize74,1921
clampWriteSize, clampReadSize :: Int -> IntclampReadSize74,1921
c_DEBUG_DUMP :: Boolc_DEBUG_DUMP67,1621
blockingWriteRawBufferPtr :: String -> FD -> Ptr Word8-> Int -> CSize -> IO CIntblockingWriteRawBufferPtr635,21996
blockingReadRawBufferPtr :: String -> FD -> Ptr Word8 -> Int -> CSize -> IO CIntblockingReadRawBufferPtr622,21304
asyncWriteRawBufferPtr :: String -> FD -> Ptr Word8 -> Int -> CSize -> IO CIntasyncWriteRawBufferPtr609,20669
asyncReadRawBufferPtr :: String -> FD -> Ptr Word8 -> Int -> CSize -> IO CIntasyncReadRawBufferPtr598,20104
    append_flags, nonblock_flags :: CIntappend_flags211,6279
e WINDOWS_CCONV stdcallWINDOWS_CCONV59,1481

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Handle.hs,2353
module GHC.IO.Handle (Handle23,647
data HandlePosn = HandlePosn Handle HandlePositionHandlePosn330,11642
type HandlePosition = IntegerHandlePosition345,12198
showHandle' :: String -> Bool -> Handle -> IO StringshowHandle'728,25827
isEOF :: IO BoolisEOF174,5682
ioe_dupHandlesNotCompatible :: Handle -> IO aioe_dupHandlesNotCompatible695,24694
hTell :: Handle -> IO IntegerhTell432,15350
hShow :: Handle -> IO StringhShow724,25684
hSetPosn :: HandlePosn -> IO ()hSetPosn364,12796
hSetNewlineMode :: Handle -> NewlineMode -> IO ()hSetNewlineMode605,21272
hSetFileSize :: Handle -> Integer -> IO ()hSetFileSize131,4116
hSetEncoding :: Handle -> TextEncoding -> IO ()hSetEncoding264,8972
hSetEcho :: Handle -> Bool -> IO ()hSetEcho532,18777
hSetBuffering :: Handle -> BufferMode -> IO ()hSetBuffering215,7087
hSetBinaryMode :: Handle -> Bool -> IO ()hSetBinaryMode574,20113
hSeek :: Handle -> SeekMode -> Integer -> IO ()hSeek401,14280
hLookAhead :: Handle -> IO CharhLookAhead188,6093
hIsWritable :: Handle -> IO BoolhIsWritable496,17419
hIsTerminalDevice :: Handle -> IO BoolhIsTerminalDevice558,19521
hIsSeekable :: Handle -> IO BoolhIsSeekable518,18263
hIsReadable :: Handle -> IO BoolhIsReadable487,17071
hIsOpen :: Handle -> IO BoolhIsOpen462,16378
hIsEOF :: Handle -> IO BoolhIsEOF152,4994
hIsClosed :: Handle -> IO BoolhIsClosed470,16631
hGetPosn :: Handle -> IO HandlePosnhGetPosn350,12356
hGetEncoding :: Handle -> IO (Maybe TextEncoding)hGetEncoding286,9962
hGetEcho :: Handle -> IO BoolhGetEcho545,19163
hGetBuffering :: Handle -> IO BufferModehGetBuffering508,17856
hFlushAll :: Handle -> IO ()hFlushAll324,11443
hFlush :: Handle -> IO ()hFlush304,10639
hFileSize :: Handle -> IO IntegerhFileSize115,3464
hDuplicateTo :: Handle -> Handle -> IO ()hDuplicateTo676,23909
hDuplicate :: Handle -> IO HandlehDuplicate620,21878
hClose_rethrow :: SomeException -> Handle -> IO ()hClose_rethrow100,2915
hClose_maybethrow :: Maybe SomeException -> Handle -> IO ()hClose_maybethrow96,2763
hClose' :: Handle -> MVar Handle__ -> IO (Maybe SomeException)hClose'106,3096
hClose :: Handle -> IO ()hClose88,2527
dupHandle_ :: (IODevice dev, BufferedIO dev, Typeable dev) => devdupHandle_650,23001
dupHandleTo :: FilePathdupHandleTo700,24898
dupHandle :: FilePathdupHandle633,22409

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Handle/FD.hs,982
module GHC.IO.Handle.FD ( FD18,538
  setmode :: CInt -> Bool -> IO CIntsetmode103,3316
stdout :: Handlestdout60,1913
stdin :: Handlestdin49,1521
stderr :: Handlestderr71,2311
stdHandleFinalizer :: FilePath -> MVar Handle__ -> IO ()stdHandleFinalizer82,2673
setBinaryMode :: FD.FD -> IO ()setBinaryMode93,3052
openFileBlocking :: FilePath -> IOMode -> IO HandleopenFileBlocking155,5526
openFile' :: String -> IOMode -> Bool -> Bool -> IO HandleopenFile'176,6428
openFile :: FilePath -> IOMode -> IO HandleopenFile143,5044
openBinaryFile :: FilePath -> IOMode -> IO HandleopenBinaryFile170,6242
mkHandleFromFDmkHandleFromFD198,7352
handleToFd :: Handle -> IO FD.FDhandleToFd282,10516
fdToHandle' :: CIntfdToHandle'238,8560
fdToHandle :: Posix.FD -> IO HandlefdToHandle265,9679
dEFAULT_OPEN_IN_BINARY_MODE :: BooldEFAULT_OPEN_IN_BINARY_MODE299,11073
addFilePathToIOError :: String -> FilePath -> IOException -> IOExceptionaddFilePathToIOError109,3470

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Handle/Internals.hs,4732
module GHC.IO.Handle.Internals (Internals28,861
type HandleFinalizer = FilePath -> MVar Handle__ -> IO ()HandleFinalizer89,2400
writeCharBuffer :: Handle__ -> CharBuffer -> IO ()writeCharBuffer511,19399
withHandle__' :: String -> Handle -> MVar Handle__ -> (Handle__ -> IO Handle__)withHandle__'153,4839
withHandle_' :: String -> Handle -> MVar Handle__ -> (Handle__ -> IO a) -> IO awithHandle_'142,4352
withHandle_ :: String -> Handle -> (Handle__ -> IO a) -> IO awithHandle_138,4149
withHandle' :: String -> Handle -> MVar Handle__withHandle'128,3895
withHandle :: String -> Handle -> (Handle__ -> IO (Handle__,a)) -> IO awithHandle124,3686
withAllHandles__ :: String -> Handle -> (Handle__ -> IO Handle__) -> IO ()withAllHandles__147,4578
wantWritableHandle'wantWritableHandle'232,7956
wantWritableHandle :: String -> Handle -> (Handle__ -> IO a) -> IO awantWritableHandle224,7590
wantSeekableHandle :: String -> Handle -> (Handle__ -> IO a) -> IO awantSeekableHandle300,10728
wantReadableHandle_ :: String -> Handle -> (Handle__ -> IO a) -> IO awantReadableHandle_263,9157
wantReadableHandle'wantReadableHandle'271,9530
wantReadableHandle :: String -> Handle -> (Handle__ -> IO (Handle__,a)) -> IO awantReadableHandle260,9002
trymaybe :: IO () -> IO (Maybe SomeException)trymaybe750,28526
streamEncode :: BufferCodec from to statestreamEncode372,13656
recoveringEncode :: BufferCodec from to state -> CodeBuffer from torecoveringEncode378,14015
readTextDeviceNonBlocking :: Handle__ -> CharBuffer -> IO CharBufferreadTextDeviceNonBlocking920,35238
readTextDevice' :: Handle__ -> Buffer Word8 -> CharBuffer -> IO CharBufferreadTextDevice'872,33017
readTextDevice :: Handle__ -> CharBuffer -> IO CharBufferreadTextDevice831,31388
openTextEncodingopenTextEncoding704,26601
noCharBuffer :: CharBuffernoCharBuffer782,29782
noByteBuffer :: Buffer Word8noByteBuffer786,29900
newFileHandle :: FilePath -> Maybe HandleFinalizer -> Handle__ -> IO HandlenewFileHandle91,2459
mkUnBuffer :: BufferState -> IO (IORef CharBuffer, BufferMode)mkUnBuffer452,17123
mkHandle :: (IODevice dev, BufferedIO dev, Typeable dev) => devmkHandle615,22975
mkFileHandle :: (IODevice dev, BufferedIO dev, Typeable dev)mkFileHandle655,24493
mkDuplexHandle :: (IODevice dev, BufferedIO dev, Typeable dev) => devmkDuplexHandle676,25548
ioe_closedHandle, ioe_semiclosedHandle, ioe_EOF,ioe_semiclosedHandle320,11563
  ioe_notReadable, ioe_notWritable, ioe_cannotFlushNotSeekable,ioe_notWritable321,11612
  ioe_notSeekable :: IO aioe_notSeekable322,11676
  ioe_notReadable, ioe_notWritable, ioe_cannotFlushNotSeekable,ioe_notReadable321,11612
ioe_finalizedHandle :: FilePath -> Handle__ioe_finalizedHandle346,12566
ioe_closedHandle, ioe_semiclosedHandle, ioe_EOF,ioe_closedHandle320,11563
  ioe_notReadable, ioe_notWritable, ioe_cannotFlushNotSeekable,ioe_cannotFlushNotSeekable321,11612
ioe_bufsiz :: Int -> IO aioe_bufsiz351,12731
ioe_closedHandle, ioe_semiclosedHandle, ioe_EOF,ioe_EOF320,11563
ioModeToHandleType :: IOMode -> HandleTypeioModeToHandleType694,26238
initBufferState :: HandleType -> BufferStateinitBufferState700,26474
handleFinalizer :: FilePath -> MVar Handle__ -> IO ()handleFinalizer424,16256
hLookAhead_ :: Handle__ -> IO CharhLookAhead_792,30087
hClose_help :: Handle__ -> IO (Handle__, Maybe SomeException)hClose_help738,27971
hClose_handle_ :: Handle__ -> IO (Handle__, Maybe SomeException)hClose_handle_753,28650
getCharBuffer :: IODevice dev => dev -> BufferStategetCharBuffer439,16736
flushWriteBuffer :: Handle__ -> IO ()flushWriteBuffer496,18837
flushCharReadBuffer :: Handle__ -> IO ()flushCharReadBuffer549,20707
flushCharBuffer :: Handle__ -> IO ()flushCharBuffer476,17966
flushByteWriteBuffer :: Handle__ -> IO ()flushByteWriteBuffer501,18999
flushByteReadBuffer :: Handle__ -> IO ()flushByteReadBuffer596,22396
flushBuffer :: Handle__ -> IO ()flushBuffer465,17648
do_operation :: String -> Handle -> (Handle__ -> IO a) -> MVar Handle__ -> IO ado_operation162,5075
decodeByteBuf :: Handle__ -> CharBuffer -> IO CharBufferdecodeByteBuf932,35673
debugIO :: String -> IO ()debugIO807,30530
dEFAULT_CHAR_BUFFER_SIZE :: IntdEFAULT_CHAR_BUFFER_SIZE436,16650
closeTextCodecs :: Handle__ -> IO ()closeTextCodecs724,27318
checkWritableHandle :: (Handle__ -> IO a) -> Handle__ -> IO acheckWritableHandle238,8144
checkSeekableHandle :: (Handle__ -> IO a) -> Handle__ -> IO acheckSeekableHandle307,11062
checkReadableHandle :: (Handle__ -> IO a) -> Handle__ -> IO acheckReadableHandle277,9717
c_DEBUG_DUMP :: Boolc_DEBUG_DUMP83,2252
augmentIOError :: IOException -> String -> Handle -> IOExceptionaugmentIOError212,7077

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Handle/Lock.hs,192
module GHC.IO.Handle.Lock (Lock7,147
hUnlock :: Handle -> IO ()hUnlock64,1921
hTryLock :: Handle -> LockMode -> IO BoolhTryLock58,1751
hLock :: Handle -> LockMode -> IO ()hLock52,1602

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Handle/Lock/Common.hs,315
module GHC.IO.Handle.Lock.CommonCommon4,92
data FileLockingNotSupported = FileLockingNotSupportedFileLockingNotSupported14,312
data LockMode = SharedLock | ExclusiveLockLockMode21,526
data LockMode = SharedLock | ExclusiveLockSharedLock21,526
data LockMode = SharedLock | ExclusiveLockExclusiveLock21,526

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Handle/Lock/Flock.hsc,228
module GHC.IO.Handle.Lock.Flock whereFlock8,184
  c_flock :: CInt -> CInt -> IO CIntc_flock51,1372
unlockImpl :: Handle -> IO ()unlockImpl45,1188
lockImpl :: Handle -> String -> LockMode -> Bool -> IO BoollockImpl29,600

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Handle/Lock/LinuxOFD.hsc,629
module GHC.IO.Handle.Lock.LinuxOFD whereLinuxOFD7,178
  c_fcntl :: CInt -> CInt -> Ptr FLock -> IO CIntc_fcntl44,1168
data FLock  = FLock { l_type   :: CShortFLock46,1219
data FLock  = FLock { l_type   :: CShortl_type46,1219
                    , l_whence :: CShortl_whence47,1260
                    , l_start  :: COffl_start48,1301
                    , l_len    :: COffl_len49,1340
                    , l_pid    :: CPidl_pid50,1379
unlockImpl :: Handle -> IO ()unlockImpl94,3065
lockImpl :: Handle -> String -> LockMode -> Bool -> IO BoollockImpl70,2161
fine _FILE_OFFSET_BITS 64_FILE_OFFSET_BITS16,413

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Handle/Lock/NoOp.hs,171
module GHC.IO.Handle.Lock.NoOp whereNoOp3,36
unlockImpl :: Handle -> IO ()unlockImpl15,350
lockImpl :: Handle -> String -> LockMode -> Bool -> IO BoollockImpl11,211

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Handle/Lock/Windows.hsc,488
module GHC.IO.Handle.Lock.Windows whereWindows8,178
  c_get_osfhandle :: CInt -> IO HANDLEc_get_osfhandle79,2573
  c_LockFileEx :: HANDLE -> DWORD -> DWORD -> DWORD -> DWORD -> Ptr () -> IO BOOLc_LockFileEx83,2743
  c_UnlockFileEx :: HANDLE -> DWORD -> DWORD -> DWORD -> Ptr () -> IO BOOLc_UnlockFileEx87,2958
unlockImpl :: Handle -> IO ()unlockImpl65,2032
lockImpl :: Handle -> String -> LockMode -> Bool -> IO BoollockImpl40,857
e WINDOWS_CCONV stdcallWINDOWS_CCONV17,388

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Handle/Text.hs,3098
module GHC.IO.Handle.Text (Text27,741
   memcpy :: Ptr a -> Ptr a -> CSize -> IO (Ptr ())memcpy1016,39137
writeChunkNonBlocking :: Handle__ -> Ptr Word8 -> Int -> IO IntwriteChunkNonBlocking787,30044
writeChunk :: Handle__ -> Ptr Word8 -> Int -> IO ()writeChunk782,29852
writeBlocks :: Handle -> Bool -> Bool -> Newline -> Buffer CharBufElem -> String -> IO ()writeBlocks582,21200
unpack_nl :: RawCharBuffer -> Int -> Int -> [Char] -> IO ([Char],Int)unpack_nl292,10442
unpack :: RawCharBuffer -> Int -> Int -> [Char] -> IO [Char]unpack262,9181
maybeFillReadBuffer :: Handle__ -> CharBuffer -> IO (Maybe CharBuffer)maybeFillReadBuffer247,8752
lazyReadBuffered :: Handle -> Handle__ -> IO (Handle__, [Char])lazyReadBuffered401,14597
lazyRead :: Handle -> IO StringlazyRead387,14011
illegalBufferSize :: Handle -> String -> Int -> IO aillegalBufferSize1021,39287
haFD :: Handle__ -> Maybe FDhaFD915,35284
hWaitForInput :: Handle -> Int -> IO BoolhWaitForInput91,2815
hPutcBuffered :: Handle__ -> Char -> IO ()hPutcBuffered475,17410
hPutStrLn :: Handle -> String -> IO ()hPutStrLn534,19429
hPutStr' :: Handle -> String -> Bool -> IO ()hPutStr'541,19709
hPutStr :: Handle -> String -> IO ()hPutStr530,19286
hPutChars :: Handle -> [Char] -> IO ()hPutChars558,20328
hPutChar :: Handle -> Char -> IO ()hPutChar469,17239
hPutBufNonBlockinghPutBufNonBlocking704,26061
hPutBuf':: Handle                       -- handle to write tohPutBuf'711,26417
hPutBuf :: Handle                       -- handle to write tohPutBuf697,25752
hGetLineBufferedLoop :: Handle__hGetLineBufferedLoop198,6707
hGetLineBuffered :: Handle__ -> IO StringhGetLineBuffered193,6551
hGetLine :: Handle -> IO StringhGetLine188,6422
hGetContents :: Handle -> IO StringhGetContents377,13605
hGetChar :: Handle -> IO CharhGetChar131,4423
hGetBufSome :: Handle -> Ptr a -> Int -> IO InthGetBufSome892,34070
hGetBufNonBlocking :: Handle -> Ptr a -> Int -> IO InthGetBufNonBlocking937,36226
hGetBuf :: Handle -> Ptr a -> Int -> IO InthGetBuf810,31007
getSpareBuffer :: Handle__ -> IO (BufferMode, CharBuffer)getSpareBuffer562,20467
getSomeCharacters :: Handle__ -> CharBuffer -> IO CharBuffergetSomeCharacters430,15846
copyToRawBuffer :: RawBuffer e -> Int -> Ptr e -> Int -> IO ()copyToRawBuffer1003,38676
copyFromRawBuffer :: Ptr e -> RawBuffer e -> Int -> Int -> IO ()copyFromRawBuffer1009,38886
commitBuffer' :: RawCharBuffer -> Int -> Int -> Bool -> Bool -> Handle__commitBuffer'651,23955
commitBuffercommitBuffer622,22725
bufWrite :: Handle__-> Ptr Word8 -> Int -> Bool -> IO IntbufWrite734,27375
bufReadNonEmpty :: Handle__ -> Buffer Word8 -> Ptr Word8 -> Int -> Int -> IO IntbufReadNonEmpty827,31668
bufReadNBNonEmpty :: Handle__ -> Buffer Word8 -> Ptr Word8 -> Int -> Int -> IO IntbufReadNBNonEmpty976,37746
bufReadNBEmpty :: Handle__ -> Buffer Word8 -> Ptr Word8 -> Int -> Int -> IO IntbufReadNBEmpty950,36785
bufReadEmpty :: Handle__ -> Buffer Word8 -> Ptr Word8 -> Int -> Int -> IO IntbufReadEmpty852,32491
#define CHARBUF_UTF32CHARBUF_UTF32258,9081

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Handle/Types.hs,2834
module GHC.IO.Handle.Types (Types23,662
data HandleHandle98,3370
  = FileHandle                          -- A normal handle to a fileFileHandle99,3382
  | DuplexHandle                        -- A handle to a read/write streamDuplexHandle104,3603
data Handle__Handle__121,4290
      haDevice      :: !dev,haDevice124,4404
      haType        :: HandleType,           -- type (read/write/append etc.)haType125,4433
      haByteBuffer  :: !(IORef (Buffer Word8)), -- See [note Buffering Implementation]haByteBuffer126,4511
      haBufferMode  :: BufferMode,haBufferMode127,4598
      haLastDecode  :: !(IORef (dec_state, Buffer Word8)),haLastDecode128,4633
      haCharBuffer  :: !(IORef (Buffer CharBufElem)), -- See [note Buffering Implementation]haCharBuffer129,4692
      haBuffers     :: !(IORef (BufferList CharBufElem)),  -- spare buffershaBuffers130,4785
      haEncoder     :: Maybe (TextEncoder enc_state),haEncoder131,4861
      haDecoder     :: Maybe (TextDecoder dec_state),haDecoder132,4915
      haCodec       :: Maybe TextEncoding,haCodec133,4969
      haInputNL     :: Newline,haInputNL134,5012
      haOutputNL    :: Newline,haOutputNL135,5044
      haOtherSide   :: Maybe (MVar Handle__) -- ptr to the write side of ahaOtherSide136,5076
data BufferList eBufferList143,5397
  = BufferListNilBufferListNil144,5415
  | BufferListCons (RawBuffer e) (BufferList e)BufferListCons145,5433
data HandleTypeHandleType150,5554
 = ClosedHandleClosedHandle151,5570
 | SemiClosedHandleSemiClosedHandle152,5586
 | ReadHandleReadHandle153,5606
 | WriteHandleWriteHandle154,5620
 | AppendHandleAppendHandle155,5635
 | ReadWriteHandleReadWriteHandle156,5651
data BufferModeBufferMode242,9240
 = NoBuffering  -- ^ buffering is disabled if possible.NoBuffering243,9256
 | LineBufferingLineBuffering244,9312
 | BlockBuffering (Maybe Int)BlockBuffering246,9396
data Newline = LF    -- ^ @\'\\n\'@Newline354,13545
data Newline = LF    -- ^ @\'\\n\'@LF354,13545
             | CRLF  -- ^ @\'\\r\\n\'@CRLF355,13581
data NewlineModeNewlineMode367,14166
  = NewlineMode { inputNL :: Newline,inputNL368,14183
                  outputNL :: NewlineoutputNL370,14286
universalNewlineMode :: NewlineModeuniversalNewlineMode396,15274
showHandle :: FilePath -> String -> StringshowHandle439,16829
noNewlineTranslation :: NewlineModenoNewlineTranslation413,15922
nativeNewlineMode    :: NewlineModenativeNewlineMode405,15637
nativeNewline :: NewlinenativeNewline381,14739
isWritableHandleType :: HandleType -> BoolisWritableHandleType163,5857
isReadableHandleType :: HandleType -> BoolisReadableHandleType158,5671
isReadWriteHandleType :: HandleType -> BoolisReadWriteHandleType169,6078
checkHandleInvariants :: Handle__ -> IO ()checkHandleInvariants181,6599

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/IOMode.hs,490
module GHC.IO.IOMode (IOMode(..)) whereIOMode19,523
data IOMode      =  ReadMode | WriteMode | AppendMode | ReadWriteModeIOMode28,674
data IOMode      =  ReadMode | WriteMode | AppendMode | ReadWriteModeReadMode28,674
data IOMode      =  ReadMode | WriteMode | AppendMode | ReadWriteModeWriteMode28,674
data IOMode      =  ReadMode | WriteMode | AppendMode | ReadWriteModeAppendMode28,674
data IOMode      =  ReadMode | WriteMode | AppendMode | ReadWriteModeReadWriteMode28,674

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IO/Unsafe.hs,341
module GHC.IO.Unsafe (Unsafe22,588
unsafePerformIO :: IO a -> aunsafePerformIO87,3104
unsafeInterleaveIO :: IO a -> IO aunsafeInterleaveIO114,4229
unsafeDupablePerformIO  :: IO a -> aunsafeDupablePerformIO104,3831
unsafeDupableInterleaveIO :: IO a -> IO aunsafeDupableInterleaveIO150,5832
noDuplicate :: IO ()noDuplicate167,6412

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IOArray.hs,540
module GHC.IOArray (IOArray20,584
newtype IOArray i e = IOArray (STArray RealWorld i e)IOArray41,1119
writeIOArray :: Ix i => IOArray i e -> i -> e -> IO ()writeIOArray71,2229
unsafeWriteIOArray :: IOArray i e -> Int -> e -> IO ()unsafeWriteIOArray62,1876
unsafeReadIOArray  :: IOArray i e -> Int -> IO eunsafeReadIOArray57,1681
readIOArray  :: Ix i => IOArray i e -> i -> IO ereadIOArray67,2079
newIOArray :: Ix i => (i,i) -> e -> IO (IOArray i e)newIOArray52,1473
boundsIOArray :: IOArray i e -> (i,i)boundsIOArray75,2379

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/IORef.hs,869
module GHC.IORef (IORef21,593
newtype IORef a = IORef (STRef RealWorld a)IORef36,1025
data Box a = Box aBox107,3830
writeIORef  :: IORef a -> a -> IO ()writeIORef51,1408
readIORef   :: IORef a -> IO areadIORef47,1290
newIORef    :: a -> IO (IORef a)newIORef43,1158
atomicSwapIORef :: IORef a -> a -> IO aatomicSwapIORef101,3581
atomicModifyIORefP :: IORef a -> (a -> (a,b)) -> IO batomicModifyIORefP77,2625
atomicModifyIORefLazy_ :: IORef a -> (a -> a) -> IO (a, a)atomicModifyIORefLazy_86,2998
atomicModifyIORef2Lazy :: IORef a -> (a -> (a,b)) -> IO (a, (a, b))atomicModifyIORef2Lazy60,1855
atomicModifyIORef2 :: IORef a -> (a -> (a,b)) -> IO (a, (a, b))atomicModifyIORef270,2363
atomicModifyIORef'_ :: IORef a -> (a -> a) -> IO (a, a)atomicModifyIORef'_94,3344
atomicModifyIORef' :: IORef a -> (a -> (a,b)) -> IO batomicModifyIORef'120,4233

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Int.hs,2608
module GHC.Int (Int22,702
sInt8" #-} Int8 = I8# Int#Int857,1816
sInt8" #-} Int8 = I8# Int#I8#57,1816
Int16" #-} Int16 = I16# Int#Int16264,9803
Int16" #-} Int16 = I16# Int#I16#264,9803
Int32" #-} Int32 = I32# Int#Int32476,18159
Int32" #-} Int32 = I32# Int#I32#476,18159
Int64" #-} Int64 = I64# Int64#Int64699,27027
Int64" #-} Int64 = I64# Int64#I64#699,27027
Int64" #-} Int64 = I64# Int#Int64904,35437
Int64" #-} Int64 = I64# Int#I64#904,35437
uncheckedIShiftRA64# :: Int# -> Int# -> Int#uncheckedIShiftRA64#1086,42522
uncheckedIShiftL64# :: Int# -> Int# -> Int#uncheckedIShiftL64#1083,42436
eqInt8, neInt8 :: Int8 -> Int8 -> BoolneInt866,2008
eqInt64, neInt64 :: Int64 -> Int64 -> BoolneInt64708,27227
eqInt32, neInt32 :: Int32 -> Int32 -> BoolneInt32485,18357
eqInt16, neInt16 :: Int16 -> Int16 -> BoolneInt16273,10001
divInt64#, modInt64# :: Int64# -> Int64# -> Int64#modInt64#805,31084
gtInt8, geInt8, ltInt8, leInt8 :: Int8 -> Int8 -> BoolltInt883,2404
gtInt64, geInt64, ltInt64, leInt64 :: Int64 -> Int64 -> BoolltInt64725,27658
gtInt32, geInt32, ltInt32, leInt32 :: Int32 -> Int32 -> BoolltInt32502,18774
gtInt16, geInt16, ltInt16, leInt16 :: Int16 -> Int16 -> BoolltInt16290,10418
gtInt8, geInt8, ltInt8, leInt8 :: Int8 -> Int8 -> BoolleInt883,2404
gtInt64, geInt64, ltInt64, leInt64 :: Int64 -> Int64 -> BoolleInt64725,27658
gtInt32, geInt32, ltInt32, leInt32 :: Int32 -> Int32 -> BoolleInt32502,18774
gtInt16, geInt16, ltInt16, leInt16 :: Int16 -> Int16 -> BoolleInt16290,10418
iShiftL64#, iShiftRA64# :: Int64# -> Int# -> Int64#iShiftRA64#876,34071
iShiftL64#, iShiftRA64# :: Int64# -> Int# -> Int64#iShiftL64#876,34071
gtInt8, geInt8, ltInt8, leInt8 :: Int8 -> Int8 -> BoolgtInt883,2404
gtInt64, geInt64, ltInt64, leInt64 :: Int64 -> Int64 -> BoolgtInt64725,27658
gtInt32, geInt32, ltInt32, leInt32 :: Int32 -> Int32 -> BoolgtInt32502,18774
gtInt16, geInt16, ltInt16, leInt16 :: Int16 -> Int16 -> BoolgtInt16290,10418
gtInt8, geInt8, ltInt8, leInt8 :: Int8 -> Int8 -> BoolgeInt883,2404
gtInt64, geInt64, ltInt64, leInt64 :: Int64 -> Int64 -> BoolgeInt64725,27658
gtInt32, geInt32, ltInt32, leInt32 :: Int32 -> Int32 -> BoolgeInt32502,18774
gtInt16, geInt16, ltInt16, leInt16 :: Int16 -> Int16 -> BoolgeInt16290,10418
eqInt8, neInt8 :: Int8 -> Int8 -> BooleqInt866,2008
eqInt64, neInt64 :: Int64 -> Int64 -> BooleqInt64708,27227
eqInt32, neInt32 :: Int32 -> Int32 -> BooleqInt32485,18357
eqInt16, neInt16 :: Int16 -> Int16 -> BooleqInt16273,10001
divInt64#, modInt64# :: Int64# -> Int64# -> Int64#divInt64#805,31084

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Ix.hs,587
module GHC.Ix (Ix18,547
class (Ord a) => Ix a whereIx46,1371
    range               :: (a,a) -> [a]range50,1530
    index               :: (a,a) -> a -> Intindex52,1624
    unsafeIndex         :: (a,a) -> a -> IntunsafeIndex54,1741
    inRange             :: (a,a) -> a -> BoolinRange57,1882
    rangeSize           :: (a,a) -> IntrangeSize59,1990
    unsafeRangeSize     :: (a,a) -> IntunsafeRangeSize62,2119
indexError :: Show a => (a,a) -> a -> String -> bindexError146,5128
hopelessIndexError :: Int -- Try to use 'indexError' instead!hopelessIndexError153,5426

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/List.hs,5224
module GHC.List (List19,587
zipWithFB :: (a -> b -> c) -> (d -> e -> a) -> d -> e -> b -> czipWithFB1126,40126
zipWith3FB :: (d -> xs -> xs') -> (a -> b -> c -> d) -> a -> b -> c -> xs -> xs'zipWith3FB1147,41028
zipWith3                :: (a->b->c->d) -> [a]->[b]->[c]->[d]zipWith31140,40792
zipWith :: (a->b->c) -> [a]->[b]->[c]zipWith1116,39807
zipFB :: ((a, b) -> c -> d) -> a -> b -> c -> dzipFB1068,37991
zip3FB :: ((a,b,c) -> xs -> xs') -> a -> b -> c -> xs -> xs'zip3FB1089,38747
zip3 :: [a] -> [b] -> [c] -> [(a,b,c)]zip31082,38522
zip :: [a] -> [b] -> [(a,b)]zip1062,37818
unzip3   :: [(a,b,c)] -> ([a],[b],[c])unzip31165,41816
unzip    :: [(a,b)] -> ([a],[b])unzip1157,41481
unsafeTake :: Int -> [a] -> [a]unsafeTake630,23000
uncons                  :: [a] -> Maybe (a, [a])uncons70,2252
tooLarge :: Int -> atooLarge932,33179
takeWhileFB :: (a -> Bool) -> (a -> b -> b) -> b -> a -> b -> btakeWhileFB568,20564
takeWhile               :: (a -> Bool) -> [a] -> [a]takeWhile561,20320
takeFB :: (a -> b -> b) -> b -> a -> (Int -> b) -> Int -> btakeFB654,23889
take                   :: Int -> [a] -> [a]take611,22251
tail                    :: [a] -> [a]tail76,2475
sum                     :: (Num a) => [a] -> asum256,9095
strictUncurryScanr :: (a -> b -> c) -> (a, b) -> cstrictUncurryScanr395,13865
splitAt                :: Int -> [a] -> ([a],[a])splitAt712,25906
span                    :: (a -> Bool) -> [a] -> ([a],[a])span739,26827
scanrFB :: (a -> b -> b) -> (b -> c -> c) -> a -> (b, c) -> (b, c)scanrFB400,14065
scanr1                  :: (a -> a -> a) -> [a] -> [a]scanr1440,16104
scanr                   :: (a -> b -> b) -> b -> [a] -> [b]scanr389,13638
scanlFB' :: (b -> a -> b) -> (b -> c -> c) -> a -> (b -> c) -> b -> cscanlFB'333,11749
scanlFB :: (b -> a -> b) -> (b -> c -> c) -> a -> (b -> c) -> b -> cscanlFB294,10405
scanl1                  :: (a -> a -> a) -> [a] -> [a]scanl1308,10816
scanl'           :: (b -> a -> b) -> b -> [a] -> [b]scanl'314,11038
scanl                   :: (b -> a -> b) -> b -> [a] -> [b]scanl277,9779
reverse                 :: [a] -> [a]reverse768,27892
replicate               :: Int -> a -> [a]replicate541,19621
repeatFB :: (a -> b -> b) -> a -> brepeatFB527,19188
repeat :: a -> [a]repeat521,18980
product                 :: (Num a) => [a] -> aproduct261,9279
prel_list_str :: Stringprel_list_str1183,42457
or                      :: [Bool] -> Boolor798,28853
null                    :: [a] -> Boolnull115,3815
notElem                 :: (Eq a) => a -> [a] -> BoolnotElem869,31179
negIndex :: anegIndex935,33278
minimum                 :: (Ord a) => [a] -> aminimum465,17240
maximum                 :: (Ord a) => [a] -> amaximum450,16551
lookup                  :: (Eq a) => a -> [(a,b)] -> Maybe blookup887,31730
lengthFB :: x -> (Int -> Int) -> Int -> IntlengthFB138,4598
length                  :: [a] -> Intlength123,4154
lenAcc          :: [a] -> Int -> IntlenAcc126,4231
lastError :: alastError95,3207
last                    :: [a] -> alast82,2693
iterateFB :: (a -> b -> b) -> (a -> a) -> a -> biterateFB487,17977
iterate'FB :: (a -> b -> b) -> (a -> a) -> a -> biterate'FB508,18591
iterate' :: (a -> a) -> a -> [a]iterate'502,18425
iterate :: (a -> a) -> a -> [a]iterate483,17846
init                    :: [a] -> [a]init101,3375
idLength :: Int -> IntidLength142,4704
head                    :: [a] -> ahead48,1515
foldr3_left :: (a -> b -> c -> d -> e) -> e -> a ->foldr3_left978,34666
foldr3 :: (a -> b -> c -> d -> d) -> d -> [a] -> [b] -> [c] -> dfoldr3968,34368
foldr2_left :: (a -> b -> c -> d) -> d -> a -> ([b] -> c) -> [b] -> dfoldr2_left958,33963
foldr2 :: (a -> b -> c -> c) -> c -> [a] -> [b] -> cfoldr2950,33724
foldr1                  :: (a -> a -> a) -> [a] -> afoldr1377,13263
foldl1'                  :: (a -> a -> a) -> [a] -> afoldl1'248,8769
foldl1                  :: (a -> a -> a) -> [a] -> afoldl1243,8590
foldl'           :: forall a b . (b -> a -> b) -> b -> [a] -> bfoldl'235,8228
foldl :: forall a b. (b -> a -> b) -> b -> [a] -> bfoldl189,6312
flipSeqTake :: a -> Int -> aflipSeqTake650,23777
flipSeqScanl' :: a -> b -> aflipSeqScanl'338,11965
filterFB :: (a -> b -> b) -> (a -> Bool) -> a -> b -> bfilterFB161,5213
filter :: (a -> Bool) -> [a] -> [a]filter154,4995
errorEmptyList :: String -> aerrorEmptyList1179,42339
elem                    :: (Eq a) => a -> [a] -> Boolelem855,30766
dropWhile               :: (a -> Bool) -> [a] -> [a]dropWhile593,21659
drop                   :: Int -> [a] -> [a]drop678,24710
cycle                   :: [a] -> [a]cycle548,19872
constScanl :: a -> b -> aconstScanl299,10615
concatMap               :: (a -> [b]) -> [a] -> [b]concatMap894,31989
concat :: [[a]] -> [a]concat906,32272
break                   :: (a -> Bool) -> [a] -> ([a],[a])break755,27474
badHead :: abadHead53,1642
any                     :: (a -> Bool) -> [a] -> Boolany816,29489
and                     :: [Bool] -> Booland781,28316
all                     :: (a -> Bool) -> [a] -> Boolall836,30144
(!!)                    :: [a] -> Int -> a!!920,32699

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/MVar.hs,615
module GHC.MVar (MVar20,587
data MVar a = MVar (MVar# RealWorld a)MVar37,884
tryTakeMVar :: MVar a -> IO (Maybe a)tryTakeMVar140,4910
tryReadMVar :: MVar a -> IO (Maybe a)tryReadMVar160,5732
tryPutMVar  :: MVar a -> a -> IO BooltryPutMVar149,5328
takeMVar :: MVar a -> IO atakeMVar89,2859
readMVar :: MVar a -> IO areadMVar114,3812
putMVar  :: MVar a -> a -> IO ()putMVar131,4533
newMVar :: a -> IO (MVar a)newMVar68,2040
newEmptyMVar  :: IO (MVar a)newEmptyMVar62,1851
isEmptyMVar :: MVar a -> IO BoolisEmptyMVar172,6292
addMVarFinalizer :: MVar a -> IO () -> IO ()addMVarFinalizer179,6577

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Maybe.hs,173
module GHC.MaybeMaybe5,85
data  Maybe a  =  Nothing | Just aMaybe29,948
data  Maybe a  =  Nothing | Just aNothing29,948
data  Maybe a  =  Nothing | Just aJust29,948

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Natural.hs,2693
module GHC.NaturalNatural26,829
data Natural = NatS#                 GmpLimb# -- ^ in @[0, maxBound::Word]@Natural138,3943
data Natural = NatS#                 GmpLimb# -- ^ in @[0, maxBound::Word]@NatS#138,3943
             | NatJ# {-# UNPACK #-} !BigNat   -- ^ in @]maxBound::Word, +inf[@NatJ#139,4019
newtype Natural = Natural Integer -- ^ __Invariant__: non-negative 'Integer'Natural405,14702
xorNatural :: Natural -> Natural -> NaturalxorNatural253,8807
wordToNaturalBase :: Word# -> NaturalwordToNaturalBase392,14193
wordToNatural# :: Word# -> NaturalwordToNatural#384,13917
wordToNatural :: Word -> NaturalwordToNatural553,19782
underflowError :: aunderflowError112,3137
timesNatural :: Natural -> Natural -> NaturaltimesNatural313,11217
testBitNatural :: Natural -> Int -> BooltestBitNatural266,9367
signumNatural :: Natural -> NaturalsignumNatural164,5156
shiftRNatural :: Natural -> Int -> NaturalshiftRNatural289,10272
shiftLNatural :: Natural -> Int -> NaturalshiftLNatural279,9888
remNatural :: Natural -> Natural -> NaturalremNatural224,7576
quotRemNatural :: Natural -> Natural -> (Natural, Natural)quotRemNatural203,6592
quotNatural :: Natural -> Natural -> NaturalquotNatural215,7170
powModNatural :: Natural -> Natural -> Natural -> NaturalpowModNatural576,20437
popCountNatural :: Natural -> IntpopCountNatural274,9702
plusNatural :: Natural -> Natural -> NaturalplusNatural300,10705
orNatural :: Natural -> Natural -> NaturalorNatural246,8487
negateNatural :: Natural -> NaturalnegateNatural169,5310
naturalToWordMaybe :: Natural -> Maybe WordnaturalToWordMaybe560,19980
naturalToWord :: Natural -> WordnaturalToWord370,13449
naturalToInteger :: Natural -> IntegernaturalToInteger234,7993
naturalToInt :: Natural -> IntnaturalToInt374,13564
naturalToBigNat :: Natural -> BigNatnaturalToBigNat366,13334
naturalFromInteger :: Integer -> NaturalnaturalFromInteger175,5490
mkNatural :: [Word]  -- ^ value expressed in 32 bit chunks, leastmkNatural611,22036
minusNaturalMaybe :: Natural -> Natural -> Maybe NaturalminusNaturalMaybe344,12465
minusNatural :: Natural -> Natural -> NaturalminusNatural329,11926
lcmNatural :: Natural -> Natural -> NaturallcmNatural194,6258
isValidNatural :: Natural -> BoolisValidNatural157,4834
intToNatural :: Int -> NaturalintToNatural621,22479
gcdNatural :: Natural -> Natural -> NaturalgcdNatural183,5785
divZeroError :: adivZeroError116,3231
bitNatural :: Int# -> NaturalbitNatural260,9147
bigNatToNatural :: BigNat -> NaturalbigNatToNatural360,13109
andNatural :: Natural -> Natural -> NaturalandNatural239,8157
ONSTANT_FOLDED NOINLINECONSTANT_FOLDED102,2765

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Num.hs,524
module GHC.Num (module GHC.Num, module GHC.Integer, module GHC.Natural) whereNum20,586
class  Num a  whereNum52,1873
    (+), (-), (*)       :: a -> a -> a+55,1965
    (+), (-), (*)       :: a -> a -> a-55,1965
    (+), (-), (*)       :: a -> a -> a*55,1965
    negate              :: a -> anegate57,2029
    abs                 :: a -> aabs59,2088
    signum              :: a -> asignum67,2360
    fromInteger         :: Integer -> afromInteger72,2619
subtract :: (Num a) => a -> a -> asubtract85,3049

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/OldList.hs,63
module GHC.OldList (module Data.OldList) whereOldList27,1052

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/OverloadedLabels.hs,140
module GHC.OverloadedLabelsOverloadedLabels47,1680
class IsLabel (x :: Symbol) a whereIsLabel53,1773
  fromLabel :: afromLabel54,1809

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Pack.hs,815
module GHC.PackPack24,810
data ByteArray ix              = ByteArray        ix ix ByteArray#ByteArray42,1141
data MutableByteArray s ix     = MutableByteArray ix ix (MutableByteArray# s)MutableByteArray43,1208
write_ps_array  :: MutableByteArray s Int -> Int# -> Char# -> ST s ()write_ps_array85,2491
unpackCString :: Ptr a -> [Char]unpackCString45,1287
packStringST :: [Char] -> ST s (ByteArray Int)packStringST56,1625
packString :: [Char] -> ByteArray IntpackString53,1544
packNBytesST :: Int -> [Char] -> ST s (ByteArray Int)packNBytesST61,1742
packCString#         :: [Char]          -> ByteArray#packCString#50,1412
new_ps_array    :: Int# -> ST s (MutableByteArray s Int)new_ps_array84,2434
freeze_ps_array :: MutableByteArray s Int -> Int# -> ST s (ByteArray Int)freeze_ps_array86,2561

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Profiling.hs,174
module GHC.Profiling whereProfiling5,85
foreign import ccall stopProfTimer :: IO ()stopProfTimer13,237
foreign import ccall startProfTimer :: IO ()startProfTimer19,390

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Ptr.hs,574
module GHC.Ptr (Ptr19,577
data Ptr a = Ptr Addr#Ptr45,1334
data FunPtr a = FunPtr Addr# deriving (Eq, Ord)FunPtr96,3321
plusPtr :: Ptr a -> Int -> Ptr bplusPtr69,2263
nullPtr :: Ptr anullPtr61,2047
nullFunPtr :: FunPtr anullFunPtr140,5186
minusPtr :: Ptr a -> Ptr b -> IntminusPtr86,2891
castPtrToFunPtr :: Ptr a -> FunPtr bcastPtrToFunPtr162,5977
castPtr :: Ptr a -> Ptr bcastPtr65,2158
castFunPtrToPtr :: FunPtr a -> Ptr bcastFunPtrToPtr153,5625
castFunPtr :: FunPtr a -> FunPtr bcastFunPtr144,5296
alignPtr :: Ptr a -> Int -> Ptr aalignPtr76,2605

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/RTS/Flags.hsc,8745
module GHC.RTS.FlagsFlags11,324
type RtsTime = Word64RtsTime57,1089
data GiveGCStatsGiveGCStats63,1235
    = NoGCStatsNoGCStats64,1252
    | CollectGCStatsCollectGCStats65,1268
    | OneLineGCStatsOneLineGCStats66,1289
    | SummaryGCStatsSummaryGCStats67,1310
    | VerboseGCStatsVerboseGCStats68,1331
data GCFlags = GCFlagsGCFlags90,2148
    { statsFile             :: Maybe FilePathstatsFile91,2171
    , giveStats             :: GiveGCStatsgiveStats92,2217
    , maxStkSize            :: Word32maxStkSize93,2260
    , initialStkSize        :: Word32initialStkSize94,2298
    , stkChunkSize          :: Word32stkChunkSize95,2336
    , stkChunkBufferSize    :: Word32stkChunkBufferSize96,2374
    , maxHeapSize           :: Word32maxHeapSize97,2412
    , minAllocAreaSize      :: Word32minAllocAreaSize98,2450
    , largeAllocLim         :: Word32largeAllocLim99,2488
    , nurseryChunkSize      :: Word32nurseryChunkSize100,2526
    , minOldGenSize         :: Word32minOldGenSize101,2564
    , heapSizeSuggestion    :: Word32heapSizeSuggestion102,2602
    , heapSizeSuggestionAuto :: BoolheapSizeSuggestionAuto103,2640
    , oldGenFactor          :: DoubleoldGenFactor104,2677
    , pcFreeHeap            :: DoublepcFreeHeap105,2715
    , generations           :: Word32generations106,2753
    , squeezeUpdFrames      :: BoolsqueezeUpdFrames107,2791
    , compact               :: Bool -- ^ True <=> "compact all the time"compact108,2827
    , compactThreshold      :: DoublecompactThreshold109,2900
    , sweep                 :: Boolsweep110,2938
    , ringBell              :: BoolringBell112,3054
    , idleGCDelayTime       :: RtsTimeidleGCDelayTime113,3090
    , doIdleGC              :: BooldoIdleGC114,3129
    , heapBase              :: Word -- ^ address to ask the OS for memoryheapBase115,3165
    , allocLimitGrace       :: WordallocLimitGrace116,3239
    , numa                  :: Boolnuma117,3275
    , numaMask              :: WordnumaMask118,3311
data ConcFlags = ConcFlagsConcFlags125,3473
    { ctxtSwitchTime  :: RtsTimectxtSwitchTime126,3500
    , ctxtSwitchTicks :: IntctxtSwitchTicks127,3533
data MiscFlags = MiscFlagsMiscFlags134,3673
    { tickInterval          :: RtsTimetickInterval135,3700
    , installSignalHandlers :: BoolinstallSignalHandlers136,3739
    , installSEHHandlers    :: BoolinstallSEHHandlers137,3775
    , generateCrashDumpFile :: BoolgenerateCrashDumpFile138,3811
    , generateStackTrace    :: BoolgenerateStackTrace139,3847
    , machineReadable       :: BoolmachineReadable140,3883
    , disableDelayedOsMemoryReturn :: BooldisableDelayedOsMemoryReturn141,3919
    , internalCounters      :: BoolinternalCounters142,3962
    , linkerAlwaysPic       :: BoollinkerAlwaysPic143,3998
    , linkerMemBase         :: WordlinkerMemBase144,4034
data DebugFlags = DebugFlagsDebugFlags153,4303
    { scheduler      :: Bool -- ^ @s@scheduler154,4332
    , interpreter    :: Bool -- ^ @i@interpreter155,4370
    , weak           :: Bool -- ^ @w@weak156,4408
    , gccafs         :: Bool -- ^ @G@gccafs157,4446
    , gc             :: Bool -- ^ @g@gc158,4484
    , nonmoving_gc   :: Bool -- ^ @n@nonmoving_gc159,4522
    , block_alloc    :: Bool -- ^ @b@block_alloc160,4560
    , sanity         :: Bool -- ^ @S@sanity161,4598
    , stable         :: Bool -- ^ @t@stable162,4636
    , prof           :: Bool -- ^ @p@prof163,4674
    , linker         :: Bool -- ^ @l@ the object linkerlinker164,4712
    , apply          :: Bool -- ^ @a@apply165,4768
    , stm            :: Bool -- ^ @m@stm166,4806
    , squeeze        :: Bool -- ^ @z@ stack squeezing & lazy blackholingsqueeze167,4844
    , hpc            :: Bool -- ^ @c@ coveragehpc168,4917
    , sparks         :: Bool -- ^ @r@sparks169,4964
data DoCostCentresDoCostCentres176,5134
    = CostCentresNoneCostCentresNone177,5153
    | CostCentresSummaryCostCentresSummary178,5175
    | CostCentresVerboseCostCentresVerbose179,5200
    | CostCentresAllCostCentresAll180,5225
    | CostCentresJSONCostCentresJSON181,5246
data CCFlags = CCFlagsCCFlags203,6152
    { doCostCentres :: DoCostCentresdoCostCentres204,6175
    , profilerTicks :: IntprofilerTicks205,6212
    , msecsPerTick  :: IntmsecsPerTick206,6239
data DoHeapProfileDoHeapProfile213,6397
    = NoHeapProfilingNoHeapProfiling214,6416
    | HeapByCCSHeapByCCS215,6438
    | HeapByModHeapByMod216,6454
    | HeapByDescrHeapByDescr217,6470
    | HeapByTypeHeapByType218,6488
    | HeapByRetainerHeapByRetainer219,6505
    | HeapByLDVHeapByLDV220,6526
    | HeapByClosureTypeHeapByClosureType221,6542
data ProfFlags = ProfFlagsProfFlags249,7729
    { doHeapProfile            :: DoHeapProfiledoHeapProfile250,7756
    , heapProfileInterval      :: RtsTime -- ^ time between samplesheapProfileInterval251,7804
    , heapProfileIntervalTicks :: Word    -- ^ ticks between samples (derived)heapProfileIntervalTicks252,7872
    , includeTSOs              :: BoolincludeTSOs253,7951
    , showCCSOnException       :: BoolshowCCSOnException254,7990
    , maxRetainerSetSize       :: WordmaxRetainerSetSize255,8029
    , ccsLength                :: WordccsLength256,8068
    , modSelector              :: Maybe StringmodSelector257,8107
    , descrSelector            :: Maybe StringdescrSelector258,8154
    , typeSelector             :: Maybe StringtypeSelector259,8201
    , ccSelector               :: Maybe StringccSelector260,8248
    , ccsSelector              :: Maybe StringccsSelector261,8295
    , retainerSelector         :: Maybe StringretainerSelector262,8342
    , bioSelector              :: Maybe StringbioSelector263,8389
data DoTraceDoTrace270,8548
    = TraceNone      -- ^ no tracingTraceNone271,8561
    | TraceEventLog  -- ^ send tracing events to the event logTraceEventLog272,8598
    | TraceStderr    -- ^ send tracing events to @stderr@TraceStderr273,8661
data TraceFlags = TraceFlagsTraceFlags291,9269
    { tracing        :: DoTracetracing292,9298
    , timestamp      :: Bool -- ^ show timestamp in stderr outputtimestamp293,9330
    , traceScheduler :: Bool -- ^ trace scheduler eventstraceScheduler294,9396
    , traceGc        :: Bool -- ^ trace GC eventstraceGc295,9453
    , traceNonmovingGctraceNonmovingGc296,9503
    , sparksSampled  :: Bool -- ^ trace spark events by a sampled methodsparksSampled298,9599
    , sparksFull     :: Bool -- ^ trace spark events 100% accuratelysparksFull299,9672
    , user           :: Bool -- ^ trace user events (emitted from Haskell code)user300,9741
data TickyFlags = TickyFlagsTickyFlags307,9953
    { showTickyStats :: BoolshowTickyStats308,9982
    , tickyFile      :: Maybe FilePathtickyFile309,10011
data ParFlags = ParFlagsParFlags316,10173
    { nCapabilities :: Word32nCapabilities317,10198
    , migrate :: Boolmigrate318,10228
    , maxLocalSparks :: Word32maxLocalSparks319,10250
    , parGcEnabled :: BoolparGcEnabled320,10281
    , parGcGen :: Word32parGcGen321,10308
    , parGcLoadBalancingEnabled :: BoolparGcLoadBalancingEnabled322,10333
    , parGcLoadBalancingGen :: Word32parGcLoadBalancingGen323,10373
    , parGcNoSyncWithIdle :: Word32parGcNoSyncWithIdle324,10411
    , parGcThreads :: Word32parGcThreads325,10447
    , setAffinity :: BoolsetAffinity326,10476
data RTSFlags = RTSFlagsRTSFlags334,10623
    { gcFlags         :: GCFlagsgcFlags335,10648
    , concurrentFlags :: ConcFlagsconcurrentFlags336,10681
    , miscFlags       :: MiscFlagsmiscFlags337,10716
    , debugFlags      :: DebugFlagsdebugFlags338,10751
    , costCentreFlags :: CCFlagscostCentreFlags339,10787
    , profilingFlags  :: ProfFlagsprofilingFlags340,10820
    , traceFlags      :: TraceFlagstraceFlags341,10855
    , tickyFlags      :: TickyFlagstickyFlags342,10891
    , parFlags        :: ParFlagsparFlags343,10927
foreign import ccall "&RtsFlags" rtsFlagsPtr :: Ptr RTSFlagsrtsFlagsPtr347,11021
peekFilePath :: Ptr () -> IO (Maybe FilePath)peekFilePath361,11378
peekCStringOpt :: Ptr CChar -> IO (Maybe String)peekCStringOpt367,11603
getTraceFlags :: IO TraceFlagsgetTraceFlags522,18684
getTickyFlags :: IO TickyFlagsgetTickyFlags542,19582
getRTSFlags :: IO RTSFlagsgetRTSFlags349,11083
getProfFlags :: IO ProfFlagsgetProfFlags502,17494
getParFlags :: IO ParFlagsgetParFlags411,13548
getMiscFlags :: IO MiscFlagsgetMiscFlags436,14488
getGCFlags :: IO GCFlagsgetGCFlags372,11754
getDebugFlags :: IO DebugFlagsgetDebugFlags458,15538
getConcFlags :: IO ConcFlagsgetConcFlags430,14265
getCCFlags :: IO CCFlagsgetCCFlags494,17167

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Read.hs,2077
module GHC.ReadRead19,615
class Read a whereRead183,5832
  readsPrec    :: Int   -- ^ the operator precedence of the enclosingreadsPrec199,6426
  readList     :: ReadS [a]readList209,6980
  readPrec     :: ReadPrec areadPrec212,7089
  readListPrec :: ReadPrec [a]readListPrec217,7342
wrap_tup :: ReadPrec a -> ReadPrec awrap_tup676,21714
skipSpacesThenP :: ReadPrec a -> ReadPrec askipSpacesThenP305,10489
read_tup8 :: (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h)read_tup8696,22233
read_tup4 :: (Read a, Read b, Read c, Read d) => ReadPrec (a,b,c,d)read_tup4689,22033
read_tup2 :: (Read a, Read b) => ReadPrec (a,b)read_tup2682,21843
read_comma :: ReadPrec ()read_comma679,21782
readSymField :: String -> ReadPrec a -> ReadPrec areadSymField401,13797
readParen       :: Bool -> ReadS a -> ReadS areadParen83,1731
readNumber :: Num a => (L.Lexeme -> ReadPrec a) -> ReadPrec areadNumber556,18458
readLitChar :: ReadS Char       -- As defined by H2010readLitChar280,9893
readListPrecDefault :: Read a => ReadPrec [a]readListPrecDefault231,7882
readListDefault :: Read a => ReadS [a]readListDefault225,7578
readFieldHash :: String -> ReadPrec a -> ReadPrec areadFieldHash387,13249
readField :: String -> ReadPrec a -> ReadPrec areadField372,12696
parens :: ReadPrec a -> ReadPrec aparens322,10948
paren' :: ReadPrec a -> ReadPrec aparen'318,10808
paren :: ReadPrec a -> ReadPrec aparen313,10644
list :: ReadPrec a -> ReadPrec [a]list331,11275
lexP :: ReadPrec L.LexemelexP290,10195
lexLitChar :: ReadS String      -- As defined by H2010lexLitChar262,9134
lexDigits :: ReadS StringlexDigits284,10033
lex :: ReadS String             -- As defined by H2010lex254,8874
expectP :: L.Lexeme -> ReadPrec ()expectP294,10267
expectCharP :: Char -> ReadPrec a -> ReadPrec aexpectCharP297,10343
convertInt :: Num a => L.Lexeme -> ReadPrec aconvertInt570,18768
convertFrac :: forall a . RealFloat a => L.Lexeme -> ReadPrec aconvertFrac575,18918
choose :: [(String, ReadPrec a)] -> ReadPrec achoose352,11758

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Real.hs,3554
module GHC.Real whereReal21,697
data  Ratio a = !a :% !a  deriving Eq -- ^ @since 2.01Ratio78,2449
data  Ratio a = !a :% !a  deriving Eq -- ^ @since 2.01:%78,2449
type  Rational          =  Ratio IntegerRational83,2664
class  (Num a, Ord a) => Real a  whereReal129,4230
    toRational          ::  a -> RationaltoRational131,4343
class  (Real a, Enum a) => Integral a  whereIntegral147,5003
    quot                :: a -> a -> aquot149,5096
    rem                 :: a -> a -> arem153,5224
    div                 :: a -> a -> adiv155,5324
    mod                 :: a -> a -> amod159,5449
    quotRem             :: a -> a -> (a,a)quotRem161,5527
    divMod              :: a -> a -> (a,a)divMod163,5608
    toInteger           :: a -> IntegertoInteger165,5684
class  (Num a) => Fractional a  whereFractional190,6662
    (/)                 :: a -> a -> a/194,6779
    recip               :: a -> arecip196,6848
    fromRational        :: Rational -> afromRational201,7118
class  (Real a, Fractional a) => RealFrac a  whereRealFrac209,7321
    properFraction      :: (Integral b) => a -> (b,a)properFraction220,7836
    truncate            :: (Integral b) => a -> btruncate222,7967
    round               :: (Integral b) => a -> bround225,8143
    ceiling             :: (Integral b) => a -> bceiling227,8260
    floor               :: (Integral b) => a -> bfloor229,8381
underflowError :: aunderflowError65,1953
showSigned :: (Real a)showSigned588,21458
reduce ::  (Integral a) => a -> a -> Ratio areduce114,3698
realToFrac :: (Real a, Fractional b) => a -> brealToFrac579,21120
ratioZeroDenominatorError :: aratioZeroDenominatorError57,1738
ratioPrec, ratioPrec1 :: IntratioPrec185,2706
ratioPrec, ratioPrec1 :: IntratioPrec85,2706
overflowError :: aoverflowError61,1860
even, odd       :: (Integral a) => a -> Boolodd597,21794
numericEnumFromTo       :: (Ord a, Fractional a) => a -> a -> [a]numericEnumFromTo265,9705
numericEnumFromThenTo   :: (Ord a, Fractional a) => a -> a -> a -> [a]numericEnumFromThenTo268,9841
numericEnumFromThen     :: (Fractional a) => a -> a -> [a]numericEnumFromThen257,9454
numericEnumFrom         :: (Fractional a) => a -> [a]numericEnumFrom250,9232
numerator       :: Ratio a -> anumerator103,3311
infinity, notANumber :: RationalnotANumber89,2813
lcm             :: (Integral a) => a -> a -> alcm757,28471
integralEnumFromTo :: Integral a => a -> a -> [a]integralEnumFromTo799,29759
integralEnumFromThenTo :: Integral a => a -> a -> a -> [a]integralEnumFromThenTo802,29880
integralEnumFromThen :: (Integral a, Bounded a) => a -> a -> [a]integralEnumFromThen791,29436
integralEnumFrom :: (Integral a, Bounded a) => a -> [a]integralEnumFrom788,29291
infinity, notANumber :: Rationalinfinity89,2813
gcdWord' :: Word -> Word -> WordgcdWord'778,29098
gcdInt' :: Int -> Int -> IntgcdInt'775,29028
gcd             :: (Integral a) => a -> a -> agcd750,28181
fromIntegral :: (Integral a, Num b) => a -> bfromIntegral554,20327
even, odd       :: (Integral a) => a -> Booleven597,21794
divZeroError :: adivZeroError53,1637
denominator     :: Ratio a -> adenominator108,3494
(^^%^^)         :: Integral a => Rational -> a -> Rational^^%^^730,27189
(^^)            :: (Fractional a, Integral b) => a -> b -> a^^624,22876
(^%^)           :: Integral a => Rational -> a -> Rational^%^722,26899
(^) :: (Num a, Integral b) => a -> b -> a^610,22245
(%)                     :: (Integral a) => a -> a -> Ratio a%98,3101

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Records.hs,127
module GHC.RecordsRecords25,779
class HasField x r a | x r -> a whereHasField39,1357
  getField :: r -> agetField41,1458

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/ResponseFile.hs,643
module GHC.ResponseFile (ResponseFile19,463
data Quoting = NoneQ | SngQ | DblQQuoting122,4049
data Quoting = NoneQ | SngQ | DblQNoneQ122,4049
data Quoting = NoneQ | SngQ | DblQSngQ122,4049
data Quoting = NoneQ | SngQ | DblQDblQ122,4049
unescapeArgs :: String -> [String]unescapeArgs81,2229
unescape :: String -> [String]unescape124,4085
getArgsWithResponseFiles :: IO [String]getArgsWithResponseFiles61,1171
expandResponse :: [String] -> IO [String]expandResponse110,3663
escapeArgs :: [String] -> StringescapeArgs100,3181
escapeArg :: String -> StringescapeArg150,5360
escape :: String -> Char -> Stringescape153,5430

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/ST.hs,480
module GHC.ST (ST19,563
newtype ST s a = ST (STRep s a)ST53,1656
type STRep s a = State# s -> (# State# s, a #)STRep54,1688
data STret s a = STret (State# s) aSTret93,2588
unsafeInterleaveST :: ST s a -> ST s aunsafeInterleaveST106,3115
unsafeDupableInterleaveST :: ST s a -> ST s aunsafeDupableInterleaveST120,3734
runST :: (forall s. ST s a) -> arunST137,4244
noDuplicateST :: ST s ()noDuplicateST99,2801
liftST :: ST s a -> State# s -> STret s aliftST96,2698

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/STRef.hs,243
module GHC.STRef (STRef19,568
data STRef s a = STRef (MutVar# s a)STRef30,719
writeSTRef :: STRef s a -> a -> ST s ()writeSTRef54,1404
readSTRef :: STRef s a -> ST s areadSTRef50,1273
newSTRef :: a -> ST s (STRef s a)newSTRef44,1084

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Show.hs,1474
module GHC.ShowShow34,1035
type ShowS = String -> StringShowS61,1762
class  Show a  whereShow112,3829
    showsPrec :: Int    -- ^ the operator precedence of the enclosingshowsPrec129,4392
    show      :: a   -> Stringshow137,4809
    showList  :: [a] -> ShowSshowList144,5171
shows           :: (Show a) => a -> ShowSshows336,12354
show_tuple :: [ShowS] -> ShowSshow_tuple326,12000
showWord :: Word# -> ShowSshowWord198,6676
showString      :: String -> ShowSshowString346,12704
showSpace :: ShowSshowSpace354,12993
showSignedInt :: Int -> Int -> ShowSshowSignedInt441,16896
showParen       :: Bool -> ShowS -> ShowSshowParen351,12882
showMultiLineString :: String -> [String]showMultiLineString398,15096
showLitString :: String -> ShowSshowLitString383,14257
showLitChar                :: Char -> ShowSshowLitChar366,13331
showList__ :: (a -> ShowS) ->  [a] -> ShowSshowList__150,5314
showCommaSpace :: ShowSshowCommaSpace357,13059
showChar        :: Char -> ShowSshowChar341,12538
protectEsc :: (Char -> Bool) -> ShowS -> ShowSprotectEsc416,15792
itos :: Int# -> String -> Stringitos446,17090
isDec :: Char -> BoolisDec413,15738
integerToString :: Integer -> String -> StringintegerToString489,18676
intToDigit :: Int -> CharintToDigit435,16599
asciiTab :: [String]asciiTab422,16004
appPrec, appPrec1 :: IntappPrec1157,5529
appPrec, appPrec1 :: IntappPrec157,5529
DIGITS       9DIGITS8,229
  1000000000BASE9,263

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Stable.hs,476
module GHC.Stable (Stable22,578
lePtr" #-} StablePtr a = StablePtr (StablePtr# a)StablePtr48,1433
foreign import ccall unsafe "hs_free_stable_ptr" freeStablePtr :: StablePtr a -> IO ()freeStablePtr77,2612
newStablePtr   :: a -> IO (StablePtr a)newStablePtr53,1557
deRefStablePtr :: StablePtr a -> IO adeRefStablePtr64,1990
castStablePtrToPtr :: StablePtr a -> Ptr ()castStablePtrToPtr87,3094
castPtrToStablePtr :: Ptr () -> StablePtr acastPtrToStablePtr101,3537

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/StableName.hs,309
module GHC.StableName (StableName30,1177
data StableName a = StableName (StableName# a)StableName73,2641
makeStableName  :: a -> IO (StableName a)makeStableName77,2822
hashStableName :: StableName a -> InthashStableName85,3224
eqStableName :: StableName a -> StableName b -> BooleqStableName99,3608

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Stack.hs,276
module GHC.Stack (Stack19,573
withFrozenCallStack :: HasCallStackwithFrozenCallStack97,2556
popCallStack :: CallStack -> CallStackpopCallStack75,1921
errorWithStackTrace :: String -> aerrorWithStackTrace62,1513
callStack :: HasCallStack => CallStackcallStack87,2277

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Stack/CCS.hsc,880
module GHC.Stack.CCS (CCS19,564
data CostCentreStackCostCentreStack52,1110
data CostCentreCostCentre55,1184
whoCreated :: a -> IO [String]whoCreated130,3980
renderStack :: [String] -> StringrenderStack135,4073
getCurrentCCS :: dummy -> IO (Ptr CostCentreStack)getCurrentCCS61,1507
getCCSOf :: a -> IO (Ptr CostCentreStack)getCCSOf67,1737
currentCallStack :: IO [String]currentCallStack108,3253
clearCCS :: IO a -> IO aclearCCS75,2082
ccsToStrings :: Ptr CostCentreStack -> IO [String]ccsToStrings112,3391
ccsParent :: Ptr CostCentreStack -> IO (Ptr CostCentreStack)ccsParent83,2350
ccsCC :: Ptr CostCentreStack -> IO (Ptr CostCentre)ccsCC79,2214
ccSrcSpan :: Ptr CostCentre -> IO CStringccSrcSpan95,2752
ccModule :: Ptr CostCentre -> IO CStringccModule91,2623
ccLabel :: Ptr CostCentre -> IO CStringccLabel87,2502
#define PROFILINGPROFILING48,1016

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Stack/Types.hs,1046
module GHC.Stack.Types (Types29,919
type HasCallStack = (?callStack :: CallStack)HasCallStack70,2295
data CallStackCallStack135,4872
  = EmptyCallStackEmptyCallStack136,4887
  | PushCallStack [Char] SrcLoc CallStackPushCallStack137,4906
  | FreezeCallStack CallStackFreezeCallStack138,4948
data SrcLoc = SrcLocSrcLoc211,7337
  { srcLocPackage   :: [Char]srcLocPackage212,7358
  , srcLocModule    :: [Char]srcLocModule213,7388
  , srcLocFile      :: [Char]srcLocFile214,7418
  , srcLocStartLine :: IntsrcLocStartLine215,7448
  , srcLocStartCol  :: IntsrcLocStartCol216,7475
  , srcLocEndLine   :: IntsrcLocEndLine217,7502
  , srcLocEndCol    :: IntsrcLocEndCol218,7529
pushCallStack :: ([Char], SrcLoc) -> CallStack -> CallStackpushCallStack183,6614
getCallStack :: CallStack -> [([Char], SrcLoc)]getCallStack149,5272
fromCallSiteList :: [([Char], SrcLoc)] -> CallStackfromCallSiteList158,5568
freezeCallStack :: CallStack -> CallStackfreezeCallStack203,7156
emptyCallStack :: CallStackemptyCallStack193,6871

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/StaticPtr.hs,1171
module GHC.StaticPtrStaticPtr38,1603
data StaticPtr a = StaticPtr Word64# Word64# -- The flattened Fingerprint isStaticPtr62,2127
data StaticPtr a = StaticPtr Word# Word#StaticPtr66,2331
type StaticKey = FingerprintStaticKey75,2628
foreign import ccall unsafe hs_spt_lookup :: Word64 -> Word64 -> IO (Ptr a)hs_spt_lookup96,3367
class IsStatic p whereIsStatic99,3500
    fromStaticPtr :: StaticPtr a -> p afromStaticPtr100,3523
data StaticPtrInfo = StaticPtrInfoStaticPtrInfo107,3706
      spInfoUnitId  :: StringspInfoUnitId109,3815
    , spInfoModuleName :: StringspInfoModuleName111,3911
    , spInfoSrcLoc     :: (Int, Int)spInfoSrcLoc114,4048
foreign import ccall unsafe hs_spt_key_count :: IO CInths_spt_key_count132,4620
foreign import ccall unsafe hs_spt_keys :: Ptr a -> CInt -> IO CInths_spt_keys134,4677
unsafeLookupStaticPtr :: StaticKey -> IO (Maybe (StaticPtr a))unsafeLookupStaticPtr88,3091
staticPtrKeys :: IO [StaticKey]staticPtrKeys123,4291
staticPtrInfo :: StaticPtr a -> StaticPtrInfostaticPtrInfo119,4175
staticKey :: StaticPtr a -> StaticKeystaticKey78,2730
deRefStaticPtr :: StaticPtr a -> adeRefStaticPtr70,2460

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/StaticPtr/Internal.hs,128
module GHC.StaticPtr.Internal (makeStatic) whereInternal17,512
makeStatic :: (Int, Int) -> a -> StaticPtr amakeStatic24,709

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Stats.hsc,3248
module GHC.StatsStats15,569
foreign import ccall "getRTSStats" getRTSStats_ :: Ptr () -> IO ()getRTSStats_36,950
foreign import ccall "getRTSStatsEnabled" getRTSStatsEnabled :: IO BoolgetRTSStatsEnabled41,1119
data RTSStats = RTSStats {RTSStats49,1353
    gcs :: Word32gcs54,1490
  , major_gcs :: Word32major_gcs56,1563
  , allocated_bytes :: Word64allocated_bytes58,1618
  , max_live_bytes :: Word64max_live_bytes61,1765
  , max_large_objects_bytes :: Word64max_large_objects_bytes63,1838
  , max_compact_bytes :: Word64max_compact_bytes65,1922
  , max_slop_bytes :: Word64max_slop_bytes67,1976
  , max_mem_in_use_bytes :: Word64max_mem_in_use_bytes69,2047
  , cumulative_live_bytes :: Word64cumulative_live_bytes72,2222
  , copied_bytes :: Word64copied_bytes74,2302
  , par_copied_bytes :: Word64par_copied_bytes76,2382
  , cumulative_par_max_copied_bytes :: Word64cumulative_par_max_copied_bytes78,2487
  , cumulative_par_balanced_copied_bytes :: Word64cumulative_par_balanced_copied_bytes80,2599
  , init_cpu_ns :: RtsTimeinit_cpu_ns89,2925
  , init_elapsed_ns :: RtsTimeinit_elapsed_ns92,3026
  , mutator_cpu_ns :: RtsTimemutator_cpu_ns94,3101
  , mutator_elapsed_ns :: RtsTimemutator_elapsed_ns96,3179
  , gc_cpu_ns :: RtsTimegc_cpu_ns98,3252
  , gc_elapsed_ns :: RtsTimegc_elapsed_ns100,3320
  , cpu_ns :: RtsTimecpu_ns102,3394
  , elapsed_ns :: RtsTimeelapsed_ns104,3465
  , nonmoving_gc_sync_cpu_ns :: RtsTimenonmoving_gc_sync_cpu_ns108,3591
  , nonmoving_gc_sync_elapsed_ns :: RtsTimenonmoving_gc_sync_elapsed_ns111,3729
  , nonmoving_gc_sync_max_elapsed_ns :: RtsTimenonmoving_gc_sync_max_elapsed_ns114,3879
  , nonmoving_gc_cpu_ns :: RtsTimenonmoving_gc_cpu_ns117,4026
  , nonmoving_gc_elapsed_ns :: RtsTimenonmoving_gc_elapsed_ns120,4159
  , nonmoving_gc_max_elapsed_ns :: RtsTimenonmoving_gc_max_elapsed_ns123,4304
  , gc :: GCDetailsgc126,4390
data GCDetails = GCDetails {GCDetails136,4692
    gcdetails_gen :: Word32gcdetails_gen138,4763
  , gcdetails_threads :: Word32gcdetails_threads140,4834
  , gcdetails_allocated_bytes :: Word64gcdetails_allocated_bytes142,4923
  , gcdetails_live_bytes :: Word64gcdetails_live_bytes146,5150
  , gcdetails_large_objects_bytes :: Word64gcdetails_large_objects_bytes148,5237
  , gcdetails_compact_bytes :: Word64gcdetails_compact_bytes150,5335
  , gcdetails_slop_bytes :: Word64gcdetails_slop_bytes152,5419
  , gcdetails_mem_in_use_bytes :: Word64gcdetails_mem_in_use_bytes154,5504
  , gcdetails_copied_bytes :: Word64gcdetails_copied_bytes156,5597
  , gcdetails_par_max_copied_bytes :: Word64gcdetails_par_max_copied_bytes159,5727
  , gcdetails_par_balanced_copied_bytes :: Word64gcdetails_par_balanced_copied_bytes161,5847
  , gcdetails_sync_elapsed_ns :: RtsTimegcdetails_sync_elapsed_ns163,5956
  , gcdetails_cpu_ns :: RtsTimegcdetails_cpu_ns165,6041
  , gcdetails_elapsed_ns :: RtsTimegcdetails_elapsed_ns167,6116
  , gcdetails_nonmoving_gc_sync_cpu_ns :: RtsTimegcdetails_nonmoving_gc_sync_cpu_ns171,6252
  , gcdetails_nonmoving_gc_sync_elapsed_ns :: RtsTimegcdetails_nonmoving_gc_sync_elapsed_ns174,6400
type RtsTime = Int64RtsTime180,6624
getRTSStats :: IO RTSStatsgetRTSStats186,6715

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Storable.hs,2990
module GHC.StorableStorable19,575
writeWordOffPtr      :: Ptr Word          -> Int -> Word        -> IO ()writeWordOffPtr112,4517
writeWord8OffPtr     :: Ptr Word8         -> Int -> Word8       -> IO ()writeWord8OffPtr122,5247
writeWord64OffPtr    :: Ptr Word64        -> Int -> Word64      -> IO ()writeWord64OffPtr125,5466
writeWord32OffPtr    :: Ptr Word32        -> Int -> Word32      -> IO ()writeWord32OffPtr124,5393
writeWord16OffPtr    :: Ptr Word16        -> Int -> Word16      -> IO ()writeWord16OffPtr123,5320
writeWideCharOffPtr  :: Ptr Char          -> Int -> Char        -> IO ()writeWideCharOffPtr110,4371
writeStablePtrOffPtr :: Ptr (StablePtr a) -> Int -> StablePtr a -> IO ()writeStablePtrOffPtr117,4882
writePtrOffPtr       :: Ptr (Ptr a)       -> Int -> Ptr a       -> IO ()writePtrOffPtr113,4590
writeIntOffPtr       :: Ptr Int           -> Int -> Int         -> IO ()writeIntOffPtr111,4444
writeInt8OffPtr      :: Ptr Int8          -> Int -> Int8        -> IO ()writeInt8OffPtr118,4955
writeInt64OffPtr     :: Ptr Int64         -> Int -> Int64       -> IO ()writeInt64OffPtr121,5174
writeInt32OffPtr     :: Ptr Int32         -> Int -> Int32       -> IO ()writeInt32OffPtr120,5101
writeInt16OffPtr     :: Ptr Int16         -> Int -> Int16       -> IO ()writeInt16OffPtr119,5028
writeFunPtrOffPtr    :: Ptr (FunPtr a)    -> Int -> FunPtr a    -> IO ()writeFunPtrOffPtr114,4663
writeFloatOffPtr     :: Ptr Float         -> Int -> Float       -> IO ()writeFloatOffPtr115,4736
writeDoubleOffPtr    :: Ptr Double        -> Int -> Double      -> IO ()writeDoubleOffPtr116,4809
readWordOffPtr      :: Ptr Word          -> Int -> IO WordreadWordOffPtr62,1688
readWord8OffPtr     :: Ptr Word8         -> Int -> IO Word8readWord8OffPtr72,2302
readWord64OffPtr    :: Ptr Word64        -> Int -> IO Word64readWord64OffPtr75,2484
readWord32OffPtr    :: Ptr Word32        -> Int -> IO Word32readWord32OffPtr74,2423
readWord16OffPtr    :: Ptr Word16        -> Int -> IO Word16readWord16OffPtr73,2362
readWideCharOffPtr  :: Ptr Char          -> Int -> IO CharreadWideCharOffPtr60,1571
readStablePtrOffPtr :: Ptr (StablePtr a) -> Int -> IO (StablePtr a)readStablePtrOffPtr67,1995
readPtrOffPtr       :: Ptr (Ptr a)       -> Int -> IO (Ptr a)readPtrOffPtr63,1747
readIntOffPtr       :: Ptr Int           -> Int -> IO IntreadIntOffPtr61,1630
readInt8OffPtr      :: Ptr Int8          -> Int -> IO Int8readInt8OffPtr68,2063
readInt64OffPtr     :: Ptr Int64         -> Int -> IO Int64readInt64OffPtr71,2242
readInt32OffPtr     :: Ptr Int32         -> Int -> IO Int32readInt32OffPtr70,2182
readInt16OffPtr     :: Ptr Int16         -> Int -> IO Int16readInt16OffPtr69,2122
readFunPtrOffPtr    :: Ptr (FunPtr a)    -> Int -> IO (FunPtr a)readFunPtrOffPtr64,1809
readFloatOffPtr     :: Ptr Float         -> Int -> IO FloatreadFloatOffPtr65,1874
readDoubleOffPtr    :: Ptr Double        -> Int -> IO DoublereadDoubleOffPtr66,1934

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/TopHandler.hs,1323
module GHC.TopHandler (TopHandler25,762
  setMainThread :: Weak# ThreadId -> IO ()setMainThread76,2365
  stg_sig_installstg_sig_install120,3835
   errorBelch :: CString -> CString -> IO ()errorBelch202,7053
  shutdownHaskellAndSignal :: CInt -> CInt -> IO ()shutdownHaskellAndSignal264,9277
  shutdownHaskellAndExit :: CInt -> CInt -> IO ()shutdownHaskellAndExit280,9766
useFastExit, useSafeExit :: CIntuseSafeExit282,9817
useFastExit, useSafeExit :: CIntuseFastExit282,9817
unreachable :: IO aunreachable243,8485
topHandlerFastExit :: SomeException -> IO atopHandlerFastExit162,5587
topHandler :: SomeException -> IO atopHandler159,5488
safeExit, fastExit :: Int -> IO asafeExit239,8382
runNonIO :: a -> IO arunNonIO156,5416
runMainIO :: IO a -> IO arunMainIO81,2598
runIOFastExit :: IO a -> IO arunIOFastExit148,5082
runIO :: IO a -> IO arunIO133,4394
real_handler :: (Int -> IO a) -> SomeException -> IO areal_handler170,5870
install_interrupt_handler :: IO () -> IO ()install_interrupt_handler96,3044
flushStdHandles :: IO ()flushStdHandles234,8249
safeExit, fastExit :: Int -> IO afastExit239,8382
exitInterrupted :: IO aexitInterrupted267,9337
exitHelper :: CInt -> Int -> IO aexitHelper246,8588
disasterHandler :: (Int -> IO a) -> IOError -> IO adisasterHandler204,7099

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/TypeLits.hs,1489
module GHC.TypeLitsTypeLits34,1203
class KnownSymbol (n :: Symbol) whereKnownSymbol80,2499
  symbolSing :: SSymbol nsymbolSing81,2537
data SomeSymbol = forall n. KnownSymbol n => SomeSymbol (Proxy n)SomeSymbol103,3166
type family CmpSymbol (m :: Symbol) (n :: Symbol) :: OrderingCmpSymbol144,4458
type family AppendSymbol (m ::Symbol) (n :: Symbol) :: SymbolAppendSymbol149,4585
a {-kind-} ErrorMessage = Text SymbolErrorMessage152,4694
a {-kind-} ErrorMessage = Text SymbolText152,4694
                           | forall t. ShowType tShowType155,4788
                           | ErrorMessage :<>: ErrorMessage:<>:159,4960
                           | ErrorMessage :$$: ErrorMessage:$$:163,5139
type family TypeError (a :: ErrorMessage) :: b whereTypeError196,6217
newtype SSymbol (s :: Symbol) = SSymbol StringSSymbol214,6801
data WrapS a b = WrapS (KnownSymbol a => Proxy a -> b)WrapS216,6849
withSSymbol :: (KnownSymbol a => Proxy a -> b)withSSymbol219,6960
symbolVal' :: forall n. KnownSymbol n => Proxy# n -> StringsymbolVal'97,2972
symbolVal :: forall n proxy. KnownSymbol n => proxy n -> StringsymbolVal88,2698
someSymbolVal :: String -> SomeSymbolsomeSymbolVal117,3569
someNatVal :: Integer -> Maybe N.SomeNatsomeNatVal109,3352
sameSymbol :: (KnownSymbol a, KnownSymbol b) =>sameSymbol205,6490
natVal' :: forall n. KnownNat n => Proxy# n -> IntegernatVal'93,2860
natVal :: forall n proxy. KnownNat n => proxy n -> IntegernatVal84,2584

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/TypeNats.hs,1209
module GHC.TypeNatsTypeNats24,732
class KnownNat (n :: Nat) whereKnownNat58,1676
  natSing :: SNat nnatSing59,1708
data SomeNat    = forall n. KnownNat n    => SomeNat    (Proxy n)SomeNat74,2096
type x <= y = (x <=? y) ~ 'True<=168,5734
type family CmpNat    (m :: Nat)    (n :: Nat)    :: OrderingCmpNat173,5843
type family (m :: Nat) <=? (n :: Nat) :: Bool<=?179,6143
type family (m :: Nat) + (n :: Nat) :: Nat+184,6249
type family (m :: Nat) * (n :: Nat) :: Nat*189,6358
type family (m :: Nat) ^ (n :: Nat) :: Nat^194,6467
type family (m :: Nat) - (n :: Nat) :: Nat-199,6573
type family Div (m :: Nat) (n :: Nat) :: NatDiv205,6742
type family Mod (m :: Nat) (n :: Nat) :: NatMod211,6899
type family Log2 (m :: Nat) :: NatLog2217,7070
newtype SNat    (n :: Nat)    = SNat    NaturalSNat234,7606
data WrapN a b = WrapN (KnownNat    a => Proxy a -> b)WrapN236,7655
withSNat :: (KnownNat a => Proxy a -> b)withSNat239,7766
someNatVal :: Natural -> SomeNatsomeNatVal79,2245
sameNat :: (KnownNat a, KnownNat b) =>sameNat225,7324
natVal' :: forall n. KnownNat n => Proxy# n -> NaturalnatVal'67,1893
natVal :: forall n proxy. KnownNat n => proxy n -> NaturalnatVal62,1750

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Unicode.hs,4153
module GHC.Unicode (Unicode21,729
data GeneralCategoryGeneralCategory101,2585
        = UppercaseLetter       -- ^ Lu: Letter, UppercaseUppercaseLetter102,2606
        | LowercaseLetter       -- ^ Ll: Letter, LowercaseLowercaseLetter103,2665
        | TitlecaseLetter       -- ^ Lt: Letter, TitlecaseTitlecaseLetter104,2724
        | ModifierLetter        -- ^ Lm: Letter, ModifierModifierLetter105,2783
        | OtherLetter           -- ^ Lo: Letter, OtherOtherLetter106,2841
        | NonSpacingMark        -- ^ Mn: Mark, Non-SpacingNonSpacingMark107,2896
        | SpacingCombiningMark  -- ^ Mc: Mark, Spacing CombiningSpacingCombiningMark108,2955
        | EnclosingMark         -- ^ Me: Mark, EnclosingEnclosingMark109,3020
        | DecimalNumber         -- ^ Nd: Number, DecimalDecimalNumber110,3077
        | LetterNumber          -- ^ Nl: Number, LetterLetterNumber111,3134
        | OtherNumber           -- ^ No: Number, OtherOtherNumber112,3190
        | ConnectorPunctuation  -- ^ Pc: Punctuation, ConnectorConnectorPunctuation113,3245
        | DashPunctuation       -- ^ Pd: Punctuation, DashDashPunctuation114,3309
        | OpenPunctuation       -- ^ Ps: Punctuation, OpenOpenPunctuation115,3368
        | ClosePunctuation      -- ^ Pe: Punctuation, CloseClosePunctuation116,3427
        | InitialQuote          -- ^ Pi: Punctuation, Initial quoteInitialQuote117,3487
        | FinalQuote            -- ^ Pf: Punctuation, Final quoteFinalQuote118,3555
        | OtherPunctuation      -- ^ Po: Punctuation, OtherOtherPunctuation119,3621
        | MathSymbol            -- ^ Sm: Symbol, MathMathSymbol120,3681
        | CurrencySymbol        -- ^ Sc: Symbol, CurrencyCurrencySymbol121,3735
        | ModifierSymbol        -- ^ Sk: Symbol, ModifierModifierSymbol122,3793
        | OtherSymbol           -- ^ So: Symbol, OtherOtherSymbol123,3851
        | Space                 -- ^ Zs: Separator, SpaceSpace124,3906
        | LineSeparator         -- ^ Zl: Separator, LineLineSeparator125,3964
        | ParagraphSeparator    -- ^ Zp: Separator, ParagraphParagraphSeparator126,4021
        | Control               -- ^ Cc: Other, ControlControl127,4083
        | Format                -- ^ Cf: Other, FormatFormat128,4139
        | Surrogate             -- ^ Cs: Other, SurrogateSurrogate129,4194
        | PrivateUse            -- ^ Co: Other, Private UsePrivateUse130,4252
        | NotAssigned           -- ^ Cn: Other, Not AssignedNotAssigned131,4312
  iswalpha :: Int -> Intiswalpha373,12546
  iswalnum :: Int -> Intiswalnum376,12613
  iswcntrl :: Int -> Intiswcntrl379,12680
  iswspace :: Int -> Intiswspace382,12747
  iswprint :: Int -> Intiswprint385,12814
  iswlower :: Int -> Intiswlower388,12881
  iswupper :: Int -> Intiswupper391,12948
  towlower :: Int -> Inttowlower394,13015
  towupper :: Int -> Inttowupper397,13082
  towtitle :: Int -> Inttowtitle400,13149
  wgencat :: Int -> Intwgencat403,13214
toUpper                 :: Char -> ChartoUpper343,11467
toTitle                 :: Char -> ChartoTitle353,11884
toLower                 :: Char -> ChartoLower347,11624
isUpper                 :: Char -> BoolisUpper213,7287
isSymbol :: Char -> BoolisSymbol333,11085
isSpace                 :: Char -> BoolisSpace197,6511
isPunctuation :: Char -> BoolisPunctuation287,9861
isPrint                 :: Char -> BoolisPrint193,6352
isOctDigit              :: Char -> BoolisOctDigit241,8541
isLower                 :: Char -> BoolisLower216,7393
isLatin1                :: Char -> BoolisLatin1174,5664
isHexDigit              :: Char -> BoolisHexDigit246,8756
isDigit                 :: Char -> BoolisDigit232,8104
isControl               :: Char -> BoolisControl189,6206
isAsciiUpper :: Char -> BoolisAsciiUpper184,6020
isAsciiLower :: Char -> BoolisAsciiLower179,5843
isAscii                 :: Char -> BoolisAscii169,5456
isAlphaNum              :: Char -> BoolisAlphaNum229,8013
isAlpha                 :: Char -> BoolisAlpha221,7641
generalCategory :: Char -> GeneralCategorygeneralCategory164,5224

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Weak.hs,338
module GHC.Weak (Weak24,636
data Weak v = Weak (Weak# v)Weak92,3643
runFinalizerBatch :: Int -> Array# (State# RealWorld -> State# RealWorld)runFinalizerBatch144,5430
mkWeak  :: k                            -- ^ keymkWeak98,3818
finalize :: Weak v -> IO ()finalize125,4902
deRefWeak :: Weak v -> IO (Maybe v)deRefWeak116,4569

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Windows.hs,1566
module GHC.Windows (Windows23,745
type BOOL    = BoolBOOL84,1888
type LPBOOL  = Ptr BOOLLPBOOL85,1908
type BYTE    = Word8BYTE86,1932
type DWORD   = Word32DWORD87,1953
type UINT    = Word32UINT88,1975
type ErrCode = DWORDErrCode89,1997
type HANDLE  = Ptr ()HANDLE90,2018
type LPWSTR  = Ptr CWcharLPWSTR91,2040
type LPTSTR = LPWSTRLPTSTR96,2251
   c_maperrno :: IO ()c_maperrno181,5059
   c_maperrno_func :: ErrCode -> Errnoc_maperrno_func186,5252
    c_getErrorMessage :: DWORD -> IO LPWSTRc_getErrorMessage189,5362
    localFree :: Ptr a -> IO (Ptr a)localFree192,5465
    getLastError :: IO ErrCodegetLastError196,5627
throwGetLastError :: String -> IO athrowGetLastError105,2467
iNVALID_HANDLE_VALUE :: HANDLEiNVALID_HANDLE_VALUE101,2322
iNFINITE :: DWORDiNFINITE98,2273
getErrorMessage :: ErrCode -> IO StringgetErrorMessage131,3432
failWith :: String -> ErrCode -> IO afailWith110,2642
failUnlessSuccessOr :: ErrCode -> String -> IO ErrCode -> IO BoolfailUnlessSuccessOr166,4511
failUnlessSuccess :: String -> IO ErrCode -> IO ()failUnlessSuccess161,4358
failIf_ :: (a -> Bool) -> String -> IO a -> IO ()failIf_147,3984
failIfZero :: (Eq a, Num a) => String -> IO a -> IO afailIfZero155,4205
failIfNull :: String -> IO (Ptr a) -> IO (Ptr a)failIfNull152,4122
failIfFalse_ :: String -> IO Bool -> IO ()failIfFalse_158,4287
failIf :: (a -> Bool) -> String -> IO a -> IO afailIf142,3850
errCodeToIOError :: String -> ErrCode -> IO IOErrorerrCodeToIOError115,2810
 WINDOWS_CCONV stdcallWINDOWS_CCONV77,1761

/home/effectfully/.fastdogs/base-4.14.3.0/GHC/Word.hs,3016
module GHC.Word (Word22,669
Word8" #-} Word8 = W8# Word#Word870,1891
Word8" #-} Word8 = W8# Word#W8#70,1891
ord16" #-} Word16 = W16# Word#Word16261,9091
ord16" #-} Word16 = W16# Word#W16#261,9091
ord32" #-} Word32 = W32# Word#Word32495,18020
ord32" #-} Word32 = W32# Word#W32#495,18020
ord64" #-} Word64 = W64# Word64#Word64690,25101
ord64" #-} Word64 = W64# Word64#W64#690,25101
ord64" #-} Word64 = W64# Word#Word64837,31162
ord64" #-} Word64 = W64# Word#W64#837,31162
uncheckedShiftRL64# :: Word# -> Int# -> Word#uncheckedShiftRL64#972,36317
uncheckedShiftL64# :: Word# -> Int# -> Word#uncheckedShiftL64#969,36232
shiftL64#, shiftRL64# :: Word64# -> Int# -> Word64#shiftRL64#815,30241
shiftL64#, shiftRL64# :: Word64# -> Int# -> Word64#shiftL64#815,30241
eqWord8, neWord8 :: Word8 -> Word8 -> BoolneWord879,2090
eqWord64, neWord64 :: Word64 -> Word64 -> BoolneWord64699,25308
eqWord32, neWord32 :: Word32 -> Word32 -> BoolneWord32504,18225
eqWord16, neWord16 :: Word16 -> Word16 -> BoolneWord16270,9296
gtWord8, geWord8, ltWord8, leWord8 :: Word8 -> Word8 -> BoolltWord896,2515
gtWord64, geWord64, ltWord64, leWord64 :: Word64 -> Word64 -> BoolltWord64716,25758
gtWord32, geWord32, ltWord32, leWord32 :: Word32 -> Word32 -> BoolltWord32521,18671
gtWord16, geWord16, ltWord16, leWord16 :: Word16 -> Word16 -> BoolltWord16287,9742
gtWord8, geWord8, ltWord8, leWord8 :: Word8 -> Word8 -> BoolleWord896,2515
gtWord64, geWord64, ltWord64, leWord64 :: Word64 -> Word64 -> BoolleWord64716,25758
gtWord32, geWord32, ltWord32, leWord32 :: Word32 -> Word32 -> BoolleWord32521,18671
gtWord16, geWord16, ltWord16, leWord16 :: Word16 -> Word16 -> BoolleWord16287,9742
gtWord8, geWord8, ltWord8, leWord8 :: Word8 -> Word8 -> BoolgtWord896,2515
gtWord64, geWord64, ltWord64, leWord64 :: Word64 -> Word64 -> BoolgtWord64716,25758
gtWord32, geWord32, ltWord32, leWord32 :: Word32 -> Word32 -> BoolgtWord32521,18671
gtWord16, geWord16, ltWord16, leWord16 :: Word16 -> Word16 -> BoolgtWord16287,9742
gtWord8, geWord8, ltWord8, leWord8 :: Word8 -> Word8 -> BoolgeWord896,2515
gtWord64, geWord64, ltWord64, leWord64 :: Word64 -> Word64 -> BoolgeWord64716,25758
gtWord32, geWord32, ltWord32, leWord32 :: Word32 -> Word32 -> BoolgeWord32521,18671
gtWord16, geWord16, ltWord16, leWord16 :: Word16 -> Word16 -> BoolgeWord16287,9742
eqWord8, neWord8 :: Word8 -> Word8 -> BooleqWord879,2090
eqWord64, neWord64 :: Word64 -> Word64 -> BooleqWord64699,25308
eqWord32, neWord32 :: Word32 -> Word32 -> BooleqWord32504,18225
eqWord16, neWord16 :: Word16 -> Word16 -> BooleqWord16270,9296
byteSwap64 :: Word64 -> Word64byteSwap641008,37215
byteSwap32 :: Word32 -> Word32byteSwap32681,24799
byteSwap16 :: Word16 -> Word16byteSwap16411,14643
bitReverse8 :: Word8 -> Word8bitReverse81018,37450
bitReverse64 :: Word64 -> Word64bitReverse641037,37982
bitReverse32 :: Word32 -> Word32bitReverse321030,37784
bitReverse16 :: Word16 -> Word16bitReverse161024,37613

/home/effectfully/.fastdogs/base-4.14.3.0/Numeric.hs,1134
module Numeric (Numeric19,584
showOct :: (Integral a, Show a) => a -> ShowSshowOct288,9248
showIntAtBase :: (Integral a, Show a) => a -> (Int -> Char) -> a -> ShowSshowIntAtBase269,8491
showInt :: Integral a => a -> ShowSshowInt140,3777
showHex :: (Integral a,Show a) => a -> ShowSshowHex284,9109
showHFloat :: RealFloat a => a -> ShowSshowHFloat228,7100
showGFloatAlt    :: (RealFloat a) => Maybe Int -> a -> ShowSshowGFloatAlt213,6620
showGFloat    :: (RealFloat a) => Maybe Int -> a -> ShowSshowGFloat190,5776
showFFloatAlt    :: (RealFloat a) => Maybe Int -> a -> ShowSshowFFloatAlt203,6247
showFFloat    :: (RealFloat a) => Maybe Int -> a -> ShowSshowFFloat181,5341
showEFloat    :: (RealFloat a) => Maybe Int -> a -> ShowSshowEFloat173,4988
readSigned :: (Real a) => ReadS a -> ReadS areadSigned124,3088
readOct :: (Eq a, Num a) => ReadS areadOct89,2066
readInt :: Num areadInt78,1663
readHex :: (Eq a, Num a) => ReadS areadHex104,2446
readFloatP :: RealFrac a => ReadP areadFloatP112,2673
readFloat :: RealFrac a => ReadS areadFloat109,2603
readDec :: (Eq a, Num a) => ReadS areadDec96,2224

/home/effectfully/.fastdogs/base-4.14.3.0/Numeric/Natural.hs,38
module Numeric.NaturalNatural20,571

/home/effectfully/.fastdogs/base-4.14.3.0/Prelude.hs,32
module Prelude (Prelude20,681

/home/effectfully/.fastdogs/base-4.14.3.0/System/CPUTime.hsc,134
module System.CPUTimeCPUTime26,647
getCPUTime :: IO IntegergetCPUTime66,2044
cpuTimePrecision :: IntegercpuTimePrecision59,1757

/home/effectfully/.fastdogs/base-4.14.3.0/System/CPUTime/Posix/ClockGetTime.hsc,514
module System.CPUTime.Posix.ClockGetTimeClockGetTime10,151
data TimespecTimespec31,736
foreign import capi unsafe "time.h clock_getres"  clock_getres  :: CInt -> Ptr Timespec -> IO CIntclock_getres43,1279
foreign import capi unsafe "time.h clock_gettime" clock_gettime :: CInt -> Ptr Timespec -> IO CIntclock_gettime44,1378
withTimespec :: (Ptr Timespec -> IO a) -> IO (a, Integer)withTimespec35,899
getCpuTimePrecision :: IO IntegergetCpuTimePrecision26,551
getCPUTime :: IO IntegergetCPUTime21,382

/home/effectfully/.fastdogs/base-4.14.3.0/System/CPUTime/Posix/RUsage.hsc,357
module System.CPUTime.Posix.RUsageRUsage6,90
type CRUsage = ()CRUsage35,1079
foreign import capi unsafe "HsBase.h getrusage" getrusage :: CInt -> Ptr CRUsage -> IO CIntgetrusage36,1097
foreign import ccall unsafe clk_tck :: CLongclk_tck42,1307
getCpuTimePrecision :: IO IntegergetCpuTimePrecision38,1190
getCPUTime :: IO IntegergetCPUTime21,339

/home/effectfully/.fastdogs/base-4.14.3.0/System/CPUTime/Posix/Times.hsc,348
module System.CPUTime.Posix.TimesTimes6,90
type CTms = ()CTms29,702
foreign import ccall unsafe times :: Ptr CTms -> IO CClocktimes30,717
foreign import ccall unsafe clk_tck :: CLongclk_tck36,884
getCpuTimePrecision :: IO IntegergetCpuTimePrecision32,777
getCPUTime :: IO IntegergetCPUTime21,329
clockTicks :: IntegerclockTicks38,930

/home/effectfully/.fastdogs/base-4.14.3.0/System/CPUTime/Unsupported.hs,153
module System.CPUTime.UnsupportedUnsupported1,0
getCpuTimePrecision :: IO IntegergetCpuTimePrecision15,318
getCPUTime :: IO IntegergetCPUTime8,115

/home/effectfully/.fastdogs/base-4.14.3.0/System/CPUTime/Utils.hs,227
module System.CPUTime.UtilsUtils1,0
csuSecondsToInteger :: CSUSeconds -> IntegercsuSecondsToInteger18,438
cTimeToInteger :: CTime -> IntegercTimeToInteger15,360
cClockToInteger :: CClock -> IntegercClockToInteger12,278

/home/effectfully/.fastdogs/base-4.14.3.0/System/CPUTime/Windows.hsc,793
module System.CPUTime.WindowsWindows6,116
type FILETIME = ()FILETIME51,1734
type HANDLE = ()HANDLE52,1753
foreign import stdcall unsafe "GetCurrentProcess" getCurrentProcess :: IO (Ptr HANDLE)getCurrentProcess56,1859
foreign import stdcall unsafe "GetProcessTimes" getProcessTimes :: Ptr HANDLE -> Ptr FILETIME -> Ptr FILETIME -> Ptr FILETIME -> Ptr FILETIME -> IO CIntgetProcessTimes57,1946
foreign import ccall unsafe "GetCurrentProcess" getCurrentProcess :: IO (Ptr HANDLE)getCurrentProcess59,2131
foreign import ccall unsafe "GetProcessTimes" getProcessTimes :: Ptr HANDLE -> Ptr FILETIME -> Ptr FILETIME -> Ptr FILETIME -> Ptr FILETIME -> IO CIntgetProcessTimes60,2216
getCpuTimePrecision :: IO IntegergetCpuTimePrecision48,1665
getCPUTime :: IO IntegergetCPUTime19,315

/home/effectfully/.fastdogs/base-4.14.3.0/System/Console/GetOpt.hs,2192
module System.Console.GetOpt (GetOpt42,1411
data ArgOrder aArgOrder68,2108
  = RequireOrder                -- ^ no option processing after first non-optionRequireOrder69,2124
  | Permute                     -- ^ freely intersperse options and non-optionsPermute70,2205
  | ReturnInOrder (String -> a) -- ^ wrap non-options into optionsReturnInOrder71,2285
data OptDescr a =              -- description of a single options:OptDescr86,2575
   Option [Char]                --    list of short option charactersOption87,2642
data ArgDescr aArgDescr94,3047
   = NoArg                   a         -- ^   no argument expectedNoArg95,3063
   | ReqArg (String       -> a) String -- ^   option requires argumentReqArg96,3130
   | OptArg (Maybe String -> a) String -- ^   optional argumentOptArg97,3201
data OptKind a                -- kind of cmd line arg (internal use only):OptKind115,3753
   = Opt       a                --    an optionOpt116,3828
   | UnreqOpt  String           --    an un-recognized optionUnreqOpt117,3876
   | NonOpt    String           --    a non-optionNonOpt118,3938
   | EndOfOpts                  --    end-of-options marker (i.e. "--")EndOfOpts119,3989
   | OptErr    String           --    something went wrong...OptErr120,4061
usageInfo :: String                    -- headerusageInfo125,4278
shortOpt :: Char -> String -> [String] -> [OptDescr a] -> (OptKind a,[String])shortOpt230,9329
longOpt :: String -> [String] -> [OptDescr a] -> (OptKind a,[String])longOpt209,8225
getOpt' :: ArgOrder a                         -- non-option handlinggetOpt'182,6650
getOpt :: ArgOrder a                   -- non-option handlinggetOpt170,6071
getNext :: String -> [String] -> [OptDescr a] -> (OptKind a,[String])getNext202,7898
fmtShort :: ArgDescr a -> Char -> StringfmtShort146,5269
fmtOpt :: OptDescr a -> [(String,String,String)]fmtOpt135,4849
fmtLong :: ArgDescr a -> String -> StringfmtLong151,5464
errUnrec :: String -> StringerrUnrec256,10609
errReq :: String -> String -> OptKind aerrReq253,10478
errNoArg :: String -> OptKind aerrNoArg259,10700
errAmbig :: [OptDescr a] -> String -> OptKind aerrAmbig249,10300

/home/effectfully/.fastdogs/base-4.14.3.0/System/Environment.hs,2004
module System.EnvironmentEnvironment18,527
  getProgArgv :: Ptr CInt -> Ptr (Ptr CString) -> IO ()getProgArgv82,2068
  c_GetLastError:: IO DWORDc_GetLastError148,4034
  c_GetEnvironmentVariable :: LPWSTR -> LPWSTR -> DWORD -> IO DWORDc_GetEnvironmentVariable172,4860
   c_getenv :: CString -> IO (Ptr CChar)c_getenv184,5247
  c_SetEnvironmentVariable :: LPTSTR -> LPTSTR -> IO Boolc_SetEnvironmentVariable232,6850
foreign import ccall unsafe "putenv" c_putenv :: CString -> IO CIntc_putenv249,7430
foreign import ccall unsafe "__hsbase_unsetenv" c_unsetenv :: CString -> IO CIntc_unsetenv273,8274
  c_setProgArgv  :: CInt -> Ptr CString -> IO ()c_setProgArgv320,9500
  c_GetEnvironmentStrings :: IO (Ptr CWchar)c_GetEnvironmentStrings356,10862
  c_FreeEnvironmentStrings :: Ptr CWchar -> IO Boolc_FreeEnvironmentStrings359,10980
  getEnvBlock :: IO (Ptr CString)getEnvBlock370,11320
withProgName :: String -> IO a -> IO awithProgName293,8718
withProgArgv :: [String] -> IO a -> IO awithProgArgv304,9001
withArgv :: [String] -> IO a -> IO awithArgv301,8939
withArgs :: [String] -> IO a -> IO awithArgs284,8498
unsetEnv :: String -> IO ()unsetEnv259,7745
unpackProgName  :: Ptr (Ptr CChar) -> IO String   -- argv[0]unpackProgName103,2801
setProgArgv :: [String] -> IO ()setProgArgv312,9258
setEnv_ :: String -> String -> IO ()setEnv_225,6548
setEnv :: String -> String -> IO ()setEnv215,6167
putEnv :: String -> IO ()putEnv240,7126
lookupEnv :: String -> IO (Maybe String)lookupEnv160,4311
ioe_missingEnvVar :: String -> IO aioe_missingEnvVar187,5296
getProgName :: IO StringgetProgName94,2554
getEnvironment :: IO [(String, String)]getEnvironment327,9779
getEnv :: String -> IO StringgetEnv134,3609
getArgs :: IO [String]getArgs70,1751
eRROR_ENVVAR_NOT_FOUND :: DWORDeRROR_ENVVAR_NOT_FOUND144,3911
divvy :: String -> (String, String)divvy373,11362
basename :: FilePath -> FilePathbasename109,2982
e WINDOWS_CCONV stdcallWINDOWS_CCONV55,1353

/home/effectfully/.fastdogs/base-4.14.3.0/System/Environment/Blank.hsc,896
module System.Environment.BlankBlank33,1083
  c_SetEnvironmentVariable :: LPTSTR -> LPTSTR -> IO Boolc_SetEnvironmentVariable131,3683
   c_setenv :: CString -> CString -> CInt -> IO CIntc_setenv140,3970
  c_GetLastError:: IO DWORDc_GetLastError161,4779
   c_unsetenv :: CString -> IO CIntc_unsetenv169,5032
   c_unsetenv :: CString -> IO ()c_unsetenv175,5210
foreign import ccall unsafe "putenv" c_putenv :: CString -> IO CIntc_putenv192,5660
unsetEnv :: String -> IO ()unsetEnv146,4239
throwInvalidArgument :: String -> IO athrowInvalidArgument82,2048
setEnv_ :: String -> String -> IO ()setEnv_124,3381
setEnv ::setEnv104,2841
putEnv :: String -> IO ()putEnv183,5354
getEnvDefault ::getEnvDefault95,2424
getEnv :: String -> IO (Maybe String)getEnv87,2223
eRROR_ENVVAR_NOT_FOUND :: DWORDeRROR_ENVVAR_NOT_FOUND157,4656
ne WINDOWS_CCONV stdcallWINDOWS_CCONV72,1878

/home/effectfully/.fastdogs/base-4.14.3.0/System/Environment/ExecutablePath.hsc,1293
module System.Environment.ExecutablePath ( getExecutablePath ) whereExecutablePath19,574
type UInt32 = Word32UInt3281,2272
    c__NSGetExecutablePath :: CString -> Ptr UInt32 -> IO CIntc__NSGetExecutablePath84,2359
    c_realpath :: CString -> CString -> IO CStringc_realpath106,3271
    c_readlink :: CString -> CString -> CSize -> IO CIntc_readlink127,3929
  c_sysctlc_sysctl149,4606
    c_GetModuleFileName :: Ptr () -> CWString -> Word32 -> IO Word32c_GetModuleFileName246,8002
    c_pathFileExists :: CWString -> IO Boolc_pathFileExists249,8136
    c_createFile :: CWStringc_createFile252,8241
  c_closeHandle  :: Ptr () -> IO Boolc_closeHandle271,8819
  c_getFinalPathHandle :: Ptr () -> CWString -> Word32 -> Word32 -> IO Word32c_getFinalPathHandle274,8932
    c_getFullProgArgv :: Ptr CInt -> Ptr (Ptr CString) -> IO ()c_getFullProgArgv282,9169
realpath :: FilePath -> IO FilePathrealpath112,3469
readSymbolicLink :: FilePath -> IO FilePathreadSymbolicLink133,4086
getFinalPath :: FilePath -> IO FilePathgetFinalPath218,6864
getExecutablePath :: IO FilePathgetExecutablePath74,2115
createFile :: CWString -> IO (Ptr ())createFile261,8465
_NSGetExecutablePath :: IO FilePath_NSGetExecutablePath90,2545
ne WINDOWS_CCONV stdcallWINDOWS_CCONV188,5734

/home/effectfully/.fastdogs/base-4.14.3.0/System/Exit.hs,191
module System.ExitExit17,471
exitWith :: ExitCode -> IO aexitWith60,2052
exitSuccess :: IO aexitSuccess75,2613
exitFailure :: IO aexitFailure69,2429
die :: String -> IO adie81,2767

/home/effectfully/.fastdogs/base-4.14.3.0/System/IO.hs,2371
module System.IO (IO18,517
foreign import ccall "getTempFileNameErrorNo" c_getTempFileNameErrorNoc_getTempFileNameErrorNo545,18623
data OpenNewFileResultOpenNewFileResult590,20185
  = NewFileCreated CIntNewFileCreated591,20208
  | FileExistsFileExists592,20232
  | OpenNewError ErrnoOpenNewError593,20247
writeFile :: FilePath -> String -> IO ()writeFile326,8459
withFile :: FilePath -> IOMode -> (Handle -> IO r) -> IO rwithFile396,11234
withBinaryFile :: FilePath -> IOMode -> (Handle -> IO r) -> IO rwithBinaryFile403,11608
tempCounter :: IORef InttempCounter579,19906
std_flags, output_flags, rw_flags :: CIntstd_flags625,21069
std_flags, output_flags, rw_flags :: CIntrw_flags625,21069
readLn          :: Read a => IO areadLn343,9126
readIO          :: Read a => String -> IO areadIO351,9406
readFile        :: FilePath -> IO StringreadFile321,8257
rand_string :: IO Stringrand_string584,20038
putStrLn        :: String -> IO ()putStrLn272,6630
putStr          :: String -> IO ()putStr267,6500
putChar         :: Char -> IO ()putChar261,6345
print           :: Show a => a -> IO ()print286,7122
pathSeparatorChar :: CharpathSeparatorChar615,20826
pathSeparator :: String -> BoolpathSeparator548,18767
output_flags = std_flagsoutput_flags551,18867
openTempFileWithDefaultPermissions :: FilePath -> StringopenTempFileWithDefaultPermissions473,15013
openTempFile' :: String -> FilePath -> String -> Bool -> CModeopenTempFile'484,15618
openTempFile :: FilePath   -- ^ Directory in which to create the fileopenTempFile458,14157
openNewFile :: FilePath -> Bool -> CMode -> IO OpenNewFileResultopenNewFile595,20271
openBinaryTempFileWithDefaultPermissions :: FilePath -> StringopenBinaryTempFileWithDefaultPermissions479,15339
openBinaryTempFile :: FilePath -> String -> IO (FilePath, Handle)openBinaryTempFile468,14777
localeEncoding :: TextEncodinglocaleEncoding363,10016
interact        ::  (String -> String) -> IO ()interact313,7974
hReady          :: Handle -> IO BoolhReady373,10309
hPrint          :: Show a => Handle -> a -> IO ()hPrint387,10762
getLine         :: IO StringgetLine298,7431
getContents     :: IO StringgetContents305,7649
getChar         :: IO ChargetChar292,7287
fixIO :: (a -> IO a) -> IO afixIO412,12007
appendFile      :: FilePath -> String -> IO ()appendFile338,8949

/home/effectfully/.fastdogs/base-4.14.3.0/System/IO/Error.hs,3068
module System.IO.Error (Error18,509
userErrorType            :: IOErrorTypeuserErrorType220,7010
tryIOError     :: IO a -> IO (Either IOError a)tryIOError105,2261
resourceVanishedErrorType :: IOErrorTyperesourceVanishedErrorType228,7319
permissionErrorType      :: IOErrorTypepermissionErrorType216,6880
modifyIOError :: (IOError -> IOError) -> IO a -> IO amodifyIOError322,10740
mkIOError :: IOErrorType -> String -> Maybe Handle -> Maybe FilePath -> IOErrormkIOError117,2771
isUserErrorType :: IOErrorType -> BoolisUserErrorType275,9068
isUserError         :: IOError -> BoolisUserError173,5258
isResourceVanishedErrorType :: IOErrorType -> BoolisResourceVanishedErrorType283,9299
isResourceVanishedError :: IOError -> BoolisResourceVanishedError180,5507
isPermissionErrorType :: IOErrorType -> BoolisPermissionErrorType270,8900
isPermissionError   :: IOError -> BoolisPermissionError169,5080
isIllegalOperationErrorType :: IOErrorType -> BoolisIllegalOperationErrorType264,8616
isIllegalOperation  :: IOError -> BoolisIllegalOperation163,4814
isFullErrorType :: IOErrorType -> BoolisFullErrorType253,8278
isFullError         :: IOError -> BoolisFullError149,4148
isEOFErrorType :: IOErrorType -> BoolisEOFErrorType259,8473
isEOFError          :: IOError -> BoolisEOFError154,4357
isDoesNotExistErrorType :: IOErrorType -> BoolisDoesNotExistErrorType242,7826
isDoesNotExistError :: IOError -> BoolisDoesNotExistError137,3619
isAlreadyInUseErrorType :: IOErrorType -> BoolisAlreadyInUseErrorType248,8081
isAlreadyInUseError :: IOError -> BoolisAlreadyInUseError144,3953
isAlreadyExistsErrorType :: IOErrorType -> BoolisAlreadyExistsErrorType236,7605
isAlreadyExistsError :: IOError -> BoolisAlreadyExistsError132,3406
ioeSetLocation    :: IOError -> String      -> IOErrorioeSetLocation310,10173
ioeSetHandle      :: IOError -> Handle      -> IOErrorioeSetHandle311,10228
ioeSetFileName    :: IOError -> FilePath    -> IOErrorioeSetFileName312,10283
ioeSetErrorType   :: IOError -> IOErrorType -> IOErrorioeSetErrorType308,10063
ioeSetErrorString :: IOError -> String      -> IOErrorioeSetErrorString309,10118
ioeGetLocation        :: IOError -> StringioeGetLocation292,9631
ioeGetHandle          :: IOError -> Maybe HandleioeGetHandle293,9674
ioeGetFileName        :: IOError -> Maybe FilePathioeGetFileName294,9723
ioeGetErrorType       :: IOError -> IOErrorTypeioeGetErrorType290,9540
ioeGetErrorString     :: IOError -> StringioeGetErrorString291,9588
illegalOperationErrorType :: IOErrorTypeillegalOperationErrorType211,6651
fullErrorType            :: IOErrorTypefullErrorType202,6350
eofErrorType             :: IOErrorTypeeofErrorType207,6525
doesNotExistErrorType    :: IOErrorTypedoesNotExistErrorType193,5986
catchIOError :: IO a -> (IOError -> IO a) -> IO acatchIOError362,12478
annotateIOError :: IOErrorannotateIOError331,11161
alreadyInUseErrorType    :: IOErrorTypealreadyInUseErrorType198,6197
alreadyExistsErrorType   :: IOErrorTypealreadyExistsErrorType188,5812

/home/effectfully/.fastdogs/base-4.14.3.0/System/IO/Unsafe.hs,95
module System.IO.Unsafe (Unsafe18,512
unsafeFixIO :: (a -> IO a) -> IO aunsafeFixIO44,1160

/home/effectfully/.fastdogs/base-4.14.3.0/System/Info.hs,229
module System.InfoInfo19,561
os :: Stringos38,999
compilerVersionRaw :: IntcompilerVersionRaw50,1263
compilerVersion :: VersioncompilerVersion31,785
compilerName :: StringcompilerName47,1218
arch :: Stringarch42,1089

/home/effectfully/.fastdogs/base-4.14.3.0/System/Mem.hs,230
module System.MemMem18,545
foreign import ccall "performMajorGC" performMajorGC :: IO ()performMajorGC41,1053
foreign import ccall "performGC" performMinorGC :: IO ()performMinorGC46,1190
performGC :: IO ()performGC35,932

/home/effectfully/.fastdogs/base-4.14.3.0/System/Mem/StableName.hs,50
module System.Mem.StableName (StableName27,1076

/home/effectfully/.fastdogs/base-4.14.3.0/System/Mem/Weak.hs,239
module System.Mem.Weak (Weak52,2432
mkWeakPtr :: k -> Maybe (IO ()) -> IO (Weak k)mkWeakPtr83,3035
mkWeakPair :: k -> v -> Maybe (IO ()) -> IO (Weak (k,v))mkWeakPair110,4028
addFinalizer :: key -> IO () -> IO ()addFinalizer98,3591

/home/effectfully/.fastdogs/base-4.14.3.0/System/Posix/Internals.hs,9376
module System.Posix.Internals whereInternals23,766
flock" #-} CFLockCFLock65,1761
group" #-} CGroupCGroup66,1802
lconv" #-} CLconvCLconv67,1843
asswd" #-} CPasswdCPasswd68,1885
ction" #-} CSigactionCSigaction69,1931
set_t" #-} CSigsetCSigset70,1972
 stat" #-}  CStatCStat71,2013
rmios" #-} CTermiosCTermios72,2056
ct tm" #-} CTmCTm73,2096
t tms" #-} CTmsCTms74,2132
imbuf" #-} CUtimbufCUtimbuf75,2173
sname" #-} CUtsnameCUtsname76,2218
type FD = CIntFD78,2239
   get_saved_termios :: CInt -> IO (Ptr CTermios)get_saved_termios257,8535
   set_saved_termios :: CInt -> (Ptr CTermios) -> IO ()set_saved_termios260,8652
   set_console_buffering :: CInt -> CInt -> IO CIntset_console_buffering300,10187
   set_console_echo :: CInt -> CInt -> IO CIntset_console_echo303,10301
   get_console_echo :: CInt -> IO CIntget_console_echo306,10410
   is_console :: CInt -> IO CIntis_console309,10505
type CFilePath = CStringCFilePath350,11821
   c_open :: CFilePath -> CInt -> CMode -> IO CIntc_open356,11939
   c_safe_open :: CFilePath -> CInt -> CMode -> IO CIntc_safe_open359,12042
   c_fstat :: CInt -> Ptr CStat -> IO CIntc_fstat362,12153
   lstat :: CFilePath -> Ptr CStat -> IO CIntlstat365,12251
   c_lseek :: CInt -> COff -> CInt -> IO COffc_lseek386,13019
   c_access :: CString -> CInt -> IO CIntc_access389,13112
   c_chmod :: CString -> CMode -> IO CIntc_chmod392,13200
   c_close :: CInt -> IO CIntc_close395,13288
   c_creat :: CString -> CMode -> IO CIntc_creat398,13364
   c_dup :: CInt -> IO CIntc_dup401,13450
   c_dup2 :: CInt -> CInt -> IO CIntc_dup2404,13523
   c_isatty :: CInt -> IO CIntc_isatty407,13607
   c_read :: CInt -> Ptr Word8 -> CUInt -> IO CIntc_read412,13739
   c_safe_read :: CInt -> Ptr Word8 -> CUInt -> IO CIntc_safe_read416,13860
   c_umask :: CMode -> IO CModec_umask419,13963
   c_write :: CInt -> Ptr Word8 -> CUInt -> IO CIntc_write423,14068
   c_safe_write :: CInt -> Ptr Word8 -> CUInt -> IO CIntc_safe_write427,14191
   c_pipe :: Ptr CInt -> IO CIntc_pipe430,14294
   c_read :: CInt -> Ptr Word8 -> CSize -> IO CSsizec_read438,14560
   c_safe_read :: CInt -> Ptr Word8 -> CSize -> IO CSsizec_safe_read442,14682
   c_umask :: CMode -> IO CModec_umask445,14786
   c_write :: CInt -> Ptr Word8 -> CSize -> IO CSsizec_write449,14890
   c_safe_write :: CInt -> Ptr Word8 -> CSize -> IO CSsizec_safe_write453,15014
   c_pipe :: Ptr CInt -> IO CIntc_pipe456,15118
   c_unlink :: CString -> IO CIntc_unlink460,15205
   c_utime :: CString -> Ptr CUtimbuf -> IO CIntc_utime463,15284
   c_getpid :: IO CPidc_getpid466,15380
   c_stat :: CFilePath -> Ptr CStat -> IO CIntc_stat469,15457
   c_ftruncate :: CInt -> COff -> IO CIntc_ftruncate472,15563
   c_fcntl_read  :: CInt -> CInt -> IO CIntc_fcntl_read476,15680
   c_fcntl_write :: CInt -> CInt -> CLong -> IO CIntc_fcntl_write479,15769
   c_fcntl_lock  :: CInt -> CInt -> Ptr CFLock -> IO CIntc_fcntl_lock482,15867
   c_fork :: IO CPidc_fork485,15970
   c_link :: CString -> CString -> IO CIntc_link488,16036
   c_mkfifo :: CString -> CMode -> IO CIntc_mkfifo492,16165
   c_sigemptyset :: Ptr CSigset -> IO CIntc_sigemptyset495,16259
   c_sigaddset :: Ptr CSigset -> CInt -> IO CIntc_sigaddset498,16351
   c_sigprocmask :: CInt -> Ptr CSigset -> Ptr CSigset -> IO CIntc_sigprocmask501,16451
   c_tcgetattr :: CInt -> Ptr CTermios -> IO CIntc_tcgetattr505,16606
   c_tcsetattr :: CInt -> CInt -> Ptr CTermios -> IO CIntc_tcsetattr509,16745
   c_waitpid :: CPid -> Ptr CInt -> CInt -> IO CPidc_waitpid512,16851
foreign import ccall unsafe "HsBase.h __hscore_o_rdonly" o_RDONLY :: CInto_RDONLY516,16932
foreign import ccall unsafe "HsBase.h __hscore_o_wronly" o_WRONLY :: CInto_WRONLY517,17006
foreign import ccall unsafe "HsBase.h __hscore_o_rdwr"   o_RDWR   :: CInto_RDWR518,17080
foreign import ccall unsafe "HsBase.h __hscore_o_append" o_APPEND :: CInto_APPEND519,17154
foreign import ccall unsafe "HsBase.h __hscore_o_creat"  o_CREAT  :: CInto_CREAT520,17228
foreign import ccall unsafe "HsBase.h __hscore_o_excl"   o_EXCL   :: CInto_EXCL521,17302
foreign import ccall unsafe "HsBase.h __hscore_o_trunc"  o_TRUNC  :: CInto_TRUNC522,17376
foreign import ccall unsafe "HsBase.h __hscore_o_noctty"   o_NOCTTY   :: CInto_NOCTTY525,17471
foreign import ccall unsafe "HsBase.h __hscore_o_nonblock" o_NONBLOCK :: CInto_NONBLOCK526,17549
foreign import ccall unsafe "HsBase.h __hscore_o_binary"   o_BINARY   :: CInto_BINARY527,17627
foreign import capi unsafe "sys/stat.h S_ISREG"  c_s_isreg  :: CMode -> CIntc_s_isreg529,17706
foreign import capi unsafe "sys/stat.h S_ISCHR"  c_s_ischr  :: CMode -> CIntc_s_ischr530,17783
foreign import capi unsafe "sys/stat.h S_ISBLK"  c_s_isblk  :: CMode -> CIntc_s_isblk531,17860
foreign import capi unsafe "sys/stat.h S_ISDIR"  c_s_isdir  :: CMode -> CIntc_s_isdir532,17937
foreign import capi unsafe "sys/stat.h S_ISFIFO" c_s_isfifo :: CMode -> CIntc_s_isfifo533,18014
foreign import ccall unsafe "HsBase.h __hscore_sizeof_stat" sizeof_stat :: Intsizeof_stat546,18380
foreign import ccall unsafe "HsBase.h __hscore_st_mtime" st_mtime :: Ptr CStat -> IO CTimest_mtime547,18459
foreign import ccall unsafe "HsBase.h __hscore_st_size" st_size :: Ptr CStat -> IO Int64st_size549,18579
foreign import ccall unsafe "HsBase.h __hscore_st_mode" st_mode :: Ptr CStat -> IO CModest_mode553,18769
foreign import ccall unsafe "HsBase.h __hscore_st_dev" st_dev :: Ptr CStat -> IO CDevst_dev554,18858
foreign import ccall unsafe "HsBase.h __hscore_st_ino" st_ino :: Ptr CStat -> IO CInost_ino555,18944
foreign import ccall unsafe "HsBase.h __hscore_echo"         const_echo :: CIntconst_echo557,19031
foreign import ccall unsafe "HsBase.h __hscore_tcsanow"      const_tcsanow :: CIntconst_tcsanow558,19111
foreign import ccall unsafe "HsBase.h __hscore_icanon"       const_icanon :: CIntconst_icanon559,19194
foreign import ccall unsafe "HsBase.h __hscore_vmin"         const_vmin   :: CIntconst_vmin560,19276
foreign import ccall unsafe "HsBase.h __hscore_vtime"        const_vtime  :: CIntconst_vtime561,19358
foreign import ccall unsafe "HsBase.h __hscore_sigttou"      const_sigttou :: CIntconst_sigttou562,19440
foreign import ccall unsafe "HsBase.h __hscore_sig_block"    const_sig_block :: CIntconst_sig_block563,19523
foreign import ccall unsafe "HsBase.h __hscore_sig_setmask"  const_sig_setmask :: CIntconst_sig_setmask564,19608
foreign import ccall unsafe "HsBase.h __hscore_f_getfl"      const_f_getfl :: CIntconst_f_getfl565,19695
foreign import ccall unsafe "HsBase.h __hscore_f_setfl"      const_f_setfl :: CIntconst_f_setfl566,19778
foreign import ccall unsafe "HsBase.h __hscore_f_setfd"      const_f_setfd :: CIntconst_f_setfd567,19861
foreign import ccall unsafe "HsBase.h __hscore_fd_cloexec"   const_fd_cloexec :: CLongconst_fd_cloexec568,19944
foreign import ccall unsafe "HsBase.h __hscore_sizeof_termios"  sizeof_termios :: Intsizeof_termios571,20060
foreign import ccall unsafe "HsBase.h __hscore_sizeof_sigset_t" sizeof_sigset_t :: Intsizeof_sigset_t572,20146
foreign import ccall unsafe "HsBase.h __hscore_lflag" c_lflag :: Ptr CTermios -> IO CTcflagc_lflag574,20234
foreign import ccall unsafe "HsBase.h __hscore_poke_lflag" poke_c_lflag :: Ptr CTermios -> CTcflag -> IO ()poke_c_lflag575,20326
foreign import ccall unsafe "HsBase.h __hscore_ptr_c_cc" ptr_c_cc  :: Ptr CTermios -> IO (Ptr Word8)ptr_c_cc576,20434
foreign import capi unsafe "sys/stat.h S_ISSOCK" c_s_issock :: CMode -> CIntc_s_issock582,20638
foreign import ccall unsafe "__hscore_bufsiz"  dEFAULT_BUFFER_SIZE :: IntdEFAULT_BUFFER_SIZE587,20748
foreign import capi  unsafe "stdio.h value SEEK_CUR" sEEK_CUR :: CIntsEEK_CUR588,20822
foreign import capi  unsafe "stdio.h value SEEK_SET" sEEK_SET :: CIntsEEK_SET589,20892
foreign import capi  unsafe "stdio.h value SEEK_END" sEEK_END :: CIntsEEK_END590,20962
withFilePath :: FilePath -> (CWString -> IO a) -> IO awithFilePath161,4807
tcSetAttr :: FD -> (Ptr CTermios -> IO a) -> IO atcSetAttr221,6823
statGetType :: Ptr CStat -> IO IODeviceTypestatGetType118,3408
setNonBlockingFD :: FD -> Bool -> IO ()setNonBlockingFD316,10676
setEcho :: FD -> Bool -> IO ()setEcho188,5661
setCooked :: FD -> Bool -> IO ()setCooked203,6148
setCloseOnExec :: FD -> IO ()setCloseOnExec340,11536
s_issock :: CMode -> Bools_issock579,20543
s_isreg  :: CMode -> Bools_isreg535,18092
s_isfifo :: CMode -> Bools_isfifo543,18320
s_isdir  :: CMode -> Bools_isdir541,18263
s_ischr  :: CMode -> Bools_ischr537,18149
s_isblk  :: CMode -> Bools_isblk539,18206
puts :: String -> IO ()puts54,1362
peekFilePathLen :: CStringLen -> IO FilePathpeekFilePathLen174,5163
peekFilePath :: CWString -> IO FilePathpeekFilePath167,4957
newFilePath :: FilePath -> IO CWStringnewFilePath164,4891
ioe_unknownfiletype :: IOExceptionioe_unknownfiletype130,3913
ioe_unk_error :: String -> String -> IOExceptionioe_unk_error279,9457
getEcho :: FD -> IO BoolgetEcho197,5978
fileType :: FilePath -> IO IODeviceTypefileType95,2694
fdType :: FD -> IO IODeviceTypefdType115,3327
fdStat :: FD -> IO (IODeviceType, CDev, CIno)fdStat105,3056
fdGetMode :: FD -> IO IOModefdGetMode136,4125
fdFileSize :: FD -> IO IntegerfdFileSize83,2359

/home/effectfully/.fastdogs/base-4.14.3.0/System/Posix/Types.hs,639
module System.Posix.Types (Types25,818
type LinkCount      = CNlinkLinkCount237,5011
type UserID         = CUidUserID240,5072
type GroupID        = CGidGroupID243,5131
type ByteCount      = CSizeByteCount246,5166
type ClockTick      = CClockClockTick247,5194
type EpochTime      = CTimeEpochTime248,5223
type DeviceID       = CDevDeviceID249,5251
type FileID         = CInoFileID250,5278
type FileMode       = CModeFileMode251,5305
type ProcessID      = CPidProcessID252,5333
type FileOffset     = COffFileOffset253,5360
type ProcessGroupID = CPidProcessGroupID254,5387
type Limit          = CLongLimit255,5414

/home/effectfully/.fastdogs/base-4.14.3.0/System/Timeout.hs,180
module System.Timeout ( Timeout, timeout ) whereTimeout19,567
newtype Timeout = Timeout Unique deriving EqTimeout42,1334
timeout :: Int -> IO a -> IO (Maybe a)timeout93,3982

/home/effectfully/.fastdogs/base-4.14.3.0/Text/ParserCombinators/ReadP.hs,2260
module Text.ParserCombinators.ReadPReadP25,976
type ReadS a = String -> [(a,String)]ReadS91,2024
data P aP97,2210
  = Get (Char -> P a)Get98,2219
  | Look (String -> P a)Look99,2241
  | FailFail100,2266
  | Result a (P a)Result101,2275
  | Final (NonEmpty (a,String))Final102,2294
newtype ReadP a = R (forall b . (a -> P b) -> P b)ReadP164,4281
newtype ReadP a = R (forall b . (a -> P b) -> P b)R164,4281
string :: String -> ReadP Stringstring277,7512
skipSpaces :: ReadP ()skipSpaces311,8643
skipMany1 :: ReadP a -> ReadP ()skipMany1354,9961
skipMany :: ReadP a -> ReadP ()skipMany350,9852
sepBy1 :: ReadP a -> ReadP sep -> ReadP [a]sepBy1363,10280
sepBy :: ReadP a -> ReadP sep -> ReadP [a]sepBy358,10069
satisfy :: (Char -> Bool) -> ReadP Charsatisfy262,7068
run :: P a -> ReadS arun199,5028
readS_to_P :: ReadS a -> ReadP areadS_to_P425,12772
readP_to_S :: ReadP a -> ReadS areadP_to_S418,12494
pfail :: ReadP apfail219,5585
optional :: ReadP a -> ReadP ()optional338,9471
option :: a -> ReadP a -> ReadP aoption333,9320
munch1 :: (Char -> Bool) -> ReadP Stringmunch1296,8153
munch :: (Char -> Bool) -> ReadP Stringmunch285,7783
manyTill :: ReadP a -> ReadP end -> ReadP [a]manyTill409,12119
many1 :: ReadP a -> ReadP [a]many1346,9732
many :: ReadP a -> ReadP [a]many342,9613
look :: ReadP Stringlook214,5461
get :: ReadP Charget209,5346
gather :: ReadP a -> ReadP (String, a)gather244,6294
final :: [(a,String)] -> P afinal195,4949
eof :: ReadP ()eof271,7359
endBy1 :: ReadP a -> ReadP sep -> ReadP [a]endBy1373,10688
endBy :: ReadP a -> ReadP sep -> ReadP [a]endBy368,10497
count :: Int -> ReadP a -> ReadP [a]count320,8828
choice :: [ReadP a] -> ReadP achoice305,8490
char :: Char -> ReadP Charchar267,7258
chainr1 :: ReadP a -> ReadP (a -> a -> a) -> ReadP achainr1392,11570
chainr :: ReadP a -> ReadP (a -> a -> a) -> a -> ReadP achainr378,10881
chainl1 :: ReadP a -> ReadP (a -> a -> a) -> ReadP achainl1401,11858
chainl :: ReadP a -> ReadP (a -> a -> a) -> a -> ReadP achainl385,11226
between :: ReadP open -> ReadP close -> ReadP a -> ReadP abetween325,8999
(<++) :: ReadP a -> ReadP a -> ReadP a<++227,5748
(+++) :: ReadP a -> ReadP a -> ReadP a+++223,5645

/home/effectfully/.fastdogs/base-4.14.3.0/Text/ParserCombinators/ReadPrec.hs,988
module Text.ParserCombinators.ReadPrecReadPrec18,607
newtype ReadPrec a = P (Prec -> ReadP a)ReadPrec72,1407
newtype ReadPrec a = P (Prec -> ReadP a)P72,1407
type Prec = IntPrec103,2056
step :: ReadPrec a -> ReadPrec astep115,2322
reset :: ReadPrec a -> ReadPrec areset119,2433
readS_to_Prec :: (Int -> ReadS a) -> ReadPrec areadS_to_Prec175,4064
readPrec_to_S :: ReadPrec a -> (Int -> ReadS a)readPrec_to_S172,3974
readPrec_to_P :: ReadPrec a -> (Int -> ReadP a)readPrec_to_P166,3830
readP_to_Prec :: (Int -> ReadP a) -> ReadPrec areadP_to_Prec169,3903
prec :: Prec -> ReadPrec a -> ReadPrec aprec123,2546
pfail :: ReadPrec apfail155,3525
minPrec :: PrecminPrec105,2073
look :: ReadPrec Stringlook140,3041
lift :: ReadP a -> ReadPrec alift111,2210
get :: ReadPrec Charget135,2914
choice :: [ReadPrec a] -> ReadPrec achoice159,3590
(<++) :: ReadPrec a -> ReadPrec a -> ReadPrec a<++149,3295
(+++) :: ReadPrec a -> ReadPrec a -> ReadPrec a+++145,3177

/home/effectfully/.fastdogs/base-4.14.3.0/Text/Printf.hs,4133
module Text.Printf(Printf23,832
class PrintfType t wherePrintfType266,9799
    spr :: String -> [UPrintf] -> tspr267,9824
class HPrintfType t whereHPrintfType272,10015
    hspr :: Handle -> String -> [UPrintf] -> thspr273,10041
class PrintfArg a wherePrintfArg312,11485
    formatArg :: a -> FieldFormatterformatArg314,11533
    parseFormat :: a -> ModifierParserparseFormat316,11594
class IsChar c whereIsChar401,13650
    toChar :: c -> ChartoChar403,13695
    fromChar :: Char -> cfromChar405,13743
data FormatAdjustment = LeftAdjust | ZeroPadFormatAdjustment418,14012
data FormatAdjustment = LeftAdjust | ZeroPadLeftAdjust418,14012
data FormatAdjustment = LeftAdjust | ZeroPadZeroPad418,14012
data FormatSign = SignPlus | SignSpaceFormatSign424,14196
data FormatSign = SignPlus | SignSpaceSignPlus424,14196
data FormatSign = SignPlus | SignSpaceSignSpace424,14196
data FieldFormat = FieldFormat {FieldFormat430,14384
  fmtWidth :: Maybe Int,       -- ^ Total width of the field.fmtWidth431,14417
  fmtPrecision :: Maybe Int,   -- ^ Secondary field width specifier.fmtPrecision432,14479
  fmtAdjust :: Maybe FormatAdjustment,  -- ^ Kind of filling or paddingfmtAdjust433,14548
  fmtSign :: Maybe FormatSign, -- ^ Whether to insist on afmtSign435,14677
  fmtAlternate :: Bool,        -- ^ Indicates an "alternatefmtAlternate438,14836
  fmtModifiers :: String,      -- ^ Characters that appearedfmtModifiers442,15070
  fmtChar :: Char              -- ^ The format characterfmtChar448,15426
data FormatParse = FormatParse {FormatParse464,16104
  fpModifiers :: String,   -- ^ Any modifiers found.fpModifiers465,16137
  fpChar :: Char,          -- ^ Primary format character.fpChar466,16190
  fpRest :: String         -- ^ Rest of the format string.fpRest467,16248
type FieldFormatter = FieldFormat -> ShowSFieldFormatter506,17350
type ModifierParser = String -> FormatParseModifierParser512,17502
type UPrintf = (ModifierParser, FieldFormatter)UPrintf630,21410
vFmt :: Char -> FieldFormat -> FieldFormatvFmt520,17751
uprintfs :: String -> [UPrintf] -> ShowSuprintfs642,21878
uprintf :: String -> [UPrintf] -> Stringuprintf636,21669
stoi :: String -> (Int, String)stoi743,25611
printf :: (PrintfType r) => String -> rprintf253,9180
perror :: String -> aperror889,30064
parseIntFormat :: a -> String -> FormatParseparseIntFormat480,16644
integral_prec :: Maybe Int -> String -> Stringintegral_prec737,25399
intModifierMap :: [(String, Integer)]intModifierMap472,16384
hPrintf :: (HPrintfType r) => Handle -> String -> rhPrintf258,9372
getStar :: [UPrintf] -> ([UPrintf], Int)getStar855,29055
getSpecs :: Bool -> Bool -> Maybe FormatSign -> Bool -> String -> [UPrintf]getSpecs764,26188
formatString :: IsChar a => [a] -> FieldFormatterformatString534,18109
formatRealFloat :: RealFloat a => a -> FieldFormatterformatRealFloat613,20785
formatIntegral :: Maybe Integer -> Integer -> FieldFormatterformatIntegral581,19524
formatInteger :: Integer -> FieldFormatterformatInteger572,19190
formatInt :: (Integral a, Bounded a) => a -> FieldFormatterformatInt559,18858
formatChar :: Char -> FieldFormatterformatChar527,17932
fmtu :: Integer -> Maybe String -> Maybe Int -> Maybe Integer -> Integerfmtu711,24572
fmti :: Maybe Int -> Integer -> (String, String)fmti699,24012
fmt :: String -> [UPrintf] -> ShowSfmt655,22464
fixupMods :: FieldFormat -> Maybe Integer -> Maybe IntegerfixupMods547,18545
errorShortFormat, errorMissingArgument, errorBadArgument :: aerrorShortFormat899,30328
errorShortFormat, errorMissingArgument, errorBadArgument :: aerrorMissingArgument899,30328
errorBadFormat :: Char -> aerrorBadFormat896,30238
errorShortFormat, errorMissingArgument, errorBadArgument :: aerrorBadArgument899,30328
dfmt :: (RealFloat a) => Char -> Maybe Int -> Bool -> a -> (String, String)dfmt870,29456
adjustment :: Maybe Int -> Maybe a -> Bool -> Booladjustment752,25836
adjustSigned :: FieldFormat -> (String, String) -> StringadjustSigned689,23619
adjust :: FieldFormat -> (String, String) -> Stringadjust666,22911

/home/effectfully/.fastdogs/base-4.14.3.0/Text/Read.hs,244
module Text.Read (Read24,881
reads :: Read a => ReadS areads58,1533
readMaybe :: Read a => String -> Maybe areadMaybe94,2424
readEither :: Read a => String -> Either String areadEither72,1892
read :: Read a => String -> aread109,2977

/home/effectfully/.fastdogs/base-4.14.3.0/Text/Read/Lex.hs,2930
module Text.Read.LexLex18,573
data LexemeLexeme63,1591
  = Char   Char         -- ^ Character literalChar64,1603
  | String String       -- ^ String literal, with escapes interpretedString65,1650
  | Punc   String       -- ^ Punctuation or reserved symbol, e.g. @(@, @::@Punc66,1720
  | Ident  String       -- ^ Haskell identifier, e.g. @foo@, @Baz@Ident67,1796
  | Symbol String       -- ^ Haskell symbol, e.g. @>>@, @:%@Symbol68,1863
  | Number Number       -- ^ @since 4.6.0.0Number69,1924
  | EOFEOF70,1968
data Number = MkNumber Int              -- BaseNumber76,2077
data Number = MkNumber Int              -- BaseMkNumber76,2077
            | MkDecimal Digits          -- Integral partMkDecimal78,2182
type Base   = IntBase414,13284
type Digits = [Int]Digits415,13302
valSimple :: (Num a, Integral d) => a -> [d] -> avalSimple491,15477
valInteger :: Integer -> Digits -> IntegervalInteger505,15985
valDig :: (Eq a, Num a) => a -> Char -> Maybe IntvalDig542,17389
valDecDig :: Char -> Maybe IntvalDecDig557,17827
val :: Num a => a -> Digits -> aval482,15259
readOctP, readDecP, readHexP :: (Eq a, Num a) => ReadP areadOctP579,18600
readIntP' :: (Eq a, Num a) => a -> ReadP areadIntP'572,18332
readIntP :: Num a => a -> (Char -> Bool) -> (Char -> Int) -> ReadP areadIntP565,18065
readOctP, readDecP, readHexP :: (Eq a, Num a) => ReadP areadHexP579,18600
readOctP, readDecP, readHexP :: (Eq a, Num a) => ReadP areadDecP579,18600
numberToRational :: Number -> RationalnumberToRational150,5402
numberToRangedRational :: (Int, Int) -> NumbernumberToRangedRational120,4115
numberToInteger :: Number -> Maybe IntegernumberToInteger86,2457
numberToFixed :: Integer -> Number -> Maybe (Integer, Integer)numberToFixed92,2698
lexToken :: ReadP LexemelexToken184,6650
lexSymbol :: ReadP LexemelexSymbol216,7453
lexString :: ReadP LexemelexString388,12672
lexPunc :: ReadP LexemelexPunc204,7147
lexNumber :: ReadP LexemelexNumber417,13323
lexLitChar :: ReadP LexemelexLitChar251,8614
lexInteger :: Base -> ReadP IntegerlexInteger477,15137
lexId :: ReadP LexemelexId239,8242
lexHexOct :: ReadP LexemelexHexOct423,13546
lexFrac :: ReadP (Maybe Digits)lexFrac447,14264
lexExp :: ReadP (Maybe Integer)lexExp454,14479
lexEOF :: ReadP LexemelexEOF196,6943
lexDigits :: Int -> ReadP DigitslexDigits464,14760
lexDecNumber :: ReadP LexemelexDecNumber440,14063
lexCharE :: ReadP (Char, Bool)  -- "escaped or not"?lexCharE271,9165
lexChar :: ReadP CharlexChar259,8801
lexBaseChar :: ReadP IntlexBaseChar430,13713
lex :: ReadP Lexemelex169,6241
isSymbolChar :: Char -> BoolisSymbolChar226,7749
isPuncChar :: Char -> BoolisPuncChar210,7303
hsLex :: ReadP StringhsLex178,6480
guard           :: (MonadPlus m) => Bool -> m ()guard55,1367
fracExp :: Integer -> Integer -> Digits -> RationalfracExp533,17091
expect :: Lexeme -> ReadP ()expect173,6311

/home/effectfully/.fastdogs/base-4.14.3.0/Text/Show.hs,96
module Text.Show (Show19,562
showListWith :: (a -> ShowS) -> [a] -> ShowSshowListWith33,818

/home/effectfully/.fastdogs/base-4.14.3.0/Text/Show/Functions.hs,53
module Text.Show.Functions () whereFunctions22,677

/home/effectfully/.fastdogs/base-4.14.3.0/Type/Reflection.hs,42
module Type.ReflectionReflection29,1131

/home/effectfully/.fastdogs/base-4.14.3.0/Type/Reflection/Unsafe.hs,113
module Type.Reflection.Unsafe (Unsafe17,656
mkTrApp :: forall k1 k2 (a :: k1 -> k2) (b :: k1).mkTrApp30,1121

/home/effectfully/.fastdogs/base-4.14.3.0/Unsafe/Coerce.hs,137
module Unsafe.Coerce (unsafeCoerce) whereCoerce33,1333
unsafeCoerce :: a -> bunsafeCoerce59,2232
local_id :: a -> alocal_id39,1549

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString.hs,8514
module Data.ByteString (ByteString43,1557
zipWith' :: (Word8 -> Word8 -> Word8) -> ByteString -> ByteString -> ByteStringzipWith'1502,59165
zipWith :: (Word8 -> Word8 -> a) -> ByteString -> ByteString -> [a]zipWith1490,58672
zip :: ByteString -> ByteString -> [(Word8,Word8)]zip1481,58259
writeFile :: FilePath -> ByteString -> IO ()writeFile1882,74049
useAsCStringLen :: ByteString -> (CStringLen -> IO a) -> IO auseAsCStringLen1592,62683
useAsCString :: ByteString -> (CString -> IO a) -> IO auseAsCString1581,62186
unzip :: [(Word8,Word8)] -> (ByteString,ByteString)unzip1527,60038
unsnoc :: ByteString -> Maybe (ByteString, Word8)unsnoc431,18215
unpackFoldr :: ByteString -> (Word8 -> a -> a) -> a -> aunpackFoldr341,14975
unpack :: ByteString -> [Word8]unpack334,14834
unfoldrN :: Int -> (a -> Maybe (Word8, a)) -> a -> (ByteString, Maybe a)unfoldrN792,32391
unfoldr :: (a -> Maybe (Word8, a)) -> a -> ByteStringunfoldr775,31735
uncons :: ByteString -> Maybe (Word8, ByteString)uncons404,17143
transpose :: [ByteString] -> [ByteString]transpose479,20019
takeWhileEnd :: (Word8 -> Bool) -> ByteString -> ByteStringtakeWhileEnd845,34310
takeWhile :: (Word8 -> Bool) -> ByteString -> ByteStringtakeWhile837,33987
take :: Int -> ByteString -> ByteStringtake810,33110
tails :: ByteString -> [ByteString]tails1539,60501
tail :: ByteString -> ByteStringtail396,16906
stripSuffix :: ByteString -> ByteString -> Maybe ByteStringstripSuffix1335,52717
stripPrefix :: ByteString -> ByteString -> Maybe ByteStringstripPrefix1309,51675
splitWith :: (Word8 -> Bool) -> ByteString -> [ByteString]splitWith978,38882
splitAt :: Int -> ByteString -> (ByteString, ByteString)splitAt827,33619
split :: Word8 -> ByteString -> [ByteString]split1020,40470
spanEnd :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)spanEnd967,38362
spanByte :: Word8 -> ByteString -> (ByteString, ByteString)spanByte926,37195
span :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)span916,36849
sort :: ByteString -> ByteStringsort1549,60862
snoc :: ByteString -> Word8 -> ByteStringsnoc378,16174
singleton :: Word8 -> ByteStringsingleton301,13856
scanr1 :: (Word8 -> Word8 -> Word8) -> ByteString -> ByteStringscanr1742,30525
scanr :: (Word8 -> Word8 -> Word8) -> Word8 -> ByteString -> ByteStringscanr726,29962
scanl1 :: (Word8 -> Word8 -> Word8) -> ByteString -> ByteStringscanl1719,29734
scanl :: (Word8 -> Word8 -> Word8) -> Word8 -> ByteString -> ByteStringscanl695,28889
reverse :: ByteString -> ByteStringreverse463,19314
replicate :: Int -> Word8 -> ByteStringreplicate757,31024
readFile :: FilePath -> IO ByteStringreadFile1862,73125
putStrLn :: ByteString -> IO ()putStrLn1730,67787
putStr :: ByteString -> IO ()putStr1726,67675
partition :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)partition1258,49935
packCStringLen :: CStringLen -> IO ByteStringpackCStringLen1610,63484
packCString :: CString -> IO ByteStringpackCString1601,63118
pack :: [Word8] -> ByteStringpack330,14732
null :: ByteString -> Boolnull354,15340
notElem :: Word8 -> ByteString -> BoolnotElem1195,47733
moduleErrorMsg :: String -> String -> StringmoduleErrorMsg1921,75426
moduleErrorIO :: String -> String -> IO amoduleErrorIO1917,75283
moduleError :: String -> String -> amoduleError1913,75163
modifyFile :: IOMode -> FilePath -> ByteString -> IO ()modifyFile1878,73896
mkPS :: RawBuffer Word8 -> Int -> Int -> IO ByteStringmkPS1683,66046
mkBigPS :: Int -> [ByteString] -> IO ByteStringmkBigPS1690,66242
minimum :: ByteString -> Word8minimum636,26517
maximum :: ByteString -> Word8maximum626,26095
mapAccumR :: (acc -> Word8 -> (acc, Word8)) -> acc -> ByteString -> (acc, ByteString)mapAccumR668,27962
mapAccumL :: (acc -> Word8 -> (acc, Word8)) -> acc -> ByteString -> (acc, ByteString)mapAccumL649,27123
map :: (Word8 -> Word8) -> ByteString -> ByteStringmap449,18812
length :: ByteString -> Intlength360,15573
last :: ByteString -> Word8last414,17609
isSuffixOf :: ByteString -> ByteString -> BoolisSuffixOf1323,52174
isPrefixOf :: ByteString -> ByteString -> BoolisPrefixOf1295,51130
isInfixOf :: ByteString -> ByteString -> BoolisInfixOf1342,53035
intersperse :: Word8 -> ByteString -> ByteStringintersperse471,19684
intercalateWithByte :: Word8 -> ByteString -> ByteString -> ByteStringintercalateWithByte1077,42638
intercalate :: ByteString -> [ByteString] -> ByteStringintercalate1065,42201
interact :: (ByteString -> ByteString) -> IO ()interact1857,72958
inits :: ByteString -> [ByteString]inits1535,60340
init :: ByteString -> ByteStringinit423,17975
index :: ByteString -> Int -> Word8index1092,43266
illegalBufferSize :: Handle -> String -> Int -> IO aillegalBufferSize1800,70651
head :: ByteString -> Word8head388,16554
hPutStrLn :: Handle -> ByteString -> IO ()hPutStrLn1720,67455
hPutStr :: Handle -> ByteString -> IO ()hPutStr1716,67336
hPutNonBlocking :: Handle -> ByteString -> IO ByteStringhPutNonBlocking1710,67080
hPut :: Handle -> ByteString -> IO ()hPut1698,66508
hGetSome :: Handle -> Int -> IO ByteStringhGetSome1779,69814
hGetNonBlocking :: Handle -> Int -> IO ByteStringhGetNonBlocking1768,69335
hGetLine :: Handle -> IO ByteStringhGetLine1637,64452
hGetContentsSizeHint :: HandlehGetContentsSizeHint1827,71666
hGetContents :: Handle -> IO ByteStringhGetContents1818,71401
hGet :: Handle -> Int -> IO ByteStringhGet1754,68750
groupBy :: (Word8 -> Word8 -> Bool) -> ByteString -> [ByteString]groupBy1055,41760
group :: ByteString -> [ByteString]group1047,41534
getLine :: IO ByteStringgetLine1632,64369
getContents :: IO ByteStringgetContents1849,72629
foldr1' :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8foldr1'573,24034
foldr1 :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8foldr1565,23752
foldr' :: (Word8 -> a -> a) -> a -> ByteString -> afoldr'534,22385
foldr :: (Word8 -> a -> a) -> a -> ByteString -> afoldr519,21734
foldl1' :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8foldl1'556,23356
foldl1 :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8foldl1548,23031
foldl' :: (a -> Word8 -> a) -> a -> ByteString -> afoldl'505,21092
foldl :: (a -> Word8 -> a) -> a -> ByteString -> afoldl489,20430
finiteBitSize = bitSizefiniteBitSize290,13561
findSubstrings :: ByteString -- ^ String to search for.findSubstrings1448,56881
findSubstring :: ByteString -- ^ String to search for.findSubstring1432,56303
findIndices :: (Word8 -> Bool) -> ByteString -> [Int]findIndices1179,47130
findIndexOrEnd :: (Word8 -> Bool) -> ByteString -> IntfindIndexOrEnd1894,74479
findIndexEnd :: (Word8 -> Bool) -> ByteString -> Maybe IntfindIndexEnd1167,46529
findIndex :: (Word8 -> Bool) -> ByteString -> Maybe IntfindIndex1152,45895
findFromEndUntil :: (Word8 -> Bool) -> ByteString -> IntfindFromEndUntil1925,75589
find :: (Word8 -> Bool) -> ByteString -> Maybe Word8find1246,49484
filter :: (Word8 -> Bool) -> ByteString -> ByteStringfilter1202,47973
errorEmptyList :: String -> aerrorEmptyList1909,75044
empty :: ByteStringempty297,13755
elemIndices :: Word8 -> ByteString -> [Int]elemIndices1126,44729
elemIndexEnd :: Word8 -> ByteString -> Maybe IntelemIndexEnd1119,44425
elemIndex :: Word8 -> ByteString -> Maybe IntelemIndex1104,43830
elem :: Word8 -> ByteString -> Boolelem1190,47565
dropWhileEnd :: (Word8 -> Bool) -> ByteString -> ByteStringdropWhileEnd858,34799
dropWhile :: (Word8 -> Bool) -> ByteString -> ByteStringdropWhile850,34544
drop  :: Int -> ByteString -> ByteStringdrop819,33380
count :: Word8 -> ByteString -> Intcount1144,45526
copy :: ByteString -> ByteStringcopy1624,64109
cons :: Word8 -> ByteString -> ByteStringcons371,15900
concatMap :: (Word8 -> ByteString) -> ByteString -> ByteStringconcatMap587,24503
concat :: [ByteString] -> ByteStringconcat583,24380
breakSubstring :: ByteString -- ^ String to search forbreakSubstring1377,54121
breakEnd :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)breakEnd911,36604
breakByte :: Word8 -> ByteString -> (ByteString, ByteString)breakByte901,36105
break :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)break872,35241
appendFile :: FilePath -> ByteString -> IO ()appendFile1886,74166
append :: ByteString -> ByteString -> ByteStringappend440,18534
any :: (Word8 -> Bool) -> ByteString -> Boolany594,24771
all :: (Word8 -> Bool) -> ByteString -> Boolall609,25362

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Builder.hs,1300
module Data.ByteString.BuilderBuilder176,6797
word8 :: Word8 -> Builderword8318,11411
word64LE :: Word64 -> Builderword64LE353,12402
word64BE :: Word64 -> Builderword64BE398,13650
word32LE :: Word32 -> Builderword32LE348,12265
word32BE :: Word32 -> Builderword32BE393,13516
word16LE :: Word16 -> Builderword16LE343,12128
word16BE :: Word16 -> Builderword16BE388,13382
toLazyByteString :: Builder -> L.ByteStringtoLazyByteString280,10073
stringUtf8 :: String -> BuilderstringUtf8450,15136
string8 :: String -> Builderstring8436,14719
string7 :: String -> Builderstring7422,14310
int8 :: Int8 -> Builderint8312,11294
int64LE :: Int64 -> Builderint64LE338,11995
int64BE :: Int64 -> Builderint64BE383,13252
int32LE :: Int32 -> Builderint32LE333,11863
int32BE :: Int32 -> Builderint32BE378,13123
int16LE :: Int16 -> Builderint16LE328,11731
int16BE :: Int16 -> Builderint16BE373,12994
hPutBuilder :: Handle -> Builder -> IO ()hPutBuilder301,10972
floatLE :: Float -> BuilderfloatLE358,12537
floatBE :: Float -> BuilderfloatBE403,13782
doubleLE :: Double -> BuilderdoubleLE363,12670
doubleBE :: Double -> BuilderdoubleBE408,13912
charUtf8 :: Char -> BuildercharUtf8445,15015
char8 :: Char -> Builderchar8431,14612
char7 :: Char -> Builderchar7417,14203

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Builder/ASCII.hs,2098
module Data.ByteString.Builder.ASCIIASCII15,430
    c_int_dec_padded9 :: CInt -> Ptr Word8 -> IO ()c_int_dec_padded9382,11408
    c_long_long_int_dec_padded18 :: CLLong -> Ptr Word8 -> IO ()c_long_long_int_dec_padded18385,11540
wordHex :: Word -> BuilderwordHex245,6606
wordDec :: Word -> BuilderwordDec196,5128
word8HexFixed :: Word8 -> Builderword8HexFixed274,7425
word8Hex :: Word8 -> Builderword8Hex225,5922
word8Dec :: Word8 -> Builderword8Dec176,4516
word64HexFixed :: Word64 -> Builderword64HexFixed289,7881
word64Hex :: Word64 -> Builderword64Hex240,6437
word64Dec :: Word64 -> Builderword64Dec191,4977
word32HexFixed :: Word32 -> Builderword32HexFixed284,7727
word32Hex :: Word32 -> Builderword32Hex235,6264
word32Dec :: Word32 -> Builderword32Dec186,4822
word16HexFixed :: Word16 -> Builderword16HexFixed279,7574
word16Hex :: Word16 -> Builderword16Hex230,6091
word16Dec :: Word16 -> Builderword16Dec181,4667
string7 :: String -> Builderstring7129,3267
nteger integerQuotRem#quotRemInteger92,2361
maxPow10 :: IntegermaxPow10331,9498
lazyByteStringHex :: L.ByteString -> BuilderlazyByteStringHex309,8631
integerDec :: Integer -> BuilderintegerDec335,9651
intDecPadded :: P.BoundedPrim IntintDecPadded388,11634
intDec :: Int -> BuilderintDec167,4331
int8HexFixed :: Int8 -> Builderint8HexFixed254,6819
int8Dec :: Int8 -> Builderint8Dec147,3739
int64HexFixed :: Int64 -> Builderint64HexFixed269,7257
int64Dec :: Int64 -> Builderint64Dec162,4185
int32HexFixed :: Int32 -> Builderint32HexFixed264,7109
int32Dec :: Int32 -> Builderint32Dec157,4035
int16HexFixed :: Int16 -> Builderint16HexFixed259,6962
int16Dec :: Int16 -> Builderint16Dec152,3885
floatHexFixed :: Float -> BuilderfloatHexFixed294,8038
floatDec :: Float -> BuilderfloatDec207,5403
doubleHexFixed :: Double -> BuilderdoubleHexFixed299,8194
doubleDec :: Double -> BuilderdoubleDec212,5545
byteStringHex :: S.ByteString -> BuilderbyteStringHex304,8400
,b) (# a,b #)PAIR323,9198
fine IS S#IS97,2445
efine HAS_INTEGER_CONSTR 1HAS_INTEGER_CONSTR91,2318

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Builder/Extra.hs,834
module Data.ByteString.Builder.ExtraExtra18,647
type BufferWriter = Ptr Word8 -> Int -> IO (Int, Next)BufferWriter95,2806
data Next =Next100,2962
     DoneDone102,3054
   | More   !Int          BufferWriterMore109,3451
   | Chunk  !S.ByteString BufferWriterChunk116,3868
wordHost :: Word -> BuilderwordHost184,6196
word64Host :: Word64 -> Builderword64Host199,6674
word32Host :: Word32 -> Builderword32Host194,6512
word16Host :: Word16 -> Builderword16Host189,6350
runBuilder :: Builder -> BufferWriterrunBuilder120,3973
intHost :: Int -> BuilderintHost159,5318
int64Host :: Int64 -> Builderint64Host174,5778
int32Host :: Int32 -> Builderint32Host169,5622
int16Host :: Int16 -> Builderint16Host164,5466
floatHost :: Float -> BuilderfloatHost205,6908
doubleHost :: Double -> BuilderdoubleHost210,7046

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Builder/Internal.hs,3969
module Data.ByteString.Builder.Internal (Internal55,2680
data BufferRange = BufferRange {-# UNPACK #-} !(Ptr Word8)  -- First byte of rangeBufferRange179,5530
data Buffer = Buffer {-# UNPACK #-} !(ForeignPtr Word8)Buffer184,5837
data ChunkIOStream a =ChunkIOStream230,7703
       Finished Buffer aFinished231,7726
     | Yield1 S.ByteString (IO (ChunkIOStream a))Yield1233,7822
type BuildStep a = BufferRange -> IO (BuildSignal a)BuildStep273,9474
data BuildSignal a =BuildSignal277,9672
    Done {-# UNPACK #-} !(Ptr Word8) aDone278,9693
  | BufferFullBufferFull279,9732
  | InsertChunkInsertChunk283,9842
newtype Builder = Builder (forall r. BuildStep r -> BuildStep r)Builder353,12356
newtype Put a = Put { unPut :: forall r. (a -> BuildStep r) -> BuildStep r }Put457,16701
newtype Put a = Put { unPut :: forall r. (a -> BuildStep r) -> BuildStep r }unPut457,16701
data AllocationStrategy = AllocationStrategyAllocationStrategy1006,37572
yield1 :: S.ByteString -> IO (ChunkIOStream a) -> IO (ChunkIOStream a)yield1239,8040
wrappedBytesCopyStep :: BufferRange  -- ^ Input 'BufferRange'.wrappedBytesCopyStep825,30432
untrimmedStrategy :: Int -- ^ Size of the first bufferuntrimmedStrategy1038,38930
trimmedChunkFromBuffer :: AllocationStrategy -> BuffertrimmedChunkFromBuffer211,6835
toLazyByteStringWithtoLazyByteStringWith1095,41588
shortByteStringCopyStep :: Sh.ShortByteString  -- ^ Input 'SH.ShortByteString'.shortByteStringCopyStep916,34058
shortByteString :: Sh.ShortByteString -> BuildershortByteString911,33833
sanitize :: Int -> Intsanitize1031,38632
safeStrategy :: Int  -- ^ Size of first buffersafeStrategy1055,39751
runPut :: Put a       -- ^ Put to runrunPut484,18093
runBuilderWith :: Builder      -- ^ 'Builder' to runrunBuilderWith388,14075
runBuilder :: Builder      -- ^ 'Builder' to runrunBuilder381,13770
putToLazyByteStringWithputToLazyByteStringWith790,29260
putToLazyByteStringputToLazyByteString773,28621
putBuilder :: Builder -> Put ()putBuilder528,19461
put :: (forall r. (a -> BuildStep r) -> BuildStep r)put463,17020
newBuffer :: Int -> IO BuffernewBuffer196,6228
maximalCopySize :: IntmaximalCopySize990,36993
lazyByteStringThreshold :: Int -> L.ByteString -> BuilderlazyByteStringThreshold942,34985
lazyByteStringInsert :: L.ByteString -> BuilderlazyByteStringInsert959,35658
lazyByteStringCopy :: L.ByteString -> BuilderlazyByteStringCopy951,35394
lazyByteString :: L.ByteString -> BuilderlazyByteString979,36429
insertChunk :: Ptr Word8insertChunk312,10869
hPut :: forall a. Handle -> Put a -> IO ahPut615,22109
fromPut :: Put () -> BuilderfromPut533,19612
flush :: Builderflush429,15379
finalBuildStep :: BuildStep ()finalBuildStep376,13607
fillWithBuildStepfillWithBuildStep324,11247
ensureFree :: Int -> BuilderensureFree816,30142
empty :: Builderempty396,14421
done :: Ptr Word8      -- ^ Next free byte in current 'BufferRange'done290,10057
customStrategycustomStrategy1014,37866
ciosUnitToLazyByteString :: AllocationStrategyciosUnitToLazyByteString246,8335
ciosToLazyByteString :: AllocationStrategyciosToLazyByteString256,8810
byteStringThreshold :: Int -> S.ByteString -> BuilderbyteStringThreshold858,31716
byteStringInsert :: S.ByteString -> BuilderbyteStringInsert901,33494
byteStringFromBuffer :: Buffer -> S.ByteStringbyteStringFromBuffer204,6534
byteStringCopyStep :: S.ByteString -> BuildStep a -> BuildStep abyteStringCopyStep877,32444
byteStringCopy :: S.ByteString -> BuilderbyteStringCopy873,32311
byteString :: S.ByteString -> BuilderbyteString969,36058
builder :: (forall r. BuildStep r -> BuildStep r)builder358,12547
buildStepToCIOSbuildStepToCIOS1112,42234
bufferSize :: Buffer -> IntbufferSize190,6033
bufferFull :: IntbufferFull297,10274
append :: Builder -> Builder -> Builderappend406,14860
ap_r :: Put a -> Put b -> Put bap_r502,18792
ap_l :: Put a -> Put b -> Put aap_l496,18583

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Builder/Prim.hs,1179
module Data.ByteString.Builder.Prim (Prim353,17363
primUnfoldrFixed :: FixedPrim b -> (a -> Maybe (b, a)) -> a -> BuilderprimUnfoldrFixed500,22374
primUnfoldrBounded :: BoundedPrim b -> (a -> Maybe (b, a)) -> a -> BuilderprimUnfoldrBounded610,26950
primMapListFixed :: FixedPrim a -> ([a] -> Builder)primMapListFixed495,22168
primMapListBounded :: BoundedPrim a -> [a] -> BuilderprimMapListBounded589,26208
primMapLazyByteStringFixed :: FixedPrim Word8 -> (L.ByteString -> Builder)primMapLazyByteStringFixed520,23350
primMapLazyByteStringBounded :: BoundedPrim Word8 -> L.ByteString -> BuilderprimMapLazyByteStringBounded670,29228
primMapByteStringFixed :: FixedPrim Word8 -> (S.ByteString -> Builder)primMapByteStringFixed514,23073
primMapByteStringBounded :: BoundedPrim Word8 -> S.ByteString -> BuilderprimMapByteStringBounded636,28003
primFixed :: FixedPrim a -> (a -> Builder)primFixed490,21994
primBounded :: BoundedPrim a -> (a -> Builder)primBounded549,24850
encodeCharUtf8 :: (Word8 -> a)                             -- ^ 1-byte UTF-8encodeCharUtf8716,30983
charUtf8 :: BoundedPrim CharcharUtf8691,29936
char8 :: FixedPrim Charchar8681,29642

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Builder/Prim/ASCII.hs,2277
module Data.ByteString.Builder.Prim.ASCIIASCII15,428
foreign import ccall unsafe "static _hs_bytestring_int_dec" c_int_decc_int_dec107,2749
foreign import ccall unsafe "static _hs_bytestring_long_long_int_dec" c_long_long_int_decc_long_long_int_dec110,2863
foreign import ccall unsafe "static _hs_bytestring_uint_dec" c_uint_decc_uint_dec149,3895
foreign import ccall unsafe "static _hs_bytestring_long_long_uint_dec" c_long_long_uint_decc_long_long_uint_dec152,4012
foreign import ccall unsafe "static _hs_bytestring_uint_hex" c_uint_hexc_uint_hex193,5248
foreign import ccall unsafe "static _hs_bytestring_long_long_uint_hex" c_long_long_uint_hexc_long_long_uint_hex196,5365
wordHex :: BoundedPrim WordwordHex226,6290
wordDec :: BoundedPrim WordwordDec181,4908
word8HexFixed :: FixedPrim Word8word8HexFixed237,6567
word8Hex :: BoundedPrim Word8word8Hex206,5758
word8Dec :: BoundedPrim Word8word8Dec161,4373
word64HexFixed :: FixedPrim Word64word64HexFixed256,7225
word64Hex :: BoundedPrim Word64word64Hex221,6130
word64Dec :: BoundedPrim Word64word64Dec176,4752
word32HexFixed :: FixedPrim Word32word32HexFixed250,6993
word32Hex :: BoundedPrim Word32word32Hex216,6005
word32Dec :: BoundedPrim Word32word32Dec171,4624
word16HexFixed :: FixedPrim Word16word16HexFixed243,6764
word16Hex :: BoundedPrim Word16word16Hex211,5880
word16Dec :: BoundedPrim Word16word16Dec166,4497
intDec :: BoundedPrim IntintDec140,3732
int8HexFixed :: FixedPrim Int8int8HexFixed263,7474
int8Dec :: BoundedPrim Int8int8Dec119,3216
int64HexFixed :: FixedPrim Int64int64HexFixed278,7921
int64Dec :: BoundedPrim Int64int64Dec135,3581
int32HexFixed :: FixedPrim Int32int32HexFixed273,7770
int32Dec :: BoundedPrim Int32int32Dec130,3458
int16HexFixed :: FixedPrim Int16int16HexFixed268,7620
int16Dec :: BoundedPrim Int16int16Dec124,3335
floatHexFixed :: FixedPrim FloatfloatHexFixed283,8077
encodeWordHex :: forall a. (Storable a, Integral a) => BoundedPrim aencodeWordHex200,5533
encodeWordDecimal :: Integral a => Int -> BoundedPrim aencodeWordDecimal156,4184
encodeIntDecimal :: Integral a => Int -> BoundedPrim aencodeIntDecimal114,3031
doubleHexFixed :: FixedPrim DoubledoubleHexFixed288,8241
char7 :: FixedPrim Charchar796,2449

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Builder/Prim/Binary.hs,1346
module Data.ByteString.Builder.Prim.Binary (Binary11,272
wordHost :: FixedPrim WordwordHost210,6584
word8 :: FixedPrim Word8word875,1287
word64LE :: FixedPrim Word64word64LE172,4808
word64Host :: FixedPrim Word64word64Host225,7025
word64BE :: FixedPrim Word64word64BE136,3214
word32LE :: FixedPrim Word32word32LE120,2659
word32Host :: FixedPrim Word32word32Host220,6876
word32BE :: FixedPrim Word32word32BE107,2194
word16LE :: FixedPrim Word16word16LE96,1868
word16Host :: FixedPrim Word16word16Host215,6727
word16BE :: FixedPrim Word16word16BE85,1539
intHost :: FixedPrim IntintHost282,8710
int8 :: FixedPrim Int8int8241,7502
int64LE :: FixedPrim Int64int64LE271,8293
int64Host :: FixedPrim Int64int64Host297,9136
int64BE :: FixedPrim Int64int64BE266,8158
int32LE :: FixedPrim Int32int32LE261,8026
int32Host :: FixedPrim Int32int32Host292,8992
int32BE :: FixedPrim Int32int32BE256,7891
int16LE :: FixedPrim Int16int16LE251,7759
int16Host :: FixedPrim Int16int16Host287,8848
int16BE :: FixedPrim Int16int16BE246,7624
floatLE :: FixedPrim FloatfloatLE310,9459
floatHost :: FixedPrim FloatfloatHost328,10002
floatBE :: FixedPrim FloatfloatBE305,9320
doubleLE :: FixedPrim DoubledoubleLE320,9742
doubleHost :: FixedPrim DoubledoubleHost333,10147
doubleBE :: FixedPrim DoubledoubleBE315,9597

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Builder/Prim/Internal.hs,2050
module Data.ByteString.Builder.Prim.Internal (Internal28,1129
class Contravariant f whereContravariant84,2084
    contramap :: (b -> a) -> f a -> f bcontramap85,2112
class Monoidal f whereMonoidal118,3123
    pair :: f a -> f b -> f (a, b)pair119,3146
type Size = IntSize145,3763
data FixedPrim a = FP {-# UNPACK #-} !Int (a -> Ptr Word8 -> IO ())FixedPrim154,4077
data FixedPrim a = FP {-# UNPACK #-} !Int (a -> Ptr Word8 -> IO ())FP154,4077
data BoundedPrim a = BP {-# UNPACK #-} !Int (a -> Ptr Word8 -> IO (Ptr Word8))BoundedPrim230,6991
data BoundedPrim a = BP {-# UNPACK #-} !Int (a -> Ptr Word8 -> IO (Ptr Word8))BP230,6991
toB :: FixedPrim a -> BoundedPrim atoB194,5418
storableToF :: forall a. Storable a => FixedPrim astorableToF203,5723
sizeBound :: BoundedPrim a -> IntsizeBound234,7186
size :: FixedPrim a -> Intsize161,4322
runF :: FixedPrim a -> a -> Ptr Word8 -> IO ()runF165,4396
runB :: BoundedPrim a -> a -> Ptr Word8 -> IO (Ptr Word8)runB246,7534
pairF :: FixedPrim a -> FixedPrim b -> FixedPrim (a, b)pairF175,4732
pairB :: BoundedPrim a -> BoundedPrim b -> BoundedPrim (a, b)pairB269,8348
liftFixedToBounded :: FixedPrim a -> BoundedPrim aliftFixedToBounded199,5611
fixedPrim :: Int -> (a -> Ptr Word8 -> IO ()) -> FixedPrim afixedPrim156,4146
emptyF :: FixedPrim aemptyF170,4564
emptyB :: BoundedPrim aemptyB264,8177
eitherB :: BoundedPrim a -> BoundedPrim b -> BoundedPrim (Either a b)eitherB285,9009
contramapF :: (b -> a) -> FixedPrim a -> FixedPrim bcontramapF189,5237
contramapB :: (b -> a) -> BoundedPrim a -> BoundedPrim bcontramapB259,7964
condB :: (a -> Bool) -> BoundedPrim a -> BoundedPrim a -> BoundedPrim acondB298,9524
boundedPrim :: Int -> (a -> Ptr Word8 -> IO (Ptr Word8)) -> BoundedPrim aboundedPrim238,7266
boudedPrim :: Int -> (a -> Ptr Word8 -> IO (Ptr Word8)) -> BoundedPrim aboudedPrim242,7416
#define CONLIKECONLIKE76,1809
(>*<) :: Monoidal f => f a -> f b -> f (a, b)>*<140,3648
(>$<) :: Contravariant f => (b -> a) -> f a -> f b>$<106,2855

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Builder/Prim/Internal/Base16.hs,541
module Data.ByteString.Builder.Prim.Internal.Base16 (Base1621,616
newtype EncodingTable = EncodingTable (ForeignPtr Word8)EncodingTable48,1303
unsafeIndex :: EncodingTable -> Int -> IO Word8unsafeIndex53,1473
tableFromList :: [Word8] -> EncodingTabletableFromList50,1361
lowerTable :: EncodingTablelowerTable71,2114
lowerAlphabet :: EncodingTablelowerAlphabet64,1867
encode8_as_16h :: EncodingTable -> Word8 -> IO Word16encode8_as_16h78,2446
base16EncodingTable :: EncodingTable -> IO EncodingTablebase16EncodingTable56,1600

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Builder/Prim/Internal/Floating.hs,254
module Data.ByteString.Builder.Prim.Internal.FloatingFloating17,391
encodeFloatViaWord32F :: FixedPrim Word32 -> FixedPrim FloatencodeFloatViaWord32F38,954
encodeDoubleViaWord64F :: FixedPrim Word64 -> FixedPrim DoubleencodeDoubleViaWord64F51,1446

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Builder/Prim/Internal/UncheckedShifts.hs,392
module Data.ByteString.Builder.Prim.Internal.UncheckedShifts (UncheckedShifts25,617
shiftr_w64 :: Word64 -> Int -> Word64shiftr_w6462,1364
shiftr_w32 :: Word32 -> Int -> Word32shiftr_w3258,1267
shiftr_w16 :: Word16 -> Int -> Word16shiftr_w1654,1170
shiftr_w :: Word -> Int -> Wordshiftr_w66,1457
caseWordSize_32_64 :: a -- Value to use for 32-bit 'Word'scaseWordSize_32_6494,2260

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Char8.hs,5065
module Data.ByteString.Char8 (Char845,1434
zipWith :: (Char -> Char -> a) -> ByteString -> ByteString -> [a]zipWith789,31603
zip :: ByteString -> ByteString -> [(Char,Char)]zip780,31184
words :: ByteString -> [ByteString]words920,36321
unzip :: [(Char,Char)] -> (ByteString,ByteString)unzip794,31839
unwords :: [ByteString] -> ByteStringunwords925,36516
unsnoc :: ByteString -> Maybe (ByteString, Char)unsnoc320,14680
unsafeHead :: ByteString -> CharunsafeHead802,32204
unpack :: ByteString -> [Char]unpack291,13783
unlines :: [ByteString] -> ByteStringunlines913,36037
unfoldrN :: Int -> (a -> Maybe (Char, a)) -> a -> (ByteString, Maybe a)unfoldrN492,21671
unfoldr :: (a -> Maybe (Char, a)) -> a -> ByteStringunfoldr480,21170
uncons :: ByteString -> Maybe (Char, ByteString)uncons312,14390
takeWhileEnd :: (Char -> Bool) -> ByteString -> ByteStringtakeWhileEnd509,22300
takeWhile :: (Char -> Bool) -> ByteString -> ByteStringtakeWhile500,22000
strip :: ByteString -> ByteStringstrip857,34076
splitWith :: (Char -> Bool) -> ByteString -> [ByteString]splitWith622,25819
split :: Char -> ByteString -> [ByteString]split611,25397
spanEnd :: (Char -> Bool) -> ByteString -> (ByteString, ByteString)spanEnd584,24522
span :: (Char -> Bool) -> ByteString -> (ByteString, ByteString)span569,24138
snoc :: ByteString -> Char -> ByteStringsnoc306,14212
singleton :: Char -> ByteStringsingleton278,13435
scanr1 :: (Char -> Char -> Char) -> ByteString -> ByteStringscanr1457,20225
scanr :: (Char -> Char -> Char) -> Char -> ByteString -> ByteStringscanr453,20019
scanl1 :: (Char -> Char -> Char) -> ByteString -> ByteStringscanl1449,19856
scanl :: (Char -> Char -> Char) -> Char -> ByteString -> ByteStringscanl443,19595
replicate :: Int -> Char -> ByteStringreplicate466,20559
readInteger :: ByteString -> Maybe (Integer, ByteString)readInteger964,38120
readInt :: ByteString -> Maybe (Int, ByteString)readInt937,37000
putStrLn :: ByteString -> IO ()putStrLn1015,40249
partition :: (Char -> Bool) -> ByteString -> (ByteString, ByteString)partition714,28971
pack :: String -> ByteStringpack286,13665
notElem :: Char -> ByteString -> BoolnotElem702,28605
minimum :: ByteString -> Charminimum417,18383
maximum :: ByteString -> Charmaximum412,18242
mapAccumR :: (acc -> Char -> (acc, Char)) -> acc -> ByteString -> (acc, ByteString)mapAccumR432,19187
mapAccumL :: (acc -> Char -> (acc, Char)) -> acc -> ByteString -> (acc, ByteString)mapAccumL425,18736
map :: (Char -> Char) -> ByteString -> ByteStringmap337,15264
lines :: ByteString -> [ByteString]lines886,35097
last :: ByteString -> Charlast332,15104
intersperse :: Char -> ByteString -> ByteStringintersperse344,15569
index :: ByteString -> Int -> Charindex643,26511
head :: ByteString -> Charhead327,14954
hPutStrLn :: Handle -> ByteString -> IO ()hPutStrLn1009,40001
groupBy :: (Char -> Char -> Bool) -> ByteString -> [ByteString]groupBy639,26326
foldr1' :: (Char -> Char -> Char) -> ByteString -> Charfoldr1'390,17412
foldr1 :: (Char -> Char -> Char) -> ByteString -> Charfoldr1385,17236
foldr' :: (Char -> a -> a) -> a -> ByteString -> afoldr'368,16533
foldr :: (Char -> a -> a) -> a -> ByteString -> afoldr363,16378
foldl1' :: (Char -> Char -> Char) -> ByteString -> Charfoldl1'379,16958
foldl1 :: (Char -> Char -> Char) -> ByteString -> Charfoldl1374,16780
foldl' :: (a -> Char -> a) -> a -> ByteString -> afoldl'356,16053
foldl :: (a -> Char -> a) -> a -> ByteString -> afoldl351,15881
firstspace :: Ptr Word8 -> Int -> Int -> IO Intfirstspace829,33026
firstnonspace :: Ptr Word8 -> Int -> Int -> IO Intfirstnonspace848,33755
findIndices :: (Char -> Bool) -> ByteString -> [Int]findIndices680,27983
findIndex :: (Char -> Bool) -> ByteString -> Maybe IntfindIndex674,27723
find :: (Char -> Bool) -> ByteString -> Maybe Charfind743,29900
filter :: (Char -> Bool) -> ByteString -> ByteStringfilter709,28843
elemIndices :: Char -> ByteString -> [Int]elemIndices668,27461
elemIndexEnd :: Char -> ByteString -> Maybe IntelemIndexEnd662,27196
elemIndex :: Char -> ByteString -> Maybe IntelemIndex650,26793
elem :: Char -> ByteString -> Boolelem697,28475
dropWhileEnd :: (Char -> Bool) -> ByteString -> ByteStringdropWhileEnd527,22845
dropWhile :: (Char -> Bool) -> ByteString -> ByteStringdropWhile514,22509
dropSpace :: ByteString -> ByteStringdropSpace842,33509
count :: Char -> ByteString -> Intcount692,28311
cons :: Char -> ByteString -> ByteStringcons300,14019
concatMap :: (Char -> ByteString) -> ByteString -> ByteStringconcatMap395,17628
breakSpace :: ByteString -> (ByteString,ByteString)breakSpace819,32656
breakEnd :: (Char -> Bool) -> ByteString -> (ByteString, ByteString)breakEnd591,24756
breakChar :: Char -> ByteString -> (ByteString, ByteString)breakChar561,23815
break :: (Char -> Bool) -> ByteString -> (ByteString, ByteString)break532,23031
any :: (Char -> Bool) -> ByteString -> Boolany401,17878
all :: (Char -> Bool) -> ByteString -> Boolall407,18093

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Internal.hs,4100
module Data.ByteString.Internal (Internal27,1032
data ByteString = PS {-# UNPACK #-} !(ForeignPtr Word8) -- payloadByteString157,6077
data ByteString = PS {-# UNPACK #-} !(ForeignPtr Word8) -- payloadPS157,6077
foreign import ccall unsafe "string.h strlen" c_strlenc_strlen632,24064
foreign import ccall unsafe "static stdlib.h &free" c_free_finalizerc_free_finalizer635,24147
foreign import ccall unsafe "string.h memchr" c_memchrc_memchr638,24252
foreign import ccall unsafe "string.h memcmp" c_memcmpc_memcmp644,24462
foreign import ccall unsafe "string.h memcpy" c_memcpyc_memcpy650,24665
foreign import ccall unsafe "string.h memset" c_memsetc_memset665,25124
foreign import ccall unsafe "static fpstring.h fps_reverse" c_reversec_reverse676,25433
foreign import ccall unsafe "static fpstring.h fps_intersperse" c_interspersec_intersperse679,25553
foreign import ccall unsafe "static fpstring.h fps_maximum" c_maximumc_maximum682,25690
foreign import ccall unsafe "static fpstring.h fps_minimum" c_minimumc_minimum685,25800
foreign import ccall unsafe "static fpstring.h fps_count" c_countc_count688,25910
w2c :: Word8 -> Charw2c553,21224
unsafePackLenChars :: Int -> [Char] -> ByteStringunsafePackLenChars234,8240
unsafePackLenBytes :: Int -> [Word8] -> ByteStringunsafePackLenBytes227,8031
unsafePackAddress :: Addr# -> IO ByteStringunsafePackAddress263,9523
unsafeCreateUptoN' :: Int -> (Ptr Word8 -> IO (Int, a)) -> (ByteString, a)unsafeCreateUptoN'392,14726
unsafeCreateUptoN :: Int -> (Ptr Word8 -> IO Int) -> ByteStringunsafeCreateUptoN387,14541
unsafeCreate :: Int -> (Ptr Word8 -> IO ()) -> ByteStringunsafeCreate379,14132
unpackChars :: ByteString -> [Char]unpackChars304,10978
unpackBytes :: ByteString -> [Word8]unpackBytes301,10895
unpackAppendCharsStrict :: ByteString -> [Char] -> [Char]unpackAppendCharsStrict340,12586
unpackAppendCharsLazy :: ByteString -> [Char] -> [Char]unpackAppendCharsLazy318,11583
unpackAppendBytesStrict :: ByteString -> [Word8] -> [Word8]unpackAppendBytesStrict330,12172
unpackAppendBytesLazy :: ByteString -> [Word8] -> [Word8]unpackAppendBytesLazy307,11060
toForeignPtr :: ByteString -> (ForeignPtr Word8, Int, Int) -- ^ (ptr, offset, length)toForeignPtr373,13860
packUptoLenChars :: Int -> [Char] -> (ByteString, [Char])packUptoLenChars282,10067
packUptoLenBytes :: Int -> [Word8] -> (ByteString, [Word8])packUptoLenBytes274,9779
packChars :: [Char] -> ByteStringpackChars217,7765
packBytes :: [Word8] -> ByteStringpackBytes214,7675
overflowError :: String -> aoverflowError589,22180
nullForeignPtr :: ForeignPtr Word8nullForeignPtr353,13135
memset :: Ptr Word8 -> Word8 -> CSize -> IO (Ptr Word8)memset668,25232
memcpy :: Ptr Word8 -> Ptr Word8 -> Int -> IO ()memcpy653,24778
memcmp :: Ptr Word8 -> Ptr Word8 -> Int -> IO CIntmemcmp647,24568
memchr :: Ptr Word8 -> Word8 -> CSize -> IO (Ptr Word8)memchr641,24360
mallocByteString :: Int -> IO (ForeignPtr a)mallocByteString456,17211
isSpaceWord8 :: Word8 -> BoolisSpaceWord8566,21648
isSpaceChar8 :: Char -> BoolisSpaceChar8578,21969
inlinePerformIO :: IO a -> ainlinePerformIO622,23550
fromForeignPtr :: ForeignPtr Word8fromForeignPtr365,13622
eq :: ByteString -> ByteString -> Booleq463,17461
createUptoN' :: Int -> (Ptr Word8 -> IO (Int, a)) -> IO (ByteString, a)createUptoN'418,15698
createUptoN :: Int -> (Ptr Word8 -> IO Int) -> IO ByteStringcreateUptoN407,15364
createAndTrim' :: Int -> (Ptr Word8 -> IO (Int, Int, a)) -> IO (ByteString, a)createAndTrim'443,16698
createAndTrim :: Int -> (Ptr Word8 -> IO Int) -> IO ByteStringcreateAndTrim433,16376
create :: Int -> (Ptr Word8 -> IO ()) -> IO ByteStringcreate397,14979
concat :: [ByteString] -> ByteStringconcat491,18699
compareBytes :: ByteString -> ByteString -> OrderingcompareBytes471,17769
checkedAdd :: String -> Int -> Int -> IntcheckedAdd543,20921
c2w :: Char -> Word8c2w560,21477
append :: ByteString -> ByteString -> ByteStringappend482,18262
accursedUnutterablePerformIO :: IO a -> aaccursedUnutterablePerformIO619,23432

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Lazy.hs,6726
module Data.ByteString.Lazy (Lazy52,2057
zipWith :: (Word8 -> Word8 -> a) -> ByteString -> ByteString -> [a]zipWith1119,46500
zip :: ByteString -> ByteString -> [(Word8,Word8)]zip1112,46196
writeFile :: FilePath -> ByteString -> IO ()writeFile1286,52946
unzip :: [(Word8,Word8)] -> (ByteString,ByteString)unzip1137,47406
unsnoc :: ByteString -> Maybe (ByteString, Word8)unsnoc429,18957
unpack :: ByteString -> [Word8]unpack263,12692
unfoldr :: (a -> Maybe (Word8, a)) -> a -> ByteStringunfoldr662,28181
uncons :: ByteString -> Maybe (Word8, ByteString)uncons392,17588
transpose :: [ByteString] -> [ByteString]transpose475,20692
toStrict :: ByteString -> S.ByteStringtoStrict285,13537
toChunks :: ByteString -> [P.ByteString]toChunks271,12979
takeWhile :: (Word8 -> Bool) -> ByteString -> ByteStringtakeWhile715,30332
take :: Int64 -> ByteString -> ByteStringtake676,28718
tails :: ByteString -> [ByteString]tails1152,48016
tail :: ByteString -> ByteStringtail401,17896
stripSuffix :: ByteString -> ByteString -> Maybe ByteStringstripSuffix1101,45708
stripPrefix :: ByteString -> ByteString -> Maybe ByteStringstripPrefix1077,44707
splitWith :: (Word8 -> Bool) -> ByteString -> [ByteString]splitWith798,33653
splitAt :: Int64 -> ByteString -> (ByteString, ByteString)splitAt699,29639
split :: Word8 -> ByteString -> [ByteString]split824,34710
span :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)span787,33168
snoc :: ByteString -> Word8 -> ByteStringsnoc380,17182
singleton :: Word8 -> ByteStringsingleton254,12438
scanl :: (Word8 -> Word8 -> Word8) -> Word8 -> ByteString -> ByteStringscanl610,26229
reverse :: ByteString -> ByteStringreverse454,19736
revNonEmptyChunks :: [P.ByteString] -> ByteStringrevNonEmptyChunks1364,55812
revChunks :: [P.ByteString] -> ByteStringrevChunks1368,55983
replicate :: Int64 -> Word8 -> ByteStringreplicate636,27069
repeat :: Word8 -> ByteStringrepeat630,26870
readFile :: FilePath -> IO ByteStringreadFile1278,52695
putStrLn :: ByteString -> IO ()putStrLn1334,54650
putStr :: ByteString -> IO ()putStr1329,54535
partition :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)partition1050,43631
pack :: [Word8] -> ByteStringpack259,12592
null :: ByteString -> Boolnull342,15919
notElem :: Word8 -> ByteString -> BoolnotElem997,41938
moduleError :: String -> String -> amoduleError1358,55607
modifyFile :: IOMode -> FilePath -> ByteString -> IO ()modifyFile1281,52790
minimum :: ByteString -> Word8minimum569,24534
maximum :: ByteString -> Word8maximum562,24244
mapAccumR :: (acc -> Word8 -> (acc, Word8)) -> acc -> ByteString -> (acc, ByteString)mapAccumR591,25594
mapAccumL :: (acc -> Word8 -> (acc, Word8)) -> acc -> ByteString -> (acc, ByteString)mapAccumL579,25037
map :: (Word8 -> Word8) -> ByteString -> ByteStringmap443,19420
length :: ByteString -> Int64length348,16074
last :: ByteString -> Word8last410,18181
iterate :: (Word8 -> Word8) -> Word8 -> ByteStringiterate624,26669
isSuffixOf :: ByteString -> ByteString -> BoolisSuffixOf1094,45410
isPrefixOf :: ByteString -> ByteString -> BoolisPrefixOf1062,44086
intersperse :: Word8 -> ByteString -> ByteStringintersperse463,20115
intercalate :: ByteString -> [ByteString] -> ByteStringintercalate882,37210
interact :: (ByteString -> ByteString) -> IO ()interact1346,55174
inits :: ByteString -> [ByteString]inits1145,47708
init :: ByteString -> ByteStringinit418,18524
index :: ByteString -> Int64 -> Word8index889,37476
illegalBufferSize :: Handle -> String -> Int -> IO aillegalBufferSize1240,51207
head :: ByteString -> Word8head385,17372
hPutStr :: Handle -> ByteString -> IO ()hPutStr1325,54444
hPutNonBlocking :: Handle -> ByteString -> IO ByteStringhPutNonBlocking1314,54059
hPut :: Handle -> ByteString -> IO ()hPut1303,53521
hGetNonBlockingN :: Int -> Handle -> Int -> IO ByteStringhGetNonBlockingN1227,50783
hGetNonBlocking :: Handle -> Int -> IO ByteStringhGetNonBlocking1272,52476
hGetN :: Int -> Handle -> Int -> IO ByteStringhGetN1210,50192
hGetContentsN :: Int -> Handle -> IO ByteStringhGetContentsN1195,49712
hGetContents :: Handle -> IO ByteStringhGetContents1256,51835
hGet :: Handle -> Int -> IO ByteStringhGet1261,52004
groupBy :: (Word8 -> Word8 -> Bool) -> ByteString -> [ByteString]groupBy862,36298
group :: ByteString -> [ByteString]group843,35545
getContents :: IO ByteStringgetContents1296,53222
fromStrict :: P.ByteString -> ByteStringfromStrict275,13124
fromChunks :: [P.ByteString] -> ByteStringfromChunks267,12821
foldr1 :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8foldr1519,22599
foldr :: (Word8 -> a -> a) -> a -> ByteString -> afoldr502,21781
foldl1' :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8foldl1'513,22279
foldl1 :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8foldl1508,22030
foldl' :: (a -> Word8 -> a) -> a -> ByteString -> afoldl'493,21402
foldl :: (a -> Word8 -> a) -> a -> ByteString -> afoldl486,21170
findIndices :: (Word8 -> Bool) -> ByteString -> [Int64]findIndices983,41329
findIndexOrEnd :: (Word8 -> Bool) -> P.ByteString -> IntfindIndexOrEnd1373,56207
findIndexEnd :: (Word8 -> Bool) -> ByteString -> Maybe Int64findIndexEnd957,40350
findIndex :: (Word8 -> Bool) -> ByteString -> Maybe Int64findIndex943,39814
find :: (Word8 -> Bool) -> ByteString -> Maybe Word8find973,40942
filter :: (Word8 -> Bool) -> ByteString -> ByteStringfilter1003,42155
errorEmptyList :: String -> aerrorEmptyList1354,55488
empty :: ByteStringempty249,12332
elemIndices :: Word8 -> ByteString -> [Int64]elemIndices926,39067
elemIndexEnd :: Word8 -> ByteString -> Maybe Int64elemIndexEnd919,38761
elemIndex :: Word8 -> ByteString -> Maybe Int64elemIndex902,38124
elem :: Word8 -> ByteString -> Boolelem993,41790
dropWhile :: (Word8 -> Bool) -> ByteString -> ByteStringdropWhile725,30778
drop  :: Int64 -> ByteString -> ByteStringdrop688,29212
cycle :: ByteString -> ByteStringcycle652,27687
count :: Word8 -> ByteString -> Int64count937,39544
copy :: ByteString -> ByteStringcopy1166,48616
cons' :: Word8 -> ByteString -> ByteStringcons'374,16930
cons :: Word8 -> ByteString -> ByteStringcons357,16320
concatMap :: (Word8 -> ByteString) -> ByteString -> ByteStringconcatMap533,23101
concat :: [ByteString] -> ByteStringconcat529,22978
break :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)break734,31148
appendFile :: FilePath -> ByteString -> IO ()appendFile1291,53066
append :: ByteString -> ByteString -> ByteStringappend434,19142
any :: (Word8 -> Bool) -> ByteString -> Boolany549,23761
all :: (Word8 -> Bool) -> ByteString -> Boolall556,24036

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Lazy/Builder.hs,50
module Data.ByteString.Lazy.BuilderBuilder6,165

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Lazy/Builder/ASCII.hs,206
module Data.ByteString.Lazy.Builder.ASCIIASCII9,267
lazyByteStringHexFixed :: L.ByteString -> BuilderlazyByteStringHexFixed24,724
byteStringHexFixed :: S.ByteString -> BuilderbyteStringHexFixed20,576

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Lazy/Builder/Extras.hs,56
module Data.ByteString.Lazy.Builder.ExtrasExtras6,165

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Lazy/Char8.hs,3907
module Data.ByteString.Lazy.Char8 (Char833,1087
zipWith :: (Char -> Char -> a) -> ByteString -> ByteString -> [a]zipWith660,26631
zip :: ByteString -> ByteString -> [(Char,Char)]zip651,26236
words :: ByteString -> [ByteString]words753,30054
unwords :: [ByteString] -> ByteStringunwords758,30252
unsnoc :: ByteString -> Maybe (ByteString, Char)unsnoc292,13027
unpack :: ByteString -> [Char]unpack243,11445
unlines :: [ByteString] -> ByteStringunlines743,29732
unfoldr :: (a -> Maybe (Char, a)) -> a -> ByteStringunfoldr434,18756
uncons :: ByteString -> Maybe (Char, ByteString)uncons284,12734
takeWhile :: (Char -> Bool) -> ByteString -> ByteStringtakeWhile444,19211
splitWith :: (Char -> Bool) -> ByteString -> [ByteString]splitWith517,21578
split :: Char -> ByteString -> [ByteString]split506,21156
span :: (Char -> Bool) -> ByteString -> (ByteString, ByteString)span460,19820
snoc :: ByteString -> Char -> ByteStringsnoc273,12408
singleton :: Char -> ByteStringsingleton234,11207
scanl :: (Char -> Char -> Char) -> Char -> ByteString -> ByteStringscanl388,16689
revChunks :: [S.ByteString] -> ByteStringrevChunks867,34636
replicate :: Int64 -> Char -> ByteStringreplicate425,18309
repeat :: Char -> ByteStringrepeat419,18152
readInteger :: ByteString -> Maybe (Integer, ByteString)readInteger803,32112
readInt :: ByteString -> Maybe (Int, ByteString)readInt769,30638
putStrLn :: ByteString -> IO ()putStrLn860,34413
partition :: (Char -> Bool) -> ByteString -> (ByteString, ByteString)partition582,23999
pack :: [Char] -> ByteStringpack239,11347
notElem :: Char -> ByteString -> BoolnotElem570,23633
minimum :: ByteString -> Charminimum373,16250
maximum :: ByteString -> Charmaximum368,16109
mapAccumR :: (acc -> Char -> (acc, Char)) -> acc -> ByteString -> (acc, ByteString)mapAccumR402,17541
mapAccumL :: (acc -> Char -> (acc, Char)) -> acc -> ByteString -> (acc, ByteString)mapAccumL395,17099
map :: (Char -> Char) -> ByteString -> ByteStringmap304,13463
lines :: ByteString -> [ByteString]lines671,27043
last :: ByteString -> Charlast299,13303
iterate :: (Char -> Char) -> Char -> ByteStringiterate413,17971
intersperse :: Char -> ByteString -> ByteStringintersperse311,13768
index :: ByteString -> Int64 -> Charindex526,21953
head :: ByteString -> Charhead278,12574
hPutStrLn :: Handle -> ByteString -> IO ()hPutStrLn855,34250
groupBy :: (Char -> Char -> Bool) -> ByteString -> [ByteString]groupBy522,21768
foldr1 :: (Char -> Char -> Char) -> ByteString -> Charfoldr1346,15283
foldr :: (Char -> a -> a) -> a -> ByteString -> afoldr330,14577
foldl1' :: (Char -> Char -> Char) -> ByteString -> Charfoldl1'341,15028
foldl1 :: (Char -> Char -> Char) -> ByteString -> Charfoldl1336,14820
foldl' :: (a -> Char -> a) -> a -> ByteString -> afoldl'323,14252
foldl :: (a -> Char -> a) -> a -> ByteString -> afoldl318,14080
findIndices :: (Char -> Bool) -> ByteString -> [Int64]findIndices551,23018
findIndex :: (Char -> Bool) -> ByteString -> Maybe Int64findIndex545,22756
find :: (Char -> Bool) -> ByteString -> Maybe Charfind614,24952
filter :: (Char -> Bool) -> ByteString -> ByteStringfilter577,23871
elemIndices :: Char -> ByteString -> [Int64]elemIndices539,22492
elemIndex :: Char -> ByteString -> Maybe Int64elemIndex533,22237
elem :: Char -> ByteString -> Boolelem565,23506
dropWhile :: (Char -> Bool) -> ByteString -> ByteStringdropWhile449,19408
count :: Char -> ByteString -> Int64count560,23340
cons' :: Char -> ByteString -> ByteStringcons'267,12211
cons :: Char -> ByteString -> ByteStringcons250,11619
concatMap :: (Char -> ByteString) -> ByteString -> ByteStringconcatMap351,15495
break :: (Char -> Bool) -> ByteString -> (ByteString, ByteString)break454,19582
any :: (Char -> Bool) -> ByteString -> Boolany357,15745
all :: (Char -> Bool) -> ByteString -> Boolall363,15960

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Lazy/Internal.hs,1259
module Data.ByteString.Lazy.Internal (Internal24,788
data ByteString = Empty | Chunk {-# UNPACK #-} !S.ByteString ByteStringByteString83,2452
data ByteString = Empty | Chunk {-# UNPACK #-} !S.ByteString ByteStringEmpty83,2452
data ByteString = Empty | Chunk {-# UNPACK #-} !S.ByteString ByteStringChunk83,2452
unpackChars :: ByteString -> [Char]unpackChars159,4643
unpackBytes :: ByteString -> [Word8]unpackBytes155,4505
smallChunkSize :: IntsmallChunkSize224,7245
packChars :: [Char] -> ByteStringpackChars148,4266
packBytes :: [Word8] -> ByteStringpackBytes140,4022
invariant :: ByteString -> Boolinvariant169,5042
foldrChunks :: (S.ByteString -> a -> a) -> a -> ByteString -> afoldrChunks190,5882
foldlChunks :: (a -> S.ByteString -> a) -> a -> ByteString -> afoldlChunks198,6164
eq :: ByteString -> ByteString -> Booleq235,7594
defaultChunkSize :: IntdefaultChunkSize219,7070
concat :: [ByteString] -> ByteStringconcat264,8642
cmp :: ByteString -> ByteString -> Orderingcmp245,7988
chunkOverhead :: IntchunkOverhead229,7400
chunk :: S.ByteString -> ByteString -> ByteStringchunk184,5644
checkInvariant :: ByteString -> ByteStringcheckInvariant174,5229
append :: ByteString -> ByteString -> ByteStringappend261,8553

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Short.hs,44
module Data.ByteString.Short (Short29,855

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Short/Internal.hs,4920
module Data.ByteString.Short.Internal (Internal22,610
data ShortByteString = SBS ByteArray#ShortByteString126,3855
data ShortByteString = SBS ByteArray#SBS126,3855
data BA    = BA# ByteArray#BA465,15047
data BA    = BA# ByteArray#BA#465,15047
data MBA s = MBA# (MutableByteArray# s)MBA466,15075
data MBA s = MBA# (MutableByteArray# s)MBA#466,15075
  c_memcmp_ByteArray :: ByteArray# -> ByteArray# -> CSize -> IO CIntc_memcmp_ByteArray525,17254
  memcpy_AddrToByteArray :: MutableByteArray# s -> CLong -> Addr# -> CLong -> CSize -> IO ()memcpy_AddrToByteArray570,18778
  memcpy_AddrToByteArray0 :: MutableByteArray# s -> Addr# -> CSize -> IO ()memcpy_AddrToByteArray0573,18918
  memcpy_ByteArrayToAddr :: Addr# -> CLong -> ByteArray# -> CLong -> CSize -> IO ()memcpy_ByteArrayToAddr591,19595
  memcpy_ByteArrayToAddr0 :: Addr# -> ByteArray# -> CSize -> IO ()memcpy_ByteArrayToAddr0594,19726
  memcpy_ByteArray :: MutableByteArray# s -> CLongmemcpy_ByteArray618,20385
writeWord8Array :: MBA s -> Int -> Word8 -> ST s ()writeWord8Array496,16052
writeCharArray :: MBA s -> Int -> Char -> ST s ()writeCharArray491,15874
useAsCStringLen :: ShortByteString -> (CStringLen -> IO a) -> IO auseAsCStringLen663,22144
useAsCString :: ShortByteString -> (CString -> IO a) -> IO auseAsCString650,21638
unsafeIndex :: ShortByteString -> Int -> Word8unsafeIndex218,6707
unsafeFreezeByteArray :: MBA s -> ST s BAunsafeFreezeByteArray486,15692
unpackChars :: ShortByteString -> [Char]unpackChars336,10514
unpackBytes :: ShortByteString -> [Word8]unpackBytes339,10601
unpackAppendCharsStrict :: ShortByteString -> Int -> Int -> [Char] -> [Char]unpackAppendCharsStrict371,11879
unpackAppendCharsLazy :: ShortByteString -> [Char] -> [Char]unpackAppendCharsLazy346,10901
unpackAppendBytesStrict :: ShortByteString -> Int -> Int -> [Word8] -> [Word8]unpackAppendBytesStrict379,12202
unpackAppendBytesLazy :: ShortByteString -> [Word8] -> [Word8]unpackAppendBytesLazy356,11246
unpack :: ShortByteString -> [Word8]unpack296,9204
unIO_ :: IO () -> State# RealWorld -> State# RealWorldunIO_597,19795
toShortIO :: ByteString -> IO ShortByteStringtoShortIO252,7722
toShort :: ByteString -> ShortByteStringtoShort249,7628
packLenChars :: Int -> [Char] -> ShortByteStringpackLenChars305,9440
packLenBytes :: Int -> [Word8] -> ShortByteStringpackLenBytes315,9715
packChars :: [Char] -> ShortByteStringpackChars299,9263
packCStringLen :: CStringLen -> IO ShortByteStringpackCStringLen639,21170
packCString :: CString -> IO ShortByteStringpackCString628,20765
packBytes :: [Word8] -> ShortByteStringpackBytes302,9351
pack :: [Word8] -> ShortByteStringpack292,9097
null :: ShortByteString -> Boolnull209,6421
newPinnedByteArray :: Int -> ST s (MBA s)newPinnedByteArray480,15508
newByteArray :: Int -> ST s (MBA s)newByteArray474,15321
moduleErrorMsg :: String -> String -> StringmoduleErrorMsg677,22594
moduleErrorIO :: String -> String -> IO amoduleErrorIO673,22451
memcmp_ByteArray :: BA -> BA -> Int -> IO CIntmemcmp_ByteArray520,17065
length :: ShortByteString -> Intlength201,6217
indexWord8Array :: BA -> Int -> Word8indexWord8Array471,15216
indexError :: ShortByteString -> Int -> aindexError221,6800
indexCharArray :: BA -> Int -> CharindexCharArray468,15116
index :: ShortByteString -> Int -> Word8index213,6556
fromShortIO :: ShortByteString -> IO ByteStringfromShortIO267,8216
fromShort :: ShortByteString -> ByteStringfromShort264,8114
equateBytes :: ShortByteString -> ShortByteString -> BoolequateBytes391,12634
empty :: ShortByteStringempty197,6109
csize :: Int# -> CSizecsize603,19954
createFromPtr :: Ptr a   -- ^ source datacreateFromPtr451,14634
create :: Int -> (forall s. MBA s -> ST s ()) -> ShortByteStringcreate233,7149
copyToPtr :: ShortByteString  -- ^ source datacopyToPtr442,14317
copyByteArrayToAddr0 :: ByteArray# -> Addr# -> Int#copyByteArrayToAddr0579,19115
copyByteArrayToAddr# :: ByteArray# -> Int#copyByteArrayToAddr#536,17603
copyByteArrayToAddr :: BA -> Int -> Ptr a -> Int -> ST RealWorld ()copyByteArrayToAddr506,16488
copyByteArray#       :: ByteArray# -> Int#copyByteArray#541,17767
copyByteArray :: BA -> Int -> MBA s -> Int -> Int -> ST s ()copyByteArray511,16729
copyAddrToByteArray0 :: Addr# -> MutableByteArray# s -> Int#copyAddrToByteArray0558,18289
copyAddrToByteArray# :: Addr#copyAddrToByteArray#531,17422
copyAddrToByteArray :: Ptr a -> MBA RealWorld -> Int -> Int -> ST RealWorld ()copyAddrToByteArray501,16235
concat :: [ShortByteString] -> ShortByteStringconcat424,13723
compareBytes :: ShortByteString -> ShortByteString -> OrderingcompareBytes399,12899
clong :: Int# -> CLongclong600,19898
asBA :: ShortByteString -> BAasBA230,7088
append :: ShortByteString -> ShortByteString -> ShortByteStringappend416,13447
 /* empty */_len134,4265
 LEN(x) (x)LEN132,4233

/home/effectfully/.fastdogs/bytestring-0.10.12.0/Data/ByteString/Unsafe.hs,1244
module Data.ByteString.Unsafe (Unsafe22,668
unsafeUseAsCStringLen :: ByteString -> (CStringLen -> IO a) -> IO aunsafeUseAsCStringLen286,12238
unsafeUseAsCString :: ByteString -> (CString -> IO a) -> IO aunsafeUseAsCString267,11214
unsafeTake :: Int -> ByteString -> ByteStringunsafeTake115,4772
unsafeTail :: ByteString -> ByteStringunsafeTail85,3323
unsafePackMallocCStringLen :: CStringLen -> IO ByteStringunsafePackMallocCStringLen235,9692
unsafePackMallocCString :: CString -> IO ByteStringunsafePackMallocCString218,8974
unsafePackCStringLen :: CStringLen -> IO ByteStringunsafePackCStringLen202,8299
unsafePackCStringFinalizer :: Ptr Word8 -> Int -> IO () -> IO ByteStringunsafePackCStringFinalizer158,6453
unsafePackCString :: CString -> IO ByteStringunsafePackCString187,7668
unsafePackAddressLen :: Int -> Addr# -> IO ByteStringunsafePackAddressLen143,5852
unsafeLast :: ByteString -> Word8unsafeLast99,3987
unsafeInit :: ByteString -> ByteStringunsafeInit92,3657
unsafeIndex :: ByteString -> Int -> Word8unsafeIndex108,4417
unsafeHead :: ByteString -> Word8unsafeHead77,2937
unsafeFinalize :: ByteString -> IO ()unsafeFinalize172,7040
unsafeDrop  :: Int -> ByteString -> ByteStringunsafeDrop121,5059

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Cont.hs,41
module Control.Monad.Cont (Cont51,1896

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Cont/Class.hs,157
module Control.Monad.Cont.Class (Class52,1923
class Monad m => MonadCont m whereMonadCont74,2694
    callCC :: ((a -> m b) -> m a) -> m acallCC93,3659

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Error.hs,41
module Control.Monad.ErrorError35,1191

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Error/Class.hs,296
module Control.Monad.Error.Class (Class41,1389
class (Monad m) => MonadError e m | m -> e whereMonadError91,3405
    throwError :: e -> m athrowError93,3531
    catchError :: m a -> (e -> m a) -> m acatchError104,3870
liftEither :: MonadError e m => Either e a -> m aliftEither118,4173

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Except.hs,43
module Control.Monad.ExceptExcept34,1078

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Identity.hs,49
module Control.Monad.Identity (Identity35,1184

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/List.hs,40
module Control.Monad.List (List16,494

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/RWS.hs,38
module Control.Monad.RWS (RWS20,792

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/RWS/Class.hs,112
module Control.Monad.RWS.Class (Class26,1012
   => MonadRWS r w s m | m -> r, m -> w, m -> sMonadRWS48,1704

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/RWS/Lazy.hs,44
module Control.Monad.RWS.Lazy (Lazy20,778

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/RWS/Strict.hs,48
module Control.Monad.RWS.Strict (Strict20,782

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Reader.hs,45
module Control.Monad.Reader (Reader38,1388

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Reader/Class.hs,359
module Control.Monad.Reader.Class (Class44,1628
class Monad m => MonadReader r m | m -> r whereMonadReader75,2799
    ask   :: m rask80,2969
    local :: (r -> r) -- ^ The function to modify the environment.local84,3066
    reader :: (r -> a) -- ^ The selector function to apply to the environment.reader89,3281
asks :: MonadReader r masks96,3485

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/State.hs,42
module Control.Monad.State (State21,789

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/State/Class.hs,401
module Control.Monad.State.Class (Class28,1034
class Monad m => MonadState s m | m -> s whereMonadState56,2036
    get :: m sget58,2142
    put :: s -> m ()put62,2234
    state :: (s -> (a, s)) -> m astate66,2343
modify' :: MonadState s m => (s -> s) -> m ()modify'94,3093
modify :: MonadState s m => (s -> s) -> m ()modify87,2912
gets :: MonadState s m => (s -> a) -> m agets101,3265

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/State/Lazy.hs,46
module Control.Monad.State.Lazy (Lazy21,799

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/State/Strict.hs,50
module Control.Monad.State.Strict (Strict21,803

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Trans.hs,43
module Control.Monad.Trans (Trans28,1154

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Writer.hs,44
module Control.Monad.Writer (Writer20,805

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Writer/Class.hs,444
module Control.Monad.Writer.Class (Class27,1046
class (Monoid w, Monad m) => MonadWriter w m | m -> w whereMonadWriter65,2403
    writer :: (a,w) -> m awriter70,2608
    tell   :: w -> m ()tell76,2751
    listen :: m a -> m (a, w)listen81,2927
    pass   :: m (a, w -> w) -> m apass85,3132
listens :: MonadWriter w m => (w -> b) -> m a -> m (a, b)listens91,3375
censor :: MonadWriter w m => (w -> w) -> m a -> m acensor101,3702

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Writer/Lazy.hs,47
module Control.Monad.Writer.Lazy (Lazy20,807

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Writer/Strict.hs,51
module Control.Monad.Writer.Strict (Strict20,811

/home/effectfully/.fastdogs/text-1.2.4.1/Setup.lhs,31
> main = defaultMainmain3,55

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks.hs,49
module MainMain4,83
main :: IO ()main34,1334

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/Builder.hs,199
module Benchmarks.BuilderBuilder8,168
texts :: [T.Text]texts63,2064
strings :: [String]strings73,2377
byteStrings :: [SB.ByteString]byteStrings68,2208
benchmark :: Benchmarkbenchmark26,760

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/Concat.hs,333
module Benchmarks.Concat (benchmark) whereConcat3,36
append4, concat4, write4 :: Text -> Text -> Text -> Text -> Textwrite416,459
append4, concat4, write4 :: Text -> Text -> Text -> Text -> Textconcat416,459
benchmark :: Benchmarkbenchmark9,187
append4, concat4, write4 :: Text -> Text -> Text -> Text -> Textappend416,459

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/DecodeUtf8.hs,341
module Benchmarks.DecodeUtf8DecodeUtf817,293
type Env = (B.ByteString, BL.ByteString)Env38,964
foreign import ccall unsafe time_iconv :: Ptr Word8 -> CSize -> IO CInttime_iconv74,2484
initEnv :: FilePath -> IO EnvinitEnv40,1006
iconv :: B.ByteString -> IO CInticonv70,2324
benchmark :: String -> Env -> Benchmarkbenchmark46,1125

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/EncodeUtf8.hs,96
module Benchmarks.EncodeUtf8EncodeUtf89,133
benchmark :: String -> Benchmarkbenchmark21,482

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/Equality.hs,227
module Benchmarks.EqualityEquality8,175
type Env = (T.Text, TL.Text, B.ByteString, BL.ByteString, BL.ByteString, String)Env21,548
initEnv :: FilePath -> IO EnvinitEnv23,630
benchmark :: Env -> Benchmarkbenchmark35,1112

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/FileRead.hs,94
module Benchmarks.FileReadFileRead7,108
benchmark :: FilePath -> Benchmarkbenchmark22,569

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/FoldLines.hs,251
module Benchmarks.FoldLinesFoldLines9,248
foldLinesT :: (a -> T.Text -> a) -> a -> Handle -> IO afoldLinesT34,913
foldLinesB :: (a -> B.ByteString -> a) -> a -> Handle -> IO afoldLinesB48,1233
benchmark :: FilePath -> Benchmarkbenchmark19,480

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/Mul.hs,349
module Benchmarks.MulMul1,0
type Env = (U.Vector (Int32,Int32), U.Vector (Int64,Int64))Env18,402
testVector64 :: U.Vector (Int64,Int64)testVector6435,925
testVector32 :: U.Vector (Int32,Int32)testVector32105,5808
oldMul :: Int64 -> Int64 -> Int64oldMul12,238
initEnv :: IO EnvinitEnv20,463
benchmark :: Env -> Benchmarkbenchmark26,575

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/Programs/BigTable.hs,231
module Benchmarks.Programs.BigTableBigTable10,208
makeTable :: Int -> BuildermakeTable33,918
makeCol :: Int -> BuildermakeCol36,1017
fromInt :: Int -> BuilderfromInt41,1200
benchmark :: Handle -> Benchmarkbenchmark21,511

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/Programs/Cut.hs,651
module Benchmarks.Programs.CutCut15,273
textByteString :: FilePath -> Handle -> Int -> Int -> IO ()textByteString84,2467
text :: FilePath -> Handle -> Int -> Int -> IO ()text68,1982
string :: FilePath -> Handle -> Int -> Int -> IO ()string45,1267
lazyTextByteString :: FilePath -> Handle -> Int -> Int -> IO ()lazyTextByteString91,2728
lazyText :: FilePath -> Handle -> Int -> Int -> IO ()lazyText75,2188
lazyByteString :: FilePath -> Handle -> Int -> Int -> IO ()lazyByteString59,1687
byteString :: FilePath -> Handle -> Int -> Int -> IO ()byteString52,1465
benchmark :: FilePath -> Handle -> Int -> Int -> Benchmarkbenchmark32,833

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/Programs/Fold.hs,321
module Benchmarks.Programs.FoldFold16,349
type Paragraph = [T.Text]Paragraph37,955
paragraphs :: T.Text -> [Paragraph]paragraphs62,1670
foldParagraph :: Int -> Paragraph -> TLB.BuilderfoldParagraph47,1171
fold :: Int -> T.Text -> TL.Textfold41,1002
benchmark :: FilePath -> Handle -> Benchmarkbenchmark31,777

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/Programs/Sort.hs,421
module Benchmarks.Programs.SortSort16,286
textBuilder :: T.Text -> TL.TexttextBuilder69,2236
text :: T.Text -> T.Texttext61,2028
string :: String -> Stringstring52,1778
lazyText :: TL.Text -> TL.TextlazyText64,2090
lazyByteString :: BL.ByteString -> BL.ByteStringlazyByteString58,1928
byteString :: B.ByteString -> B.ByteStringbyteString55,1840
benchmark :: FilePath -> Handle -> Benchmarkbenchmark36,955

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/Programs/StripTags.hs,306
module Benchmarks.Programs.StripTagsStripTags14,313
text :: T.Text -> T.Texttext39,1158
string :: String -> Stringstring36,1098
step :: Int -> Char -> (Int, Char)step45,1299
byteString :: B.ByteString -> B.ByteStringbyteString42,1216
benchmark :: FilePath -> Handle -> Benchmarkbenchmark27,687

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/Programs/Throughput.hs,118
module Benchmarks.Programs.ThroughputThroughput17,538
benchmark :: FilePath -> Handle -> Benchmarkbenchmark30,939

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/Pure.hs,1175
module Benchmarks.PurePure10,304
data Env = EnvEnv33,1051
    { bsa :: !BS.ByteStringbsa34,1066
    , ta :: !T.Textta35,1094
    , tb :: !T.Texttb36,1114
    , tla :: !TL.Texttla37,1134
    , tlb :: !TL.Texttlb38,1156
    , bsb :: !BS.ByteStringbsb39,1178
    , bla :: !BL.ByteStringbla40,1206
    , blb :: !BL.ByteStringblb41,1234
    , sa :: !Stringsa42,1262
    , sb :: !Stringsb43,1282
    , bsa_len :: !Intbsa_len44,1302
    , ta_len :: !Intta_len45,1324
    , bla_len :: !Int64bla_len46,1345
    , tla_len :: !Int64tla_len47,1369
    , sa_len :: !Intsa_len48,1393
    , bsl :: [BS.ByteString]bsl49,1414
    , bll :: [BL.ByteString]bll50,1443
    , tl :: [T.Text]tl51,1472
    , tll :: [TL.Text]tll52,1493
    , sl :: [String]sl53,1516
data B whereB478,19563
mappendNText :: T.Text -> Int -> TB.BuildermappendNText513,20496
mappendNChar :: Char -> Int -> TB.BuildermappendNChar495,19915
mappend8Char :: Char -> TB.Buildermappend8Char505,20172
initEnv :: FilePath -> IO EnvinitEnv57,1572
chunksOf :: Int -> BS.ByteString -> [BS.ByteString]chunksOf486,19689
benchmark :: String -> Env -> Benchmarkbenchmark96,2750

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/ReadNumbers.hs,462
module Benchmarks.ReadNumbersReadNumbers19,448
type Env = ([String], [T.Text], [TL.Text], [B.ByteString], [BL.ByteString])Env37,1016
text :: (Ord a, Num a) => (t -> Either String (a,t)) -> [t] -> atext90,2978
string :: (Ord a, Num a) => (t -> [(a, t)]) -> [t] -> astring84,2785
initEnv :: FilePath -> IO EnvinitEnv39,1093
byteString :: (Ord a, Num a) => (t -> Maybe (a,t)) -> [t] -> abyteString96,3186
benchmark :: Env -> Benchmarkbenchmark50,1455

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/Replace.hs,221
module Benchmarks.ReplaceReplace8,155
type Env = (T.Text, B.ByteString, TL.Text, BL.ByteString)Env24,656
initEnv :: FilePath -> IO EnvinitEnv26,715
benchmark :: String -> String -> Env -> Benchmarkbenchmark34,894

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/Search.hs,456
module Benchmarks.SearchSearch7,171
type Env = (B.ByteString, BL.ByteString, T.Text, TL.Text)Env23,655
text :: T.Text -> T.Text -> Inttext51,1553
lazyText :: TL.Text -> TL.Text -> IntlazyText54,1601
lazyByteString :: B.ByteString -> BL.ByteString -> IntlazyByteString48,1446
initEnv :: FilePath -> IO EnvinitEnv25,714
byteString :: B.ByteString -> B.ByteString -> IntbyteString45,1349
benchmark :: T.Text -> Env -> Benchmarkbenchmark33,885

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/Stream.hs,729
module Benchmarks.StreamStream11,290
data Env = EnvEnv44,1497
    { t :: !T.Textt45,1512
    , utf8 :: !B.ByteStringutf846,1531
    , utf16le :: !B.ByteStringutf16le47,1559
    , utf16be :: !B.ByteStringutf16be48,1590
    , utf32le :: !B.ByteStringutf32le49,1621
    , utf32be :: !B.ByteStringutf32be50,1652
    , tl :: !TL.Texttl51,1683
    , utf8L :: !BL.ByteStringutf8L52,1704
    , utf16leL :: !BL.ByteStringutf16leL53,1734
    , utf16beL :: !BL.ByteStringutf16beL54,1767
    , utf32leL :: !BL.ByteStringutf32leL55,1800
    , utf32beL :: !BL.ByteStringutf32beL56,1833
    , s :: T.Stream Chars57,1866
initEnv :: FilePath -> IO EnvinitEnv60,1925
benchmark :: Env -> Benchmarkbenchmark82,2561

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Benchmarks/WordFrequencies.hs,263
module Benchmarks.WordFrequenciesWordFrequencies11,193
type Env = (String, B.ByteString, T.Text)Env25,538
initEnv :: FilePath -> IO EnvinitEnv27,581
frequencies :: Ord a => [a] -> Map a Intfrequencies42,1043
benchmark :: Env -> Benchmarkbenchmark34,716

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Multilang.hs,185
module Main (Main3,62
type BM = Text -> ()BM15,315
main :: IO ()main26,555
bm :: forall a. (Text -> a) -> BMbm17,337
benchmarks :: [(String, Text.Text -> ())]benchmarks20,394

/home/effectfully/.fastdogs/text-1.2.4.1/benchmarks/haskell/Timer.hs,147
module Timer (timer) whereTimer3,31
timer :: Int -> a -> (a -> b) -> IO Stringtimer12,274
ickyRound :: Int -> Double -> StringickyRound9,189

/home/effectfully/.fastdogs/text-1.2.4.1/scripts/ApiCompare.hs,22
main = domain10,223

/home/effectfully/.fastdogs/text-1.2.4.1/scripts/Arsec.hs,249
module ArsecArsec1,0
type Comment = StringComment27,711
unichars :: Parser [Char]unichars32,814
unichar :: Parser Charunichar29,734
showC :: Char -> StringshowC41,1039
semi :: Parser ()semi35,886
comment :: Parser Commentcomment38,942

/home/effectfully/.fastdogs/text-1.2.4.1/scripts/CaseFolding.hs,718
module CaseFoldingCaseFolding5,111
data Fold = Fold {Fold15,226
      code :: Charcode16,245
    , status :: Charstatus17,264
    , mapping :: [Char]mapping18,285
    , name :: Stringname19,309
data CaseFolding = CF { cfComments :: [Comment], cfFolding :: [Fold] }CaseFolding22,362
data CaseFolding = CF { cfComments :: [Comment], cfFolding :: [Fold] }CF22,362
data CaseFolding = CF { cfComments :: [Comment], cfFolding :: [Fold] }cfComments22,362
data CaseFolding = CF { cfComments :: [Comment], cfFolding :: [Fold] }cfFolding22,362
parseCF :: FilePath -> IO (Either ParseError CaseFolding)parseCF33,746
mapCF :: CaseFolding -> [String]mapCF36,857
entries :: Parser CaseFoldingentries25,467

/home/effectfully/.fastdogs/text-1.2.4.1/scripts/CaseMapping.hs,20
main = domain8,98

/home/effectfully/.fastdogs/text-1.2.4.1/scripts/SpecialCasing.hs,893
module SpecialCasingSpecialCasing5,113
data SpecialCasing = SC { scComments :: [Comment], scCasing :: [Case] }SpecialCasing15,232
data SpecialCasing = SC { scComments :: [Comment], scCasing :: [Case] }SC15,232
data SpecialCasing = SC { scComments :: [Comment], scCasing :: [Case] }scComments15,232
data SpecialCasing = SC { scComments :: [Comment], scCasing :: [Case] }scCasing15,232
data Case = Case {Case18,340
      code :: Charcode19,359
    , lower :: [Char]lower20,378
    , title :: [Char]title21,400
    , upper :: [Char]upper22,422
    , conditions :: Stringconditions23,444
    , name :: Stringname24,471
ucFirst (c:cs) = toUpper c : csucFirst55,1713
parseSC :: FilePath -> IO (Either ParseError SpecialCasing)parseSC37,859
mapSC :: String -> (Case -> String) -> (Char -> Char) -> SpecialCasingmapSC40,972
entries :: Parser SpecialCasingentries27,524

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text.hs,5750
module Data.TextText46,1652
zipWith :: (Char -> Char -> Char) -> Text -> Text -> TextzipWith1674,54512
zip :: Text -> Text -> [(Char,Char)]zip1667,54210
words :: Text -> [Text]words1681,54793
unwords :: [Text] -> Textunwords1735,56770
unsnoc :: Text -> Maybe (Text, Char)unsnoc600,17854
unlines :: [Text] -> Textunlines1730,56626
unfoldrN     :: Int -> (a -> Maybe (Char,a)) -> a -> TextunfoldrN1161,37251
unfoldr     :: (a -> Maybe (Char,a)) -> a -> Textunfoldr1151,36719
uncons :: Text -> Maybe (Char, Text)uncons534,15767
transpose :: [Text] -> [Text]transpose952,29272
toUpper :: Text -> TexttoUpper851,26210
toTitle :: Text -> TexttoTitle875,27166
toLower :: Text -> TexttoLower841,25860
toCaseFold :: Text -> TexttoCaseFold830,25400
textDataType :: DataTypetextDataType455,13083
takeWhileEnd :: (Char -> Bool) -> Text -> TexttakeWhileEnd1278,40782
takeWhile :: (Char -> Bool) -> Text -> TexttakeWhile1254,40057
takeEnd :: Int -> Text -> TexttakeEnd1201,38436
take :: Int -> Text -> Texttake1171,37679
tails :: Text -> [Text]tails1411,45452
tail :: Text -> Texttail565,16774
sumP :: String -> [Int] -> IntsumP1867,60954
stripSuffix :: Text -> Text -> Maybe TextstripSuffix1861,60698
stripStart :: Text -> TextstripStart1329,42680
stripPrefix :: Text -> Text -> Maybe TextstripPrefix1805,58990
stripEnd :: Text -> TextstripEnd1336,42865
strip :: Text -> Textstrip1344,43063
splitOn :: TextsplitOn1445,46398
splitAt :: Int -> Text -> (Text, Text)splitAt1351,43338
split :: (Char -> Bool) -> Text -> [Text]split1475,47370
span :: (Char -> Bool) -> Text -> (Text, Text)span1365,43844
snoc :: Text -> Char -> Textsnoc497,14629
second :: (b -> c) -> (a,b) -> (a,c)second542,16043
scanr1 :: (Char -> Char -> Char) -> Text -> Textscanr11083,33952
scanr :: (Char -> Char -> Char) -> Char -> Text -> Textscanr1076,33652
scanl1 :: (Char -> Char -> Char) -> Text -> Textscanl11067,33319
scanl :: (Char -> Char -> Char) -> Char -> Text -> Textscanl1058,32975
reverse :: Text -> Textreverse734,21830
replicateChar :: Int -> Char -> TextreplicateChar1140,36132
replicate :: Int -> Text -> Textreplicate1113,35262
replace :: Textreplace763,22650
partition :: (Char -> Bool) -> Text -> (Text, Text)partition1518,48845
packConstr :: ConstrpackConstr452,13009
pack :: String -> Textpack477,13901
overflowError :: String -> aoverflowError1878,61250
null :: Text -> Boolnull611,18300
minimum :: Text -> Charminimum1042,32478
maximum :: Text -> Charmaximum1036,32287
mapAccumR :: (a -> Char -> (a,Char)) -> a -> Text -> (a, Text)mapAccumR1103,34850
mapAccumL :: (a -> Char -> (a,Char)) -> a -> Text -> (a, Text)mapAccumL1092,34347
map :: (Char -> Char) -> Text -> Textmap697,20767
lines :: Text -> [Text]lines1698,55381
length :: Text -> Intlength634,18852
last :: Text -> Charlast547,16208
justifyRight :: Int -> Char -> Text -> TextjustifyRight915,28249
justifyLeft :: Int -> Char -> Text -> TextjustifyLeft890,27546
iterNEnd :: Int -> Text -> IntiterNEnd1208,38611
iterN :: Int -> Text -> IntiterN1178,37847
isSuffixOf :: Text -> Text -> BoolisSuffixOf1753,57403
isSingleton :: Text -> BoolisSingleton628,18679
isPrefixOf :: Text -> Text -> BoolisPrefixOf1741,56997
isInfixOf :: Text -> Text -> BoolisInfixOf1767,57913
intersperse     :: Char -> Text -> Textintersperse722,21540
intercalate :: Text -> [Text] -> Textintercalate709,21179
inits :: Text -> [Text]inits1404,45211
init :: Text -> Textinit581,17230
index :: Text -> Int -> Charindex1625,52664
head :: Text -> Charhead528,15591
groupBy :: (Char -> Char -> Bool) -> Text -> [Text]groupBy1380,44298
group :: Text -> [Text]group1399,45085
foldr1 :: (Char -> Char -> Char) -> Text -> Charfoldr1993,30859
foldr :: (Char -> a -> a) -> a -> Text -> afoldr986,30612
foldl1' :: (Char -> Char -> Char) -> Text -> Charfoldl1'978,30277
foldl1 :: (Char -> Char -> Char) -> Text -> Charfoldl1973,30108
foldl' :: (a -> Char -> a) -> a -> Text -> afoldl'967,29860
foldl :: (a -> Char -> a) -> a -> Text -> afoldl962,29696
findIndex :: (Char -> Bool) -> Text -> Maybe IntfindIndex1632,52924
findAIndexOrEnd :: (Char -> Bool) -> Text -> IntfindAIndexOrEnd1392,44787
find :: (Char -> Bool) -> Text -> Maybe Charfind1509,48505
filter :: (Char -> Bool) -> Text -> Textfilter1525,49110
emptyError :: String -> aemptyError1875,61157
dropWhileEnd :: (Char -> Bool) -> Text -> TextdropWhileEnd1311,41955
dropWhile :: (Char -> Bool) -> Text -> TextdropWhile1288,41219
dropEnd :: Int -> Text -> TextdropEnd1245,39738
dropAround :: (Char -> Bool) -> Text -> TextdropAround1322,42464
drop :: Int -> Text -> Textdrop1219,39048
countChar :: Char -> Text -> IntcountChar1656,53784
count :: Text -> Text -> Intcount1642,53320
copy :: Text -> Textcopy1889,61802
cons :: Char -> Text -> Textcons488,14327
concatMap :: (Char -> Text) -> Text -> TextconcatMap1018,31636
concat :: [Text] -> Textconcat1001,31111
compareText :: Text -> Text -> OrderingcompareText459,13222
compareLength :: Text -> Int -> OrderingcompareLength646,19356
commonPrefixes :: Text -> Text -> Maybe (Text,Text,Text)commonPrefixes1827,59643
chunksOf :: Int -> Text -> [Text]chunksOf1492,47916
center :: Int -> Char -> Text -> Textcenter930,28649
breakOnEnd :: Text -> Text -> (Text, Text)breakOnEnd1570,50610
breakOnAll :: Text              -- ^ @needle@ to search forbreakOnAll1594,51318
breakOn :: Text -> Text -> (Text, Text)breakOn1553,49989
break :: (Char -> Bool) -> Text -> (Text, Text)break1375,44136
append :: Text -> Text -> Textappend503,14838
any :: (Char -> Bool) -> Text -> Boolany1024,31876
all :: (Char -> Bool) -> Text -> Boolall1030,32090

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Array.hs,1445
module Data.Text.ArrayArray24,798
data Array = Array {Array84,2347
      aBA :: ByteArray#aBA85,2368
    , aLen :: {-# UNPACK #-} !Int -- length (in units of Word16, not bytes)aLen87,2413
data MArray s = MArray {MArray94,2616
      maBA :: MutableByteArray# smaBA95,2641
    , maLen :: {-# UNPACK #-} !Int -- length (in units of Word16, not bytes)maLen97,2696
class IArray a whereIArray103,2849
    length :: a -> Intlength105,2910
foreign import ccall unsafe "_hs_text_memcpy" memcpyImemcpyI241,7503
foreign import ccall unsafe "_hs_text_memcmp" memcmpmemcmp244,7635
foreign import ccall unsafe "_hs_text_memcpy" memcpyMmemcpyM247,7759
unsafeWrite :: MArray s -> Int -> Word16 -> ST s ()unsafeWrite161,4563
unsafeIndex :: Array -> Int -> Word16unsafeIndex153,4272
unsafeFreeze :: MArray s -> ST s ArrayunsafeFreeze135,3715
toList :: Array -> Int -> Int -> [Word16]toList169,4850
run2 :: (forall s. ST s (MArray s, a)) -> (Array, a)run2185,5400
run :: (forall s. ST s (MArray s)) -> Arrayrun180,5192
new :: forall s. Int -> ST s (MArray s)new117,3137
equal :: Array                  -- ^ Firstequal229,7034
empty :: Arrayempty175,5054
copyM :: MArray s               -- ^ DestinationcopyM193,5643
copyI :: MArray s               -- ^ DestinationcopyI212,6328
bytesInArray :: Int -> IntbytesInArray147,4083
array_size_error :: aarray_size_error131,3562
++ show (_len_)) elseCHECK_BOUNDS51,1441

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Encoding.hs,2316
module Data.Text.EncodingEncoding22,679
data Decoding = Some Text ByteString (ByteString -> Decoding)Decoding264,9740
data Decoding = Some Text ByteString (ByteString -> Decoding)Some264,9740
newtype CodePoint = CodePoint Word32 deriving (Eq, Show, Num, Storable)CodePoint273,10117
newtype DecoderState = DecoderState Word32 deriving (Eq, Show, Num, Storable)DecoderState274,10189
foreign import ccall unsafe "_hs_text_decode_utf8" c_decode_utf8c_decode_utf8526,20945
foreign import ccall unsafe "_hs_text_decode_utf8_state" c_decode_utf8_with_statec_decode_utf8_with_state530,21099
foreign import ccall unsafe "_hs_text_decode_latin1" c_decode_latin1c_decode_latin1535,21317
foreign import ccall unsafe "_hs_text_encode_utf8" c_encode_utf8c_encode_utf8538,21449
streamDecodeUtf8With :: OnDecodeError -> ByteString -> DecodingstreamDecodeUtf8With292,10859
streamDecodeUtf8 :: ByteString -> DecodingstreamDecodeUtf8285,10653
encodeUtf8BuilderEscaped :: BP.BoundedPrim Word8 -> Text -> B.BuilderencodeUtf8BuilderEscaped382,14974
encodeUtf8Builder :: Text -> B.BuilderencodeUtf8Builder369,14476
encodeUtf8 :: Text -> ByteStringencodeUtf8432,17284
encodeUtf32LE :: Text -> ByteStringencodeUtf32LE517,20630
encodeUtf32BE :: Text -> ByteStringencodeUtf32BE522,20813
encodeUtf16LE :: Text -> ByteStringencodeUtf16LE479,19156
encodeUtf16BE :: Text -> ByteStringencodeUtf16BE484,19339
decodeUtf8With :: OnDecodeError -> ByteString -> TextdecodeUtf8With143,4703
decodeUtf8' :: ByteString -> Either UnicodeException TextdecodeUtf8'362,14218
decodeUtf8 :: ByteString -> TextdecodeUtf8352,13809
decodeUtf32LEWith :: OnDecodeError -> ByteString -> TextdecodeUtf32LEWith489,19524
decodeUtf32LE :: ByteString -> TextdecodeUtf32LE498,19915
decodeUtf32BEWith :: OnDecodeError -> ByteString -> TextdecodeUtf32BEWith503,20078
decodeUtf32BE :: ByteString -> TextdecodeUtf32BE512,20463
decodeUtf16LEWith :: OnDecodeError -> ByteString -> TextdecodeUtf16LEWith451,18050
decodeUtf16LE :: ByteString -> TextdecodeUtf16LE460,18441
decodeUtf16BEWith :: OnDecodeError -> ByteString -> TextdecodeUtf16BEWith465,18604
decodeUtf16BE :: ByteString -> TextdecodeUtf16BE474,18989
decodeLatin1 :: ByteString -> TextdecodeLatin1126,3963
decodeASCII :: ByteString -> TextdecodeASCII118,3667

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Encoding/Error.hs,716
module Data.Text.Encoding.ErrorError26,886
type OnError a b = String -> Maybe a -> Maybe bOnError64,2076
type OnDecodeError = OnError Word8 CharOnDecodeError67,2162
type OnEncodeError = OnError Char Word8OnEncodeError71,2339
data UnicodeException =UnicodeException74,2445
    DecodeError String (Maybe Word8)DecodeError75,2469
  | EncodeError String (Maybe Char)EncodeError78,2639
strictEncode :: OnEncodeErrorstrictEncode115,4085
strictDecode :: OnDecodeErrorstrictDecode105,3706
showUnicodeException :: UnicodeException -> StringshowUnicodeException85,2926
replace :: b -> OnError a breplace123,4326
lenientDecode :: OnDecodeErrorlenientDecode110,3871
ignore :: OnError a bignore119,4231

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Foreign.hs,611
module Data.Text.ForeignForeign13,340
newtype I16 = I16 IntI1668,2139
withCStringLen :: Text -> (CStringLen -> IO a) -> IO awithCStringLen175,6004
useAsPtr :: Text -> (Ptr Word16 -> I16 -> IO a) -> IO auseAsPtr143,4828
unsafeCopyToPtr :: Text -> Ptr Word16 -> IO ()unsafeCopyToPtr132,4432
takeWord16 :: I16 -> Text -> TexttakeWord16104,3409
peekCStringLen :: CStringLen -> IO TextpeekCStringLen161,5453
fromPtr :: Ptr Word16           -- ^ source arrayfromPtr73,2328
dropWord16 :: I16 -> Text -> TextdropWord16120,3993
asForeignPtr :: Text -> IO (ForeignPtr Word16, I16)asForeignPtr150,5084

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/IO.hs,1450
module Data.Text.IOIO18,527
writeLines :: Handle -> Newline -> Buffer CharBufElem -> Stream Char -> IO ()writeLines213,8164
writeFile :: FilePath -> Text -> IO ()writeFile91,3243
writeBlocksRaw :: Handle -> Buffer CharBufElem -> Stream Char -> IO ()writeBlocksRaw249,9704
writeBlocksCRLF :: Handle -> Buffer CharBufElem -> Stream Char -> IO ()writeBlocksCRLF233,9026
readFile :: FilePath -> IO TextreadFile86,3059
readChunkEof :: Handle__ -> CharBuffer -> IO (Text, Bool)readChunkEof111,4128
putStrLn :: Text -> IO ()putStrLn315,12135
putStr :: Text -> IO ()putStr311,12030
interact :: (Text -> Text) -> IO ()interact299,11710
hPutStrLn :: Handle -> Text -> IO ()hPutStrLn292,11372
hPutStr :: Handle -> Text -> IO ()hPutStr180,6864
hPutChars :: Handle -> Stream Char -> IO ()hPutChars195,7448
hGetLine :: Handle -> IO TexthGetLine176,6767
hGetContents :: Handle -> IO TexthGetContents141,5439
hGetChunk :: Handle -> IO TexthGetChunk122,4625
getSpareBuffer :: Handle__ -> IO (BufferMode, CharBuffer)getSpareBuffer264,10313
getLine :: IO TextgetLine307,11952
getContents :: IO TextgetContents303,11843
commitBuffer :: Handle -> RawCharBuffer -> Int -> Int -> Bool -> BoolcommitBuffer284,11040
chooseGoodBuffering :: Handle -> IO ()chooseGoodBuffering163,6269
catchError :: String -> Handle -> Handle__ -> IOError -> IO (Text, Bool)catchError98,3465
appendFile :: FilePath -> Text -> IO ()appendFile95,3372

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal.hs,616
module Data.Text.InternalInternal27,869
data Text = TextText60,1525
text_ :: A.Array -> Int -> Int -> Texttext_67,1807
textP :: A.Array -> Int -> Int -> TexttextP97,2613
text :: A.Array -> Int -> Int -> Texttext92,2468
showText :: Text -> StringshowText102,2769
safe :: Char -> Charsafe115,3312
mul64_ :: Int64 -> Int64 -> Int64mul64_148,4251
mul64 :: Int64 -> Int64 -> Int64mul64139,4017
mul32 :: Int32 -> Int32 -> Int32mul32162,4781
mul :: Int -> Int -> Intmul128,3713
firstf :: (a -> c) -> Maybe (a,b) -> Maybe (c,b)firstf122,3514
empty_ :: Textempty_86,2288
empty :: Textempty81,2184

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Builder.hs,1370
module Data.Text.Internal.BuilderBuilder38,1332
newtype Builder = Builder {Builder87,2800
     runBuilder :: forall s. (Buffer s -> ST s [S.Text])runBuilder90,2915
data Buffer s = Buffer {-# UNPACK #-} !(A.MArray s)Buffer211,6360
writeN :: Int -> (forall s. A.MArray s -> Int -> ST s ()) -> BuilderwriteN281,9058
writeBuffer :: (A.MArray s -> Int -> ST s Int) -> Buffer s -> ST s (Buffer s)writeBuffer285,9206
writeAtMost :: Int -> (forall s. A.MArray s -> Int -> ST s Int) -> BuilderwriteAtMost275,8773
withSize :: (Int -> Builder) -> BuilderwithSize256,8168
withBuffer :: (forall s. Buffer s -> ST s (Buffer s)) -> BuilderwithBuffer251,7997
toLazyTextWith :: Int -> Builder -> L.TexttoLazyTextWith230,7232
toLazyText :: Builder -> L.TexttoLazyText221,6841
singleton :: Char -> Buildersingleton140,4086
newBuffer :: Int -> ST s (Buffer s)newBuffer291,9404
mapBuilder :: ([S.Text] -> [S.Text]) -> BuildermapBuilder262,8349
fromText :: S.Text -> BuilderfromText166,4932
fromString :: String -> BuilderfromString182,5388
fromLazyText :: L.Text -> BuilderfromLazyText204,6132
flush :: Builderflush236,7526
ensureFree :: Int -> BuilderensureFree268,8571
empty :: Builderempty132,3888
copyLimit :: IntcopyLimit156,4642
append' :: Builder -> Builder -> Builderappend'303,9818
append :: Builder -> Builder -> Builderappend151,4477

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Builder/Functions.hs,139
module Data.Text.Internal.Builder.FunctionsFunctions18,491
i2d :: Int -> Chari2d31,775
(<>) :: Builder -> Builder -> Builder<>36,917

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Builder/Int/Digits.hs,109
module Data.Text.Internal.Builder.Int.Digits (digits) whereDigits17,614
digits :: ByteStringdigits21,718

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Builder/RealFloat/Functions.hs,125
module Data.Text.Internal.Builder.RealFloat.FunctionsFunctions12,389
roundTo :: Int -> [Int] -> (Int,[Int])roundTo17,476

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/ByteStringCompat.hs,295
module Data.Text.Internal.ByteStringCompat (mkBS, withBS) whereByteStringCompat4,78
withBS :: ByteString -> (ForeignPtr Word8 -> Int -> r) -> rwithBS28,647
plusForeignPtr :: ForeignPtr a -> Int -> ForeignPtr bplusForeignPtr47,1474
mkBS :: ForeignPtr Word8 -> Int -> ByteStringmkBS20,486

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Encoding/Fusion.hs,676
module Data.Text.Internal.Encoding.FusionFusion21,665
unstream :: Stream Word8 -> ByteStringunstream169,6317
streamUtf8 :: OnDecodeError -> ByteString -> Stream CharstreamUtf873,2338
streamUtf32LE :: OnDecodeError -> ByteString -> Stream CharstreamUtf32LE150,5568
streamUtf32BE :: OnDecodeError -> ByteString -> Stream CharstreamUtf32BE130,4780
streamUtf16LE :: OnDecodeError -> ByteString -> Stream CharstreamUtf16LE94,3174
streamUtf16BE :: OnDecodeError -> ByteString -> Stream CharstreamUtf16BE112,3977
streamASCII :: ByteString -> Stream CharstreamASCII58,1878
decodeError :: forall s. String -> String -> OnDecodeError -> Maybe Word8decodeError202,7480

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Encoding/Fusion/Common.hs,348
module Data.Text.Internal.Encoding.Fusion.CommonCommon21,608
restreamUtf32LE :: Stream Char -> Stream Word8restreamUtf32LE106,3601
restreamUtf32BE :: Stream Char -> Stream Word8restreamUtf32BE87,2926
restreamUtf16LE :: Stream Char -> Stream Word8restreamUtf16LE63,2039
restreamUtf16BE :: Stream Char -> Stream Word8restreamUtf16BE39,1128

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Encoding/Utf16.hs,211
module Data.Text.Internal.Encoding.Utf16Utf1619,606
validate2       ::  Word16 -> Word16 -> Boolvalidate242,1120
validate1    :: Word16 -> Boolvalidate138,1021
chr2 :: Word16 -> Word16 -> Charchr229,755

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Encoding/Utf32.hs,100
module Data.Text.Internal.Encoding.Utf32Utf3217,548
validate    :: Word32 -> Boolvalidate24,650

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Encoding/Utf8.hs,677
module Data.Text.Internal.Encoding.Utf8Utf819,615
validate4 :: Word8 -> Word8 -> Word8 -> Word8 -> Boolvalidate4153,4172
validate3 :: Word8 -> Word8 -> Word8 -> Boolvalidate3136,3541
validate2 :: Word8 -> Word8 -> Boolvalidate2132,3416
validate1 :: Word8 -> Boolvalidate1128,3337
ord4 :: Char -> (Word8,Word8,Word8,Word8)ord481,1924
ord3 :: Char -> (Word8,Word8,Word8)ord369,1614
ord2 :: Char -> (Word8,Word8)ord258,1373
chr4             :: Word8 -> Word8 -> Word8 -> Word8 -> Charchr4114,2874
chr3 :: Word8 -> Word8 -> Word8 -> Charchr3103,2530
chr2 :: Word8 -> Word8 -> Charchr294,2289
between :: Word8                -- ^ byte to checkbetween51,1151

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Functions.hs,103
module Data.Text.Internal.FunctionsFunctions16,437
intersperse :: a -> [a] -> [a]intersperse23,600

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Fusion.hs,745
module Data.Text.Internal.FusionFusion20,629
unstream :: Stream Char -> Textunstream99,2880
unfoldrN :: Int -> (a -> Maybe (Char,a)) -> a -> Stream CharunfoldrN194,6787
stream :: Text -> Stream Charstream70,1792
reverseStream :: Text -> Stream CharreverseStream85,2332
reverseScanr :: (Char -> Char -> Char) -> Char -> Stream Char -> Stream CharreverseScanr178,5996
reverse :: Stream Char -> Textreverse142,4469
mapAccumL :: (a -> Char -> (a,Char)) -> a -> Stream Char -> (a, Text)mapAccumL222,7808
length :: Stream Char -> Intlength137,4347
index :: Stream Char -> Int -> Charindex202,7072
findIndex :: (Char -> Bool) -> Stream Char -> Maybe IntfindIndex209,7301
countChar :: Char -> Stream Char -> IntcountChar215,7523

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Fusion/CaseMapping.hs,380
module Data.Text.Internal.Fusion.CaseMapping whereCaseMapping9,229
upperMapping :: forall s. Char -> s -> Step (CC s) CharupperMapping13,337
titleMapping :: forall s. Char -> s -> Step (CC s) ChartitleMapping225,13083
lowerMapping :: forall s. Char -> s -> Step (CC s) CharlowerMapping220,12836
foldMapping :: forall s. Char -> s -> Step (CC s) CharfoldMapping324,18535

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Fusion/Common.hs,4870
module Data.Text.Internal.Fusion.CommonCommon17,531
data C s = C0 !sC173,4444
data C s = C0 !sC0173,4444
         | C1 !sC1174,4461
data Snoc a = NSnoc187,4910
data Snoc a = NN187,4910
            | J !aJ188,4926
data E l r = L !lE201,5310
data E l r = L !lL201,5310
           | R !rR202,5328
data Init s = Init0 !sInit275,8126
data Init s = Init0 !sInit0275,8126
            | Init1 {-# UNPACK #-} !Char !sInit1276,8149
data I s = I1 !sI367,11728
data I s = I1 !sI1367,11728
         | I2 !s {-# UNPACK #-} !CharI2368,11745
         | I3 !sI3369,11783
data Justify i s = Just1 !i !sJustify482,16306
data Justify i s = Just1 !i !sJust1482,16306
                 | Just2 !i !sJust2483,16337
data RI s = RI !s {-# UNPACK #-} !Int64RI686,24425
data Drop a s = NS !sDrop750,27033
data Drop a s = NS !sNS750,27033
              | JS !a !sJS751,27055
data Zip a b m = Z1 !a !bZip910,33192
data Zip a b m = Z1 !a !bZ1910,33192
               | Z2 !a !b !mZ2911,33218
zipWith :: (a -> a -> b) -> Stream a -> Stream a -> Stream bzipWith915,33371
unstreamList :: Stream a -> [a]unstreamList131,2750
unfoldrNI :: Integral a => a -> (b -> Maybe (Char,b)) -> b -> Stream CharunfoldrNI719,25797
unfoldr :: (a -> Maybe (Char,a)) -> a -> Stream Charunfoldr706,25274
uncons :: Stream Char -> Maybe (Char, Stream Char)uncons236,6572
toUpper :: Stream Char -> Stream ChartoUpper434,14273
toTitle :: Stream Char -> Stream ChartoTitle465,15599
toLower :: Stream Char -> Stream ChartoLower443,14674
toCaseFold :: Stream Char -> Stream ChartoCaseFold426,13948
takeWhile :: (Char -> Bool) -> Stream Char -> Stream ChartakeWhile777,27966
take :: Integral a => a -> Stream Char -> Stream Chartake736,26506
tail :: Stream Char -> Stream Chartail262,7613
streamList :: [a] -> Stream astreamList125,2579
streamError :: String -> String -> astreamError942,34444
streamCString# :: Addr# -> Stream CharstreamCString#146,3353
snoc :: Stream Char -> Char -> Stream Charsnoc191,4999
singleton :: Char -> Stream Charsingleton119,2401
scanl :: (Char -> Char -> Char) -> Char -> Stream Char -> Stream Charscanl662,23493
replicateI :: Int64 -> Stream Char -> Stream CharreplicateI688,24466
replicateCharI :: Integral a => a -> Char -> Stream CharreplicateCharI677,24136
null :: Stream Char -> Boolnull294,8918
minimum :: Stream Char -> Charminimum644,22711
maximum :: Stream Char -> Charmaximum627,21944
map :: (Char -> Char) -> Stream Char -> Stream Charmap353,11336
lengthI :: Integral a => Stream Char -> alengthI304,9248
last :: Stream Char -> Charlast247,7020
justifyLeftI :: Integral a => a -> Char -> Stream Char -> Stream CharjustifyLeftI485,16369
isSingleton :: Stream Char -> BoolisSingleton337,10738
isPrefixOf :: (Eq a) => Stream a -> Stream a -> BoolisPrefixOf806,29105
intersperse :: Char -> Stream Char -> Stream Charintersperse373,11897
internalError :: String -> ainternalError948,34652
intercalate :: Stream Char -> [Stream Char] -> Stream Charintercalate583,20258
init :: Stream Char -> Stream Charinit280,8287
indexI :: Integral a => Stream Char -> a -> CharindexI853,31001
head_empty :: ahead_empty230,6354
head :: Stream Char -> Charhead221,6082
foldr1 :: (Char -> Char -> Char) -> Stream Char -> Charfoldr1569,19822
foldr :: (Char -> b -> b) -> b -> Stream Char -> bfoldr557,19358
foldl1' :: (Char -> Char -> Char) -> Stream Char -> Charfoldl1'541,18602
foldl1 :: (Char -> Char -> Char) -> Stream Char -> Charfoldl1527,18028
foldl' :: (b -> Char -> b) -> b -> Stream Char -> bfoldl'516,17564
foldl :: (b -> Char -> b) -> b -> Stream Char -> bfoldl506,17203
findIndicesI :: Integral a => (Char -> Bool) -> Stream Char -> [a]findIndicesI896,32637
findIndexI :: Integral a => (Char -> Bool) -> Stream Char -> Maybe afindIndexI887,32276
findBy :: (Char -> Bool) -> Stream Char -> Maybe CharfindBy842,30566
filter :: (Char -> Bool) -> Stream Char -> Stream Charfilter868,31587
emptyError :: String -> aemptyError945,34574
elem :: Char -> Stream Char -> Boolelem825,29932
dropWhile :: (Char -> Bool) -> Stream Char -> Stream ChardropWhile789,28447
drop :: Integral a => a -> Stream Char -> Stream Chardrop756,27266
countCharI :: Integral a => Char -> Stream Char -> acountCharI932,34109
cons :: Char -> Stream Char -> Stream Charcons177,4539
concatMap :: (Char -> Stream Char) -> Stream Char -> Stream CharconcatMap597,20748
concat :: [Stream Char] -> Stream Charconcat591,20561
compareLengthI :: Integral a => Stream Char -> a -> OrderingcompareLengthI320,9943
caseConvert :: (forall s. Char -> s -> Step (CC s) Char)caseConvert400,12915
append :: Stream Char -> Stream Char -> Stream Charappend205,5392
any :: (Char -> Bool) -> Stream Char -> Boolany603,20984
all :: (Char -> Bool) -> Stream Char -> Boolall615,21470

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Fusion/Size.hs,1286
module Data.Text.Internal.Fusion.SizeSize19,559
data Size = Between {-# UNPACK #-} !Int {-# UNPACK #-} !Int -- ^ Lower and upper bounds on size.Size47,1047
data Size = Between {-# UNPACK #-} !Int {-# UNPACK #-} !Int -- ^ Lower and upper bounds on size.Between47,1047
          | Unknown                                         -- ^ Unknown size.Unknown48,1144
upperBound :: Int -> Size -> IntupperBound158,4080
unknownSize :: SizeunknownSize100,2247
unionSize :: Size -> Size -> SizeunionSize96,2120
subtractSize :: Size -> Size -> SizesubtractSize123,2804
smaller :: Size -> Size -> Sizesmaller136,3333
overflowError :: IntoverflowError186,4849
mulSize :: Size -> Size -> SizemulSize130,3121
maxSize :: Int -> SizemaxSize79,1833
lowerBound :: Int -> Size -> IntlowerBound164,4263
larger :: Size -> Size -> Sizelarger149,3807
isEmpty :: Size -> BoolisEmpty181,4740
exactly :: Size -> Maybe Intexactly51,1256
exactSize :: Int -> SizeexactSize71,1704
compareSize :: Size -> Size -> Maybe OrderingcompareSize171,4490
codePointsSize :: Int -> SizecodePointsSize63,1556
charSize :: Char -> SizecharSize57,1415
betweenSize :: Int -> Int -> SizebetweenSize87,1956
addSize :: Size -> Size -> SizeaddSize118,2624
add :: Int -> Int -> Intadd112,2499

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Fusion/Types.hs,959
module Data.Text.Internal.Fusion.TypesTypes20,658
data CC s = CC !s {-# UNPACK #-} !Char {-# UNPACK #-} !CharCC35,925
data RS sRS38,1010
    = RS0 !sRS039,1020
    | RS1 !s {-# UNPACK #-} !Word8RS140,1033
    | RS2 !s {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8RS241,1068
    | RS3 !s {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8RS342,1125
data PairS a b = !a :*: !bPairS45,1223
data PairS a b = !a :*: !b:*:45,1223
data Scan s = Scan1 {-# UNPACK #-} !Char !sScan50,1348
data Scan s = Scan1 {-# UNPACK #-} !Char !sScan150,1348
            | Scan2 {-# UNPACK #-} !Char !sScan251,1392
data Step s a = DoneStep54,1488
data Step s a = DoneDone54,1488
              | Skip !sSkip55,1509
              | Yield !a !sYield56,1533
data Stream a =Stream83,2458
eq :: (Eq a) => Stream a -> Stream a -> Booleq90,2705
empty :: Stream aempty119,4013
cmp :: (Ord a) => Stream a -> Stream a -> Orderingcmp103,3335

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/IO.hs,630
module Data.Text.Internal.IOIO17,539
unpack_nl :: RawCharBuffer -> Int -> Int -> IO (Text, Int)unpack_nl104,3893
unpack :: RawCharBuffer -> Int -> Int -> IO Textunpack92,3508
sizeError :: String -> asizeError165,6242
readChunk :: Handle__ -> CharBuffer -> IO TextreadChunk155,5895
maybeFillReadBuffer :: Handle__ -> CharBuffer -> IO (Maybe CharBuffer)maybeFillReadBuffer85,3271
hGetLineWith :: ([Text] -> t) -> Handle -> IO thGetLineWith43,1563
hGetLineLoop :: Handle__ -> [Text] -> CharBuffer -> IO [Text]hGetLineLoop48,1755
getSomeCharacters :: Handle__ -> CharBuffer -> IO CharBuffergetSomeCharacters129,4764

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Lazy.hs,687
module Data.Text.Internal.LazyLazy21,705
data Text = EmptyText47,1238
data Text = EmptyEmpty47,1238
          | Chunk {-# UNPACK #-} !T.Text TextChunk48,1256
strictInvariant :: Text -> BoolstrictInvariant58,1578
smallChunkSize :: IntsmallChunkSize112,3451
showStructure :: Text -> StringshowStructure74,2166
lazyInvariant :: Text -> TextlazyInvariant66,1859
foldrChunks :: (T.Text -> a -> a) -> a -> Text -> afoldrChunks92,2773
foldlChunks :: (a -> T.Text -> a) -> a -> Text -> afoldlChunks100,3039
empty :: Textempty87,2651
defaultChunkSize :: IntdefaultChunkSize107,3283
chunkOverhead :: IntchunkOverhead117,3616
chunk :: T.Text -> Text -> Textchunk81,2464

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Lazy/Encoding/Fusion.hs,1113
module Data.Text.Internal.Lazy.Encoding.FusionFusion19,588
data S = S0S57,1856
data S = S0S057,1856
       | S1 {-# UNPACK #-} !Word8S158,1868
       | S2 {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8S259,1902
       | S3 {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8S360,1958
       | S4 {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8S461,2036
data T = T !ByteString !S {-# UNPACK #-} !IntT63,2137
unstreamChunks :: Int -> Stream Word8 -> ByteStringunstreamChunks276,11423
unstream :: Stream Word8 -> ByteStringunstream314,13125
streamUtf8 :: OnDecodeError -> ByteString -> Stream CharstreamUtf867,2271
streamUtf32LE :: OnDecodeError -> ByteString -> Stream CharstreamUtf32LE233,9594
streamUtf32BE :: OnDecodeError -> ByteString -> Stream CharstreamUtf32BE189,7731
streamUtf16LE :: OnDecodeError -> ByteString -> Stream CharstreamUtf16LE109,4101
streamUtf16BE :: OnDecodeError -> ByteString -> Stream CharstreamUtf16BE149,5916
decodeError :: forall s. String -> String -> OnDecodeError -> Maybe Word8decodeError317,13208

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Lazy/Fusion.hs,455
module Data.Text.Internal.Lazy.FusionFusion17,495
unstreamChunks :: Int -> Stream Char -> TextunstreamChunks56,1613
unstream :: Stream Char -> Textunstream91,3058
unfoldrN :: Int64 -> (a -> Maybe (Char,a)) -> a -> Stream CharunfoldrN107,3636
stream :: Text -> Stream Charstream44,1218
length :: Stream Char -> Int64length96,3218
index :: Stream Char -> Int64 -> Charindex112,3819
countChar :: Char -> Stream Char -> Int64countChar118,4011

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Lazy/Search.hs,368
module Data.Text.Internal.Lazy.SearchSearch20,620
wordLength :: Text -> Int64wordLength129,5005
indicesOne :: Word16 -> Int64 -> T.Text -> Text -> [Int64]indicesOne116,4506
indices :: Text              -- ^ Substring to search for (@needle@)indices42,1305
index :: T.Text -> Text -> Int64 -> Word16index103,3941
emptyError :: String -> aemptyError133,5129

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Private.hs,206
module Data.Text.Internal.PrivatePrivate12,268
span_ :: (Char -> Bool) -> Text -> (# Text, Text #)span_23,506
runText :: (forall s. (A.MArray s -> Int -> ST s Text) -> ST s Text) -> TextrunText33,836

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Read.hs,406
module Data.Text.Internal.ReadRead11,264
type IReader t a = t -> Either String (a,t)IReader26,540
newtype IParser t a = P {IParser28,585
newtype IParser t a = P {P28,585
      runP :: IReader t arunP29,611
data T = T !Integer !IntT55,1322
perhaps :: a -> IParser t a -> IParser t aperhaps57,1348
hexDigitToInt :: Char -> InthexDigitToInt62,1537
digitToInt :: Char -> IntdigitToInt68,1732

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Search.hs,256
module Data.Text.Internal.SearchSearch29,839
data T = {-# UNPACK #-} !Word64 :* {-# UNPACK #-} !IntT40,1087
{-# UNPACK #-} !Word64 :* {-# UNPACK #-} !Int:*40,1096
indices :: Text                -- ^ Substring to search for (@needle@)indices49,1456

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Unsafe.hs,166
module Data.Text.Internal.UnsafeUnsafe18,612
inlinePerformIO :: IO a -> ainlinePerformIO37,1133
inlineInterleaveST :: ST s a -> ST s ainlineInterleaveST53,1707

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Unsafe/Char.hs,297
module Data.Text.Internal.Unsafe.CharChar19,587
unsafeWrite :: A.MArray s -> Int -> Char -> ST s IntunsafeWrite57,1535
unsafeChr8 :: Word8 -> CharunsafeChr847,1222
unsafeChr32 :: Word32 -> CharunsafeChr3251,1324
unsafeChr :: Word16 -> CharunsafeChr43,1121
ord :: Char -> Intord39,1055

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Internal/Unsafe/Shift.hs,182
module Data.Text.Internal.Unsafe.ShiftShift18,494
class UnsafeShift a whereUnsafeShift33,966
    shiftL :: a -> Int -> ashiftL34,992
    shiftR :: a -> Int -> ashiftR35,1020

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Lazy.hs,6094
module Data.Text.LazyLazy50,1940
zipWith :: (Char -> Char -> Char) -> Text -> Text -> TextzipWith1750,57881
zip :: Text -> Text -> [(Char,Char)]zip1743,57575
words :: Text -> [Text]words1546,50610
unwords :: [Text] -> Textunwords1557,50921
unsnoc :: Text -> Maybe (Text, Char)unsnoc601,16989
unpackCString# :: Addr# -> TextunpackCString#457,12471
unpack :: Text -> Stringunpack452,12332
unlines :: [Text] -> Textunlines1552,50777
unfoldrN :: Int64 -> (a -> Maybe (Char,a)) -> a -> TextunfoldrN1086,34103
unfoldr :: (a -> Maybe (Char,a)) -> a -> Textunfoldr1075,33573
uncons :: Text -> Maybe (Char, Text)uncons552,15483
transpose :: [Text] -> [Text]transpose749,21785
toUpper :: Text -> TexttoUpper842,25086
toTitle :: Text -> TexttoTitle867,26044
toStrict :: Text -> T.TexttoStrict499,13829
toLower :: Text -> TexttoLower832,24752
toChunks :: Text -> [T.Text]toChunks495,13705
toCaseFold :: Text -> TexttoCaseFold821,24322
textDataType :: DataTypetextDataType440,11966
takeWhileEnd :: (Char -> Bool) -> Text -> TexttakeWhileEnd1212,38483
takeWhile :: (Char -> Bool) -> Text -> TexttakeWhile1188,37654
takeEnd :: Int64 -> Text -> TexttakeEnd1119,35197
take :: Int64 -> Text -> Texttake1093,34431
tails :: Text -> [Text]tails1449,47170
tail :: Text -> Texttail567,16016
stripSuffix :: Text -> Text -> Maybe TextstripSuffix1683,55326
stripStart :: Text -> TextstripStart1269,40543
stripPrefix :: Text -> Text -> Maybe TextstripPrefix1632,53476
stripEnd :: Text -> TextstripEnd1276,40728
strip :: Text -> Textstrip1284,40926
splitOn :: TextsplitOn1484,48291
splitAtWord :: Int64 -> Text -> PairS Text TextsplitAtWord1305,41853
splitAt :: Int64 -> Text -> (Text, Text)splitAt1291,41201
split :: (Char -> Bool) -> Text -> [Text]split1513,49341
span :: (Char -> Bool) -> Text -> (Text, Text)span1414,45850
snoc :: Text -> Char -> Textsnoc527,14682
singleton :: Char -> Textsingleton479,13206
scanr1 :: (Char -> Char -> Char) -> Text -> Textscanr1985,30179
scanr :: (Char -> Char -> Char) -> Char -> Text -> Textscanr979,29916
scanl1 :: (Char -> Char -> Char) -> Text -> Textscanl1969,29568
scanl :: (Char -> Char -> Char) -> Char -> Text -> Textscanl960,29223
reverse :: Text -> Textreverse755,22019
revChunks :: [T.Text] -> TextrevChunks1755,58063
replicateChar :: Int64 -> Char -> TextreplicateChar1056,32711
replicate :: Int64 -> Text -> Textreplicate1026,31751
replace :: Textreplace783,22890
repeat :: Char -> Textrepeat1020,31541
partition :: (Char -> Bool) -> Text -> (Text, Text)partition1705,56214
packConstr :: ConstrpackConstr437,11892
pack :: String -> Textpack446,12172
null :: Text -> Boolnull608,17204
minimum :: Text -> Charminimum947,28830
maximum :: Text -> Charmaximum941,28639
mapAccumR :: (a -> Char -> (a,Char)) -> a -> Text -> (a, Text)mapAccumR1007,31163
mapAccumL :: (a -> Char -> (a,Char)) -> a -> Text -> (a, Text)mapAccumL993,30552
map :: (Char -> Char) -> Text -> Textmap673,19204
lines :: Text -> [Text]lines1538,50348
length :: Text -> Int64length644,18171
last :: Text -> Charlast628,17733
justifyRight :: Int64 -> Char -> Text -> TextjustifyRight721,20909
justifyLeft :: Int64 -> Char -> Text -> TextjustifyLeft699,20198
iterate :: (Char -> Char) -> Char -> Textiterate1050,32466
isSuffixOf :: Text -> Text -> BoolisSuffixOf1585,51927
isSingleton :: Text -> BoolisSingleton622,17537
isPrefixOf :: Text -> Text -> BoolisPrefixOf1563,51148
isInfixOf :: Text -> Text -> BoolisInfixOf1599,52402
intersperse :: Char -> Text -> Textintersperse687,19786
intercalate :: Text -> [Text] -> Textintercalate680,19496
inits :: Text -> [Text]inits1441,46869
init :: Text -> Textinit581,16434
index :: Text -> Int64 -> Charindex1711,56427
impossibleError :: String -> aimpossibleError1761,58232
head :: Text -> Charhead561,15836
groupBy :: (Char -> Char -> Bool) -> Text -> [Text]groupBy1432,46483
group :: Text -> [Text]group1427,46345
fromStrict :: T.Text -> TextfromStrict504,13978
fromChunks :: [T.Text] -> TextfromChunks491,13567
foldr1 :: (Char -> Char -> Char) -> Text -> Charfoldr1907,27524
foldr :: (Char -> a -> a) -> a -> Text -> afoldr900,27277
foldl1' :: (Char -> Char -> Char) -> Text -> Charfoldl1'892,26942
foldl1 :: (Char -> Char -> Char) -> Text -> Charfoldl1887,26773
foldl' :: (a -> Char -> a) -> a -> Text -> afoldl'881,26525
foldl :: (a -> Char -> a) -> a -> Text -> afoldl875,26359
find :: (Char -> Bool) -> Text -> Maybe Charfind1696,55874
filter :: (Char -> Bool) -> Text -> Textfilter1689,55576
equal :: Text -> Text -> Boolequal315,8476
emptyError :: String -> aemptyError1758,58134
dropWords :: Int64 -> Text -> TextdropWords1173,37074
dropWhileEnd :: (Char -> Bool) -> Text -> TextdropWhileEnd1247,39722
dropWhile :: (Char -> Bool) -> Text -> TextdropWhile1224,38982
dropEnd :: Int64 -> Text -> TextdropEnd1159,36525
dropAround :: (Char -> Bool) -> Text -> TextdropAround1262,40327
drop :: Int64 -> Text -> Textdrop1132,35768
cycle :: Text -> Textcycle1039,32185
countChar :: Char -> Text -> Int64countChar1736,57266
count :: Text -> Text -> Int64count1721,56793
cons :: Char -> Text -> Textcons512,14245
concatMap :: (Char -> Text) -> Text -> TextconcatMap923,27988
concat :: [Text] -> Textconcat912,27674
compareText :: Text -> Text -> OrderingcompareText336,9054
compareLength :: Text -> Int64 -> OrderingcompareLength662,18760
commonPrefixes :: Text -> Text -> Maybe (Text,Text,Text)commonPrefixes1651,54165
chunksOf :: Int64 -> Text -> [Text]chunksOf1528,50028
center :: Int64 -> Char -> Text -> Textcenter735,21308
breakOnEnd :: Text -> Text -> (Text, Text)breakOnEnd1353,43681
breakOnAll :: Text              -- ^ @needle@ to search forbreakOnAll1379,44496
breakOn :: Text -> Text -> (Text, Text)breakOn1338,43076
break :: (Char -> Bool) -> Text -> (Text, Text)break1396,45111
append :: Text -> Text -> Textappend539,15042
any :: (Char -> Bool) -> Text -> Boolany929,28228
all :: (Char -> Bool) -> Text -> Boolall935,28442

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Lazy/Builder.hs,46
module Data.Text.Lazy.BuilderBuilder41,1297

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Lazy/Builder/Int.hs,968
module Data.Text.Lazy.Builder.IntInt16,455
data T = T !Integer !IntT207,7218
minus, zero :: Word16zero135,4771
nteger integerQuotRem#quotRemInteger43,1159
positive :: (Integral a) => a -> Builderpositive102,3437
posDecimal :: (Integral a) =>posDecimal118,4150
minus, zero :: Word16minus135,4771
integer :: Int -> Integer -> Builderinteger209,7244
i2w :: (Integral a) => a -> Word16i2w141,4856
hexadecimal :: Integral a => a -> Builderhexadecimal172,5968
hexInteger :: Integer -> BuilderhexInteger193,6817
hexErrMsg :: StringhexErrMsg198,6929
hexDigit :: Integral a => a -> BuilderhexDigit201,7031
decimal' :: (Integral a) => (a -> Bool) -> a -> Builderdecimal'85,2749
decimal :: Integral a => a -> Builderdecimal62,1479
countDigits :: (Integral a) => a -> IntcountDigits145,4941
boundedDecimal :: (Integral a, Bounded a) => a -> BuilderboundedDecimal77,2379
fine IS S#IS51,1299
efine HAS_INTEGER_CONSTR 1HAS_INTEGER_CONSTR42,1116

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Lazy/Builder/RealFloat.hs,663
module Data.Text.Lazy.Builder.RealFloatRealFloat13,307
data FPFormat = ExponentFPFormat32,828
data FPFormat = ExponentExponent32,828
              | FixedFixed34,910
              | GenericGeneric36,978
realFloat :: (RealFloat a) => a -> BuilderrealFloat44,1381
minExpt, maxExpt :: IntminExpt236,8631
maxExpt10 :: IntmaxExpt10249,9025
minExpt, maxExpt :: IntmaxExpt236,8631
formatRealFloat :: (RealFloat a) =>formatRealFloat57,2056
floatToDigits :: (RealFloat a) => a -> ([Int], Int)floatToDigits143,5249
expts10 :: Array Int Integerexpts10252,9059
expts :: Array Int Integerexpts246,8927
expt :: Integer -> Int -> Integerexpt240,8683

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Lazy/Encoding.hs,1433
module Data.Text.Lazy.EncodingEncoding19,541
encodeUtf8BuilderEscaped :: BP.BoundedPrim Word8 -> Text -> B.BuilderencodeUtf8BuilderEscaped172,6059
encodeUtf8Builder :: Text -> B.BuilderencodeUtf8Builder160,5655
encodeUtf8 :: Text -> B.ByteStringencodeUtf8144,4909
encodeUtf32LE :: Text -> B.ByteStringencodeUtf32LE243,8921
encodeUtf32BE :: Text -> B.ByteStringencodeUtf32BE248,9119
encodeUtf16LE :: Text -> B.ByteStringencodeUtf16LE205,7409
encodeUtf16BE :: Text -> B.ByteStringencodeUtf16BE210,7607
decodeUtf8With :: OnDecodeError -> B.ByteString -> TextdecodeUtf8With95,3031
decodeUtf8' :: B.ByteString -> Either UnicodeException TextdecodeUtf8'134,4582
decodeUtf8 :: B.ByteString -> TextdecodeUtf8118,3925
decodeUtf32LEWith :: OnDecodeError -> B.ByteString -> TextdecodeUtf32LEWith215,7807
decodeUtf32LE :: B.ByteString -> TextdecodeUtf32LE224,8200
decodeUtf32BEWith :: OnDecodeError -> B.ByteString -> TextdecodeUtf32BEWith229,8365
decodeUtf32BE :: B.ByteString -> TextdecodeUtf32BE238,8752
decodeUtf16LEWith :: OnDecodeError -> B.ByteString -> TextdecodeUtf16LEWith177,6295
decodeUtf16LE :: B.ByteString -> TextdecodeUtf16LE186,6688
decodeUtf16BEWith :: OnDecodeError -> B.ByteString -> TextdecodeUtf16BEWith191,6853
decodeUtf16BE :: B.ByteString -> TextdecodeUtf16BE200,7240
decodeLatin1 :: B.ByteString -> TextdecodeLatin191,2869
decodeASCII :: B.ByteString -> TextdecodeASCII86,2674

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Lazy/IO.hs,833
module Data.Text.Lazy.IOIO18,516
writeFile :: FilePath -> Text -> IO ()writeFile85,2878
readFile :: FilePath -> IO TextreadFile80,2694
putStrLn :: Text -> IO ()putStrLn164,5689
putStr :: Text -> IO ()putStr160,5584
lazyReadBuffered :: Handle -> Handle__ -> IO (Handle__, Text)lazyReadBuffered119,4127
lazyRead :: Handle -> IO TextlazyRead109,3723
interact :: (Text -> Text) -> IO ()interact148,5257
hPutStrLn :: Handle -> Text -> IO ()hPutStrLn141,4910
hPutStr :: Handle -> Text -> IO ()hPutStr137,4773
hGetLine :: Handle -> IO TexthGetLine133,4672
hGetContents :: Handle -> IO TexthGetContents94,3226
getLine :: IO TextgetLine156,5506
getContents :: IO TextgetContents152,5397
chooseGoodBuffering :: Handle -> IO ()chooseGoodBuffering103,3532
appendFile :: FilePath -> Text -> IO ()appendFile89,3007

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Lazy/Internal.hs,47
module Data.Text.Lazy.InternalInternal14,393

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Lazy/Read.hs,623
module Data.Text.Lazy.ReadRead17,400
type Reader a = IReader Text aReader37,898
type Parser = IParser TextParser38,929
signed :: Num a => Reader a -> Reader asigned109,3949
signa :: Num a => Parser a -> Parser asigna155,5698
rational :: Fractional a => Reader arational133,4791
hexadecimal :: Integral a => Reader ahexadecimal81,2796
hex :: Integral a => Reader ahex89,3052
floaty :: Fractional a => (Integer -> Integer -> Integer -> a) -> Reader afloaty171,6401
double :: Reader Doubledouble150,5530
decimal :: Integral a => Reader adecimal51,1471
char :: (Char -> Bool) -> Parser Charchar166,6195

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Read.hs,622
module Data.Text.ReadRead15,355
type Reader a = IReader Text aReader36,885
type Parser a = IParser Text aParser37,916
signed :: Num a => Reader a -> Reader asigned117,4282
signa :: Num a => Parser a -> Parser asigna163,6068
rational :: Fractional a => Reader arational141,5161
hexadecimal :: Integral a => Reader ahexadecimal80,2790
hex :: Integral a => Reader ahex97,3470
floaty :: Fractional a => (Integer -> Integer -> Integer -> a) -> Reader afloaty179,6771
double :: Reader Doubledouble158,5900
decimal :: Integral a => Reader adecimal50,1462
char :: (Char -> Bool) -> Parser Charchar174,6565

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Show.hs,218
module Data.Text.ShowShow16,341
unpackCString# :: Addr# -> TextunpackCString#50,1214
unpack :: Text -> Stringunpack41,989
singleton_ :: Char -> Textsingleton_81,2188
singleton :: Char -> Textsingleton72,1945

/home/effectfully/.fastdogs/text-1.2.4.1/src/Data/Text/Unsafe.hs,560
module Data.Text.UnsafeUnsafe11,335
data Iter = Iter {-# UNPACK #-} !Char {-# UNPACK #-} !IntIter61,1805
unsafeTail :: Text -> TextunsafeTail52,1614
unsafeHead :: Text -> CharunsafeHead41,1164
takeWord16 :: Int -> Text -> TexttakeWord16117,3856
reverseIter_ :: Text -> Int -> IntreverseIter_102,3320
reverseIter :: Text -> Int -> (Char,Int)reverseIter87,2832
lengthWord16 :: Text -> IntlengthWord16112,3687
iter_ :: Text -> Int -> Intiter_78,2440
iter :: Text -> Int -> Iteriter66,2035
dropWord16 :: Int -> Text -> TextdropWord16122,4039

/home/effectfully/.fastdogs/text-1.2.4.1/tests/LiteralRuleTest.hs,156
module LiteralRuleTest whereLiteralRuleTest3,36
utf8Strings :: [Text]utf8Strings12,319
strings :: [Text]strings8,151
empties :: [Text]empties16,507

/home/effectfully/.fastdogs/text-1.2.4.1/tests/Tests.hs,48
module MainMain3,65
main :: IO ()main12,237

/home/effectfully/.fastdogs/text-1.2.4.1/tests/Tests/IO.hs,49
module MainMain4,157
main :: IO ()main17,452

/home/effectfully/.fastdogs/text-1.2.4.1/tests/Tests/Properties.hs,32337
module Tests.PropertiesProperties7,270
data Badness = Solo | Leading | TrailingBadness120,5407
data Badness = Solo | Leading | TrailingSolo120,5407
data Badness = Solo | Leading | TrailingLeading120,5407
data Badness = Solo | Leading | TrailingTrailing120,5407
unsnoc xs@(_:_) = Just (init xs, last xs)unsnoc281,12583
unpack2 :: (Stringy s) => (s,s) -> (String,String)unpack2551,25713
unf :: Int -> Char -> Maybe (Char, Char)unf534,24942
uncons (x:xs) = Just (x,xs)uncons272,12202
tl_zipWith c s    = L.zipWith c s `eqP` (unpackS . TL.zipWith c (packS s))tl_zipWith791,37521
tl_zip s          = L.zip s `eqP` TL.zip (packS s)tl_zip787,37248
tl_write_read_line e m b t = write_read head TL.filter TL.hPutStrLntl_write_read_line945,43550
tl_write_read = write_read TL.unlines TL.filter TL.hPutStr TL.hGetContentstl_write_read941,43360
tl_words          = L.words       `eqP` (map unpackS . TL.words)tl_words712,33800
tl_utf8'     = forAll genUnicode $ (EL.decodeUtf8' . EL.encodeUtf8) `eq` (id . Right)tl_utf8'92,3947
tl_utf8      = forAll genUnicode $ (EL.decodeUtf8 . EL.encodeUtf8) `eq` idtl_utf891,3872
tl_utf32LE   = forAll genUnicode $ (EL.decodeUtf32LE . EL.encodeUtf32LE) `eq` idtl_utf32LE98,4432
tl_utf32BE   = forAll genUnicode $ (EL.decodeUtf32BE . EL.encodeUtf32BE) `eq` idtl_utf32BE100,4592
tl_utf16LE   = forAll genUnicode $ (EL.decodeUtf16LE . EL.encodeUtf16LE) `eq` idtl_utf16LE94,4112
tl_utf16BE   = forAll genUnicode $ (EL.decodeUtf16BE . EL.encodeUtf16BE) `eq` idtl_utf16BE96,4272
tl_unwords        = unsquare $tl_unwords719,34166
tl_unstreamChunks x = f 11 x === f 1000 xtl_unstreamChunks70,2806
tl_unsnoc         = unsnoc   `eqP` (fmap (first unpackS) . TL.unsnoc)tl_unsnoc285,12721
tl_unlines        = unsquare $tl_unlines715,33965
tl_unfoldrN n m   = (L.take i . L.unfoldr (unf j)) `eq`tl_unfoldrN546,25500
tl_unfoldr n      = L.unfoldr (unf m) `eq` (unpackS . TL.unfoldr (unf m))tl_unfoldr540,25189
tl_uncons         = uncons   `eqP` (fmap (second unpackS) . TL.uncons)tl_uncons279,12511
tl_transpose      = unsquare $tl_transpose343,15715
tl_toUpper_upper t = p (TL.toUpper t) >= p ttl_toUpper_upper382,17385
tl_toLower_lower t = p (TL.toLower t) >= p ttl_toLower_lower377,17153
tl_toCaseFold_length t = TL.length (TL.toCaseFold t) >= TL.length ttl_toCaseFold_length373,16942
tl_takeWhileEnd_null t = forAll noMatch $ \(c,d) -> TL.null $tl_takeWhileEnd_null597,28079
tl_takeWhileEnd p = (L.reverse . L.takeWhile p . L.reverse) `eqP`tl_takeWhileEnd595,27963
tl_takeWhile p    = L.takeWhile p `eqP` (unpackS . TL.takeWhile p)tl_takeWhile590,27667
tl_takeEnd n      = (L.reverse . L.take (fromIntegral n) . L.reverse) `eqP`tl_takeEnd563,26297
tl_take n         = L.take n      `eqP` (unpackS . TL.take (fromIntegral n))tl_take562,26220
tl_tails          = unsquare $tl_tails651,31073
tl_tail           = tail   `eqP` (unpackS . TL.tail)tl_tail299,13417
tl_stripSuffix s     = (fmap packS . stripSuffix s) `eqP` TL.stripSuffix (packS s)tl_stripSuffix739,35216
tl_stripStart     = TL.dropWhile isSpace `eq` TL.stripStarttl_stripStart614,29136
tl_stripPrefix s     = (fmap packS . L.stripPrefix s) `eqP` TL.stripPrefix (packS s)tl_stripPrefix734,34976
tl_stripEnd       = TL.dropWhileEnd isSpace `eq` TL.stripEndtl_stripEnd616,29255
tl_strip          = TL.dropAround isSpace `eq` TL.striptl_strip618,29370
tl_stream_unstream  = (SL.unstream . SL.stream) `eq` idtl_stream_unstream66,2574
tl_splitOn_split s = unsquare $tl_splitOn_split669,32023
tl_splitOn_i (NotEmpty t) = id `eq` (TL.intercalate t . TL.splitOn t)tl_splitOn_i673,32272
tl_splitAt n      = L.splitAt n   `eqP` (unpack2 . TL.splitAt (fromIntegral n))tl_splitAt620,29490
tl_split p      = split p `eqP` (map unpackS . TL.split p)tl_split679,32567
tl_span p       = L.span p      `eqP` (unpack2 . TL.span p)tl_span622,29629
tl_snoc x         = (++ [x]) `eqP` (unpackS . (flip TL.snoc) x)tl_snoc264,11778
tl_singleton c      = [c] === (TL.unpack . TL.singleton) ctl_singleton69,2747
tl_scanr1 f       = L.scanr1 f    `eqP` (unpackS . TL.scanr1 f)tl_scanr1500,23431
tl_scanr f z      = L.scanr f z   `eqP` (unpackS . TL.scanr f z)tl_scanr498,23303
tl_scanl1 f       = L.scanl1 f    `eqP` (unpackS . TL.scanl1 f)tl_scanl1496,23175
tl_scanl f z      = L.scanl f z   `eqP` (unpackS . TL.scanl f z)tl_scanl494,23047
tl_reverse        = L.reverse `eqP` (unpackS . TL.reverse)tl_reverse346,15884
tl_replicate n    = replicate m `eq`tl_replicate522,24468
tl_replace s d     = (L.intercalate d . splitOn s) `eqP`tl_replace351,16145
tl_repeat n       = (L.take m . L.repeat) `eq`tl_repeat511,24011
tl_read_rational p tol (n::Double) s =tl_read_rational921,42562
tl_rational = tl_read_rational TL.rational 1e-16tl_rational930,42901
tl_put_get = write_read TL.unlines TL.filter put gettl_put_get937,43129
tl_partition p    = L.partition p `eqP` (unpack2 . TL.partition p)tl_partition770,36493
tl_pack_unpack      = (TL.unpack . TL.pack) `eq` idtl_pack_unpack64,2468
tl_null           = null   `eqP` TL.nulltl_null308,13918
tl_minimum        = L.minimum     `eqP` TL.minimumtl_minimum489,22821
tl_mempty         = mempty === (unpackS (mempty :: TL.Text))tl_mempty253,11147
tl_mconcat        = unsquare $tl_mconcat250,10987
tl_maximum        = L.maximum     `eqP` TL.maximumtl_maximum486,22644
tl_mappend s      = mappend s`eqP` (unpackS . mappend (TL.pack s))tl_mappend247,10821
tl_mapAccumR f z  = L.mapAccumR f z `eqP` (second unpackS . TL.mapAccumR f z)tl_mapAccumR508,23881
tl_mapAccumL f z  = L.mapAccumL f z `eqP` (second unpackS . TL.mapAccumL f z)tl_mapAccumL504,23624
tl_map f          = map f  `eqP` (unpackS . TL.map f)tl_map321,14615
tl_lines          = L.lines       `eqP` (map unpackS . TL.lines)tl_lines699,33281
tl_length         = L.genericLength `eqP` TL.lengthtl_length313,14175
tl_latin1 t  = EL.decodeLatin1 (encodeLazyL1 a) === atl_latin187,3607
tl_last           = last   `eqP` TL.lasttl_last294,13129
tl_justifyRight k c = justifyRight j c `eqP`tl_justifyRight423,19361
tl_justifyLeft k c = justifyLeft j c `eqP`tl_justifyLeft418,19096
tl_iterate f n    = (L.take m . L.iterate f) `eq`tl_iterate530,24779
tl_isSuffixOf s   = L.isSuffixOf s`eqP` TL.isSuffixOf (packS s)tl_isSuffixOf729,34702
tl_isPrefixOf s   = L.isPrefixOf s`eqP` TL.isPrefixOf (packS s)tl_isPrefixOf727,34575
tl_isInfixOf s    = L.isInfixOf s `eqP` TL.isInfixOf (packS s)tl_isInfixOf731,34828
tl_intersperse c  = unsquare $tl_intersperse339,15505
tl_intercalate c  = unsquare $tl_intercalate328,14949
tl_inits          = L.inits       `eqP` (map unpackS . TL.inits)tl_inits649,30944
tl_init           = init   `eqP` (unpackS . TL.init)tl_init304,13717
tl_indices (NotEmpty s) = lazyIndices s `eq` S.indices stl_indices794,37653
tl_index s        = forAll (choose (-l,l*2))tl_index778,36814
tl_hexadecimal m s ox =tl_hexadecimal907,42091
tl_head           = head   `eqP` TL.headtl_head290,12940
tl_groupBy p      = L.groupBy p   `eqP` (map unpackS . TL.groupBy p)tl_groupBy647,30811
tl_group          = L.group       `eqP` (map unpackS . TL.group)tl_group645,30678
tl_from_to_strict   = (TL.fromStrict . TL.toStrict) `eq` idtl_from_to_strict73,2959
tl_foldr1 f       = unsquare $tl_foldr1460,21270
tl_foldr f z      = unsquare $tl_foldr454,20982
tl_foldl1' f      = L.foldl1' f  `eqP` TL.foldl1' ftl_foldl1'449,20707
tl_foldl1 f       = L.foldl1 f   `eqP` TL.foldl1 ftl_foldl1446,20525
tl_foldl' f z     = L.foldl' f z `eqP` TL.foldl' f ztl_foldl'442,20298
tl_foldl f z      = L.foldl f z  `eqP` (TL.foldl f z)tl_foldl435,19952
tl_findCount s    = (L.genericLength . TL.breakOnAll s) `eq` TL.count stl_findCount665,31845
tl_findContains = unsquare $ \(NotEmpty s) -> all (TL.isPrefixOf s . snd) .tl_findContains661,31564
tl_findAppendId = unsquare $ \(NotEmpty s) ts ->tl_findAppendId656,31309
tl_find p         = L.find p      `eqP` TL.find ptl_find768,36377
tl_filter p       = L.filter p    `eqP` (unpackS . TL.filter p)tl_filter765,36188
tl_dropWhileEnd p = (L.reverse . L.dropWhile p . L.reverse) `eqP`tl_dropWhileEnd607,28703
tl_dropWhile p    = L.dropWhile p `eqP` (unpackS . S.dropWhile p)tl_dropWhile604,28522
tl_dropEnd n      = (L.reverse . L.drop n . L.reverse) `eqP`tl_dropEnd574,26920
tl_dropAround p   = (L.dropWhile p . L.reverse . L.dropWhile p . L.reverse)tl_dropAround611,28948
tl_drop n         = L.drop n      `eqP` (unpackS . TL.drop (fromIntegral n))tl_drop573,26843
tl_double = tl_read_rational TL.double 1e-13tl_double928,42810
tl_decimal (n::Int) s =tl_decimal899,41746
tl_cycle n        = (L.take m . L.cycle) `eq`tl_cycle526,24616
tl_count (NotEmpty t) = (subtract 1 . L.genericLength . TL.splitOn t) `eq`tl_count784,37088
tl_cons x         = (x:)     `eqP` (unpackS . TL.cons x)tl_cons261,11595
tl_concatMap f    = unsquare $tl_concatMap476,22070
tl_concat         = unsquare $tl_concat470,21716
tl_compareLength t= (compare (TL.length t)) `eq` TL.compareLength ttl_compareLength315,14293
tl_commonPrefixes a b (NonEmpty p)tl_commonPrefixes754,35720
tl_chunksOf k = T.chunksOf k `eq` (map (T.concat . TL.toChunks) .tl_chunksOf695,33069
tl_chunk_unchunk    = (TL.fromChunks . TL.toChunks) `eq` idtl_chunk_unchunk72,2899
tl_center k c = center j c `eqP` (unpackS . TL.center (fromIntegral j) c)tl_center428,19612
tl_breakOn_start (NotEmpty s) t =tl_breakOn_start633,30102
tl_breakOn_id s     = squid `eq` (uncurry TL.append . TL.breakOn s)tl_breakOn_id627,29832
tl_breakOnEnd_end (NotEmpty s) t =tl_breakOnEnd_end639,30359
tl_break p      = L.break p     `eqP` (unpack2 . TL.break p)tl_break643,30553
tl_ascii t   = EL.decodeASCII (EL.encodeUtf8 a) === atl_ascii83,3397
tl_any p          = L.any p       `eqP` TL.any ptl_any480,22300
tl_all p          = L.all p       `eqP` TL.all ptl_all483,22469
tl_Show           = show     `eq` (show . TL.pack)tl_Show245,10704
tl_Read           = id       `eq` (TL.unpack . read . show)tl_Read243,10594
tl_Ord s          = (compare s) `eq` (compare (TL.pack s) . TL.pack)tl_Ord241,10466
tl_IsString       = fromString  `eqP` (TL.unpack . fromString)tl_IsString255,11270
tl_Eq s           = (s==)    `eq` ((TL.pack s==) . TL.pack)tl_Eq234,10095
tests :: Testtests971,44416
tb_singleton = id `eqP`tb_singleton818,38608
tb_realfloat_float (a::Float) = tb_realfloat atb_realfloat_float870,40684
tb_realfloat_double (a::Double) = tb_realfloat atb_realfloat_double871,40731
tb_realfloat :: (RealFloat a, Show a) => a -> Booltb_realfloat867,40564
tb_hexadecimal_word8 (a::Word8) = tb_hex atb_hexadecimal_word8862,40385
tb_hexadecimal_word64 (a::Word64) = tb_hex atb_hexadecimal_word64865,40518
tb_hexadecimal_word32 (a::Word32) = tb_hex atb_hexadecimal_word32864,40473
tb_hexadecimal_word16 (a::Word16) = tb_hex atb_hexadecimal_word16863,40428
tb_hexadecimal_word (a::Word) = tb_hex atb_hexadecimal_word861,40344
tb_hexadecimal_integer (a::Integer) = tb_hex atb_hexadecimal_integer855,40088
tb_hexadecimal_int8 (a::Int8) = tb_hex atb_hexadecimal_int8857,40174
tb_hexadecimal_int64 (a::Int64) = tb_hex atb_hexadecimal_int64860,40301
tb_hexadecimal_int32 (a::Int32) = tb_hex atb_hexadecimal_int32859,40258
tb_hexadecimal_int16 (a::Int16) = tb_hex atb_hexadecimal_int16858,40215
tb_hexadecimal_int (a::Int) = tb_hex atb_hexadecimal_int856,40135
tb_hex :: (Integral a, Show a) => a -> Booltb_hex852,39968
tb_fromText = L.concat `eq` (unpackS . TB.toLazyText . mconcat .tb_fromText820,38702
tb_formatRealFloat_float (a::Float) = tb_formatRealFloat atb_formatRealFloat_float891,41483
tb_formatRealFloat_double (a::Double) = tb_formatRealFloat atb_formatRealFloat_double892,41542
tb_formatRealFloat :: (RealFloat a, Show a) =>tb_formatRealFloat879,41035
tb_decimal_word8 (a::Word8) = tb_decimal atb_decimal_word8842,39552
tb_decimal_word64 (a::Word64) = tb_decimal atb_decimal_word64845,39685
tb_decimal_word32 (a::Word32) = tb_decimal atb_decimal_word32844,39640
tb_decimal_word16 (a::Word16) = tb_decimal atb_decimal_word16843,39595
tb_decimal_word (a::Word) = tb_decimal atb_decimal_word841,39511
tb_decimal_integer_big (Big a) = tb_decimal atb_decimal_integer_big835,39256
tb_decimal_integer (a::Integer) = tb_decimal atb_decimal_integer834,39209
tb_decimal_int8 (a::Int8) = tb_decimal atb_decimal_int8837,39341
tb_decimal_int64 (a::Int64) = tb_decimal atb_decimal_int64840,39468
tb_decimal_int32 (a::Int32) = tb_decimal atb_decimal_int32839,39425
tb_decimal_int16 (a::Int16) = tb_decimal atb_decimal_int16838,39382
tb_decimal_int (a::Int) = tb_decimal atb_decimal_int836,39302
tb_decimal_big_word64 (BigBounded (a::Word64)) = tb_decimal atb_decimal_big_word64850,39905
tb_decimal_big_word (BigBounded (a::Word)) = tb_decimal atb_decimal_big_word849,39847
tb_decimal_big_int64 (BigBounded (a::Int64)) = tb_decimal atb_decimal_big_int64848,39787
tb_decimal_big_int (BigBounded (a::Int)) = tb_decimal atb_decimal_big_int847,39731
tb_decimal :: (Integral a, Show a) => a -> Booltb_decimal831,39096
tb_associative s1 s2 s3 =tb_associative822,38829
t_zipWith c s     = L.zipWith c s `eqP` (unpackS . T.zipWith c (packS s))t_zipWith790,37447
t_zip s           = L.zip s `eqP` T.zip (packS s)t_zip786,37198
t_write_read_line e m b t = write_read head T.filter T.hPutStrLnt_write_read_line943,43436
t_write_read = write_read T.unlines T.filter T.hPutStr T.hGetContentst_write_read940,43290
t_words           = L.words       `eqP` (map unpackS . T.words)t_words710,33735
t_utf8_undecoded = forAll genUnicode $ \t ->t_utf8_undecoded114,5144
t_utf8_incr = forAll genUnicode $ \s (Positive n) -> (recode n `eq` id) st_utf8_incr102,4674
t_utf8_err' :: B.ByteString -> Propertyt_utf8_err'159,6897
t_utf8_err :: Badness -> Maybe DecodeErr -> Propertyt_utf8_err126,5567
t_utf8'      = forAll genUnicode $ (E.decodeUtf8' . E.encodeUtf8) `eq` (id . Right)t_utf8'90,3788
t_utf8       = forAll genUnicode $ (E.decodeUtf8 . E.encodeUtf8) `eq` idt_utf889,3715
t_utf32LE    = forAll genUnicode $ (E.decodeUtf32LE . E.encodeUtf32LE) `eq` idt_utf32LE97,4353
t_utf32BE    = forAll genUnicode $ (E.decodeUtf32BE . E.encodeUtf32BE) `eq` idt_utf32BE99,4513
t_utf16LE    = forAll genUnicode $ (E.decodeUtf16LE . E.encodeUtf16LE) `eq` idt_utf16LE93,4033
t_utf16BE    = forAll genUnicode $ (E.decodeUtf16BE . E.encodeUtf16BE) `eq` idt_utf16BE95,4193
t_use_from t = monadicIO $ assert . (==t) =<< run (useAsPtr t fromPtr)t_use_from954,43877
t_unwords         = unsquare $t_unwords717,34066
t_unsnoc          = unsnoc   `eqP` (fmap (first unpackS) . T.unsnoc)t_unsnoc284,12652
t_unlines         = unsquare $t_unlines713,33865
t_unfoldrN n m    = (L.take i . L.unfoldr (unf j)) `eq`t_unfoldrN542,25304
t_unfoldr n       = L.unfoldr (unf m) `eq` (unpackS . T.unfoldr (unf m))t_unfoldr538,25075
t_uncons          = uncons   `eqP` (fmap (second unpackS) . T.uncons)t_uncons278,12441
t_transpose       = unsquare $t_transpose341,15607
t_toUpper_upper t = p (T.toUpper t) >= p tt_toUpper_upper380,17300
t_toUpper_length t = T.length (T.toUpper t) >= T.length tt_toUpper_length379,17242
t_toTitle_title t = all (<= 1) (caps w)t_toTitle_title384,17474
t_toTitle_1stNotLower = and . notLow . T.toTitle . T.filter stablet_toTitle_1stNotLower388,17721
t_toLower_lower t = p (T.toLower t) >= p tt_toLower_lower375,17068
t_toLower_length t = T.length (T.toLower t) >= T.length tt_toLower_length374,17010
t_toCaseFold_length t = T.length (T.toCaseFold t) >= T.length tt_toCaseFold_length372,16878
t_take_drop_16 m t = T.append (takeWord16 n t) (dropWord16 n t) === tt_take_drop_16952,43787
t_takeWord16 m t = takeWord16 m t `T.isPrefixOf` tt_takeWord16951,43736
t_takeWhileEnd_null t = forAll noMatch $ \(c,d) -> T.null $t_takeWhileEnd_null593,27849
t_takeWhileEnd p  = (L.reverse . L.takeWhile p . L.reverse) `eqP`t_takeWhileEnd591,27734
t_takeWhile p     = L.takeWhile p `eqP` (unpackS . T.takeWhile p)t_takeWhile589,27601
t_takeEnd n       = (L.reverse . L.take n . L.reverse) `eqP`t_takeEnd560,26115
t_take n          = L.take n      `eqP` (unpackS . T.take n)t_take559,26054
t_tails           = L.tails       `eqP` (map unpackS . T.tails)t_tails650,31009
t_tail            = tail   `eqP` (unpackS . T.tail)t_tail298,13365
t_stripSuffix s      = (fmap packS . stripSuffix s) `eqP` T.stripSuffix (packS s)t_stripSuffix738,35134
t_stripStart      = T.dropWhile isSpace `eq` T.stripStartt_stripStart613,29078
t_stripPrefix s      = (fmap packS . L.stripPrefix s) `eqP` T.stripPrefix (packS s)t_stripPrefix733,34892
t_stripEnd        = T.dropWhileEnd isSpace `eq` T.stripEndt_stripEnd615,29196
t_strip           = T.dropAround isSpace `eq` T.stript_strip617,29316
t_stream_unstream   = (S.unstream . S.stream) `eq` idt_stream_unstream65,2520
t_split_splitOn c = T.split (==c) `eq` T.splitOn (T.singleton c)t_split_splitOn678,32502
t_split_count c = (L.length . T.split (==c)) `eq`t_split_count676,32401
t_splitOn_split s  = unsquare $t_splitOn_split667,31918
t_splitOn_i (NotEmpty t)  = id `eq` (T.intercalate t . T.splitOn t)t_splitOn_i672,32204
t_splitAt n       = L.splitAt n   `eqP` (unpack2 . T.splitAt n)t_splitAt619,29426
t_split p       = split p `eqP` (map unpackS . T.split p)t_split675,32343
t_span p        = L.span p      `eqP` (unpack2 . T.span p)t_span621,29570
t_snoc x          = (++ [x]) `eqP` (unpackS . (flip T.snoc) x)t_snoc263,11715
t_singleton c       = [c] === (T.unpack . T.singleton) ct_singleton68,2690
t_scanr1 f        = L.scanr1 f    `eqP` (unpackS . T.scanr1 f)t_scanr1499,23368
t_scanr f z       = L.scanr f z   `eqP` (unpackS . T.scanr f z)t_scanr497,23239
t_scanl1 f        = L.scanl1 f    `eqP` (unpackS . T.scanl1 f)t_scanl1495,23112
t_scanl f z       = L.scanl f z   `eqP` (unpackS . T.scanl f z)t_scanl493,22983
t_reverse_stream t  = (S.reverse . S.reverseStream) t === tt_reverse_stream67,2630
t_reverse_short n = L.reverse `eqP` (unpackS . S.reverse . shorten n . S.stream)t_reverse_short347,15943
t_reverse         = L.reverse `eqP` (unpackS . T.reverse)t_reverse345,15826
t_replicate n     = replicate m `eq` (unpackS . T.replicate m . packS)t_replicate520,24357
t_replace s d     = (L.intercalate d . splitOn s) `eqP`t_replace349,16025
t_read_rational p tol (n::Double) s =t_read_rational915,42360
t_rational = t_read_rational T.rational 1e-16t_rational929,42855
t_put_get = write_read T.unlines T.filter put gett_put_get934,42973
t_partition p     = L.partition p `eqP` (unpack2 . T.partition p)t_partition769,36427
t_pack_unpack       = (T.unpack . T.pack) `eq` idt_pack_unpack63,2418
t_null            = null   `eqP` T.nullt_null307,13878
t_minimum         = L.minimum     `eqP` T.minimumt_minimum488,22771
t_mempty          = mempty === (unpackS (mempty :: T.Text))t_mempty252,11087
t_mconcat         = unsquare $t_mconcat248,10888
t_maximum         = L.maximum     `eqP` T.maximumt_maximum485,22594
t_mappend s       = mappend s`eqP` (unpackS . mappend (T.pack s))t_mappend246,10755
t_mapAccumR f z   = L.mapAccumR f z `eqP` (second unpackS . T.mapAccumR f z)t_mapAccumR506,23753
t_mapAccumL f z   = L.mapAccumL f z `eqP` (second unpackS . T.mapAccumL f z)t_mapAccumL502,23496
t_map f           = map f  `eqP` (unpackS . T.map f)t_map320,14562
t_lines           = L.lines       `eqP` (map unpackS . T.lines)t_lines698,33217
t_length          = length `eqP` T.lengtht_length312,14133
t_latin1 t   = E.decodeLatin1 (encodeL1 a) === at_latin185,3505
t_last            = last   `eqP` T.lastt_last293,13089
t_justifyRight k c = justifyRight j c `eqP` (unpackS . T.justifyRight j c)t_justifyRight421,19246
t_justifyLeft k c = justifyLeft j c `eqP` (unpackS . T.justifyLeft j c)t_justifyLeft416,18984
t_isSuffixOf s    = L.isSuffixOf s`eqP` T.isSuffixOf (packS s)t_isSuffixOf728,34639
t_isPrefixOf s    = L.isPrefixOf s`eqP` T.isPrefixOf (packS s)t_isPrefixOf726,34512
t_isInfixOf s     = L.isInfixOf s `eqP` T.isInfixOf (packS s)t_isInfixOf730,34766
t_intersperse c   = unsquare $t_intersperse337,15404
t_intercalate c   = unsquare $t_intercalate325,14809
t_inits           = L.inits       `eqP` (map unpackS . T.inits)t_inits648,30880
t_init            = init   `eqP` (unpackS . T.init)t_init303,13665
t_infix_concat bs1 text bs2 =t_infix_concat223,9651
t_indices_occurs = unsquare $ \(NotEmpty t) ts ->t_indices_occurs797,37830
t_indices  (NotEmpty s) = Slow.indices s `eq` indices st_indices793,37597
t_index s         = forAll (choose (-l,l*2)) ((s L.!!) `eq` T.index (packS s))t_index775,36709
t_hexadecimal m s ox =t_hexadecimal902,41881
t_head            = head   `eqP` T.headt_head289,12900
t_groupBy p       = L.groupBy p   `eqP` (map unpackS . T.groupBy p)t_groupBy646,30743
t_group           = L.group       `eqP` (map unpackS . T.group)t_group644,30614
t_foldr1 f        = L.foldr1 f   `eqP` T.foldr1 ft_foldr1459,21220
t_foldr f z       = L.foldr f z  `eqP` T.foldr f zt_foldr452,20885
t_foldl1' f       = L.foldl1' f  `eqP` T.foldl1' ft_foldl1'448,20656
t_foldl1 f        = L.foldl1 f   `eqP` T.foldl1 ft_foldl1445,20475
t_foldl' f z      = L.foldl' f z `eqP` T.foldl' f zt_foldl'440,20200
t_foldl f z       = L.foldl f z  `eqP` (T.foldl f z)t_foldl433,19853
t_findIndex p     = L.findIndex p `eqP` T.findIndex pt_findIndex782,36957
t_findCount s     = (L.length . T.breakOnAll s) `eq` T.count st_findCount664,31782
t_findContains = unsquare $ \(NotEmpty s) ->t_findContains659,31453
t_findAppendId = unsquare $ \(NotEmpty s) ts ->t_findAppendId653,31169
t_find p          = L.find p      `eqP` T.find pt_find767,36328
t_filter p        = L.filter p    `eqP` (unpackS . T.filter p)t_filter764,36125
t_dropWord16 m t = dropWord16 m t `T.isSuffixOf` tt_dropWord16950,43685
t_dropWhileEnd p  = (L.reverse . L.dropWhile p . L.reverse) `eqP`t_dropWhileEnd605,28588
t_dropWhile p     = L.dropWhile p `eqP` (unpackS . T.dropWhile p)t_dropWhile603,28456
t_dropEnd n       = (L.reverse . L.drop n . L.reverse) `eqP`t_dropEnd571,26738
t_dropAround p    = (L.dropWhile p . L.reverse . L.dropWhile p . L.reverse)t_dropAround609,28819
t_drop n          = L.drop n      `eqP` (unpackS . T.drop n)t_drop570,26677
t_double = t_read_rational T.double 1e-13t_double927,42768
t_decode_with_error4' =t_decode_with_error4'219,9513
t_decode_with_error4 =t_decode_with_error4210,9153
t_decode_with_error3' =t_decode_with_error3'216,9381
t_decode_with_error3 =t_decode_with_error3208,9058
t_decode_with_error2' =t_decode_with_error2'213,9254
t_decode_with_error2 =t_decode_with_error2206,8968
t_decimal (n::Int) s =t_decimal896,41617
t_count (NotEmpty t)  = (subtract 1 . L.length . T.splitOn t) `eq` T.count tt_count783,37011
t_copy t = T.copy t === tt_copy956,43949
t_cons x          = (x:)     `eqP` (unpackS . T.cons x)t_cons260,11539
t_concatMap f     = unsquare $t_concatMap474,21963
t_concat          = unsquare $t_concat468,21618
t_compareLength t = (compare (T.length t)) `eq` T.compareLength tt_compareLength314,14227
t_commonPrefixes a b (NonEmpty p)t_commonPrefixes747,35499
t_chunksOf_same_lengths k = all ((==k) . T.length) . ini . T.chunksOf kt_chunksOf_same_lengths688,32830
t_chunksOf_length k t = len == T.length t || (k <= 0 && len == 0)t_chunksOf_length692,32948
t_center k c = center j c `eqP` (unpackS . T.center j c)t_center426,19515
t_breakOn_start (NotEmpty s) t =t_breakOn_start630,29977
t_breakOn_id s      = squid `eq` (uncurry T.append . T.breakOn s)t_breakOn_id624,29690
t_breakOnEnd_end (NotEmpty s) t =t_breakOnEnd_end636,30230
t_break p       = L.break p     `eqP` (unpack2 . T.break p)t_break642,30493
t_ascii t    = E.decodeASCII (E.encodeUtf8 a) === at_ascii81,3292
t_append s        = (s++)    `eqP` (unpackS . T.append (packS s))t_append270,12135
t_any p           = L.any p       `eqP` T.any pt_any479,22252
t_all p           = L.all p       `eqP` T.all pt_all482,22421
t_Show            = show     `eq` (show . T.pack)t_Show244,10654
t_Read            = id       `eq` (T.unpack . read . show)t_Read242,10535
t_Ord s           = (compare s) `eq` (compare (T.pack s) . T.pack)t_Ord240,10399
t_IsString        = fromString  `eqP` (T.unpack . fromString)t_IsString254,11208
t_Eq s            = (s==)    `eq` ((T.pack s==) . T.pack)t_Eq233,10037
stripSuffix p t = reverse `fmap` L.stripPrefix (reverse p) (reverse t)stripSuffix736,35062
splitOn :: (Eq a) => [a] -> [a] -> [[a]]splitOn354,16271
split :: (a -> Bool) -> [a] -> [[a]]split681,32627
sl_length         = (fromIntegral . length) `eqP` SL.lengthsl_length311,14073
sl_filterCount c  = (L.genericLength . L.filter (==c)) `eqP` SL.countChar csl_filterCount663,31706
showFloat :: (RealFloat a) => TB.FPFormat -> Maybe Int -> a -> ShowSshowFloat873,40781
shorten :: Int -> S.Stream a -> S.Stream ashorten966,44254
shiftR_Word32 = shiftR :: Word32 -> PropertyshiftR_Word32814,38549
shiftR_Word16 = shiftR :: Word16 -> PropertyshiftR_Word16813,38504
shiftR_Int    = shiftR :: Int -> PropertyshiftR_Int812,38462
shiftR w = forAll (choose (0,width-1)) $ \k -> Bits.shiftR w k == U.shiftR w kshiftR805,38148
shiftL_Word32 = shiftL :: Word32 -> PropertyshiftL_Word32811,38417
shiftL_Word16 = shiftL :: Word16 -> PropertyshiftL_Word16810,38372
shiftL_Int    = shiftL :: Int -> PropertyshiftL_Int809,38330
shiftL w = forAll (choose (0,width-1)) $ \k -> Bits.shiftL w k == U.shiftL w kshiftL802,37967
sf_zipWith p c s  = (L.zipWith c (L.filter p s) . L.filter p) `eqP`sf_zipWith788,37299
sf_uncons p       = (uncons . L.filter p) `eqP`sf_uncons276,12325
sf_toCaseFold_length p xs =sf_toCaseFold_length369,16743
sf_takeWhile q p  = (L.takeWhile p . L.filter q) `eqP`sf_takeWhile583,27419
sf_take p n       = (L.take n . L.filter p) `eqP`sf_take557,25950
sf_tail p         = (tail . L.filter p) `eqP` (unpackS . S.tail . S.filter p)sf_tail297,13287
sf_scanl p f z    = (L.scanl f z . L.filter p) `eqP`sf_scanl491,22873
sf_null p         = (null . L.filter p) `eqP` (S.null . S.filter p)sf_null306,13810
sf_minimum p      = (L.minimum . L.filter p) `eqP` (S.minimum . S.filter p)sf_minimum487,22695
sf_maximum p      = (L.maximum . L.filter p) `eqP` (S.maximum . S.filter p)sf_maximum484,22518
sf_map p f        = (map f . L.filter p)  `eqP` (unpackS . S.map f . S.filter p)sf_map319,14481
sf_length p       = (length . L.filter p) `eqP` (S.length . S.filter p)sf_length310,14001
sf_last p         = (last . L.filter p) `eqP` (S.last . S.filter p)sf_last292,13021
sf_justifyLeft p k c = (justifyLeft j c . L.filter p) `eqP`sf_justifyLeft413,18817
sf_isPrefixOf p s = (L.isPrefixOf s . L.filter p) `eqP`sf_isPrefixOf724,34376
sf_intersperse p c= (L.intersperse c . L.filter p) `eqP`sf_intersperse335,15287
sf_init p         = (init . L.filter p) `eqP` (unpackS . S.init . S.filter p)sf_init302,13587
sf_index p s      = forAll (choose (-l,l*2))sf_index772,36561
sf_head p         = (head . L.filter p) `eqP` (S.head . S.filter p)sf_head288,12832
sf_foldr1 p f     = unsquare $sf_foldr1457,21111
sf_foldr p f z    = (L.foldr f z . L.filter p) `eqP` (S.foldr f z . S.filter p)sf_foldr450,20759
sf_foldl1' p f    = (L.foldl1' f . L.filter p) `eqP` (S.foldl1' f . S.filter p)sf_foldl1'447,20576
sf_foldl1 p f     = (L.foldl1 f . L.filter p) `eqP` (S.foldl1 f . S.filter p)sf_foldl1444,20397
sf_foldl' p f z   = (L.foldl' f z . L.filter p) `eqP`sf_foldl'437,20052
sf_foldl p f z    = (L.foldl f z . L.filter p) `eqP` (S.foldl f z . S.filter p)sf_foldl431,19727
sf_findBy q p     = (L.find p . L.filter q) `eqP` (S.findBy p . S.filter q)sf_findBy766,36252
sf_filter q p     = (L.filter p . L.filter q) `eqP`sf_filter762,36017
sf_elem p c       = (L.elem c . L.filter p) `eqP` (S.elem c . S.filter p)sf_elem761,35943
sf_dropWhile q p  = (L.dropWhile p . L.filter q) `eqP`sf_dropWhile601,28342
sf_drop p n       = (L.drop n . L.filter p) `eqP`sf_drop568,26573
sf_cons p x       = ((x:) . L.filter p) `eqP` (unpackS . S.cons x . S.filter p)sf_cons259,11459
sf_concatMap p f  = unsquare $ (L.concatMap f . L.filter p) `eqP`sf_concatMap472,21817
sf_concat p       = unsquare $sf_concat465,21464
sf_append p s     = (L.filter p s++) `eqP`sf_append268,12021
sf_any q p        = (L.any p . L.filter q) `eqP` (S.any p . S.filter q)sf_any478,22180
sf_all q p        = (L.all p . L.filter q) `eqP` (S.all p . S.filter q)sf_all481,22349
sf_Ord p s =sf_Ord237,10265
sf_Eq p s =sf_Eq230,9916
s_uncons          = uncons   `eqP` (fmap (second unpackS) . S.uncons)s_uncons275,12255
s_toCaseFold_length xs = S.length (S.toCaseFold s) >= length xss_toCaseFold_length367,16649
s_take_s m        = L.take n      `eqP` (unpackS . S.unstream . S.take n)s_take_s555,25856
s_take_drop_s m   = (L.take n . L.drop n) `eqP`s_take_drop_s578,27141
s_take_drop m     = (L.take n . L.drop n) `eqP` (unpackS . S.take n . S.drop n)s_take_drop576,27041
s_takeWhile_s p   = L.takeWhile p `eqP` (unpackS . S.unstream . S.takeWhile p)s_takeWhile_s582,27340
s_takeWhile p     = L.takeWhile p `eqP` (unpackS . S.takeWhile p)s_takeWhile581,27274
s_take n          = L.take n      `eqP` (unpackS . S.take n)s_take554,25795
s_tail_s          = tail   `eqP` (unpackS . S.unstream . S.tail)s_tail_s296,13222
s_tail            = tail   `eqP` (unpackS . S.tail)s_tail295,13170
s_snoc x          = (++ [x]) `eqP` (unpackS . (flip S.snoc) x)s_snoc262,11652
s_replicate n     = replicate m `eq`s_replicate517,24210
s_null            = null   `eqP` S.nulls_null305,13770
s_map_s f         = map f  `eqP` (unpackS . S.unstream . S.map f)s_map_s318,14415
s_map f           = map f  `eqP` (unpackS . S.map f)s_map317,14362
s_length          = length `eqP` S.lengths_length309,13959
s_last            = last   `eqP` S.lasts_last291,12981
s_justifyLeft_s k c = justifyLeft j c `eqP`s_justifyLeft_s410,18667
s_justifyLeft k c = justifyLeft j c `eqP` (unpackS . S.justifyLeftI j c)s_justifyLeft408,18554
s_isPrefixOf s    = L.isPrefixOf s `eqP`s_isPrefixOf722,34268
s_intersperse_s c = L.intersperse c `eqP`s_intersperse_s333,15184
s_intersperse c   = L.intersperse c `eqP`s_intersperse331,15094
s_intercalate c   = unsquare $s_intercalate322,14669
s_init_s          = init   `eqP` (unpackS . S.unstream . S.init)s_init_s301,13522
s_init            = init   `eqP` (unpackS . S.init)s_init300,13470
s_head            = head   `eqP` S.heads_head287,12792
s_filter_eq s = S.filter p t == S.streamList (filter p s)s_filter_eq959,43997
s_drop_s m        = L.drop n      `eqP` (unpackS . S.unstream . S.drop n)s_drop_s566,26479
s_dropWhile_s p   = L.dropWhile p `eqP` (unpackS . S.unstream . S.dropWhile p)s_dropWhile_s600,28263
s_dropWhile p     = L.dropWhile p `eqP` (unpackS . S.dropWhile p)s_dropWhile599,28197
s_drop n          = L.drop n      `eqP` (unpackS . S.drop n)s_drop565,26418
s_cons_s x        = (x:)     `eqP` (unpackS . S.unstream . S.cons x)s_cons_s258,11390
s_cons x          = (x:)     `eqP` (unpackS . S.cons x)s_cons257,11334
s_concat_s        = unsquare $s_concat_s463,21353
s_append_s s      = (s++)    `eqP`s_append_s266,11915
s_append s        = (s++)    `eqP` (unpackS . S.append (S.streamList s))s_append265,11842
s_Ord s           = (compare s) `eq` (compare (S.streamList s) . S.streamList)s_Ord235,10155
s_Eq s            = (s==)    `eq` ((S.streamList s==) . S.streamList)s_Eq228,9815
replicate n l = concat (L.replicate n l)replicate515,24168
noMatch = donoMatch585,27533
justifyRight m n xs = L.replicate (m - length xs) n ++ xsjustifyRight399,18307
justifyLeft k c xs  = xs ++ L.replicate (k - length xs) cjustifyLeft398,18249
isFloaty c = c `elem` ("+-.0123456789eE" :: String)isFloaty913,42307
genInvalidUTF8 :: Gen B.ByteStringgenInvalidUTF8164,7144
feedChunksOf :: Int -> (B.ByteString -> E.Decoding) -> B.ByteStringfeedChunksOf106,4861
encodeLazyL1 :: TL.Text -> BL.ByteStringencodeLazyL178,3192
encodeL1 :: T.Text -> B.ByteStringencodeL176,3096
commonPrefixes a0@(_:_) b0@(_:_) = Just (go a0 b0 [])commonPrefixes741,35300
center k c xscenter400,18365

/home/effectfully/.fastdogs/text-1.2.4.1/tests/Tests/Properties/Mul.hs,357
module Tests.Properties.Mul (tests) whereMul3,38
tests :: [Test]tests35,1145
t_mul64 :: Int64 -> Int64 -> Propertyt_mul6429,989
t_mul32 :: Int32 -> Int32 -> Propertyt_mul3226,906
t_mul :: Int -> Int -> Propertyt_mul32,1072
mulRef :: (Integral a, Bounded a) => a -> a -> Maybe amulRef14,431
eval :: (a -> b -> c) -> a -> b -> Maybe ceval22,753

/home/effectfully/.fastdogs/text-1.2.4.1/tests/Tests/QuickCheckUtils.hs,4421
module Tests.QuickCheckUtilsQuickCheckUtils7,293
newtype BigInt = Big IntegerBigInt116,3231
newtype BigInt = Big IntegerBig116,3231
newtype BigBounded a = BigBounded aBigBounded124,3544
newtype NotEmpty a = NotEmpty { notEmpty :: a }NotEmpty130,3760
newtype NotEmpty a = NotEmpty { notEmpty :: a }notEmpty130,3760
data Small = S0  | S1  | S2  | S3  | S4  | S5  | S6  | S7Small159,4729
data Small = S0  | S1  | S2  | S3  | S4  | S5  | S6  | S7S0159,4729
data Small = S0  | S1  | S2  | S3  | S4  | S5  | S6  | S7S1159,4729
data Small = S0  | S1  | S2  | S3  | S4  | S5  | S6  | S7S2159,4729
data Small = S0  | S1  | S2  | S3  | S4  | S5  | S6  | S7S3159,4729
data Small = S0  | S1  | S2  | S3  | S4  | S5  | S6  | S7S4159,4729
data Small = S0  | S1  | S2  | S3  | S4  | S5  | S6  | S7S5159,4729
data Small = S0  | S1  | S2  | S3  | S4  | S5  | S6  | S7S6159,4729
data Small = S0  | S1  | S2  | S3  | S4  | S5  | S6  | S7S7159,4729
           | S8  | S9  | S10 | S11 | S12 | S13 | S14 | S15S8160,4787
           | S8  | S9  | S10 | S11 | S12 | S13 | S14 | S15S9160,4787
           | S8  | S9  | S10 | S11 | S12 | S13 | S14 | S15S10160,4787
           | S8  | S9  | S10 | S11 | S12 | S13 | S14 | S15S11160,4787
           | S8  | S9  | S10 | S11 | S12 | S13 | S14 | S15S12160,4787
           | S8  | S9  | S10 | S11 | S12 | S13 | S14 | S15S13160,4787
           | S8  | S9  | S10 | S11 | S12 | S13 | S14 | S15S14160,4787
           | S8  | S9  | S10 | S11 | S12 | S13 | S14 | S15S15160,4787
           | S16 | S17 | S18 | S19 | S20 | S21 | S22 | S23S16161,4846
           | S16 | S17 | S18 | S19 | S20 | S21 | S22 | S23S17161,4846
           | S16 | S17 | S18 | S19 | S20 | S21 | S22 | S23S18161,4846
           | S16 | S17 | S18 | S19 | S20 | S21 | S22 | S23S19161,4846
           | S16 | S17 | S18 | S19 | S20 | S21 | S22 | S23S20161,4846
           | S16 | S17 | S18 | S19 | S20 | S21 | S22 | S23S21161,4846
           | S16 | S17 | S18 | S19 | S20 | S21 | S22 | S23S22161,4846
           | S16 | S17 | S18 | S19 | S20 | S21 | S22 | S23S23161,4846
           | S24 | S25 | S26 | S27 | S28 | S29 | S30 | S31S24162,4905
           | S24 | S25 | S26 | S27 | S28 | S29 | S30 | S31S25162,4905
           | S24 | S25 | S26 | S27 | S28 | S29 | S30 | S31S26162,4905
           | S24 | S25 | S26 | S27 | S28 | S29 | S30 | S31S27162,4905
           | S24 | S25 | S26 | S27 | S28 | S29 | S30 | S31S28162,4905
           | S24 | S25 | S26 | S27 | S28 | S29 | S30 | S31S29162,4905
           | S24 | S25 | S26 | S27 | S28 | S29 | S30 | S31S30162,4905
           | S24 | S25 | S26 | S27 | S28 | S29 | S30 | S31S31162,4905
data DecodeErr = Lenient | Ignore | Strict | ReplaceDecodeErr206,6181
data DecodeErr = Lenient | Ignore | Strict | ReplaceLenient206,6181
data DecodeErr = Lenient | Ignore | Strict | ReplaceIgnore206,6181
data DecodeErr = Lenient | Ignore | Strict | ReplaceStrict206,6181
data DecodeErr = Lenient | Ignore | Strict | ReplaceReplace206,6181
class Stringy s whereStringy221,6669
    packS    :: String -> spackS222,6691
    unpackS  :: s -> StringunpackS223,6719
    splitAtS :: Int -> s -> (s,s)splitAtS224,6747
    packSChunkSize :: Int -> String -> spackSChunkSize225,6781
newtype Precision a = Precision (Maybe Int)Precision276,8381
data Encoding = E String IO.TextEncodingEncoding298,9082
data Encoding = E String IO.TextEncodingE298,9082
write_read :: (NFData a, Eq a)write_read339,10534
windowsNewlineMode :: IO.NewlineModewindowsNewlineMode309,9437
unsquare :: (Arbitrary a, Show a, Testable b) => (a -> b) -> Propertyunsquare101,2678
smallArbitrary :: (Arbitrary a, Show a) => Gen asmallArbitrary104,2782
small :: Integral a => Small -> asmall165,5003
shrinkNotEmpty :: Arbitrary a => (a -> Bool) -> NotEmpty a -> [NotEmpty a]shrinkNotEmpty155,4559
precision :: a -> Precision a -> Maybe Intprecision279,8466
intf :: (Int -> Int -> Int) -> Small -> Small -> Smallintf168,5070
integralRandomR :: (Integral a, RandomGen g) => (a,a) -> g -> (a,g)integralRandomR201,5914
genUnicode :: IsString a => Gen agenUnicode66,1707
genDecodeErr :: DecodeErr -> Gen T.OnDecodeErrorgenDecodeErr209,6270
eqP :: (Eq a, Show a, Stringy s) =>eqP255,7601
eq :: (Eq a, Show a) => (t -> a) -> (t -> a) -> t -> Booleq251,7483
arbitraryPrecision :: Int -> Gen (Precision a)arbitraryPrecision282,8546

/home/effectfully/.fastdogs/text-1.2.4.1/tests/Tests/Regressions.hs,446
module Tests.RegressionsRegressions4,100
utf8_decode_unsafe :: IO ()utf8_decode_unsafe61,2234
tests :: F.Testtests118,4285
t301 :: IO ()t301105,3815
t227 :: IO ()t22794,3341
t221 :: IO ()t22188,3181
t197 :: IO ()t19779,2960
replicate_crash :: IO ()replicate_crash50,1764
mapAccumL_resize :: IO ()mapAccumL_resize68,2532
lazy_encode_crash :: IO ()lazy_encode_crash32,1015
hGetContents_crash :: IO ()hGetContents_crash39,1302

/home/effectfully/.fastdogs/text-1.2.4.1/tests/Tests/SlowFunctions.hs,201
module Tests.SlowFunctionsSlowFunctions2,30
splitOn :: T.Text               -- ^ Text to split onsplitOn25,726
indices :: T.Text              -- ^ Substring to search for (@needle@)indices12,230

/home/effectfully/.fastdogs/text-1.2.4.1/tests/Tests/Utils.hs,227
module Tests.UtilsUtils4,77
withTempFile :: (FilePath -> Handle -> IO a) -> IO awithTempFile34,1070
withRedirect :: Handle -> Handle -> IO a -> IO awithRedirect42,1312
(=^=) :: (Eq a, Show a) => a -> a -> Bool=^=22,682

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Applicative/Backwards.hs,199
module Control.Applicative.Backwards (Backwards25,726
newtype Backwards f a = Backwards { forwards :: f a }Backwards41,1139
newtype Backwards f a = Backwards { forwards :: f a }forwards41,1139

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Applicative/Lift.hs,611
module Control.Applicative.Lift (Lift21,624
data Lift f a = Pure a | Other (f a)Lift44,1142
data Lift f a = Pure a | Other (f a)Pure44,1142
data Lift f a = Pure a | Other (f a)Other44,1142
type Errors e = Lift (Constant e)Errors145,4545
unLift :: (Applicative f) => Lift f a -> f aunLift110,3490
runErrors :: Errors e a -> Either e arunErrors153,4733
mapLift :: (f a -> g a) -> Lift f a -> Lift g amapLift116,3658
failure :: e -> Errors e afailure159,4888
elimLift :: (a -> r) -> (f a -> r) -> Lift f a -> relimLift127,3900
eitherToErrors :: Either e a -> Errors e aeitherToErrors164,5035

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Signatures.hs,275
module Control.Monad.Signatures (Signatures22,693
type CallCC m a b = ((a -> m b) -> m a) -> m aCallCC32,989
type Catch e m a = m a -> (e -> m a) -> m aCatch40,1243
type Listen w m a = m a -> m (a, w)Listen48,1484
type Pass w m a =  m (a, w -> w) -> m aPass56,1709

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Accum.hs,1638
module Control.Monad.Trans.Accum (Accum26,860
type Accum w = AccumT w IdentityAccum79,2160
newtype AccumT w m a = AccumT (w -> m (a, w))AccumT132,3997
writerToAccumT :: WriterT w m a -> AccumT w m awriterToAccumT283,9435
runAccumT :: AccumT w m a -> w -> m (a, w)runAccumT135,4085
runAccum :: Accum w a -> w -> (a, w)runAccum89,2509
readerToAccumT :: (Functor m, Monoid w) => ReaderT w m a -> AccumT w m areaderToAccumT278,9186
mapAccumT :: (m (a, w) -> n (b, w)) -> AccumT w m a -> AccumT w n bmapAccumT162,4941
mapAccum :: ((a, w) -> (b, w)) -> Accum w a -> Accum w bmapAccum112,3257
looks :: (Monoid w, Monad m) => (w -> a) -> AccumT w m alooks231,7356
look :: (Monoid w, Monad m) => AccumT w m wlook227,7178
liftPass :: (Monad m) => Pass w m (a, s) -> Pass w (AccumT s m) aliftPass271,8921
liftListen :: (Monad m) => Listen w m (a, s) -> Listen w (AccumT s m) aliftListen264,8666
liftCatch :: Catch e m (a, w) -> Catch e (AccumT w m) aliftCatch258,8444
liftCallCC' :: CallCC m (a, w) (b, w) -> CallCC (AccumT w m) a bliftCallCC'251,8187
liftCallCC :: CallCC m (a, w) (b, w) -> CallCC (AccumT w m) a bliftCallCC242,7762
execAccumT :: (Monad m) => AccumT w m a -> w -> m wexecAccumT142,4298
execAccum :: Accum w a -> w -> wexecAccum96,2719
evalAccumT :: (Monad m, Monoid w) => AccumT w m a -> w -> m aevalAccumT152,4642
evalAccum :: (Monoid w) => Accum w a -> w -> aevalAccum104,3004
add :: (Monad m) => w -> AccumT w m ()add235,7519
accumToStateT :: (Functor m, Monoid s) => AccumT s m a -> StateT s m aaccumToStateT289,9655
accum :: (Monad m) => (w -> (a, w)) -> AccumT w m aaccum83,2299

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Class.hs,144
module Control.Monad.Trans.Class (Class28,1019
class MonadTrans t whereMonadTrans56,1574
    lift :: (Monad m) => m a -> t m alift58,1677

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Cont.hs,1141
module Control.Monad.Trans.Cont (Cont29,877
type Cont r = ContT r IdentityCont70,1833
newtype ContT r m a = ContT { runContT :: (a -> m r) -> m r }ContT136,4000
newtype ContT r m a = ContT { runContT :: (a -> m r) -> m r }runContT136,4000
withContT :: ((b -> m r) -> (a -> m r)) -> ContT r m a -> ContT r m bwithContT160,4861
withCont :: ((b -> r) -> (a -> r)) -> Cont r a -> Cont r bwithCont108,3084
shiftT :: (Monad m) => ((a -> m r) -> ContT r m r) -> ContT r m ashiftT230,7358
shift :: ((a -> r) -> Cont r r) -> Cont r ashift125,3587
runContrunCont80,2179
resetT :: (Monad m) => ContT r m r -> ContT r' m rresetT221,7078
reset :: Cont r r -> Cont r' rreset116,3345
mapContT :: (m r -> m r) -> ContT r m a -> ContT r m amapContT152,4601
mapCont :: (r -> r) -> Cont r a -> Cont r amapCont100,2827
liftLocal :: (Monad m) => m r' -> ((r' -> r') -> m r -> m r) ->liftLocal235,7554
evalContT :: (Monad m) => ContT r m r -> m revalContT142,4189
evalCont :: Cont r r -> revalCont92,2595
cont :: ((a -> r) -> r) -> Cont r acont74,1962
callCC :: ((a -> ContT r m b) -> ContT r m a) -> ContT r m acallCC213,6809

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Error.hs,938
module Control.Monad.Trans.ErrorError39,1397
class Error a whereError133,3669
    noMsg  :: anoMsg136,3792
    strMsg :: String -> astrMsg139,3916
class ErrorList a whereErrorList152,4230
    listMsg :: String -> [a]listMsg153,4254
newtype ErrorT e m a = ErrorT { runErrorT :: m (Either e a) }ErrorT169,4684
newtype ErrorT e m a = ErrorT { runErrorT :: m (Either e a) }runErrorT169,4684
throwError :: (Monad m) => e -> ErrorT e m athrowError281,8404
mapErrorT :: (m (Either e a) -> n (Either e' b))mapErrorT201,5911
liftPass :: (Monad m) => Pass w m (Either e a) -> Pass w (ErrorT e m) aliftPass313,9471
liftListen :: (Monad m) => Listen w m (Either e a) -> Listen w (ErrorT e m) aliftListen307,9243
liftCallCC :: CallCC m (Either e a) (Either e b) -> CallCC (ErrorT e m) a bliftCallCC301,9018
catchIOError :: IO a -> (IOError -> IO a) -> IO acatchIOError93,2740
catchError :: (Monad m) =>catchError289,8607

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Except.hs,1037
module Control.Monad.Trans.Except (Except29,1016
type Except e = ExceptT e IdentityExcept79,2282
newtype ExceptT e m a = ExceptT (m (Either e a))ExceptT119,3565
withExceptT :: (Functor m) => (e -> e') -> ExceptT e m a -> ExceptT e' m awithExceptT169,5259
withExcept :: (e -> e') -> Except e a -> Except e' awithExcept104,3109
throwE :: (Monad m) => e -> ExceptT e m athrowE274,8616
runExceptT :: ExceptT e m a -> m (Either e a)runExceptT154,4778
runExcept :: Except e a -> Either e arunExcept89,2599
mapExceptT :: (m (Either e a) -> n (Either e' b))mapExceptT161,5002
mapExcept :: (Either e a -> Either e' b)mapExcept96,2822
liftPass :: (Monad m) => Pass w m (Either e a) -> Pass w (ExceptT e m) aliftPass310,9768
liftListen :: (Monad m) => Listen w m (Either e a) -> Listen w (ExceptT e m) aliftListen303,9512
liftCallCC :: CallCC m (Either e a) (Either e b) -> CallCC (ExceptT e m) a bliftCallCC296,9257
except :: (Monad m) => Either e a -> ExceptT e m aexcept83,2409
catchE :: (Monad m) =>catchE283,8823

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Identity.hs,482
module Control.Monad.Trans.Identity (Identity26,735
newtype IdentityT f a = IdentityT { runIdentityT :: f a }IdentityT57,1649
newtype IdentityT f a = IdentityT { runIdentityT :: f a }runIdentityT57,1649
mapIdentityT :: (m a -> n b) -> IdentityT m a -> IdentityT n bmapIdentityT169,5179
liftCatch :: Catch e m a -> Catch e (IdentityT m) aliftCatch186,5826
liftCallCC :: CallCC m a b -> CallCC (IdentityT m) a bliftCallCC180,5608
lift2IdentityT ::lift2IdentityT174,5364

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/List.hs,387
module Control.Monad.Trans.ListList23,733
newtype ListT m a = ListT { runListT :: m [a] }ListT56,1630
newtype ListT m a = ListT { runListT :: m [a] }runListT56,1630
mapListT :: (m [a] -> n [b]) -> ListT m a -> ListT n bmapListT88,2777
liftCatch :: Catch e m [a] -> Catch e (ListT m) aliftCatch182,5512
liftCallCC :: CallCC m [a] [b] -> CallCC (ListT m) a bliftCallCC175,5291

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Maybe.hs,801
module Control.Monad.Trans.Maybe (Maybe29,960
newtype MaybeT m a = MaybeT { runMaybeT :: m (Maybe a) }MaybeT73,2217
newtype MaybeT m a = MaybeT { runMaybeT :: m (Maybe a) }runMaybeT73,2217
maybeToExceptT :: (Functor m) => e -> MaybeT m a -> ExceptT e m amaybeToExceptT111,3621
mapMaybeT :: (m (Maybe a) -> n (Maybe b)) -> MaybeT m a -> MaybeT n bmapMaybeT105,3403
liftPass :: (Monad m) => Pass w m (Maybe a) -> Pass w (MaybeT m) aliftPass235,7559
liftListen :: (Monad m) => Listen w m (Maybe a) -> Listen w (MaybeT m) aliftListen228,7310
liftCatch :: Catch e m (Maybe a) -> Catch e (MaybeT m) aliftCatch223,7119
liftCallCC :: CallCC m (Maybe a) (Maybe b) -> CallCC (MaybeT m) a bliftCallCC217,6890
exceptToMaybeT :: (Functor m) => ExceptT e m a -> MaybeT m aexceptToMaybeT117,3880

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/RWS.hs,44
module Control.Monad.Trans.RWS (RWS21,754

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/RWS/CPS.hs,2429
module Control.Monad.Trans.RWS.CPS (CPS27,943
type RWS r w s = RWST r w s IdentityRWS86,1989
newtype RWST r w s m a = RWST { unRWST :: r -> s -> w -> m (a, s, w) }RWST145,4233
newtype RWST r w s m a = RWST { unRWST :: r -> s -> w -> m (a, s, w) }unRWST145,4233
writer :: (Monoid w, Monad m) => (a, w) -> RWST r w s m awriter297,9444
withRWST :: (r' -> s -> (r, s)) -> RWST r w s m a -> RWST r' w s m awithRWST200,6478
withRWS :: (r' -> s -> (r, s)) -> RWS r w s a -> RWS r' w s awithRWS137,3886
tell :: (Monoid w, Monad m) => w -> RWST r w s m ()tell302,9673
state :: (Monad m) => (s -> (a, s)) -> RWST r w s m astate357,11840
rwsT :: (Functor m, Monoid w) => (r -> s -> m (a, s, w)) -> RWST r w s m arwsT149,4388
rws :: (Monoid w) => (r -> s -> (a, s, w)) -> RWS r w s arws90,2108
runRWST :: (Monoid w) => RWST r w s m a -> r -> s -> m (a, s, w)runRWST156,4668
runRWS :: (Monoid w) => RWS r w s a -> r -> s -> (a, s, w)runRWS97,2365
reader :: (Monad m) => (r -> a) -> RWST r w s m areader270,8637
put :: (Monad m) =>s -> RWST r w s m ()put367,12166
pass :: (Monoid w, Monoid w', Monad m) => RWST r w s m (a, w -> w') -> RWST r w' s m apass332,10897
modify :: (Monad m) =>(s -> s) -> RWST r w s m ()modify375,12424
mapRWST :: (Monad n, Monoid w, Monoid w') =>mapRWST188,6022
mapRWS :: (Monoid w, Monoid w') => ((a, s, w) -> (b, s, w')) -> RWS r w s a -> RWS r w' s bmapRWS129,3543
local :: (r -> r) -> RWST r w s m a -> RWST r w s m alocal282,8947
listens :: (Monoid w, Monad m) => (w -> b) -> RWST r w s m a -> RWST r w s m (a, b)listens320,10398
listen :: (Monoid w, Monad m) => RWST r w s m a -> RWST r w s m (a, w)listen310,9980
liftCatch :: Catch e m (a,s,w) -> Catch e (RWST r w s m) aliftCatch403,13535
liftCallCC' :: CallCC m (a,s,w) (b,s,w) -> CallCC (RWST r w s m) a bliftCallCC'397,13270
liftCallCC :: CallCC m (a,s,w) (b,s,w) -> CallCC (RWST r w s m) a bliftCallCC390,12927
gets :: (Monad m) =>(s -> a) -> RWST r w s m agets383,12668
get :: (Monad m) =>RWST r w s m sget362,12043
execRWST :: (Monad m, Monoid w)execRWST174,5450
execRWS :: (Monoid w)execRWS115,3081
evalRWST :: (Monad m, Monoid w)evalRWST162,4936
evalRWS :: (Monoid w)evalRWS103,2633
censor :: (Monoid w, Monad m) => (w -> w) -> RWST r w s m a -> RWST r w s m acensor346,11434
asks :: (Monad m) => (r -> a) -> RWST r w s m aasks289,9162
ask :: (Monad m) => RWST r w s m rask275,8765

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/RWS/Lazy.hs,2207
module Control.Monad.Trans.RWS.Lazy (Lazy24,833
type RWS r w s = RWST r w s IdentityRWS81,1892
newtype RWST r w s m a = RWST { runRWST :: r -> s -> m (a, s, w) }RWST137,3974
newtype RWST r w s m a = RWST { runRWST :: r -> s -> m (a, s, w) }runRWST137,3974
writer :: (Monad m) => (a, w) -> RWST r w s m awriter277,8947
withRWST :: (r' -> s -> (r, s)) -> RWST r w s m a -> RWST r' w s m awithRWST174,5507
withRWS :: (r' -> s -> (r, s)) -> RWS r w s a -> RWS r' w s awithRWS129,3627
tell :: (Monad m) => w -> RWST r w s m ()tell282,9126
state :: (Monoid w, Monad m) => (s -> (a,s)) -> RWST r w s m astate336,11194
rws :: (r -> s -> (a, s, w)) -> RWS r w s arws85,2011
runRWS :: RWS r w s a -> r -> s -> (a, s, w)runRWS91,2189
reader :: (Monoid w, Monad m) => (r -> a) -> RWST r w s m areader250,8080
put :: (Monoid w, Monad m) => s -> RWST r w s m ()put346,11574
pass :: (Monad m) => RWST r w s m (a, w -> w) -> RWST r w s m apass313,10364
modify :: (Monoid w, Monad m) => (s -> s) -> RWST r w s m ()modify354,11846
mapRWST :: (m (a, s, w) -> n (b, s, w')) -> RWST r w s m a -> RWST r w' s n bmapRWST166,5173
mapRWS :: ((a, s, w) -> (b, s, w')) -> RWS r w s a -> RWS r w' s bmapRWS121,3309
local :: (r -> r) -> RWST r w s m a -> RWST r w s m alocal262,8440
listens :: (Monad m) => (w -> b) -> RWST r w s m a -> RWST r w s m (a, b)listens302,9916
listen :: (Monad m) => RWST r w s m a -> RWST r w s m (a, w)listen290,9438
liftCatch :: Catch e m (a,s,w) -> Catch e (RWST r w s m) aliftCatch386,13029
liftCallCC' :: (Monoid w) =>liftCallCC'378,12742
liftCallCC :: (Monoid w) =>liftCallCC369,12377
gets :: (Monoid w, Monad m) => (s -> a) -> RWST r w s m agets362,12104
get :: (Monoid w, Monad m) => RWST r w s m sget341,11410
execRWST :: (Monad m)execRWST153,4690
execRWS :: RWS r w s a  -- ^RWS computation to executeexecRWS108,2869
evalRWST :: (Monad m)evalRWST141,4185
evalRWS :: RWS r w s a  -- ^RWS computation to executeevalRWS97,2443
censor :: (Monad m) => (w -> w) -> RWST r w s m a -> RWST r w s m acensor326,10838
asks :: (Monoid w, Monad m) => (r -> a) -> RWST r w s m aasks269,8652
ask :: (Monoid w, Monad m) => RWST r w s m rask255,8218

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/RWS/Strict.hs,2214
module Control.Monad.Trans.RWS.Strict (Strict27,1000
type RWS r w s = RWST r w s IdentityRWS84,2061
newtype RWST r w s m a = RWST { runRWST :: r -> s -> m (a, s, w) }RWST140,4143
newtype RWST r w s m a = RWST { runRWST :: r -> s -> m (a, s, w) }runRWST140,4143
writer :: (Monad m) => (a, w) -> RWST r w s m awriter280,9107
withRWST :: (r' -> s -> (r, s)) -> RWST r w s m a -> RWST r' w s m awithRWST177,5674
withRWS :: (r' -> s -> (r, s)) -> RWS r w s a -> RWS r' w s awithRWS132,3796
tell :: (Monad m) => w -> RWST r w s m ()tell285,9286
state :: (Monoid w, Monad m) => (s -> (a,s)) -> RWST r w s m astate339,11350
rws :: (r -> s -> (a, s, w)) -> RWS r w s arws88,2180
runRWS :: RWS r w s a -> r -> s -> (a, s, w)runRWS94,2358
reader :: (Monoid w, Monad m) => (r -> a) -> RWST r w s m areader253,8240
put :: (Monoid w, Monad m) => s -> RWST r w s m ()put349,11730
pass :: (Monad m) => RWST r w s m (a, w -> w) -> RWST r w s m apass316,10522
modify :: (Monoid w, Monad m) => (s -> s) -> RWST r w s m ()modify357,12002
mapRWST :: (m (a, s, w) -> n (b, s, w')) -> RWST r w s m a -> RWST r w' s n bmapRWST169,5340
mapRWS :: ((a, s, w) -> (b, s, w')) -> RWS r w s a -> RWS r w' s bmapRWS124,3478
local :: (r -> r) -> RWST r w s m a -> RWST r w s m alocal265,8600
listens :: (Monad m) => (w -> b) -> RWST r w s m a -> RWST r w s m (a, b)listens305,10075
listen :: (Monad m) => RWST r w s m a -> RWST r w s m (a, w)listen293,9598
liftCatch :: Catch e m (a,s,w) -> Catch e (RWST r w s m) aliftCatch389,13185
liftCallCC' :: (Monoid w) =>liftCallCC'381,12898
liftCallCC :: (Monoid w) =>liftCallCC372,12533
gets :: (Monoid w, Monad m) => (s -> a) -> RWST r w s m agets365,12260
get :: (Monoid w, Monad m) => RWST r w s m sget344,11566
execRWST :: (Monad m)execRWST156,4858
execRWS :: RWS r w s a  -- ^RWS computation to executeexecRWS111,3038
evalRWST :: (Monad m)evalRWST144,4354
evalRWS :: RWS r w s a  -- ^RWS computation to executeevalRWS100,2612
censor :: (Monad m) => (w -> w) -> RWST r w s m a -> RWST r w s m acensor329,10995
asks :: (Monoid w, Monad m) => (r -> a) -> RWST r w s m aasks272,8812
ask :: (Monoid w, Monad m) => RWST r w s m rask258,8378

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Reader.hs,863
module Control.Monad.Trans.Reader (Reader26,845
type Reader r = ReaderT r IdentityReader76,2022
newtype ReaderT r m a = ReaderT { runReaderT :: r -> m a }ReaderT115,3356
newtype ReaderT r m a = ReaderT { runReaderT :: r -> m a }runReaderT115,3356
withReaderTwithReaderT128,3819
withReaderwithReader103,2909
runReaderrunReader85,2329
reader :: (Monad m) => (r -> a) -> ReaderT r m areader79,2136
mapReaderT :: (m a -> n b) -> ReaderT r m a -> ReaderT r n bmapReaderT120,3530
mapReader :: (a -> b) -> Reader r a -> Reader r bmapReader95,2625
locallocal235,7003
liftReaderT :: m a -> ReaderT r m aliftReaderT222,6638
liftCatch :: Catch e m a -> Catch e (ReaderT r m) aliftCatch259,7760
liftCallCC :: CallCC m a b -> CallCC (ReaderT r m) a bliftCallCC252,7527
asks :: (Monad m)asks245,7308
ask :: (Monad m) => ReaderT r m rask227,6777

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Select.hs,661
module Control.Monad.Trans.Select (Select32,1078
type Select r = SelectT r IdentitySelect59,1642
newtype SelectT r m a = SelectT ((a -> m r) -> m a)SelectT83,2527
selectToContT :: (Monad m) => SelectT r m a -> ContT r m aselectToContT154,4793
selectToCont :: (Monad m) => SelectT r m a -> ContT r m aselectToCont160,5036
select :: ((a -> r) -> a) -> Select r aselect62,1736
runSelectT :: SelectT r m a -> (a -> m r) -> m arunSelectT87,2715
runSelect :: Select r a -> (a -> r) -> arunSelect68,1992
mapSelectT :: (m a -> m a) -> SelectT r m a -> SelectT r m amapSelectT97,3123
mapSelect :: (a -> a) -> Select r a -> Select r amapSelect75,2251

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/State.hs,48
module Control.Monad.Trans.State (State29,991

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/State/Lazy.hs,1694
module Control.Monad.Trans.State.Lazy (Lazy38,1275
type State s = StateT s IdentityState97,2549
newtype StateT s m a = StateT { runStateT :: s -> m (a,s) }StateT161,4810
newtype StateT s m a = StateT { runStateT :: s -> m (a,s) }runStateT161,4810
withStateT :: (s -> s) -> StateT s m a -> StateT s m awithStateT195,5938
withState :: (s -> s) -> State s a -> State s awithState147,4369
state :: (Monad m)state101,2673
runState :: State s a   -- ^state-passing computation to executerunState109,2942
put :: (Monad m) => s -> StateT s m ()put274,8329
modify' :: (Monad m) => (s -> s) -> StateT s m ()modify'290,8817
modify :: (Monad m) => (s -> s) -> StateT s m ()modify282,8573
mapStateT :: (m (a, s) -> n (b, s)) -> StateT s m a -> StateT s n bmapStateT187,5674
mapState :: ((a, s) -> (b, s)) -> State s a -> State s bmapState139,4108
liftPass :: (Monad m) => Pass w m (a,s) -> Pass w (StateT s m) aliftPass336,10445
liftListen :: (Monad m) => Listen w m (a,s) -> Listen w (StateT s m) aliftListen329,10191
liftCatch :: Catch e m (a,s) -> Catch e (StateT s m) aliftCatch323,9970
liftCallCC' :: CallCC m (a,s) (b,s) -> CallCC (StateT s m) a bliftCallCC'316,9715
liftCallCC :: CallCC m (a,s) (b,s) -> CallCC (StateT s m) a bliftCallCC307,9301
gets :: (Monad m) => (s -> a) -> StateT s m agets300,9056
get :: (Monad m) => StateT s m sget269,8193
execStateT :: (Monad m) => StateT s m a -> s -> m sexecStateT177,5378
execState :: State s a  -- ^state-passing computation to executeexecState129,3750
evalStateT :: (Monad m) => StateT s m a -> s -> m aevalStateT167,5054
evalState :: State s a  -- ^state-passing computation to executeevalState119,3343

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/State/Strict.hs,1697
module Control.Monad.Trans.State.Strict (Strict35,1225
type State s = StateT s IdentityState94,2501
newtype StateT s m a = StateT { runStateT :: s -> m (a,s) }StateT158,4762
newtype StateT s m a = StateT { runStateT :: s -> m (a,s) }runStateT158,4762
withStateT :: (s -> s) -> StateT s m a -> StateT s m awithStateT192,5888
withState :: (s -> s) -> State s a -> State s awithState144,4321
state :: (Monad m)state98,2625
runState :: State s a   -- ^state-passing computation to executerunState106,2894
put :: (Monad m) => s -> StateT s m ()put271,8274
modify' :: (Monad m) => (s -> s) -> StateT s m ()modify'287,8762
modify :: (Monad m) => (s -> s) -> StateT s m ()modify279,8518
mapStateT :: (m (a, s) -> n (b, s)) -> StateT s m a -> StateT s n bmapStateT184,5624
mapState :: ((a, s) -> (b, s)) -> State s a -> State s bmapState136,4060
liftPass :: (Monad m) => Pass w m (a,s) -> Pass w (StateT s m) aliftPass333,10389
liftListen :: (Monad m) => Listen w m (a,s) -> Listen w (StateT s m) aliftListen326,10136
liftCatch :: Catch e m (a,s) -> Catch e (StateT s m) aliftCatch320,9915
liftCallCC' :: CallCC m (a,s) (b,s) -> CallCC (StateT s m) a bliftCallCC'313,9660
liftCallCC :: CallCC m (a,s) (b,s) -> CallCC (StateT s m) a bliftCallCC304,9246
gets :: (Monad m) => (s -> a) -> StateT s m agets297,9001
get :: (Monad m) => StateT s m sget266,8138
execStateT :: (Monad m) => StateT s m a -> s -> m sexecStateT174,5329
execState :: State s a  -- ^state-passing computation to executeexecState126,3702
evalStateT :: (Monad m) => StateT s m a -> s -> m aevalStateT164,5006
evalState :: State s a  -- ^state-passing computation to executeevalState116,3295

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Writer.hs,50
module Control.Monad.Trans.Writer (Writer21,739

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Writer/CPS.hs,1333
module Control.Monad.Trans.Writer.CPS (CPS32,1198
type Writer w = WriterT w IdentityWriter77,2232
newtype WriterT w m a = WriterT { unWriterT :: w -> m (a, w) }WriterT118,3594
newtype WriterT w m a = WriterT { unWriterT :: w -> m (a, w) }unWriterT118,3594
writerT :: (Functor m, Monoid w) => m (a, w) -> WriterT w m awriterT122,3765
writer :: (Monoid w, Monad m) => (a, w) -> WriterT w m awriter81,2367
tell :: (Monoid w, Monad m) => w -> WriterT w m ()tell218,6612
runWriterT :: (Monoid w) => WriterT w m a -> m (a, w)runWriterT129,4014
runWriter :: (Monoid w) => Writer w a -> (a, w)runWriter88,2627
pass :: (Monoid w, Monoid w', Monad m) =>pass249,7817
mapWriterT :: (Monad n, Monoid w, Monoid w') =>mapWriterT146,4536
mapWriter :: (Monoid w, Monoid w') =>mapWriter103,3096
listens :: (Monoid w, Monad m) =>listens236,7328
listen :: (Monoid w, Monad m) => WriterT w m a -> WriterT w m (a, w)listen226,6914
liftCatch :: Catch e m (a, w) -> Catch e (WriterT w m) aliftCatch280,8958
liftCallCC :: CallCC m (a, w) (b, w) -> CallCC (WriterT w m) a bliftCallCC274,8707
execWriterT :: (Monad m, Monoid w) => WriterT w m a -> m wexecWriterT136,4239
execWriter :: (Monoid w) => Writer w a -> wexecWriter95,2838
censor :: (Monoid w, Monad m) => (w -> w) -> WriterT w m a -> WriterT w m acensor264,8344

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Writer/Lazy.hs,1216
module Control.Monad.Trans.Writer.Lazy (Lazy30,1086
type Writer w = WriterT w IdentityWriter80,2342
newtype WriterT w m a = WriterT { runWriterT :: m (a, w) }WriterT118,3567
newtype WriterT w m a = WriterT { runWriterT :: m (a, w) }runWriterT118,3567
writer :: (Monad m) => (a, w) -> WriterT w m awriter84,2477
tell :: (Monad m) => w -> WriterT w m ()tell252,8144
runWriter :: Writer w a -> (a, w)runWriter90,2664
pass :: (Monad m) => WriterT w m (a, w -> w) -> WriterT w m apass283,9324
mapWriterT :: (m (a, w) -> n (b, w')) -> WriterT w m a -> WriterT w' n bmapWriterT163,5252
mapWriter :: ((a, w) -> (b, w')) -> Writer w a -> Writer w' bmapWriter105,3099
listens :: (Monad m) => (w -> b) -> WriterT w m a -> WriterT w m (a, b)listens272,8895
listen :: (Monad m) => WriterT w m a -> WriterT w m (a, w)listen260,8436
liftCatch :: Catch e m (a,w) -> Catch e (WriterT w m) aliftCatch310,10248
liftCallCC :: (Monoid w) => CallCC m (a,w) (b,w) -> CallCC (WriterT w m) a bliftCallCC303,9991
execWriterT :: (Monad m) => WriterT w m a -> m wexecWriterT153,4964
execWriter :: Writer w a -> wexecWriter97,2861
censor :: (Monad m) => (w -> w) -> WriterT w m a -> WriterT w m acensor296,9779

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Writer/Strict.hs,1222
module Control.Monad.Trans.Writer.Strict (Strict33,1258
type Writer w = WriterT w IdentityWriter83,2516
newtype WriterT w m a = WriterT { runWriterT :: m (a, w) }WriterT121,3741
newtype WriterT w m a = WriterT { runWriterT :: m (a, w) }runWriterT121,3741
writer :: (Monad m) => (a, w) -> WriterT w m awriter87,2651
tell :: (Monad m) => w -> WriterT w m ()tell255,8309
runWriter :: Writer w a -> (a, w)runWriter93,2838
pass :: (Monad m) => WriterT w m (a, w -> w) -> WriterT w m apass286,9487
mapWriterT :: (m (a, w) -> n (b, w')) -> WriterT w m a -> WriterT w' n bmapWriterT166,5425
mapWriter :: ((a, w) -> (b, w')) -> Writer w a -> Writer w' bmapWriter108,3273
listens :: (Monad m) => (w -> b) -> WriterT w m a -> WriterT w m (a, b)listens275,9059
listen :: (Monad m) => WriterT w m a -> WriterT w m (a, w)listen263,8601
liftCatch :: Catch e m (a,w) -> Catch e (WriterT w m) aliftCatch313,10409
liftCallCC :: (Monoid w) => CallCC m (a,w) (b,w) -> CallCC (WriterT w m) a bliftCallCC306,10152
execWriterT :: (Monad m) => WriterT w m a -> m wexecWriterT156,5138
execWriter :: Writer w a -> wexecWriter100,3035
censor :: (Monad m) => (w -> w) -> WriterT w m a -> WriterT w m acensor299,9941

/home/effectfully/.fastdogs/transformers-0.5.6.2/Data/Functor/Constant.hs,190
module Data.Functor.Constant (Constant24,643
newtype Constant a b = Constant { getConstant :: a }Constant50,1259
newtype Constant a b = Constant { getConstant :: a }getConstant50,1259

/home/effectfully/.fastdogs/transformers-0.5.6.2/Data/Functor/Reverse.hs,184
module Data.Functor.Reverse (Reverse25,720
newtype Reverse f a = Reverse { getReverse :: f a }Reverse47,1295
newtype Reverse f a = Reverse { getReverse :: f a }getReverse47,1295

/home/effectfully/.fastdogs/transformers-0.5.6.2/legacy/pre709/Data/Functor/Identity.hs,187
module Data.Functor.Identity (Identity44,1473
newtype Identity a = Identity { runIdentity :: a }Identity69,2134
newtype Identity a = Identity { runIdentity :: a }runIdentity69,2134

/home/effectfully/.fastdogs/transformers-0.5.6.2/legacy/pre711/Control/Monad/IO/Class.hs,137
module Control.Monad.IO.Class (Class23,701
class (Monad m) => MonadIO m whereMonadIO42,1207
    liftIO :: IO a -> m aliftIO44,1291

/home/effectfully/.fastdogs/transformers-0.5.6.2/legacy/pre711/Data/Functor/Classes.hs,2938
module Data.Functor.Classes (Classes41,1454
class Eq1 f whereEq181,2399
    liftEq :: (a -> b -> Bool) -> f a -> f b -> BoolliftEq88,2713
class (Eq1 f) => Ord1 f whereOrd199,3030
    liftCompare :: (a -> b -> Ordering) -> f a -> f b -> OrderingliftCompare106,3361
class Read1 f whereRead1117,3718
    liftReadsPrec :: (Int -> ReadS a) -> ReadS [a] -> Int -> ReadS (f a)liftReadsPrec120,3887
    liftReadList :: (Int -> ReadS a) -> ReadS [a] -> ReadS [f a]liftReadList126,4204
class Show1 f whereShow1150,5104
    liftShowsPrec :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->liftShowsPrec153,5273
    liftShowList :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->liftShowList160,5607
class Eq2 f whereEq2174,6081
    liftEq2 :: (a -> b -> Bool) -> (c -> d -> Bool) -> f a c -> f b d -> BoolliftEq2181,6393
class (Eq2 f) => Ord2 f whereOrd2192,6752
    liftCompare2 :: (a -> b -> Ordering) -> (c -> d -> Ordering) ->liftCompare2199,7083
class Read2 f whereRead2211,7498
    liftReadsPrec2 :: (Int -> ReadS a) -> ReadS [a] ->liftReadsPrec2214,7668
    liftReadList2 :: (Int -> ReadS a) -> ReadS [a] ->liftReadList2221,8030
class Show2 f whereShow2235,8571
    liftShowsPrec2 :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->liftShowsPrec2238,8741
    liftShowList2 :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->liftShowList2245,9120
showsUnaryWith :: (Int -> a -> ShowS) -> String -> Int -> a -> ShowSshowsUnaryWith444,15749
showsUnary1 :: (Show1 f, Show a) => String -> Int -> f a -> ShowSshowsUnary1491,18100
showsUnary :: (Show a) => String -> Int -> a -> ShowSshowsUnary484,17722
showsPrec2 :: (Show2 f, Show a, Show b) => Int -> f a b -> ShowSshowsPrec2255,9487
showsPrec1 :: (Show1 f, Show a) => Int -> f a -> ShowSshowsPrec1170,5919
showsBinaryWith :: (Int -> a -> ShowS) -> (Int -> b -> ShowS) ->showsBinaryWith451,16093
showsBinary1 :: (Show1 f, Show1 g, Show a) =>showsBinary1499,18510
readsUnaryWith :: (Int -> ReadS a) -> String -> (a -> t) -> String -> ReadS treadsUnaryWith429,15048
readsUnary1 :: (Read1 f, Read a) => String -> (f a -> t) -> String -> ReadS treadsUnary1468,16904
readsUnary :: (Read a) => String -> (a -> t) -> String -> ReadS treadsUnary461,16553
readsPrec2 :: (Read2 f, Read a, Read b) => Int -> ReadS (f a b)readsPrec2231,8378
readsPrec1 :: (Read1 f, Read a) => Int -> ReadS (f a)readsPrec1146,4942
readsData :: (String -> ReadS a) -> Int -> ReadS areadsData423,14776
readsBinaryWith :: (Int -> ReadS a) -> (Int -> ReadS b) ->readsBinaryWith436,15368
readsBinary1 :: (Read1 f, Read1 g, Read a) =>readsBinary1475,17274
readListWith :: ReadS a -> ReadS [a]readListWith135,4499
eq2 :: (Eq2 f, Eq a, Eq b) => f a b -> f a b -> Booleq2188,6613
eq1 :: (Eq1 f, Eq a) => f a -> f a -> Booleq195,2908
compare2 :: (Ord2 f, Ord a, Ord b) => f a b -> f a b -> Orderingcompare2207,7330
compare1 :: (Ord1 f, Ord a) => f a -> f a -> Orderingcompare1113,3571

/home/effectfully/.fastdogs/transformers-0.5.6.2/legacy/pre711/Data/Functor/Compose.hs,295
module Data.Functor.Compose (Compose33,941
newtype Compose f g a = Compose { getCompose :: f (g a) }Compose57,1514
newtype Compose f g a = Compose { getCompose :: f (g a) }getCompose57,1514
data MDComposeMDCompose70,1931
data MCComposeMCCompose71,1946
data MSComposeMSCompose72,1961

/home/effectfully/.fastdogs/transformers-0.5.6.2/legacy/pre711/Data/Functor/Product.hs,210
module Data.Functor.Product (Product33,946
data Product f g a = Pair (f a) (g a)Product58,1552
data Product f g a = Pair (f a) (g a)Pair58,1552
data MDProductMDProduct71,1959
data MCPairMCPair72,1974

/home/effectfully/.fastdogs/transformers-0.5.6.2/legacy/pre711/Data/Functor/Sum.hs,265
module Data.Functor.Sum (Sum33,938
data Sum f g a = InL (f a) | InR (g a)Sum53,1374
data Sum f g a = InL (f a) | InR (g a)InL53,1374
data Sum f g a = InL (f a) | InR (g a)InR53,1374
data MDSumMDSum67,1834
data MCInLMCInL68,1845
data MCInRMCInR69,1856

dist-newstyle-dante/build/x86_64-linux/ghc-8.10.7/registry-0.1.0.0/build/autogen/Paths_registry.hs,1579
module Paths_registry (Paths_registry5,131
version :: Versionversion32,735
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathsysconfdir44,1006
pathSeparator :: CharpathSeparator70,2259
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathlibexecdir44,1006
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathlibdir44,1006
joinFileName :: String -> String -> FilePathjoinFileName62,1981
isPathSeparator :: Char -> BoolisPathSeparator73,2302
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetSysconfDir40,911
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetLibexecDir40,911
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetLibDir40,911
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetDynLibDir40,911
getDataFileName :: FilePath -> IO FilePathgetDataFileName35,786
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetDataDir40,911
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetBinDir40,911
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathdynlibdir44,1006
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathdatadir44,1006
catchIO :: IO a -> (Exception.IOException -> IO a) -> IO acatchIO22,506
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathbindir44,1006

src/Lib.hs,19
module LibLib1,0
