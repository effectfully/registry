
.stack-work/dist/x86_64-linux-tinfo6/Cabal-3.2.1.0/build/autogen/Paths_registry.hs,1414
module Paths_registry (Paths_registry4,108
version :: Versionversion28,675
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathsysconfdir30,725
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathlibexecdir30,725
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathlibdir30,725
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetSysconfDir39,1994
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetLibexecDir39,1994
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetLibDir39,1994
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetDynLibDir39,1994
getDataFileName :: FilePath -> IO FilePathgetDataFileName47,2537
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetDataDir39,1994
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetBinDir39,1994
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathdynlibdir30,725
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathdatadir30,725
catchIO :: IO a -> (Exception.IOException -> IO a) -> IO acatchIO18,446
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathbindir30,725

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Applicative.hs,742
module Control.Applicative (Applicative37,1368
newtype WrappedMonad m a = WrapMonad { unwrapMonad :: m a }WrappedMonad66,2027
newtype WrappedMonad m a = WrapMonad { unwrapMonad :: m a }WrapMonad66,2027
newtype WrappedMonad m a = WrapMonad { unwrapMonad :: m a }unwrapMonad66,2027
newtype WrappedArrow a b c = WrapArrow { unwrapArrow :: a b c }WrappedArrow87,2824
newtype WrappedArrow a b c = WrapArrow { unwrapArrow :: a b c }WrapArrow87,2824
newtype WrappedArrow a b c = WrapArrow { unwrapArrow :: a b c }unwrapArrow87,2824
newtype ZipList a = ZipList { getZipList :: [a] }ZipList108,3630
newtype ZipList a = ZipList { getZipList :: [a] }getZipList108,3630
optional :: Alternative f => f a -> f (Maybe a)optional161,5530

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Arrow.hs,1665
module Control.Arrow (Arrow33,1071
class Category a => Arrow a whereArrow92,2418
    arr :: (b -> c) -> a b carr96,2532
    first :: a b c -> a (b,d) (c,d)first100,2689
    second :: a b c -> a (d,b) (d,c)second107,2891
    (***) :: a b c -> a b' c' -> a (b,b') (c,c')***115,3196
    (&&&) :: a b c -> a b c' -> a b (c,c')&&&124,3537
newtype Kleisli m a b = Kleisli { runKleisli :: a -> m b }Kleisli154,4455
newtype Kleisli m a b = Kleisli { runKleisli :: a -> m b }runKleisli154,4455
class Arrow a => ArrowZero a whereArrowZero226,6683
    zeroArrow :: a b czeroArrow227,6718
class ArrowZero a => ArrowPlus a whereArrowPlus234,6875
    (<+>) :: a b c -> a b c -> a b c<+>236,6975
class Arrow a => ArrowChoice a whereArrowChoice266,7875
    left :: a b c -> a (Either b d) (Either c d)left271,8063
    right :: a b c -> a (Either d b) (Either d c)right278,8276
    (+++) :: a b c -> a b' c' -> a (Either b b') (Either c c')+++287,8613
    (|||) :: a b d -> a c d -> a (Either b c) d|||299,9068
class Arrow a => ArrowApply a whereArrowApply345,10450
    app :: a (a b c, b) capp346,10486
newtype ArrowMonad a b = ArrowMonad (a () b)ArrowMonad359,10845
class Arrow a => ArrowLoop a whereArrowLoop418,12851
    loop :: a (b,d) (c,d) -> a b cloop419,12886
returnA :: Arrow a => a b breturnA207,6139
leftApp :: ArrowApply a => a b c -> a (Either b d) (Either c d)leftApp386,11750
(^>>) :: Arrow a => (b -> c) -> a c d -> a b d^>>211,6227
(^<<) :: Arrow a => (c -> d) -> a b c -> a b d^<<223,6613
(>>^) :: Arrow a => a b c -> (c -> d) -> a b d>>^215,6340
(<<^) :: Arrow a => a c d -> (b -> c) -> a b d<<^219,6476

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Category.hs,302
module Control.Category whereCategory21,678
class Category cat whereCategory37,1060
    id :: cat a aid39,1116
    (.) :: cat b c -> cat a b -> cat a c.42,1165
(>>>) :: Category cat => cat a b -> cat b c -> cat a c>>>78,1920
(<<<) :: Category cat => cat b c -> cat a b -> cat a c<<<74,1821

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Concurrent.hs,1433
module Control.Concurrent (Concurrent27,831
foreign import ccall unsafe rtsSupportsBoundThreads :: BoolrtsSupportsBoundThreads257,8169
foreign import ccall "forkOS_entry" forkOS_entry_reimportedforkOS_entry_reimported284,9227
foreign import ccall forkOS_createThreadforkOS_createThread292,9458
foreign import ccall unsafe "rtsSupportsBoundThreads" threaded :: Boolthreaded486,17348
  fdReady :: CInt -> CBool -> Int64 -> CBool -> IO CIntfdReady503,17817
withThread :: IO a -> IO awithThread488,17420
waitFd :: Fd -> Bool -> IO ()waitFd497,17628
unsafeResult :: Either SomeException a -> IO aunsafeResult390,13228
threadWaitWriteSTM :: Fd -> IO (STM (), IO ())threadWaitWriteSTM467,16453
threadWaitWrite :: Fd -> IO ()threadWaitWrite428,14869
threadWaitReadSTM :: Fd -> IO (STM (), IO ())threadWaitReadSTM443,15354
threadWaitRead :: Fd -> IO ()threadWaitRead403,13757
runInUnboundThread :: IO a -> IO arunInUnboundThread376,12810
runInBoundThread :: IO a -> IO arunInBoundThread345,11531
isCurrentThreadBound :: IO BoolisCurrentThreadBound330,10970
forkOS_entry :: StablePtr (IO ()) -> IO ()forkOS_entry287,9322
forkOSWithUnmask :: ((forall a . IO a -> IO a) -> IO ()) -> IO ThreadIdforkOSWithUnmask324,10685
forkOS :: IO () -> IO ThreadIdforkOS279,9126
forkFinally :: IO a -> (Either SomeException a -> IO ()) -> IO ThreadIdforkFinally198,5525
failNonThreaded :: IO afailNonThreaded295,9536

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Concurrent/Chan.hs,511
module Control.Concurrent.ChanChan23,788
data Chan aChan50,1537
type Stream a = MVar (ChItem a)Stream55,1698
data ChItem a = ChItem a _UPK_(Stream a)ChItem57,1731
writeList2Chan :: Chan a -> [a] -> IO ()writeList2Chan141,4822
writeChan :: Chan a -> a -> IO ()writeChan82,2664
readChan :: Chan a -> IO areadChan107,3630
newChan :: IO (Chan a)newChan69,2244
getChanContents :: Chan a -> IO [a]getChanContents132,4605
dupChan :: Chan a -> IO (Chan a)dupChan122,4271
PACK #-} !(x)_UPK_43,1233

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Concurrent/MVar.hs,664
module Control.Concurrent.MVarMVar128,5247
withMVarMasked :: MVar a -> (a -> IO b) -> IO bwithMVarMasked199,7131
withMVar :: MVar a -> (a -> IO b) -> IO bwithMVar184,6781
swapMVar :: MVar a -> a -> IO aswapMVar167,6186
modifyMVar_ :: MVar a -> (a -> IO a) -> IO ()modifyMVar_215,7621
modifyMVarMasked_ :: MVar a -> (a -> IO a) -> IO ()modifyMVarMasked_242,8351
modifyMVarMasked :: MVar a -> (a -> IO (a,b)) -> IO bmodifyMVarMasked256,8693
modifyMVar :: MVar a -> (a -> IO (a,b)) -> IO bmodifyMVar227,7963
mkWeakMVar :: MVar a -> IO () -> IO (Weak (MVar a))mkWeakMVar272,9221
addMVarFinalizer :: MVar a -> IO () -> IO ()addMVarFinalizer265,8984

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Concurrent/QSem.hs,327
module Control.Concurrent.QSemQSem18,533
newtype QSem = QSem (MVar (Int, [MVar ()], [MVar ()]))QSem41,1274
waitQSem :: QSem -> IO ()waitQSem71,2472
signalQSem :: QSem -> IO ()signalQSem95,3195
signal :: (Int,[MVar ()],[MVar ()]) -> IO (Int,[MVar ()],[MVar ()])signal118,3931
newQSem :: Int -> IO QSemnewQSem63,2233

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Concurrent/QSemN.hs,472
module Control.Concurrent.QSemNQSemN20,637
data QSemN = QSemN !(IORef (Int, [(Int, MVar ())], [(Int, MVar ())]))QSemN45,1495
data MaybeMV a = JustMV !(MVar a) | NothingMVMaybeMV73,2586
data MaybeMV a = JustMV !(MVar a) | NothingMVJustMV73,2586
data MaybeMV a = JustMV !(MVar a) | NothingMVNothingMV73,2586
waitQSemN :: QSemN -> Int -> IO ()waitQSemN76,2689
signalQSemN :: QSemN -> Int -> IO ()signalQSemN103,3649
newQSemN :: Int -> IO QSemNnewQSemN65,2341

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Exception.hs,308
module Control.Exception (Exception34,1285
data Handler a = forall e . Exception e => Handler (e -> IO a)Handler142,3709
catchesHandler :: [Handler a] -> SomeException -> IO acatchesHandler169,4761
catches :: IO a -> [Handler a] -> IO acatches166,4664
allowInterrupt :: IO ()allowInterrupt227,6864

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Exception/Base.hs,1909
module Control.Exception.Base (Base19,623
newtype PatternMatchFail = PatternMatchFail StringPatternMatchFail263,8699
newtype RecSelError = RecSelError StringRecSelError279,9219
newtype RecConError = RecConError StringRecConError293,9557
newtype RecUpdError = RecUpdError StringRecUpdError309,10050
newtype NoMethodError = NoMethodError StringNoMethodError323,10440
newtype TypeError = TypeError StringTypeError339,10850
data NonTermination = NonTerminationNonTermination354,11283
data NestedAtomically = NestedAtomicallyNestedAtomically367,11609
  absentError, typeErrortypeError380,11958
tryJust :: Exception e => (e -> Maybe b) -> IO a -> IO (Either b a)tryJust180,5572
try :: Exception e => IO a -> IO (Either e a)try174,5268
recSelError, recConError, runtimeError,runtimeError378,11858
recSelError, recConError, runtimeError,recSelError378,11858
recSelError, recConError, runtimeError,recConError378,11858
  nonExhaustiveGuardsError, patError, noMethodBindingError,patError379,11898
onException :: IO a -> IO b -> IO aonException191,5958
nonTermination :: SomeExceptionnonTermination395,12987
  nonExhaustiveGuardsError, patError, noMethodBindingError,nonExhaustiveGuardsError379,11898
  nonExhaustiveGuardsError, patError, noMethodBindingError,noMethodBindingError379,11898
nestedAtomically :: SomeExceptionnestedAtomically399,13088
mapException :: (Exception e1, Exception e2) => (e1 -> e2) -> a -> amapException159,4594
handleJust :: Exception e => (e -> Maybe b) -> (b -> IO a) -> IO a -> IO ahandleJust148,4203
handle     :: Exception e => (e -> IO a) -> IO a -> IO ahandle143,4037
finally :: IO a         -- ^ computation to run firstfinally232,7467
catchJustcatchJust127,3424
bracket_ :: IO a -> IO b -> IO c -> IO cbracket_244,7925
bracketOnErrorbracketOnError249,8163
bracketbracket217,6933
  absentError, typeErrorabsentError380,11958

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Monad.hs,1253
module Control.MonadMonad17,496
zipWithM_         :: (Applicative m) => (a -> b -> m c) -> [a] -> [b] -> m ()zipWithM_219,6149
zipWithM          :: (Applicative m) => (a -> b -> m c) -> [a] -> [b] -> m [c]zipWithM212,5791
unless            :: (Applicative f) => Bool -> f () -> f ()unless313,9305
replicateM_       :: (Applicative m) => Int -> m a -> m ()replicateM_300,8942
replicateM        :: (Applicative m) => Int -> m a -> m [a]replicateM288,8550
mfilter :: (MonadPlus m) => (a -> Bool) -> m a -> m amfilter354,10261
mapAndUnzipM      :: (Applicative m) => (a -> m (b,c)) -> [a] -> m ([b], [c])mapAndUnzipM205,5419
guard           :: (Alternative f) => Bool -> f ()guard132,2859
forever     :: (Applicative f) => f a -> f bforever193,4919
foldM_         :: (Foldable t, Monad m) => (b -> a -> m b) -> b -> t a -> m ()foldM_253,7227
foldM          :: (Foldable t, Monad m) => (b -> a -> m b) -> b -> t a -> m bfoldM246,6920
filterM          :: (Applicative m) => (a -> m Bool) -> [a] -> m [a]filterM139,3053
(>=>)       :: Monad m => (a -> m b) -> (b -> m c) -> (a -> m c)>=>152,3394
(<=<)       :: Monad m => (b -> m c) -> (a -> m b) -> (a -> m c)<=<162,3778
(<$!>) :: Monad m => (a -> b) -> m a -> m b<$!>324,9627

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Monad/Fail.hs,156
module Control.Monad.Fail ( MonadFail(fail) ) whereFail39,996
class Monad m => MonadFail m whereMonadFail65,1804
    fail :: String -> m afail66,1839

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Monad/Fix.hs,138
module Control.Monad.Fix (Fix22,743
class (Monad m) => MonadFix m whereMonadFix58,1895
        mfix :: (a -> m a) -> m amfix63,2181

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Monad/IO/Class.hs,136
module Control.Monad.IO.Class (Class16,532
class (Monad m) => MonadIO m whereMonadIO31,978
    liftIO :: IO a -> m aliftIO66,2111

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Monad/Instances.hs,162
module Control.Monad.Instances {-# DEPRECATED "This module now contains no instances and will be removed in the future" #-} -- deprecated in 7.8Instances18,545

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Monad/ST.hs,36
module Control.Monad.ST (ST23,894

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Monad/ST/Imp.hs,88
module Control.Monad.ST.Imp (Imp21,749
fixST :: (a -> ST s a) -> ST s afixST52,1802

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Monad/ST/Lazy.hs,43
module Control.Monad.ST.Lazy (Lazy19,689

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Monad/ST/Lazy/Imp.hs,685
module Control.Monad.ST.Lazy.Imp (Imp22,803
newtype ST s a = ST { unST :: State s -> (a, State s) }ST63,1988
newtype ST s a = ST { unST :: State s -> (a, State s) }unST63,1988
data State s = S# (State# s)State68,2246
data State s = S# (State# s)S#68,2246
unsafeInterleaveST :: ST s a -> ST s aunsafeInterleaveST252,8765
unsafeIOToST :: IO a -> ST s aunsafeIOToST255,8882
strictToLazyST :: ST.ST s a -> ST s astrictToLazyST229,7956
stToIO :: ST RealWorld a -> IO astToIO246,8595
runST :: (forall s. ST s a) -> arunST200,6894
noDup :: a -> anoDup102,4274
lazyToStrictST :: ST s a -> ST.ST s alazyToStrictST238,8192
fixST :: (a -> ST s a) -> ST s afixST206,7131

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Monad/ST/Lazy/Safe.hs,135
module Control.Monad.ST.Lazy.Safe {-# DEPRECATED "Safe is now the default, please use Control.Monad.ST.Lazy instead" #-} (Safe21,713

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Monad/ST/Lazy/Unsafe.hs,52
module Control.Monad.ST.Lazy.Unsafe (Unsafe21,707

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Monad/ST/Safe.hs,125
module Control.Monad.ST.Safe {-# DEPRECATED "Safe is now the default, please use Control.Monad.ST instead" #-} (Safe21,707

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Monad/ST/Strict.hs,47
module Control.Monad.ST.Strict (Strict17,559

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Monad/ST/Unsafe.hs,47
module Control.Monad.ST.Unsafe (Unsafe21,701

/home/effectfully/.fastdogs/base-4.15.1.0/Control/Monad/Zip.hs,259
module Control.Monad.Zip whereZip19,611
class Monad m => MonadZip m whereMonadZip43,1214
    mzip :: m a -> m b -> m (a,b)mzip46,1285
    mzipWith :: (a -> b -> c) -> m a -> m b -> m cmzipWith49,1344
    munzip :: m (a,b) -> (m a, m b)munzip52,1450

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Bifoldable.hs,2726
module Data.BifoldableBifoldable16,472
class Bifoldable p whereBifoldable108,2738
  bifold :: Monoid m => p m m -> mbifold135,3274
  bifoldMap :: Monoid m => (a -> m) -> (b -> m) -> p a b -> mbifoldMap157,3826
  bifoldr :: (a -> c -> c) -> (b -> c -> c) -> c -> p a b -> cbifoldr186,4586
  bifoldl :: (c -> a -> c) -> (c -> b -> c) -> c -> p a b -> cbifoldl220,5649
bitraverse_ :: (Bifoldable t, Applicative f)bitraverse_414,10816
bisum :: (Bifoldable t, Num a) => t a a -> abisum701,16618
bisequence_ :: (Bifoldable t, Applicative f) => t (f a) (f b) -> f ()bisequence_479,12431
bisequenceA_ :: (Bifoldable t, Applicative f) => t (f a) (f b) -> f ()bisequenceA_457,11902
biproduct :: (Bifoldable t, Num a) => t a a -> abiproduct727,17077
bior :: Bifoldable t => t Bool Bool -> Boolbior837,19503
binull :: Bifoldable t => t a b -> Boolbinull542,13586
binotElem :: (Bifoldable t, Eq a) => a -> t a a-> BoolbinotElem986,22694
bimsum :: (Bifoldable t, Alternative f) => t (f a) (f a) -> f abimsum507,13010
biminimumBy :: Bifoldable t => (a -> a -> Ordering) -> t a a -> abiminimumBy955,22108
biminimum :: forall t a. (Bifoldable t, Ord a) => t a a -> abiminimum674,16084
bimaximumBy :: Bifoldable t => (a -> a -> Ordering) -> t a a -> abimaximumBy927,21438
bimaximum :: forall t a. (Bifoldable t, Ord a) => t a a -> abimaximum645,15455
bimapM_ :: (Bifoldable t, Applicative f)bimapM_443,11573
bilength :: Bifoldable t => t a b -> Intbilength571,14083
bifor_ :: (Bifoldable t, Applicative f)bifor_436,11395
biforM_ :: (Bifoldable t, Applicative f)biforM_450,11737
bifoldrM :: (Bifoldable t, Monad m)bifoldrM311,8005
bifoldr1 :: Bifoldable t => (a -> a -> a) -> t a a -> abifoldr1300,7648
bifoldr' :: Bifoldable t => (a -> c -> c) -> (b -> c -> c) -> c -> t a b -> cbifoldr'265,6915
bifoldlM :: (Bifoldable t, Monad m)bifoldlM389,10107
bifoldl1 :: Bifoldable t => (a -> a -> a) -> t a a -> abifoldl1361,9349
bifoldl':: Bifoldable t => (a -> b -> a) -> (a -> c -> a) -> a -> t b c -> abifoldl'326,8617
bifind :: Bifoldable t => (a -> Bool) -> t a a -> Maybe abifind1012,23249
bielem :: (Bifoldable t, Eq a) => a -> t a a -> Boolbielem599,14545
biconcatMap :: Bifoldable t => (a -> [c]) -> (b -> [c]) -> t a b -> [c]biconcatMap747,17592
biconcat :: Bifoldable t => t [a] [a] -> [a]biconcat618,14953
biasum :: (Bifoldable t, Alternative f) => t (f a) (f a) -> f abiasum501,12863
biany :: Bifoldable t => (a -> Bool) -> (b -> Bool) -> t a b -> Boolbiany871,20176
biand :: Bifoldable t => t Bool Bool -> Boolbiand792,18557
biall :: Bifoldable t => (a -> Bool) -> (b -> Bool) -> t a b -> Boolbiall902,20842
biList :: Bifoldable t => t a a -> [a]biList523,13299

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Bifunctor.hs,258
module Data.BifunctorBifunctor16,455
class Bifunctor p whereBifunctor68,1847
    bimap :: (a -> b) -> (c -> d) -> p a c -> p b dbimap84,2232
    first :: (a -> b) -> p a c -> p b cfirst98,2554
    second :: (b -> c) -> p a b -> p a csecond112,2846

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Bitraversable.hs,955
module Data.BitraversableBitraversable16,482
class (Bifunctor t, Bifoldable t) => Bitraversable t whereBitraversable95,2871
  bitraverse :: Applicative f => (a -> f c) -> (b -> f d) -> t a b -> f (t c d)bitraverse124,3739
bisequenceA :: (Bitraversable t, Applicative f) => t (f a) (f b) -> f (t a b)bisequenceA130,3914
bisequence :: (Bitraversable t, Applicative f) => t (f a) (f b) -> f (t a b)bisequence160,4676
bimapM :: (Bitraversable t, Applicative f)bimapM136,4069
bimapDefault :: forall t a b c d . Bitraversable tbimapDefault278,8240
bimapAccumR :: Bitraversable t => (a -> b -> (a, c)) -> (a -> d -> (a, e))bimapAccumR266,7832
bimapAccumL :: Bitraversable t => (a -> b -> (a, c)) -> (a -> d -> (a, e))bimapAccumL248,7185
biforM :: (Bitraversable t, Applicative f)biforM231,6625
bifor :: (Bitraversable t, Applicative f)bifor224,6449
bifoldMapDefault :: forall t m a b . (Bitraversable t, Monoid m)bifoldMapDefault293,8755

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Bits.hs,1857
module Data.Bits (Bits22,805
class Eq a => Bits a whereBits76,1873
    (.&.) :: a -> a -> a.&.83,2140
    (.|.) :: a -> a -> a.|.86,2190
    xor :: a -> a -> axor89,2241
    complement        :: a -> acomplement92,2313
    shift             :: a -> Int -> ashift103,2790
    rotate            :: a -> Int -> arotate117,3323
    zeroBits :: azeroBits151,4737
    bit               :: Int -> abit160,5002
    setBit            :: a -> Int -> asetBit163,5092
    clearBit          :: a -> Int -> aclearBit166,5202
    complementBit     :: a -> Int -> acomplementBit169,5308
    testBit           :: a -> Int -> BooltestBit179,5595
    bitSizeMaybe      :: a -> Maybe IntbitSizeMaybe187,5875
    bitSize           :: a -> IntbitSize196,6240
    isSigned          :: a -> BoolisSigned201,6461
    shiftL            :: a -> Int -> ashiftL217,7082
    unsafeShiftL            :: a -> Int -> aunsafeShiftL228,7466
    shiftR            :: a -> Int -> ashiftR244,8205
    unsafeShiftR            :: a -> Int -> aunsafeShiftR258,8727
    rotateL           :: a -> Int -> arotateL268,9112
    rotateR           :: a -> Int -> arotateR278,9482
    popCount          :: a -> IntpopCount289,9841
class Bits b => FiniteBits b whereFiniteBits294,9975
    finiteBitSize :: b -> IntfiniteBitSize305,10369
    countLeadingZeros :: b -> IntcountLeadingZeros325,11001
    countTrailingZeros :: b -> IntcountTrailingZeros355,11984
toIntegralSized :: (Integral a, Integral b, Bits a, Bits b) => a -> Maybe btoIntegralSized616,20557
testBitDefault ::  (Bits a, Num a) => a -> Int -> BooltestBitDefault383,12655
popCountDefault :: (Bits a, Num a) => a -> IntpopCountDefault393,12981
isBitSubType :: (Bits a, Bits b) => a -> b -> BoolisBitSubType647,21658
bitDefault :: (Bits a, Num a) => Int -> abitDefault374,12431

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Bool.hs,72
module Data.Bool (Bool18,523
bool :: a -> a -> Bool -> abool59,1337

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Char.hs,248
module Data.CharChar18,520
isSeparator :: Char -> BoolisSeparator286,7320
isNumber :: Char -> BoolisNumber241,6229
isMark :: Char -> BoolisMark198,5160
isLetter :: Char -> BoolisLetter154,3974
digitToInt :: Char -> IntdigitToInt95,2457

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Coerce.hs,33
module Data.CoerceCoerce23,680

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Complex.hs,630
module Data.ComplexComplex21,606
data Complex aComplex64,1830
  = !a :+ !a    -- ^ forms a complex number from its real and imaginary:+65,1845
realPart :: Complex a -> arealPart82,2584
polar            :: (RealFloat a) => Complex a -> (a,a)polar110,3704
phase :: (RealFloat a) => Complex a -> aphase125,4374
mkPolar          :: Floating a => a -> a -> Complex amkPolar96,3066
magnitude :: (RealFloat a) => Complex a -> amagnitude115,3913
imagPart :: Complex a -> aimagPart86,2689
conjugate        :: Num a => Complex a -> Complex aconjugate91,2845
cis              :: Floating a => a -> Complex acis102,3312

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Data.hs,5505
module Data.Data (Data39,1538
class Typeable a => Data a whereData230,8631
  gfoldl  :: (forall d b. Data d => c (d -> b) -> d -> c b)gfoldl239,8983
  gunfold :: (forall b r. Data b => c (b -> r) -> c r)gunfold260,9939
  toConstr   :: a -> ConstrtoConstr269,10296
  dataTypeOf  :: a -> DataTypedataTypeOf273,10372
  dataCast1 :: Typeable tdataCast1295,10933
  dataCast2 :: Typeable tdataCast2312,11390
  gmapT :: (forall b. Data b => b -> b) -> a -> agmapT331,12019
  gmapQl :: forall r r'. (r -> r' -> r) -> r -> (forall d. Data d => d -> r') -> a -> rgmapQl344,12487
  gmapQr :: forall r r'. (r' -> r -> r) -> r -> (forall d. Data d => d -> r') -> a -> rgmapQr353,12834
  gmapQ :: (forall d. Data d => d -> u) -> a -> [u]gmapQ363,13293
  gmapQi :: forall u. Int -> (forall d. Data d => d -> u) -> a -> ugmapQi368,13445
  gmapM :: forall m. Monad m => (forall d. Data d => d -> m d) -> a -> m agmapM382,14040
  gmapMp :: forall m. MonadPlus m => (forall d. Data d => d -> m d) -> a -> m agmapMp397,14537
  gmapMo :: forall m. MonadPlus m => (forall d. Data d => d -> m d) -> a -> m agmapMo420,15257
data Qi q a = Qi Int (Maybe q)Qi447,16104
newtype Qr r a = Qr { unQr  :: r -> r }Qr451,16192
newtype Qr r a = Qr { unQr  :: r -> r }unQr451,16192
newtype Mp m x = Mp { unMp :: m (x, Bool) }Mp455,16289
newtype Mp m x = Mp { unMp :: m (x, Bool) }unMp455,16289
data DataType = DataTypeDataType511,17688
                        { tycon   :: Stringtycon512,17713
                        , datarep :: DataRepdatarep513,17757
data Constr = ConstrConstr521,18060
                        { conrep    :: ConstrRepconrep522,18081
                        , constring :: Stringconstring523,18130
                        , confields :: [String] -- for AlgRep onlyconfields524,18176
                        , confixity :: Fixity   -- for AlgRep onlyconfixity525,18243
                        , datatype  :: DataTypedatatype526,18310
data DataRep = AlgRep [Constr]DataRep542,18610
data DataRep = AlgRep [Constr]AlgRep542,18610
             | IntRepIntRep543,18641
             | FloatRepFloatRep544,18663
             | CharRepCharRep545,18687
             | NoRepNoRep546,18710
data ConstrRep = AlgConstr    ConIndexConstrRep555,18971
data ConstrRep = AlgConstr    ConIndexAlgConstr555,18971
               | IntConstr    IntegerIntConstr556,19010
               | FloatConstr  RationalFloatConstr557,19048
               | CharConstr   CharCharConstr558,19087
type ConIndex = IntConIndex567,19366
data Fixity = PrefixFixity571,19416
data Fixity = PrefixPrefix571,19416
            | Infix     -- Later: add associativity and precedenceInfix572,19437
wordType :: DataTypewordType1031,34932
word8Type :: DataTypeword8Type1046,35435
word64Type :: DataTypeword64Type1091,36982
word32Type :: DataTypeword32Type1076,36464
word16Type :: DataTypeword16Type1061,35946
tyconUQname :: String -> StringtyconUQname847,28747
tyconModule :: String -> StringtyconModule854,28974
showConstr :: Constr -> StringshowConstr679,22659
repConstr :: DataType -> ConstrRep -> ConstrrepConstr608,20307
readConstr :: DataType -> String -> Maybe ConstrreadConstr684,22754
ratioDataType :: DataTyperatioDataType1109,37574
ratioConstr :: ConstrratioConstr1106,37500
nilConstr :: ConstrnilConstr1127,38240
naturalType :: DataTypenaturalType956,32369
mkRealConstr :: (Real a, Show a) => DataType -> a -> ConstrmkRealConstr799,27013
mkPrimType :: DataRep -> String -> DataTypemkPrimType775,25977
mkPrimCon :: DataType -> String -> ConstrRep -> ConstrmkPrimCon783,26200
mkNoRepType :: String -> DataTypemkNoRepType823,28110
mkIntegralConstr :: (Integral a, Show a) => DataType -> a -> ConstrmkIntegralConstr792,26601
mkIntType :: String -> DataTypemkIntType760,25668
mkFloatType :: String -> DataTypemkFloatType765,25765
mkDataType :: String -> [Constr] -> DataTypemkDataType627,21009
mkConstr :: DataType -> String -> [String] -> Fixity -> ConstrmkConstr635,21227
mkCharType :: String -> DataTypemkCharType770,25867
mkCharConstr :: DataType -> Char -> ConstrmkCharConstr807,27453
maxConstrIndex :: DataType -> ConIndexmaxConstrIndex743,25022
listDataType :: DataTypelistDataType1132,38386
isNorepType :: DataType -> BoolisNorepType830,28319
isAlgType :: DataType -> BoolisAlgType718,23931
integerType :: DataTypeintegerType939,31769
intType :: DataTypeintType924,31274
int8Type :: DataTypeint8Type971,32899
int64Type :: DataTypeint64Type1016,34422
int32Type :: DataTypeint32Type1001,33912
int16Type :: DataTypeint16Type986,33402
indexConstr :: DataType -> ConIndex -> ConstrindexConstr725,24127
fromConstrM :: forall m a. (Monad m, Data a)fromConstrM486,17060
fromConstrB :: Data afromConstrB472,16724
fromConstr :: Data a => Constr -> afromConstr467,16555
floatType :: DataTypefloatType894,30261
doubleType :: DataTypedoubleType909,30764
dataTypeRep :: DataType -> DataRepdataTypeRep593,19998
dataTypeName :: DataType -> StringdataTypeName587,19891
dataTypeConstrs :: DataType -> [Constr]dataTypeConstrs650,21701
constrType :: Constr -> DataTypeconstrType598,20097
constrRep :: Constr -> ConstrRepconstrRep603,20204
constrIndex :: Constr -> ConIndexconstrIndex734,24599
constrFixity :: Constr -> FixityconstrFixity666,22329
constrFields :: Constr -> [String]constrFields661,22229
consConstr :: ConstrconsConstr1129,38312
charType :: DataTypecharType879,29776

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Dynamic.hs,372
module Data.DynamicDynamic28,921
data Dynamic whereDynamic74,1961
toDyn :: Typeable a => a -> DynamictoDyn106,3102
fromDynamicfromDynamic123,3844
fromDyn :: Typeable afromDyn111,3285
dynTypeRep :: Dynamic -> SomeTypeRepdynTypeRep150,4911
dynApply :: Dynamic -> Dynamic -> Maybe DynamicdynApply135,4348
dynApp :: Dynamic -> Dynamic -> DynamicdynApp143,4595

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Either.hs,639
module Data.Either (Either21,676
data  Either a b  =  Left a | Right bEither125,3215
data  Either a b  =  Left a | Right bLeft125,3215
data  Either a b  =  Left a | Right bRight125,3215
rights   :: [Either a b] -> [b]rights208,5525
partitionEithers :: [Either a b] -> ([a],[b])partitionEithers232,6331
lefts   :: [Either a b] -> [a]lefts193,5122
isRight :: Either a b -> BoolisRight297,8076
isLeft :: Either a b -> BoolisLeft266,7263
fromRight :: b -> Either a b -> bfromRight331,8669
fromLeft :: a -> Either a b -> afromLeft314,8371
either                  :: (a -> c) -> (b -> c) -> Either a b -> ceither177,4712

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Eq.hs,27
module Data.Eq (Eq18,486

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Fixed.hs,1376
module Data.FixedFixed26,917
newtype Fixed (a :: k) = MkFixed IntegerFixed64,1830
newtype Fixed (a :: k) = MkFixed IntegerMkFixed64,1830
class HasResolution (a :: k) whereHasResolution83,2490
    resolution :: p a -> Integerresolution84,2525
data E0E0245,8269
type Uni = Fixed E0Uni251,8404
data E1E1253,8425
type Deci = Fixed E1Deci259,8538
data E2E2261,8560
type Centi = Fixed E2Centi267,8712
data E3E3269,8735
type Milli = Fixed E3Milli275,8852
data E6E6277,8875
type Micro = Fixed E6Micro283,8995
data E9E9285,9018
type Nano = Fixed E9Nano291,9147
data E12E12293,9169
type Pico = Fixed E12Pico299,9304
withType :: (Proxy a -> f a) -> f awithType90,2732
withResolution :: (HasResolution a) => (Integer -> f a) -> f awithResolution93,2794
withDot :: String -> StringwithDot207,6650
tyFixed :: DataTypetyFixed71,2126
showIntegerZeros :: Bool -> Int -> Integer -> StringshowIntegerZeros201,6404
showFixed :: (HasResolution a) => Bool -> Fixed a -> StringshowFixed212,6766
mod' :: (Real a) => a -> a -> amod'59,1673
divMod' :: (Real a,Integral b) => a -> a -> (b,a)divMod'54,1501
div' :: (Real a,Integral b) => a -> a -> bdiv'50,1348
convertFixed :: forall a . HasResolution a => Lexeme -> ReadPrec (Fixed a)convertFixed234,7747
conMkFixed :: ConstrconMkFixed73,2199
chopZeros :: Integer -> StringchopZeros195,6254

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Foldable.hs,2458
module Data.Foldable (Foldable23,712
class Foldable t whereFoldable160,4000
    fold :: Monoid m => t m -> mfold191,5015
    foldMap :: Monoid m => (a -> m) -> t a -> mfoldMap224,6257
    foldMap' :: Monoid m => (a -> m) -> t a -> mfoldMap'252,7441
    foldr :: (a -> b -> b) -> b -> t a -> bfoldr316,9749
    foldr' :: (a -> b -> b) -> b -> t a -> bfoldr'323,9987
    foldl :: (b -> a -> b) -> b -> t a -> bfoldl376,12209
    foldl' :: (b -> a -> b) -> b -> t a -> bfoldl'395,13033
    foldr1 :: (a -> a -> a) -> t a -> afoldr1429,13896
    foldl1 :: (a -> a -> a) -> t a -> afoldl1469,14988
    toList :: t a -> [a]toList503,15878
    null :: t a -> Boolnull531,16737
    length :: t a -> Intlength553,17347
    elem :: Eq a => a -> t a -> Boolelem584,18047
    maximum :: forall a . Ord a => t a -> amaximum608,18760
    minimum :: forall a . Ord a => t a -> aminimum634,19621
    sum :: Num a => t a -> asum661,20209
    product :: Num a => t a -> aproduct688,20731
traverse_ :: (Foldable t, Applicative f) => (a -> f b) -> t a -> f ()traverse_1065,31100
sequence_ :: (Foldable t, Monad m) => t (m a) -> m ()sequence_1140,33423
sequenceA_ :: (Foldable t, Applicative f) => t (f a) -> f ()sequenceA_1127,32961
or :: Foldable t => t Bool -> Boolor1258,36159
notElem :: (Foldable t, Eq a) => a -> t a -> BoolnotElem1374,38645
msum :: (Foldable t, MonadPlus m) => t (m a) -> m amsum1164,34088
minimumBy :: Foldable t => (a -> a -> Ordering) -> t a -> aminimumBy1340,37901
maximumBy :: Foldable t => (a -> a -> Ordering) -> t a -> amaximumBy1318,37303
mapM_ :: (Foldable t, Monad m) => (a -> m b) -> t a -> m ()mapM_1097,32062
for_ :: (Foldable t, Applicative f) => t a -> (a -> f b) -> f ()for_1086,31665
forM_ :: (Foldable t, Monad m) => t a -> (a -> m b) -> m ()forM_1108,32461
foldrM :: (Foldable t, Monad m) => (a -> b -> m b) -> b -> t a -> m bfoldrM988,28586
foldlM :: (Foldable t, Monad m) => (b -> a -> m b) -> b -> t a -> m bfoldlM1045,30461
find :: Foldable t => (a -> Bool) -> t a -> Maybe afind1390,39027
concatMap :: Foldable t => (a -> [b]) -> t a -> [b]concatMap1199,34853
concat :: Foldable t => t [a] -> [a]concat1183,34428
asum :: (Foldable t, Alternative f) => t (f a) -> f aasum1156,33855
any :: Foldable t => (a -> Bool) -> t a -> Boolany1281,36535
and :: Foldable t => t Bool -> Booland1230,35587
all :: Foldable t => (a -> Bool) -> t a -> Boolall1304,36930

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Function.hs,165
module Data.FunctionFunction19,589
on :: (b -> b -> c) -> (a -> b) -> a -> a -> con68,2069
fix :: (a -> a) -> afix50,1461
(&) :: a -> (a -> b) -> b&119,3160

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Functor.hs,247
module Data.FunctorFunctor40,1481
void :: Functor f => f a -> f ()void202,4906
(<&>) :: Functor f => f a -> (a -> b) -> f b<&>121,3107
(<$>) :: Functor f => (a -> b) -> f a -> f b<$>96,2729
($>) :: Functor f => f a -> b -> f b$>159,3996

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Functor/Classes.hs,3999
module Data.Functor.Classes (Classes37,1354
class Eq1 f whereEq185,2685
    liftEq :: (a -> b -> Bool) -> f a -> f b -> BoolliftEq94,3028
class (Eq1 f) => Ord1 f whereOrd1105,3317
    liftCompare :: (a -> b -> Ordering) -> f a -> f b -> OrderingliftCompare114,3677
class Read1 f whereRead1138,4494
    liftReadsPrec :: (Int -> ReadS a) -> ReadS [a] -> Int -> ReadS (f a)liftReadsPrec145,4742
    liftReadList :: (Int -> ReadS a) -> ReadS [a] -> ReadS [f a]liftReadList155,5197
    liftReadPrec :: ReadPrec a -> ReadPrec [a] -> ReadPrec (f a)liftReadPrec163,5561
    liftReadListPrec :: ReadPrec a -> ReadPrec [a] -> ReadPrec [f a]liftReadListPrec175,6092
class Show1 f whereShow1213,7483
    liftShowsPrec :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->liftShowsPrec218,7681
    liftShowList :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->liftShowList227,8044
class Eq2 f whereEq2241,8488
    liftEq2 :: (a -> b -> Bool) -> (c -> d -> Bool) -> f a c -> f b d -> BoolliftEq2250,8829
class (Eq2 f) => Ord2 f whereOrd2261,9160
    liftCompare2 :: (a -> b -> Ordering) -> (c -> d -> Ordering) ->liftCompare2270,9520
class Read2 f whereRead2294,10399
    liftReadsPrec2 :: (Int -> ReadS a) -> ReadS [a] ->liftReadsPrec2301,10650
    liftReadList2 :: (Int -> ReadS a) -> ReadS [a] ->liftReadList2313,11234
    liftReadPrec2 :: ReadPrec a -> ReadPrec [a] ->liftReadPrec2323,11733
    liftReadListPrec2 :: ReadPrec a -> ReadPrec [a] ->liftReadListPrec2337,12389
class Show2 f whereShow2377,14085
    liftShowsPrec2 :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->liftShowsPrec2382,14284
    liftShowList2 :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->liftShowList2391,14692
showsUnaryWith :: (Int -> a -> ShowS) -> String -> Int -> a -> ShowSshowsUnaryWith754,25538
showsUnary1 :: (Show1 f, Show a) => String -> Int -> f a -> ShowSshowsUnary1814,28041
showsUnary :: (Show a) => String -> Int -> a -> ShowSshowsUnary805,27638
showsPrec2 :: (Show2 f, Show a, Show b) => Int -> f a b -> ShowSshowsPrec2399,15008
showsPrec1 :: (Show1 f, Show a) => Int -> f a -> ShowSshowsPrec1235,8305
showsBinaryWith :: (Int -> a -> ShowS) -> (Int -> b -> ShowS) ->showsBinaryWith763,25903
showsBinary1 :: (Show1 f, Show1 g, Show a) =>showsBinary1825,28482
readsUnaryWith :: (Int -> ReadS a) -> String -> (a -> t) -> String -> ReadS treadsUnaryWith712,24107
readsUnary1 :: (Read1 f, Read a) => String -> (f a -> t) -> String -> ReadS treadsUnary1784,26764
readsUnary :: (Read a) => String -> (a -> t) -> String -> ReadS treadsUnary775,26388
readsPrec2 :: (Read2 f, Read a, Read b) => Int -> ReadS (f a b)readsPrec2346,12785
readsPrec1 :: (Read1 f, Read a) => Int -> ReadS (f a)readsPrec1183,6388
readsData :: (String -> ReadS a) -> Int -> ReadS areadsData694,23398
readsBinaryWith :: (Int -> ReadS a) -> (Int -> ReadS b) ->readsBinaryWith731,24749
readsBinary1 :: (Read1 f, Read1 g, Read a) =>readsBinary1794,27165
readUnaryWith :: ReadPrec a -> String -> (a -> t) -> ReadPrec treadUnaryWith720,24411
readPrec2 :: (Read2 f, Read a, Read b) => ReadPrec (f a b)readPrec2352,13011
readPrec1 :: (Read1 f, Read a) => ReadPrec (f a)readPrec1190,6607
readData :: ReadPrec a -> ReadPrec areadData705,23883
readBinaryWith :: ReadPrec a -> ReadPrec b ->readBinaryWith741,25146
liftReadListPrecDefault :: Read1 f => ReadPrec a -> ReadPrec [a]liftReadListPrecDefault206,7235
liftReadListPrec2Default :: Read2 f => ReadPrec a -> ReadPrec [a] ->liftReadListPrec2Default370,13801
liftReadListDefault :: Read1 f => (Int -> ReadS a) -> ReadS [a] -> ReadS [f a]liftReadListDefault198,6913
liftReadList2Default :: Read2 f => (Int -> ReadS a) -> ReadS [a] ->liftReadList2Default360,13353
eq2 :: (Eq2 f, Eq a, Eq b) => f a b -> f a b -> Booleq2255,9000
eq1 :: (Eq1 f, Eq a) => f a -> f a -> Booleq199,3174
compare2 :: (Ord2 f, Ord a, Ord b) => f a b -> f a b -> Orderingcompare2276,9717
compare1 :: (Ord1 f, Ord a) => f a -> f a -> Orderingcompare1119,3837

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Functor/Compose.hs,196
module Data.Functor.Compose (Compose23,660
newtype Compose f g a = Compose { getCompose :: f (g a) }Compose41,1175
newtype Compose f g a = Compose { getCompose :: f (g a) }getCompose41,1175

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Functor/Const.hs,176
module Data.Functor.Const (Const(..)) whereConst22,598
newtype Const a b = Const { getConst :: a }Const39,1112
newtype Const a b = Const { getConst :: a }getConst39,1112

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Functor/Contravariant.hs,1351
module Data.Functor.Contravariant (Contravariant27,917
class Contravariant f whereContravariant100,3060
  contramap :: (a' -> a) -> (f a -> f a')contramap101,3088
  (>$) :: b -> f b -> f a>$106,3314
newtype Predicate a = Predicate { getPredicate :: a -> Bool }Predicate188,6236
newtype Predicate a = Predicate { getPredicate :: a -> Bool }getPredicate188,6236
newtype Comparison a = Comparison { getComparison :: a -> a -> Ordering }Comparison230,7533
newtype Comparison a = Comparison { getComparison :: a -> a -> Ordering }getComparison230,7533
newtype Equivalence a = Equivalence { getEquivalence :: a -> a -> Bool }Equivalence275,9119
newtype Equivalence a = Equivalence { getEquivalence :: a -> a -> Bool }getEquivalence275,9119
newtype Op a b = Op { getOp :: b -> a }Op315,10512
newtype Op a b = Op { getOp :: b -> a }getOp315,10512
phantom :: (Functor f, Contravariant f) => f a -> f bphantom120,3739
defaultEquivalence :: Eq a => Equivalence adefaultEquivalence308,10273
defaultComparison :: Ord a => Comparison adefaultComparison260,8561
comparisonEquivalence :: Comparison a -> Equivalence acomparisonEquivalence311,10356
(>$<) :: Contravariant f => (a -> b) -> (f b -> f a)>$<130,4000
(>$$<) :: Contravariant f => f b -> (a -> b) -> f a>$$<134,4145
($<) :: Contravariant f => f b -> b -> f a$<126,3894

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Functor/Identity.hs,187
module Data.Functor.Identity (Identity34,1192
newtype Identity a = Identity { runIdentity :: a }Identity59,1947
newtype Identity a = Identity { runIdentity :: a }runIdentity59,1947

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Functor/Product.hs,148
module Data.Functor.Product (Product20,567
data Product f g a = Pair (f a) (g a)Product34,967
data Product f g a = Pair (f a) (g a)Pair34,967

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Functor/Sum.hs,187
module Data.Functor.Sum (Sum20,559
data Sum f g a = InL (f a) | InR (g a)Sum31,832
data Sum f g a = InL (f a) | InR (g a)InL31,832
data Sum f g a = InL (f a) | InR (g a)InR31,832

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Functor/Utils.hs,620
module Data.Functor.Utils whereUtils10,414
newtype Max a = Max {getMax :: Maybe a}Max22,981
newtype Max a = Max {getMax :: Maybe a}getMax22,981
newtype Min a = Min {getMin :: Maybe a}Min23,1021
newtype Min a = Min {getMin :: Maybe a}getMin23,1021
newtype StateL s a = StateL { runStateL :: s -> (s, a) }StateL52,1736
newtype StateL s a = StateL { runStateL :: s -> (s, a) }runStateL52,1736
newtype StateR s a = StateR { runStateR :: s -> (s, a) }StateR71,2307
newtype StateR s a = StateR { runStateR :: s -> (s, a) }runStateR71,2307
(#.) :: Coercible b c => (b -> c) -> (a -> b) -> (a -> c)#.90,2869

/home/effectfully/.fastdogs/base-4.15.1.0/Data/IORef.hs,383
module Data.IORefIORef19,578
modifyIORef' :: IORef a -> (a -> a) -> IO ()modifyIORef'68,2052
modifyIORef :: IORef a -> (a -> a) -> IO ()modifyIORef62,1893
mkWeakIORef :: IORef a -> IO () -> IO (Weak (IORef a))mkWeakIORef45,1152
atomicWriteIORef :: IORef a -> a -> IO ()atomicWriteIORef102,3282
atomicModifyIORef :: IORef a -> (a -> (a,b)) -> IO batomicModifyIORef93,3010

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Int.hs,27
module Data.IntInt18,505

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Ix.hs,25
module Data.IxIx19,628

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Kind.hs,61
module Data.Kind ( Type, Constraint, FUN ) whereKind17,455

/home/effectfully/.fastdogs/base-4.15.1.0/Data/List.hs,102
module Data.ListList18,499
isSubsequenceOf :: (Eq a) => [a] -> [a] -> BoolisSubsequenceOf240,4405

/home/effectfully/.fastdogs/base-4.15.1.0/Data/List/NonEmpty.hs,3683
module Data.List.NonEmpty (NonEmpty25,896
zipWith :: (a -> b -> c) -> NonEmpty a -> NonEmpty b -> NonEmpty czipWith415,16125
zip :: NonEmpty a -> NonEmpty b -> NonEmpty (a,b)zip409,15859
xor :: NonEmpty Bool -> Boolxor120,5582
unzip :: Functor f => f (a,b) -> (f a, f b)unzip419,16321
unfoldr :: (a -> (b, Maybe a)) -> a -> NonEmpty bunfoldr149,6674
unfold :: (a -> (b, Maybe a)) -> a -> NonEmpty bunfold129,5958
uncons :: NonEmpty a -> (a, Maybe (NonEmpty a))uncons144,6496
transpose :: NonEmpty (NonEmpty a) -> NonEmpty (NonEmpty a)transpose439,17189
toList :: NonEmpty a -> [a]toList198,7943
takeWhile :: (a -> Bool) -> NonEmpty a -> [a]takeWhile309,11856
take :: Int -> NonEmpty a -> [a]take291,11202
tails   :: Foldable f => f a -> NonEmpty [a]tails219,8647
tail :: NonEmpty a -> [a]tail161,6992
splitAt :: Int -> NonEmpty a -> ([a],[a])splitAt304,11669
span :: (a -> Bool) -> NonEmpty a -> ([a], [a])span322,12341
sortWith :: Ord o => (a -> o) -> NonEmpty a -> NonEmpty asortWith451,17588
sortBy :: (a -> a -> Ordering) -> NonEmpty a -> NonEmpty asortBy445,17416
sort :: Ord a => NonEmpty a -> NonEmpty asort187,7602
some1 :: Alternative f => f a -> f (NonEmpty a)some1229,9112
singleton :: a -> NonEmpty asingleton175,7348
scanr1 :: (a -> a -> a) -> NonEmpty a -> NonEmpty ascanr1257,10118
scanr   :: Foldable f => (a -> b -> b) -> b -> f a -> NonEmpty bscanr247,9665
scanl1 :: (a -> a -> a) -> NonEmpty a -> NonEmpty ascanl1253,9939
scanl   :: Foldable f => (b -> a -> b) -> b -> f a -> NonEmpty bscanl240,9434
reverse :: NonEmpty a -> NonEmpty areverse282,10936
repeat :: a -> NonEmpty arepeat287,11086
partition :: (a -> Bool) -> NonEmpty a -> ([a], [a])partition339,13040
nubBy :: (a -> a -> Bool) -> NonEmpty a -> NonEmpty anubBy433,16885
nub :: Eq a => NonEmpty a -> NonEmpty anub427,16679
nonEmpty :: [a] -> Maybe (NonEmpty a)nonEmpty138,6291
map :: (a -> b) -> NonEmpty a -> NonEmpty bmap209,8293
lift :: Foldable f => ([a] -> [b]) -> f a -> NonEmpty blift205,8150
length :: NonEmpty a -> Intlength116,5444
last :: NonEmpty a -> alast165,7085
iterate :: (a -> a) -> a -> NonEmpty aiterate272,10632
isPrefixOf :: Eq a => [a] -> NonEmpty a -> BoolisPrefixOf392,15265
intersperse :: a -> NonEmpty a -> NonEmpty aintersperse263,10354
insert  :: (Foldable f, Ord a) => a -> f a -> NonEmpty ainsert225,8950
inits :: Foldable f => f a -> NonEmpty [a]inits214,8468
init :: NonEmpty a -> [a]init169,7210
head :: NonEmpty a -> ahead157,6896
groupWith1 :: (Eq b) => (a -> b) -> NonEmpty a -> NonEmpty (NonEmpty a)groupWith1383,14859
groupWith :: (Foldable f, Eq b) => (a -> b) -> f a -> [NonEmpty a]groupWith363,14000
groupBy1 :: (a -> a -> Bool) -> NonEmpty a -> NonEmpty (NonEmpty a)groupBy1378,14638
groupBy :: Foldable f => (a -> a -> Bool) -> f a -> [NonEmpty a]groupBy354,13675
groupAllWith1 :: (Ord b) => (a -> b) -> NonEmpty a -> NonEmpty (NonEmpty a)groupAllWith1387,15046
groupAllWith :: (Ord b) => (a -> b) -> [a] -> [NonEmpty a]groupAllWith369,14250
group1 :: Eq a => NonEmpty a -> NonEmpty (NonEmpty a)group1374,14501
group :: (Foldable f, Eq a) => f a -> [NonEmpty a]group349,13503
fromList :: [a] -> NonEmpty afromList193,7765
filter :: (a -> Bool) -> NonEmpty a -> [a]filter330,12639
dropWhile :: (a -> Bool) -> NonEmpty a -> [a]dropWhile314,12025
drop :: Int -> NonEmpty a -> [a]drop296,11353
cycle :: NonEmpty a -> NonEmpty acycle278,10821
cons :: a -> NonEmpty a -> NonEmpty acons183,7531
break :: (a -> Bool) -> NonEmpty a -> ([a], [a])break326,12487
(<|) :: a -> NonEmpty a -> NonEmpty a<|179,7439
(!!) :: NonEmpty a -> Int -> a!!400,15589

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Maybe.hs,636
module Data.MaybeMaybe18,522
maybeToList            :: Maybe a -> [a]maybeToList199,4547
maybe :: b -> (a -> b) -> Maybe a -> bmaybe78,1985
mapMaybeFB :: (b -> r -> r) -> (a -> Maybe b) -> a -> r -> rmapMaybeFB301,7350
mapMaybe          :: (a -> Maybe b) -> [a] -> [b]mapMaybe285,6875
listToMaybe :: [a] -> Maybe alistToMaybe232,5224
isNothing         :: Maybe a -> BoolisNothing127,2832
isJust         :: Maybe a -> BoolisJust103,2411
fromMaybe     :: a -> Maybe a -> afromMaybe174,3967
fromJust          :: HasCallStack => Maybe a -> afromJust147,3235
catMaybes              :: [Maybe a] -> [a]catMaybes259,6040

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Monoid.hs,387
module Data.Monoid (Monoid59,2024
newtype First a = First { getFirst :: Maybe a }First132,4107
newtype First a = First { getFirst :: Maybe a }getFirst132,4107
newtype Last a = Last { getLast :: Maybe a }Last161,5115
newtype Last a = Last { getLast :: Maybe a }getLast161,5115
newtype Ap f a = Ap { getAp :: f a }Ap187,5982
newtype Ap f a = Ap { getAp :: f a }getAp187,5982

/home/effectfully/.fastdogs/base-4.15.1.0/Data/OldList.hs,6504
module Data.OldListOldList19,563
data SnocBuilder a = SnocBuilder {-# UNPACK #-} !Word [a] [a]SnocBuilder1483,52075
zipWith7FB :: (h->xs->xs') -> (a->b->c->d->e->f->g->h) ->zipWith7FB838,27639
zipWith7                :: (a->b->c->d->e->f->g->h) ->zipWith7809,26340
zipWith6FB :: (g->xs->xs') -> (a->b->c->d->e->f->g) ->zipWith6FB833,27410
zipWith6                :: (a->b->c->d->e->f->g) ->zipWith6797,25752
zipWith5FB :: (f->xs->xs') -> (a->b->c->d->e->f) ->zipWith5FB828,27191
zipWith5                :: (a->b->c->d->e->f) ->zipWith5785,25188
zipWith4FB :: (e->xs->xs') -> (a->b->c->d->e) ->zipWith4FB823,26982
zipWith4                :: (a->b->c->d->e) -> [a]->[b]->[c]->[d]->[e]zipWith4774,24668
zip7                    :: [a] -> [b] -> [c] -> [d] -> [e] -> [f] ->zip7764,24180
zip6                    :: [a] -> [b] -> [c] -> [d] -> [e] -> [f] ->zip6755,23790
zip5                    :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a,b,c,d,e)]zip5747,23444
zip4                    :: [a] -> [b] -> [c] -> [d] -> [(a,b,c,d)]zip4739,23106
wordsFB :: ([Char] -> b -> b) -> b -> String -> bwordsFB1416,49331
words                   :: String -> [String]words1404,48840
unzip7          :: [(a,b,c,d,e,f,g)] -> ([a],[b],[c],[d],[e],[f],[g])unzip7984,33747
unzip6                  :: [(a,b,c,d,e,f)] -> ([a],[b],[c],[d],[e],[f])unzip6974,33234
unzip5                  :: [(a,b,c,d,e)] -> ([a],[b],[c],[d],[e])unzip5964,32744
unzip4                  :: [(a,b,c,d)] -> ([a],[b],[c],[d])unzip4954,32271
unwordsFB               :: String -> String -> StringunwordsFB1462,50857
unwords                 :: [String] -> Stringunwords1430,49787
unlines                 :: [String] -> Stringunlines1389,48426
unionBy                 :: (a -> a -> Bool) -> [a] -> [a] -> [a]unionBy485,12643
union                   :: (Eq a) => [a] -> [a] -> [a]union481,12478
unfoldr :: (b -> Maybe (a, b)) -> b -> [a]unfoldr1330,46645
transpose               :: [[a]] -> [[a]]transpose550,14989
toListSB :: SnocBuilder a -> [a]toListSB1511,53065
tails                   :: [a] -> [[a]]tails1041,35941
tailUnwords           :: String -> StringtailUnwords1457,50731
subsequences            :: [a] -> [[a]]subsequences1053,36354
stripPrefix :: Eq a => [a] -> [a] -> Maybe [a]stripPrefix260,4850
strictGenericLength     :: (Num i) => [b] -> istrictGenericLength691,20969
sortOn :: Ord b => (a -> b) -> [a] -> [a]sortOn1269,44381
sortBy :: (a -> a -> Ordering) -> [a] -> [a]sortBy1100,38155
sort :: (Ord a) => [a] -> [a]sort1094,37933
snocSB :: SnocBuilder a -> a -> SnocBuilder asnocSB1506,52934
singleton :: a -> [a]singleton1280,44603
select :: (a -> Bool) -> a -> ([a], [a]) -> ([a], [a])select568,15627
sb :: Word -> [a] -> [a] -> SnocBuilder asb1494,52625
prependToAll            :: a -> [a] -> [a]prependToAll527,14198
permutations            :: [a] -> [[a]]permutations1071,37002
partition               :: (a -> Bool) -> [a] -> ([a],[a])partition564,15497
pairWithNil :: acc -> (acc, [y])pairWithNil593,16826
nubBy                   :: (a -> a -> Bool) -> [a] -> [a]nubBy408,10029
nub                     :: (Eq a) => [a] -> [a]nub399,9726
nonEmptySubsequences         :: [a] -> [[a]]nonEmptySubsequences1061,36653
minimumBy               :: (a -> a -> Ordering) -> [a] -> aminimumBy664,19935
maximumBy               :: (a -> a -> Ordering) -> [a] -> amaximumBy648,19220
mapAccumR :: (acc -> x -> (acc, y))     -- Function of elt of input listmapAccumR610,17514
mapAccumLF :: (acc -> x -> (acc, y)) -> x -> (acc -> (acc, [y])) -> acc -> (acc, [y])mapAccumLF597,16915
mapAccumL :: (acc -> x -> (acc, y)) -- Function of elt of input listmapAccumL576,16039
lines                   :: String -> [String]lines1371,47632
isSuffixOf              :: (Eq a) => [a] -> [a] -> BoolisSuffixOf345,7668
isPrefixOf              :: (Eq a) => [a] -> [a] -> BoolisPrefixOf331,7235
isInfixOf               :: (Eq a) => [a] -> [a] -> BoolisInfixOf389,9253
intersperse             :: a -> [a] -> [a]intersperse518,13845
intersectBy             :: (a -> a -> Bool) -> [a] -> [a] -> [a]intersectBy507,13447
intersect               :: (Eq a) => [a] -> [a] -> [a]intersect503,13269
intercalate :: [a] -> [[a]] -> [a]intercalate537,14579
insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]insertBy633,18685
insert :: Ord a => a -> [a] -> [a]insert629,18546
inits                   :: [a] -> [[a]]inits1025,35356
groupBy                 :: (a -> a -> Bool) -> [a] -> [[a]]groupBy1009,34856
group                   :: Eq a => [a] -> [[a]]group1005,34697
genericTake             :: (Integral i) => i -> [a] -> [a]genericTake699,21342
genericSplitAt          :: (Integral i) => i -> [a] -> ([a], [a])genericSplitAt714,21972
genericReplicate        :: (Integral i) => i -> a -> [a]genericReplicate731,22769
genericLength           :: (Num i) => [a] -> igenericLength681,20634
genericIndex :: (Integral i) => [a] -> i -> agenericIndex722,22320
genericDrop             :: (Integral i) => i -> [a] -> [a]genericDrop706,21655
foldr7_left :: (a->b->c->d->e->f->g->h->i)->foldr7_left895,29650
foldr7 :: (a->b->c->d->e->f->g->h->h) ->foldr7868,28593
foldr6_left :: (a->b->c->d->e->f->g->h)->foldr6_left888,29358
foldr6 :: (a->b->c->d->e->f->g->g) ->foldr6859,28309
foldr5_left :: (a->b->c->d->e->f->g)->foldr5_left882,29102
foldr5 :: (a->b->c->d->e->f->f) ->foldr5851,28061
foldr4_left :: (a->b->c->d->e->f)->foldr4_left876,28878
foldr4 :: (a->b->c->d->e->e) ->foldr4843,27840
findIndices      :: (a -> Bool) -> [a] -> [Int]findIndices309,6471
findIndex       :: (a -> Bool) -> [a] -> Maybe IntfindIndex301,6165
find            :: (a -> Bool) -> [a] -> Maybe afind292,5833
emptySB :: SnocBuilder aemptySB1501,52836
elem_by :: (a -> a -> Bool) -> a -> [a] -> Boolelem_by428,10750
elemIndices     :: Eq a => a -> [a] -> [Int]elemIndices280,5506
elemIndex       :: Eq a => a -> [a] -> Maybe IntelemIndex272,5228
dropWhileEnd :: (a -> Bool) -> [a] -> [a]dropWhileEnd242,4316
dropLengthMaybe :: [a] -> [b] -> Maybe [b]dropLengthMaybe375,8820
dropLength :: [a] -> [b] -> [b]dropLength365,8542
deleteFirstsBy          :: (a -> a -> Bool) -> [a] -> [a] -> [a]deleteFirstsBy993,34177
deleteBy                :: (a -> a -> Bool) -> a -> [a] -> [a]deleteBy450,11432
delete                  :: (Eq a) => a -> [a] -> [a]delete442,11158
(\\)                    :: (Eq a) => [a] -> [a] -> [a]\\466,11989

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Ord.hs,193
module Data.Ord (Ord19,531
newtype Down a = DownDown74,2061
    { getDown :: a -- ^ @since 4.14.0.0getDown75,2083
comparing :: (Ord a) => (b -> a) -> b -> b -> Orderingcomparing44,1090

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Proxy.hs,211
module Data.ProxyProxy19,530
data Proxy t = Proxy deriving ( Bounded -- ^ @since 4.7.0.0Proxy56,1342
data KProxy (t :: Type) = KProxyKProxy62,1643
asProxyTypeOf :: a -> proxy a -> aasProxyTypeOf155,4153

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Ratio.hs,107
module Data.RatioRatio17,477
approxRational :: (RealFrac a) => a -> a -> RationalapproxRational50,1631

/home/effectfully/.fastdogs/base-4.15.1.0/Data/STRef.hs,171
module Data.STRef (STRef17,523
modifySTRef' :: STRef s a -> (a -> a) -> ST s ()modifySTRef'64,1769
modifySTRef :: STRef s a -> (a -> a) -> ST s ()modifySTRef58,1605

/home/effectfully/.fastdogs/base-4.15.1.0/Data/STRef/Lazy.hs,280
module Data.STRef.Lazy (Lazy17,523
writeSTRef  :: ST.STRef s a -> a -> ST s ()writeSTRef31,833
readSTRef   :: ST.STRef s a -> ST s areadSTRef30,795
newSTRef    :: a -> ST s (ST.STRef s a)newSTRef29,755
modifySTRef :: ST.STRef s a -> (a -> a) -> ST s ()modifySTRef32,877

/home/effectfully/.fastdogs/base-4.15.1.0/Data/STRef/Strict.hs,41
module Data.STRef.Strict (Strict17,557

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Semigroup.hs,1218
module Data.Semigroup (Semigroup75,2948
newtype Min a = Min { getMin :: a }Min146,4646
newtype Min a = Min { getMin :: a }getMin146,4646
newtype Max a = Max { getMax :: a }Max217,6469
newtype Max a = Max { getMax :: a }getMax217,6469
data Arg a b = ArgArg292,8494
type ArgMin a b = Min (Arg a b)ArgMin308,8907
type ArgMax a b = Max (Arg a b)ArgMax313,9012
newtype First a = First { getFirst :: a }First353,9919
newtype First a = First { getFirst :: a }getFirst353,9919
newtype Last a = Last { getLast :: a }Last409,11398
newtype Last a = Last { getLast :: a }getLast409,11398
newtype WrappedMonoid m = WrapMonoid { unwrapMonoid :: m }WrappedMonoid470,13075
newtype WrappedMonoid m = WrapMonoid { unwrapMonoid :: m }WrapMonoid470,13075
newtype WrappedMonoid m = WrapMonoid { unwrapMonoid :: m }unwrapMonoid470,13075
newtype Option a = Option { getOption :: Maybe a }Option525,15158
newtype Option a = Option { getOption :: Maybe a }getOption525,15158
option :: b -> (a -> b) -> Option a -> boption578,16599
mtimesDefault :: (Integral b, Monoid a) => b -> a -> amtimesDefault508,14464
diff :: Semigroup m => m -> Endo mdiff143,4591
cycle1 :: Semigroup m => m -> mcycle1124,4024

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Semigroup/Internal.hs,1299
module Data.Semigroup.Internal whereInternal21,709
newtype Dual a = Dual { getDual :: a }Dual110,3839
newtype Dual a = Dual { getDual :: a }getDual110,3839
newtype Endo a = Endo { appEndo :: a -> a }Endo147,4883
newtype Endo a = Endo { appEndo :: a -> a }appEndo147,4883
newtype All = All { getAll :: Bool }All167,5412
newtype All = All { getAll :: Bool }getAll167,5412
newtype Any = Any { getAny :: Bool }Any192,6102
newtype Any = Any { getAny :: Bool }getAny192,6102
newtype Sum a = Sum { getSum :: a }Sum214,6691
newtype Sum a = Sum { getSum :: a }getSum214,6691
newtype Product a = Product { getProduct :: a }Product251,7687
newtype Product a = Product { getProduct :: a }getProduct251,7687
newtype Alt f a = Alt {getAlt :: f a}Alt295,8794
newtype Alt f a = Alt {getAlt :: f a}getAlt295,8794
stimesMonoid :: (Integral b, Monoid a) => b -> a -> astimesMonoid54,1874
stimesMaybe :: (Integral b, Semigroup a) => b -> Maybe a -> Maybe astimesMaybe91,3221
stimesList  :: Integral b => b -> [a] -> [a]stimesList98,3483
stimesIdempotentMonoid :: (Integral b, Monoid a) => b -> a -> astimesIdempotentMonoid44,1480
stimesIdempotent :: Integral b => b -> a -> astimesIdempotent35,1092
stimesDefault :: (Integral b, Semigroup a) => b -> a -> astimesDefault71,2537

/home/effectfully/.fastdogs/base-4.15.1.0/Data/String.hs,124
module Data.String (String22,676
class IsString a whereIsString40,1079
    fromString :: String -> afromString41,1102

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Traversable.hs,841
module Data.Traversable (Traversable25,875
class (Functor t, Foldable t) => Traversable t whereTraversable137,3966
    traverse :: Applicative f => (a -> f b) -> t a -> f (t b)traverse169,4971
    sequenceA :: Applicative f => t (f a) -> f (t a)sequenceA200,6030
    mapM :: Monad m => (a -> m b) -> t a -> m (t b)mapM214,6611
    sequence :: Monad m => t (m a) -> m (t a)sequence244,7533
mapAccumR :: forall t s a b. Traversable tmapAccumR480,14234
mapAccumL :: forall t s a b. Traversable tmapAccumL460,13478
forM :: (Traversable t, Monad m) => t a -> (a -> m b) -> m (t b)forM441,12847
for :: (Traversable t, Applicative f) => t a -> (a -> f b) -> f (t b)for435,12618
foldMapDefault :: forall t m a . (Traversable t, Monoid m)foldMapDefault505,15172
fmapDefault :: forall t a b . Traversable tfmapDefault493,14782

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Tuple.hs,328
module Data.TupleTuple18,533
uncurry                 :: (a -> b -> c) -> ((a, b) -> c)uncurry62,1495
swap                    :: (a,b) -> (b,a)swap66,1635
snd                     :: (a,b) -> bsnd38,990
fst                     :: (a,b) -> afst34,877
curry                   :: ((a, b) -> c) -> a -> b -> ccurry47,1178

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Type/Bool.hs,204
module Data.Type.Bool (Bool18,572
type family If cond tru fls whereIf29,886
type family a && b where&&34,997
type family a || b where||43,1181
type family Not a = res | res -> a whereNot54,1429

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Type/Coercion.hs,506
module Data.Type.CoercionCoercion27,864
data Coercion a b whereCoercion51,1465
class TestCoercion f whereTestCoercion105,3090
  testCoercion :: f a -> f b -> Maybe (Coercion a b)testCoercion107,3190
trans :: Coercion a b -> Coercion b c -> Coercion a ctrans73,2152
sym :: Coercion a b -> Coercion b asym69,2044
repr :: (a Eq.:~: b) -> Coercion a brepr77,2317
gcoerceWith :: Coercion a b -> (Coercible a b => r) -> rgcoerceWith65,1916
coerceWith :: Coercion a b -> a -> bcoerceWith59,1751

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Type/Equality.hs,776
module Data.Type.Equality (Equality35,1184
data a :~: b where  -- See Note [The equality types story] in GHC.Builtin.Types.Prim:~:65,1935
  Refl :: a :~: aRefl66,2020
data a :~~: b where:~~:127,3673
   HRefl :: a :~~: aHRefl128,3693
class TestEquality f whereTestEquality153,4379
  testEquality :: f a -> f b -> Maybe (a :~: b)testEquality155,4462
type family a == b where==169,4795
trans :: (a :~: b) -> (b :~: c) -> (a :~: c)trans77,2306
sym :: (a :~: b) -> (b :~: a)sym73,2229
outer :: (f a :~: g b) -> (f :~: g)outer97,2942
inner :: (f a :~: g b) -> (a :~: b)inner93,2810
gcastWith :: (a :~: b) -> ((a ~ b) => r) -> rgcastWith85,2547
castWith :: (a :~: b) -> a -> bcastWith81,2425
apply :: (f :~: g) -> (a :~: b) -> (f a :~: g b)apply89,2664

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Typeable.hs,1664
module Data.TypeableTypeable47,2075
type TypeRep = I.SomeTypeRepTypeRep106,3474
typeRepTyCon :: TypeRep -> TyContypeRepTyCon189,6500
typeRepFingerprint :: TypeRep -> FingerprinttypeRepFingerprint196,6675
typeRepArgs :: TypeRep -> [TypeRep]typeRepArgs185,6332
typeRep :: forall proxy a. Typeable a => proxy a -> TypeReptypeRep116,3763
typeOf7 :: forall t (a :: Type) (b :: Type) (c :: Type)typeOf7228,7823
typeOf6 :: forall t (a :: Type) (b :: Type) (c :: Type)typeOf6223,7614
typeOf5 :: forall t (a :: Type) (b :: Type) (c :: Type) (d :: Type) (e :: Type).typeOf5219,7439
typeOf4 :: forall t (a :: Type) (b :: Type) (c :: Type) (d :: Type).typeOf4215,7278
typeOf3 :: forall t (a :: Type) (b :: Type) (c :: Type).typeOf3211,7131
typeOf2 :: forall t (a :: Type) (b :: Type). Typeable t => t a b -> TypeReptypeOf2208,7009
typeOf1 :: forall t (a :: Type). Typeable t => t a -> TypeReptypeOf1205,6901
typeOf :: forall a. Typeable a => a -> TypeReptypeOf109,3564
splitTyConApp :: TypeRep -> (TyCon, [TypeRep])splitTyConApp181,6179
showsTypeRep :: TypeRep -> ShowSshowsTypeRep120,3880
rnfTypeRep :: TypeRep -> ()rnfTypeRep200,6806
mkFunTy :: TypeRep -> TypeRep -> TypeRepmkFunTy169,5598
gcast2 :: forall c t t' a b. (Typeable t, Typeable t')gcast2153,4911
gcast1 :: forall c t t' a. (Typeable t, Typeable t')gcast1148,4732
gcast :: forall a b c. (Typeable a, Typeable b) => c a -> Maybe (c b)gcast144,4582
funResultTy :: TypeRep -> TypeRep -> Maybe TypeRepfunResultTy160,5278
eqT :: forall a b. (Typeable a, Typeable b) => Maybe (a :~: b)eqT135,4278
cast :: forall a b. (Typeable a, Typeable b) => a -> Maybe bcast124,3969

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Typeable/Internal.hs,6495
module Data.Typeable.Internal (Internal36,1187
data TypeRep a whereTypeRep185,5541
    TrType :: TypeRep TypeTrType187,5625
    TrTyCon :: { -- See Note [TypeRep fingerprints]TrTyCon188,5652
                 trTyConFingerprint :: {-# UNPACK #-} !FingerprinttrTyConFingerprint189,5704
               , trTyCon :: !TyContrTyCon195,6033
               , trKindVars :: [SomeTypeRep]trKindVars196,6068
               , trTyConKind :: !(TypeRep k) }  -- See Note [Kind caching]trTyConKind197,6113
    TrApp   :: forall k1 k2 (a :: k1 -> k2) (b :: k1).TrApp202,6375
    TrFun   :: forall (m :: Multiplicity) (r1 :: RuntimeRep) (r2 :: RuntimeRep)TrFun216,7104
data SomeTypeRep whereSomeTypeRep313,10674
pattern Fun :: forall k (fun :: k). ()Fun334,11186
pattern Fun arg res <- TrFun {trFunArg = arg, trFunRes = res, trFunMul = (eqTypeRep trMany -> Just HRefl)}Fun341,11470
pattern App :: forall k2 (t :: k2). ()App456,15215
pattern App f x <- (splitApp -> IsApp f x)App459,15367
data AppOrCon (a :: k) whereAppOrCon462,15448
    IsApp :: forall k k' (f :: k' -> k) (x :: k'). ()IsApp463,15477
    IsCon :: IsApplication a ~ "" => TyCon %1 -> [SomeTypeRep] %1 -> AppOrCon aIsCon466,15622
type family IsApplication (x :: k) :: Symbol whereIsApplication468,15703
newtype Gift a (r :: TYPE rep) = Gift (Typeable a => r)Gift494,16757
pattern Con :: forall k (a :: k). ()Con497,16855
pattern Con con <- (splitApp -> IsCon con _)Con500,16989
pattern Con' :: forall k (a :: k). ()Con'519,17367
pattern Con' con ks <- (splitApp -> IsCon con ks)Con'522,17521
data SomeKindedTypeRep k whereSomeKindedTypeRep641,22068
data IsTYPE (a :: Type) whereIsTYPE732,25417
class Typeable (a :: k) whereTypeable757,26261
  typeRep# :: TypeRep atypeRep#758,26291
pattern KindRepTypeLit :: TypeLitSort -> String -> KindRepKindRepTypeLit913,32002
withTypeable :: forall k (a :: k) rep (r :: TYPE rep). ()withTypeable487,16501
vecElemTypeRep :: VecElem -> SomeKindedTypeRep VecElemvecElemTypeRep704,24256
vecCountTypeRep :: VecCount -> SomeKindedTypeRep VecCountvecCountTypeRep691,23883
unsafeCoerceRep :: SomeTypeRep -> TypeRep aunsafeCoerceRep635,21865
unkindedTypeRep :: SomeKindedTypeRep k -> SomeTypeRepunkindedTypeRep638,21959
typeSymbolTypeRep :: KnownSymbol a => Proxy# a -> TypeRep atypeSymbolTypeRep986,35032
typeRepTyCon :: TypeRep a -> TyContypeRepTyCon562,18999
typeRepKind :: TypeRep (a :: k) -> TypeRep ktypeRepKind593,20079
typeRepFingerprint :: TypeRep a -> FingerprinttypeRepFingerprint347,11700
typeRep :: Typeable a => TypeRep atypeRep760,26316
typeOf :: Typeable a => a -> TypeRep atypeOf763,26371
typeNatTypeRep :: KnownNat a => Proxy# a -> TypeRep atypeNatTypeRep982,34853
typeLitTypeRep :: forall k (a :: k). (Typeable k) =>typeLitTypeRep1002,35600
tyConTYPE :: TyContyConTYPE845,29498
tyConPackage :: TyCon -> StringtyConPackage119,3417
tyConName :: TyCon -> StringtyConName125,3580
tyConModule :: TyCon -> StringtyConModule122,3501
tyConKindRep :: TyCon -> KindReptyConKindRep139,3957
tyConKindArgs :: TyCon -> InttyConKindArgs136,3885
tyConKind :: TyCon -> [SomeTypeRep] -> SomeTypeReptyConKind599,20288
tyConFingerprint :: TyCon -> FingerprinttyConFingerprint132,3768
trTYPE :: TypeRep TYPEtrTYPE383,13016
trNameString :: TrName -> StringtrNameString128,3657
trMany :: TypeRep 'ManytrMany389,13114
trLiftedRep :: TypeRep 'LiftedReptrLiftedRep386,13057
tcSymbol :: TyContcSymbol995,35417
tcNat :: TyContcNat998,35478
splitApps :: TypeRep a -> (TyCon, [SomeTypeRep])splitApps817,28078
splitApp :: forall k (a :: k). ()splitApp475,16035
someTypeRepTyCon :: SomeTypeRep -> TyConsomeTypeRepTyCon558,18848
someTypeRepFingerprint :: SomeTypeRep -> FingerprintsomeTypeRepFingerprint774,26680
someTypeRep :: forall proxy a. Typeable a => proxy a -> SomeTypeRepsomeTypeRep770,26537
showTypeable :: Int -> TypeRep (a :: k) -> ShowSshowTypeable785,27016
showTyCon :: TyCon -> ShowSshowTyCon881,30799
showArgs :: Show a => ShowS -> [a] -> ShowSshowArgs884,30894
sameTypeRep :: forall k1 k2 (a :: k1) (b :: k2).sameTypeRep582,19732
runtimeRepTypeRep :: RuntimeRep -> SomeKindedTypeRep RuntimeRepruntimeRepTypeRep662,22748
rnfTypeRep :: TypeRep a -> ()rnfTypeRep892,31163
rnfTyCon :: TyCon -> ()rnfTyCon172,4974
rnfTrName :: TrName -> ()rnfTrName148,4209
rnfString :: [Char] -> ()rnfString169,4916
rnfSomeTypeRep :: SomeTypeRep -> ()rnfSomeTypeRep903,31552
rnfRuntimeRep :: RuntimeRep -> ()rnfRuntimeRep161,4698
rnfModule :: Module -> ()rnfModule145,4127
rnfList :: (a -> ()) -> [a] -> ()rnfList165,4801
rnfKindRep :: KindRep -> ()rnfKindRep152,4299
modulePackage :: Module -> StringmodulePackage113,3265
moduleName :: Module -> StringmoduleName116,3344
mkTypeLitTyCon :: String -> TyCon -> TyConmkTypeLitTyCon976,34625
mkTypeLitFromString :: TypeLitSort -> String -> SomeTypeRepmkTypeLitFromString989,35161
mkTyConFingerprint :: String -- ^ package namemkTyConFingerprint965,34247
mkTyCon# :: Addr#       -- ^ package namemkTyCon#927,32582
mkTyCon :: String       -- ^ package namemkTyCon948,33490
mkTrType :: TypeRep TypemkTrType354,11990
mkTrFun :: forall (m :: Multiplicity) (r1 :: RuntimeRep) (r2 :: RuntimeRep)mkTrFun1007,35797
mkTrCon :: forall k (a :: k). TyCon -> [SomeTypeRep] -> TypeRep amkTrCon362,12205
mkTrAppChecked :: forall k1 k2 (a :: k1 -> k2) (b :: k1).mkTrAppChecked423,14193
mkTrApp :: forall k1 k2 (a :: k1 -> k2) (b :: k1).mkTrApp397,13369
kindedTypeRep :: forall k (a :: k). Typeable a => SomeKindedTypeRep kkindedTypeRep651,22383
kApp :: SomeKindedTypeRep (k -> k')kApp645,22202
isTupleTyCon :: TyCon -> BoolisTupleTyCon857,29881
isTYPE :: TypeRep (a :: Type) -> Maybe (IsTYPE a)isTYPE736,25559
isOperatorTyCon :: TyCon -> BoolisOperatorTyCon875,30622
isListTyCon :: TyCon -> BoolisListTyCon854,29791
instantiateKindRep :: A.Array KindBndr SomeTypeRep -> KindRep -> SomeTypeRepinstantiateKindRep605,20564
getRuntimeRep :: forall (r :: RuntimeRep). TypeRep (TYPE r) -> TypeRep rgetRuntimeRep743,25777
getKindRepTypeLit :: KindRep -> Maybe (TypeLitSort, String)getKindRepTypeLit921,32304
funTyCon :: TyConfunTyCon851,29732
fpTYPELiftedRep :: FingerprintfpTYPELiftedRep376,12719
eqTypeRep :: forall k1 k2 (a :: k1) (b :: k2).eqTypeRep571,19271
buildList :: forall k. Typeable kbuildList654,22501
bareArrow :: forall (m :: Multiplicity) (r1 :: RuntimeRep) (r2 :: RuntimeRep)bareArrow721,24906

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Unique.hs,234
module Data.Unique (Unique18,534
newtype Unique = Unique Integer deriving (Eq,Ord)Unique41,950
uniqSource :: IORef IntegeruniqSource43,1001
newUnique :: IO UniquenewUnique51,1344
hashUnique :: Unique -> InthashUnique78,2533

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Version.hs,358
module Data.Version (Version30,1225
data Version =Version77,3096
  Version { versionBranch :: [Int],versionBranch78,3111
           versionTags :: [String]  -- really a bagversionTags92,3954
showVersion :: Version -> StringshowVersion121,5133
parseVersion :: ReadP VersionparseVersion128,5349
makeVersion :: [Int] -> VersionmakeVersion136,5646

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Void.hs,149
module Data.VoidVoid22,687
data Void derivingVoid37,937
vacuous :: Functor f => f Void -> f avacuous84,2074
absurd :: Void -> aabsurd76,1848

/home/effectfully/.fastdogs/base-4.15.1.0/Data/Word.hs,29
module Data.WordWord18,501

/home/effectfully/.fastdogs/base-4.15.1.0/Debug/Trace.hs,779
module Debug.Trace (Trace23,709
   debugBelch :: CString -> CString -> IO ()debugBelch95,2812
traceStack :: String -> a -> atraceStack223,6051
traceShowM :: (Show a, Applicative f) => a -> f ()traceShowM210,5527
traceShowId :: Show a => a -> atraceShowId161,4409
traceShow :: Show a => a -> b -> btraceShow149,4175
traceMarkerIO :: String -> IO ()traceMarkerIO318,9780
traceMarker :: String -> a -> atraceMarker306,9403
traceM :: Applicative f => String -> f ()traceM190,5233
traceId :: String -> StringtraceId134,3804
traceIO :: String -> IO ()traceIO80,2200
traceEventIO :: String -> IO ()traceEventIO268,7701
traceEvent :: String -> a -> atraceEvent256,7329
trace :: String -> a -> atrace120,3580
putTraceMsg :: String -> IO ()putTraceMsg98,2863

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign.hs,30
module ForeignForeign19,567

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/C.hs,26
module Foreign.CC18,513

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/C/Error.hs,11691
module Foreign.C.Error (Error18,550
newtype Errno = Errno CIntErrno112,3270
foreign import ccall unsafe "HsBase.h __hscore_get_errno" get_errno :: IO CIntget_errno268,9756
foreign import ccall unsafe "HsBase.h __hscore_set_errno" set_errno :: CInt -> IO ()set_errno276,9999
foreign import ccall unsafe "string.h" strerror :: Errno -> IO (Ptr CChar)strerror579,22927
throwErrnoPathIf_ :: (a -> Bool) -> String -> FilePath -> IO a -> IO ()throwErrnoPathIf_439,15995
throwErrnoPathIfNull :: String -> FilePath -> IO (Ptr a) -> IO (Ptr a)throwErrnoPathIfNull445,16237
throwErrnoPathIfMinus1_ :: (Eq a, Num a) => String -> FilePath -> IO a -> IO ()throwErrnoPathIfMinus1_457,16681
throwErrnoPathIfMinus1 :: (Eq a, Num a) => String -> FilePath -> IO a -> IO athrowErrnoPathIfMinus1451,16457
throwErrnoPathIf :: (a -> Bool) -> String -> FilePath -> IO a -> IO athrowErrnoPathIf430,15721
throwErrnoPath :: String -> FilePath -> IO athrowErrnoPath421,15475
throwErrnoIf_   :: (a -> Bool) -> String -> IO a -> IO ()throwErrnoIf_310,11153
throwErrnoIfRetry_            :: (a -> Bool) -> String -> IO a -> IO ()throwErrnoIfRetry_357,12867
throwErrnoIfRetryMayBlock_ :: (a -> Bool) -> String -> IO a -> IO b -> IO ()throwErrnoIfRetryMayBlock_362,13074
throwErrnoIfRetryMayBlockthrowErrnoIfRetryMayBlock333,11913
throwErrnoIfRetry            :: (a -> Bool) -> String -> IO a -> IO athrowErrnoIfRetry317,11446
throwErrnoIfNullRetryMayBlock :: String -> IO (Ptr a) -> IO b -> IO (Ptr a)throwErrnoIfNullRetryMayBlock416,15245
throwErrnoIfNullRetry :: String -> IO (Ptr a) -> IO (Ptr a)throwErrnoIfNullRetry411,15048
throwErrnoIfNull :: String -> IO (Ptr a) -> IO (Ptr a)throwErrnoIfNull404,14779
throwErrnoIfMinus1_ :: (Eq a, Num a) => String -> IO a -> IO ()throwErrnoIfMinus1_374,13544
throwErrnoIfMinus1Retry_ :: (Eq a, Num a) => String -> IO a -> IO ()throwErrnoIfMinus1Retry_386,14009
throwErrnoIfMinus1RetryMayBlock_ :: (Eq a, Num a)throwErrnoIfMinus1RetryMayBlock_397,14472
throwErrnoIfMinus1RetryMayBlock :: (Eq a, Num a)throwErrnoIfMinus1RetryMayBlock391,14216
throwErrnoIfMinus1Retry :: (Eq a, Num a) => String -> IO a -> IO athrowErrnoIfMinus1Retry381,13830
throwErrnoIfMinus1 :: (Eq a, Num a) => String -> IO a -> IO athrowErrnoIfMinus1369,13380
throwErrnoIf    :: (a -> Bool)  -- ^ predicate to apply to the result valuethrowErrnoIf297,10659
throwErrno     :: String        -- ^ textual description of the error locationthrowErrno283,10225
resetErrno :: IO ()resetErrno272,9896
isValidErrno               :: Errno -> BoolisValidErrno246,8896
getErrno :: IO ErrnogetErrno261,9393
errnoToIOError  :: String       -- ^ the location where the error occurrederrnoToIOError467,17063
  eTOOMANYREFS, eTXTBSY, eUSERS, eWOULDBLOCK, eXDEV                    :: ErrnoeXDEV135,4458
  eTOOMANYREFS, eTXTBSY, eUSERS, eWOULDBLOCK, eXDEV                    :: ErrnoeWOULDBLOCK135,4458
  eTOOMANYREFS, eTXTBSY, eUSERS, eWOULDBLOCK, eXDEV                    :: ErrnoeUSERS135,4458
  eTOOMANYREFS, eTXTBSY, eUSERS, eWOULDBLOCK, eXDEV                    :: ErrnoeTXTBSY135,4458
  eTOOMANYREFS, eTXTBSY, eUSERS, eWOULDBLOCK, eXDEV                    :: ErrnoeTOOMANYREFS135,4458
  eSOCKTNOSUPPORT, eSPIPE, eSRCH, eSRMNT, eSTALE, eTIME, eTIMEDOUT,eTIMEDOUT134,4390
  eSOCKTNOSUPPORT, eSPIPE, eSRCH, eSRMNT, eSTALE, eTIME, eTIMEDOUT,eTIME134,4390
  eSOCKTNOSUPPORT, eSPIPE, eSRCH, eSRMNT, eSTALE, eTIME, eTIMEDOUT,eSTALE134,4390
  eSOCKTNOSUPPORT, eSPIPE, eSRCH, eSRMNT, eSTALE, eTIME, eTIMEDOUT,eSRMNT134,4390
  eSOCKTNOSUPPORT, eSPIPE, eSRCH, eSRMNT, eSTALE, eTIME, eTIMEDOUT,eSRCH134,4390
  eSOCKTNOSUPPORT, eSPIPE, eSRCH, eSRMNT, eSTALE, eTIME, eTIMEDOUT,eSPIPE134,4390
  eSOCKTNOSUPPORT, eSPIPE, eSRCH, eSRMNT, eSTALE, eTIME, eTIMEDOUT,eSOCKTNOSUPPORT134,4390
  eRANGE, eREMCHG, eREMOTE, eROFS, eRPCMISMATCH, eRREMOTE, eSHUTDOWN,eSHUTDOWN133,4320
  eRANGE, eREMCHG, eREMOTE, eROFS, eRPCMISMATCH, eRREMOTE, eSHUTDOWN,eRREMOTE133,4320
  eRANGE, eREMCHG, eREMOTE, eROFS, eRPCMISMATCH, eRREMOTE, eSHUTDOWN,eRPCMISMATCH133,4320
  eRANGE, eREMCHG, eREMOTE, eROFS, eRPCMISMATCH, eRREMOTE, eSHUTDOWN,eROFS133,4320
  eRANGE, eREMCHG, eREMOTE, eROFS, eRPCMISMATCH, eRREMOTE, eSHUTDOWN,eREMOTE133,4320
  eRANGE, eREMCHG, eREMOTE, eROFS, eRPCMISMATCH, eRREMOTE, eSHUTDOWN,eREMCHG133,4320
  eRANGE, eREMCHG, eREMOTE, eROFS, eRPCMISMATCH, eRREMOTE, eSHUTDOWN,eRANGE133,4320
  ePROGMISMATCH, ePROGUNAVAIL, ePROTO, ePROTONOSUPPORT, ePROTOTYPE,ePROTOTYPE132,4252
  ePROGMISMATCH, ePROGUNAVAIL, ePROTO, ePROTONOSUPPORT, ePROTOTYPE,ePROTONOSUPPORT132,4252
  ePROGMISMATCH, ePROGUNAVAIL, ePROTO, ePROTONOSUPPORT, ePROTOTYPE,ePROTO132,4252
  ePROGMISMATCH, ePROGUNAVAIL, ePROTO, ePROTONOSUPPORT, ePROTOTYPE,ePROGUNAVAIL132,4252
  ePROGMISMATCH, ePROGUNAVAIL, ePROTO, ePROTONOSUPPORT, ePROTOTYPE,ePROGMISMATCH132,4252
  eOPNOTSUPP, ePERM, ePFNOSUPPORT, ePIPE, ePROCLIM, ePROCUNAVAIL,ePROCUNAVAIL131,4186
  eOPNOTSUPP, ePERM, ePFNOSUPPORT, ePIPE, ePROCLIM, ePROCUNAVAIL,ePROCLIM131,4186
  eOPNOTSUPP, ePERM, ePFNOSUPPORT, ePIPE, ePROCLIM, ePROCUNAVAIL,ePIPE131,4186
  eOPNOTSUPP, ePERM, ePFNOSUPPORT, ePIPE, ePROCLIM, ePROCUNAVAIL,ePFNOSUPPORT131,4186
  eOPNOTSUPP, ePERM, ePFNOSUPPORT, ePIPE, ePROCLIM, ePROCUNAVAIL,ePERM131,4186
  eOPNOTSUPP, ePERM, ePFNOSUPPORT, ePIPE, ePROCLIM, ePROCUNAVAIL,eOPNOTSUPP131,4186
eOK, e2BIG, eACCES, eADDRINUSE, eADDRNOTAVAIL, eADV, eAFNOSUPPORT, eAGAIN,eOK122,3531
  eNOTBLK, eNOTCONN, eNOTDIR, eNOTEMPTY, eNOTSOCK, eNOTSUP, eNOTTY, eNXIO,eNXIO130,4111
  eNOTBLK, eNOTCONN, eNOTDIR, eNOTEMPTY, eNOTSOCK, eNOTSUP, eNOTTY, eNXIO,eNOTTY130,4111
  eNOTBLK, eNOTCONN, eNOTDIR, eNOTEMPTY, eNOTSOCK, eNOTSUP, eNOTTY, eNXIO,eNOTSUP130,4111
  eNOTBLK, eNOTCONN, eNOTDIR, eNOTEMPTY, eNOTSOCK, eNOTSUP, eNOTTY, eNXIO,eNOTSOCK130,4111
  eNOTBLK, eNOTCONN, eNOTDIR, eNOTEMPTY, eNOTSOCK, eNOTSUP, eNOTTY, eNXIO,eNOTEMPTY130,4111
  eNOTBLK, eNOTCONN, eNOTDIR, eNOTEMPTY, eNOTSOCK, eNOTSUP, eNOTTY, eNXIO,eNOTDIR130,4111
  eNOTBLK, eNOTCONN, eNOTDIR, eNOTEMPTY, eNOTSOCK, eNOTSUP, eNOTTY, eNXIO,eNOTCONN130,4111
  eNOTBLK, eNOTCONN, eNOTDIR, eNOTEMPTY, eNOTSOCK, eNOTSUP, eNOTTY, eNXIO,eNOTBLK130,4111
  eNOMEM, eNOMSG, eNONET, eNOPROTOOPT, eNOSPC, eNOSR, eNOSTR, eNOSYS,eNOSYS129,4041
  eNOMEM, eNOMSG, eNONET, eNOPROTOOPT, eNOSPC, eNOSR, eNOSTR, eNOSYS,eNOSTR129,4041
  eNOMEM, eNOMSG, eNONET, eNOPROTOOPT, eNOSPC, eNOSR, eNOSTR, eNOSYS,eNOSR129,4041
  eNOMEM, eNOMSG, eNONET, eNOPROTOOPT, eNOSPC, eNOSR, eNOSTR, eNOSYS,eNOSPC129,4041
  eNOMEM, eNOMSG, eNONET, eNOPROTOOPT, eNOSPC, eNOSR, eNOSTR, eNOSYS,eNOPROTOOPT129,4041
  eNOMEM, eNOMSG, eNONET, eNOPROTOOPT, eNOSPC, eNOSR, eNOSTR, eNOSYS,eNONET129,4041
  eNOMEM, eNOMSG, eNONET, eNOPROTOOPT, eNOSPC, eNOSR, eNOSTR, eNOSYS,eNOMSG129,4041
  eNOMEM, eNOMSG, eNONET, eNOPROTOOPT, eNOSPC, eNOSR, eNOSTR, eNOSYS,eNOMEM129,4041
  eNFILE, eNOBUFS, eNODATA, eNODEV, eNOENT, eNOEXEC, eNOLCK, eNOLINK,eNOLINK128,3971
  eNFILE, eNOBUFS, eNODATA, eNODEV, eNOENT, eNOEXEC, eNOLCK, eNOLINK,eNOLCK128,3971
  eNFILE, eNOBUFS, eNODATA, eNODEV, eNOENT, eNOEXEC, eNOLCK, eNOLINK,eNOEXEC128,3971
  eNFILE, eNOBUFS, eNODATA, eNODEV, eNOENT, eNOEXEC, eNOLCK, eNOLINK,eNOENT128,3971
  eNFILE, eNOBUFS, eNODATA, eNODEV, eNOENT, eNOEXEC, eNOLCK, eNOLINK,eNODEV128,3971
  eNFILE, eNOBUFS, eNODATA, eNODEV, eNOENT, eNOEXEC, eNOLCK, eNOLINK,eNODATA128,3971
  eNFILE, eNOBUFS, eNODATA, eNODEV, eNOENT, eNOEXEC, eNOLCK, eNOLINK,eNOBUFS128,3971
  eNFILE, eNOBUFS, eNODATA, eNODEV, eNOENT, eNOEXEC, eNOLCK, eNOLINK,eNFILE128,3971
  eMSGSIZE, eMULTIHOP, eNAMETOOLONG, eNETDOWN, eNETRESET, eNETUNREACH,eNETUNREACH127,3900
  eMSGSIZE, eMULTIHOP, eNAMETOOLONG, eNETDOWN, eNETRESET, eNETUNREACH,eNETRESET127,3900
  eMSGSIZE, eMULTIHOP, eNAMETOOLONG, eNETDOWN, eNETRESET, eNETUNREACH,eNETDOWN127,3900
  eMSGSIZE, eMULTIHOP, eNAMETOOLONG, eNETDOWN, eNETRESET, eNETUNREACH,eNAMETOOLONG127,3900
  eMSGSIZE, eMULTIHOP, eNAMETOOLONG, eNETDOWN, eNETRESET, eNETUNREACH,eMULTIHOP127,3900
  eMSGSIZE, eMULTIHOP, eNAMETOOLONG, eNETDOWN, eNETRESET, eNETUNREACH,eMSGSIZE127,3900
  eINPROGRESS, eINTR, eINVAL, eIO, eISCONN, eISDIR, eLOOP, eMFILE, eMLINK,eMLINK126,3825
  eINPROGRESS, eINTR, eINVAL, eIO, eISCONN, eISDIR, eLOOP, eMFILE, eMLINK,eMFILE126,3825
  eINPROGRESS, eINTR, eINVAL, eIO, eISCONN, eISDIR, eLOOP, eMFILE, eMLINK,eLOOP126,3825
  eINPROGRESS, eINTR, eINVAL, eIO, eISCONN, eISDIR, eLOOP, eMFILE, eMLINK,eISDIR126,3825
  eINPROGRESS, eINTR, eINVAL, eIO, eISCONN, eISDIR, eLOOP, eMFILE, eMLINK,eISCONN126,3825
  eINPROGRESS, eINTR, eINVAL, eIO, eISCONN, eISDIR, eLOOP, eMFILE, eMLINK,eIO126,3825
  eINPROGRESS, eINTR, eINVAL, eIO, eISCONN, eISDIR, eLOOP, eMFILE, eMLINK,eINVAL126,3825
  eINPROGRESS, eINTR, eINVAL, eIO, eISCONN, eISDIR, eLOOP, eMFILE, eMLINK,eINTR126,3825
  eINPROGRESS, eINTR, eINVAL, eIO, eISCONN, eISDIR, eLOOP, eMFILE, eMLINK,eINPROGRESS126,3825
  eEXIST, eFAULT, eFBIG, eFTYPE, eHOSTDOWN, eHOSTUNREACH, eIDRM, eILSEQ,eILSEQ125,3752
  eEXIST, eFAULT, eFBIG, eFTYPE, eHOSTDOWN, eHOSTUNREACH, eIDRM, eILSEQ,eIDRM125,3752
  eEXIST, eFAULT, eFBIG, eFTYPE, eHOSTDOWN, eHOSTUNREACH, eIDRM, eILSEQ,eHOSTUNREACH125,3752
  eEXIST, eFAULT, eFBIG, eFTYPE, eHOSTDOWN, eHOSTUNREACH, eIDRM, eILSEQ,eHOSTDOWN125,3752
  eEXIST, eFAULT, eFBIG, eFTYPE, eHOSTDOWN, eHOSTUNREACH, eIDRM, eILSEQ,eFTYPE125,3752
  eEXIST, eFAULT, eFBIG, eFTYPE, eHOSTDOWN, eHOSTUNREACH, eIDRM, eILSEQ,eFBIG125,3752
  eEXIST, eFAULT, eFBIG, eFTYPE, eHOSTDOWN, eHOSTUNREACH, eIDRM, eILSEQ,eFAULT125,3752
  eEXIST, eFAULT, eFBIG, eFTYPE, eHOSTDOWN, eHOSTUNREACH, eIDRM, eILSEQ,eEXIST125,3752
  eCONNREFUSED, eCONNRESET, eDEADLK, eDESTADDRREQ, eDIRTY, eDOM, eDQUOT,eDQUOT124,3679
  eCONNREFUSED, eCONNRESET, eDEADLK, eDESTADDRREQ, eDIRTY, eDOM, eDQUOT,eDOM124,3679
  eCONNREFUSED, eCONNRESET, eDEADLK, eDESTADDRREQ, eDIRTY, eDOM, eDQUOT,eDIRTY124,3679
  eCONNREFUSED, eCONNRESET, eDEADLK, eDESTADDRREQ, eDIRTY, eDOM, eDQUOT,eDESTADDRREQ124,3679
  eCONNREFUSED, eCONNRESET, eDEADLK, eDESTADDRREQ, eDIRTY, eDOM, eDQUOT,eDEADLK124,3679
  eCONNREFUSED, eCONNRESET, eDEADLK, eDESTADDRREQ, eDIRTY, eDOM, eDQUOT,eCONNRESET124,3679
  eCONNREFUSED, eCONNRESET, eDEADLK, eDESTADDRREQ, eDIRTY, eDOM, eDQUOT,eCONNREFUSED124,3679
  eALREADY, eBADF, eBADMSG, eBADRPC, eBUSY, eCHILD, eCOMM, eCONNABORTED,eCONNABORTED123,3606
  eALREADY, eBADF, eBADMSG, eBADRPC, eBUSY, eCHILD, eCOMM, eCONNABORTED,eCOMM123,3606
  eALREADY, eBADF, eBADMSG, eBADRPC, eBUSY, eCHILD, eCOMM, eCONNABORTED,eCHILD123,3606
  eALREADY, eBADF, eBADMSG, eBADRPC, eBUSY, eCHILD, eCOMM, eCONNABORTED,eBUSY123,3606
  eALREADY, eBADF, eBADMSG, eBADRPC, eBUSY, eCHILD, eCOMM, eCONNABORTED,eBADRPC123,3606
  eALREADY, eBADF, eBADMSG, eBADRPC, eBUSY, eCHILD, eCOMM, eCONNABORTED,eBADMSG123,3606
  eALREADY, eBADF, eBADMSG, eBADRPC, eBUSY, eCHILD, eCOMM, eCONNABORTED,eBADF123,3606
  eALREADY, eBADF, eBADMSG, eBADRPC, eBUSY, eCHILD, eCOMM, eCONNABORTED,eALREADY123,3606
eOK, e2BIG, eACCES, eADDRINUSE, eADDRNOTAVAIL, eADV, eAFNOSUPPORT, eAGAIN,eAGAIN122,3531
eOK, e2BIG, eACCES, eADDRINUSE, eADDRNOTAVAIL, eADV, eAFNOSUPPORT, eAGAIN,eAFNOSUPPORT122,3531
eOK, e2BIG, eACCES, eADDRINUSE, eADDRNOTAVAIL, eADV, eAFNOSUPPORT, eAGAIN,eADV122,3531
eOK, e2BIG, eACCES, eADDRINUSE, eADDRNOTAVAIL, eADV, eAFNOSUPPORT, eAGAIN,eADDRNOTAVAIL122,3531
eOK, e2BIG, eACCES, eADDRINUSE, eADDRNOTAVAIL, eADV, eAFNOSUPPORT, eAGAIN,eADDRINUSE122,3531
eOK, e2BIG, eACCES, eADDRINUSE, eADDRNOTAVAIL, eADV, eAFNOSUPPORT, eAGAIN,eACCES122,3531
eOK, e2BIG, eACCES, eADDRINUSE, eADDRNOTAVAIL, eADV, eAFNOSUPPORT, eAGAIN,e2BIG122,3531

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/C/String.hs,2396
module Foreign.C.String (   -- representation of strings in CString26,1007
type CString    = Ptr CCharCString121,3088
type CStringLen = (Ptr CChar, Int)CStringLen125,3260
type CWString    = Ptr CWcharCWString348,10997
type CWStringLen = (Ptr CWchar, Int)CWStringLen353,11193
withCWStringLen         :: String -> (CWStringLen -> IO a) -> IO awithCWStringLen410,13194
withCWString :: String -> (CWString -> IO a) -> IO awithCWString399,12764
withCStringLen         :: String -> (CStringLen -> IO a) -> IO awithCStringLen183,5406
withCString :: String -> (CString -> IO a) -> IO awithCString173,4968
withCAStringLen         :: String -> (CStringLen -> IO a) -> IO awithCAStringLen314,10072
withCAString :: String -> (CString -> IO a) -> IO awithCAString297,9478
wNUL :: CWcharwNUL417,13405
peekCWStringLen           :: CWStringLen -> IO StringpeekCWStringLen364,11497
peekCWString    :: CWString -> IO StringpeekCWString357,11301
peekCStringLen           :: CStringLen -> IO StringpeekCStringLen140,3731
peekCString    :: CString -> IO StringpeekCString135,3558
peekCAStringLen           :: CStringLen -> IO StringpeekCAStringLen240,7619
peekCAString    :: CString -> IO StringpeekCAString228,7243
newCWStringLen     :: String -> IO CWStringLennewCWStringLen387,12317
newCWString :: String -> IO CWStringnewCWString377,11943
newCStringLen     :: String -> IO CStringLennewCStringLen161,4517
newCString :: String -> IO CStringnewCString151,4147
newCAStringLen     :: String -> IO CStringLennewCAStringLen277,8837
newCAString :: String -> IO CStringnewCAString261,8320
newArrayLen        :: Storable a => [a] -> IO (Ptr a, Int)newArrayLen335,10604
nUL :: CCharnUL331,10503
charsToCWchars :: [Char] -> [CWchar]charsToCWchars421,13467
charIsRepresentable :: Char -> IO BoolcharIsRepresentable188,5722
castCharToCWchar :: Char -> CWcharcastCharToCWchar455,14564
castCharToCUChar :: Char -> CUCharcastCharToCUChar213,6685
castCharToCSChar :: Char -> CSCharcastCharToCSChar223,7098
castCharToCChar :: Char -> CCharcastCharToCChar203,6271
castCWcharToChar :: CWchar -> CharcastCWcharToChar452,14483
castCUCharToChar :: CUChar -> CharcastCUCharToChar208,6459
castCSCharToChar :: CSChar -> CharcastCSCharToChar218,6874
castCCharToChar :: CChar -> CharcastCCharToChar198,6054
cWcharsToChars :: [CWchar] -> [Char]cWcharsToChars420,13430

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/C/Types.hs,147
module Foreign.C.TypesTypes26,861
data CFile = CFileCFile244,11076
data CFpos = CFposCFpos247,11226
data CJmpBuf = CJmpBufCJmpBuf250,11377

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/Concurrent.hs,207
module Foreign.ConcurrentConcurrent18,587
newForeignPtr :: Ptr a -> IO () -> IO (ForeignPtr a)newForeignPtr37,1199
addForeignPtrFinalizer :: ForeignPtr a -> IO () -> IO ()addForeignPtrFinalizer56,2156

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/ForeignPtr.hs,47
module Foreign.ForeignPtr ( ForeignPtr23,741

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/ForeignPtr/Imp.hs,365
module Foreign.ForeignPtr.ImpImp21,679
newForeignPtrEnv ::newForeignPtrEnv73,2246
newForeignPtr :: FinalizerPtr a -> Ptr a -> IO (ForeignPtr a)newForeignPtr58,1512
mallocForeignPtrArray0      :: Storable a => Int -> IO (ForeignPtr a)mallocForeignPtrArray094,3308
mallocForeignPtrArray :: Storable a => Int -> IO (ForeignPtr a)mallocForeignPtrArray84,2759

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/ForeignPtr/Safe.hs,129
module Foreign.ForeignPtr.Safe {-# DEPRECATED "Safe is now the default, please use Foreign.ForeignPtr instead" #-} (Safe22,673

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/ForeignPtr/Unsafe.hs,49
module Foreign.ForeignPtr.Unsafe (Unsafe22,672

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/Marshal.hs,38
module Foreign.MarshalMarshal18,490

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/Marshal/Alloc.hs,1275
module Foreign.Marshal.Alloc (Alloc42,1999
foreign import ccall unsafe "stdlib.h malloc"  _malloc  ::          CSize -> IO (Ptr a)_malloc202,7669
foreign import ccall unsafe "stdlib.h calloc"  _calloc  :: CSize -> CSize -> IO (Ptr a)_calloc203,7757
foreign import ccall unsafe "stdlib.h realloc" _realloc :: Ptr a -> CSize -> IO (Ptr b)_realloc204,7845
foreign import ccall unsafe "stdlib.h free"    _free    :: Ptr a -> IO ()_free205,7933
foreign import ccall unsafe "stdlib.h &free" finalizerFree :: FinalizerPtr afinalizerFree210,8224
reallocBytes          :: Ptr a -> Int -> IO (Ptr a)reallocBytes172,6752
realloc :: forall a b . Storable b => Ptr a -> IO (Ptr b)realloc155,5959
mallocBytes      :: Int -> IO (Ptr a)mallocBytes99,3470
malloc :: forall a . Storable a => IO (Ptr a)malloc83,2893
free :: Ptr a -> IO ()free182,7170
failWhenNULL :: String -> IO (Ptr a) -> IO (Ptr a)failWhenNULL192,7349
callocBytes :: Int -> IO (Ptr a)callocBytes104,3655
calloc :: forall a . Storable a => IO (Ptr a)calloc89,3078
allocaBytesAligned :: Int -> Int -> (Ptr a -> IO b) -> IO ballocaBytesAligned136,5042
allocaBytes :: Int -> (Ptr a -> IO b) -> IO ballocaBytes127,4681
alloca :: forall a b . Storable a => (Ptr a -> IO b) -> IO balloca115,4100

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/Marshal/Array.hs,1860
module Foreign.Marshal.Array (Array19,652
withArrayLen0 :: Storable a => a -> [a] -> (Int -> Ptr a -> IO b) -> IO bwithArrayLen0213,6314
withArrayLen :: Storable a => [a] -> (Int -> Ptr a -> IO b) -> IO bwithArrayLen198,5847
withArray0 :: Storable a => a -> [a] -> (Ptr a -> IO b) -> IO bwithArray0208,6114
withArray :: Storable a => [a] -> (Ptr a -> IO b) -> IO bwithArray192,5649
reallocArray0          :: Storable a => Ptr a -> Int -> IO (Ptr a)reallocArray0128,3419
reallocArray :: forall a . Storable a => Ptr a -> Int -> IO (Ptr a)reallocArray123,3193
pokeArray0 :: Storable a => a -> Ptr a -> [a] -> IO ()pokeArray0162,4570
pokeArray :: Storable a => Ptr a -> [a] -> IO ()pokeArray154,4264
peekArray0            :: (Storable a, Eq a) => a -> Ptr a -> IO [a]peekArray0147,4057
peekArray          :: Storable a => Int -> Ptr a -> IO [a]peekArray138,3709
newArray0             :: Storable a => a -> [a] -> IO (Ptr a)newArray0183,5352
newArray      :: Storable a => [a] -> IO (Ptr a)newArray174,5057
moveArray :: forall a . Storable a => Ptr a -> Ptr a -> Int -> IO ()moveArray235,7053
mallocArray0      :: Storable a => Int -> IO (Ptr a)mallocArray091,1965
mallocArray :: forall a . Storable a => Int -> IO (Ptr a)mallocArray85,1746
lengthArray0            :: (Storable a, Eq a) => a -> Ptr a -> IO IntlengthArray0244,7323
copyArray :: forall a . Storable a => Ptr a -> Ptr a -> Int -> IO ()copyArray229,6763
callocArray0 :: Storable a => Int -> IO (Ptr a)callocArray0102,2358
callocArray :: forall a . Storable a => Int -> IO (Ptr a)callocArray96,2147
allocaArray0      :: Storable a => Int -> (Ptr a -> IO b) -> IO ballocaArray0115,2894
allocaArray :: forall a b . Storable a => Int -> (Ptr a -> IO b) -> IO ballocaArray108,2587
advancePtr :: forall a . Storable a => Ptr a -> Int -> Ptr aadvancePtr257,7637

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/Marshal/Error.hs,503
module Foreign.Marshal.Error (Error19,607
void     :: IO a -> IO ()void76,2129
throwIf_                 :: (a -> Bool) -> (a -> String) -> IO a -> IO ()throwIf_56,1531
throwIfNull :: String -> IO (Ptr a) -> IO (Ptr a)throwIfNull71,1984
throwIfNeg_ :: (Ord a, Num a) => (a -> String) -> IO a -> IO ()throwIfNeg_66,1853
throwIfNeg :: (Ord a, Num a) => (a -> String) -> IO a -> IO athrowIfNeg61,1710
throwIf :: (a -> Bool)  -- ^ error condition on the result of the 'IO' actionthrowIf44,1086

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/Marshal/Pool.hs,1197
module Foreign.Marshal.Pool (Pool23,922
newtype Pool = Pool (IORef [Ptr ()])Pool71,2248
withPool :: (Pool -> IO b) -> IO bwithPool89,2777
pooledReallocBytes :: Pool -> Ptr a -> Int -> IO (Ptr a)pooledReallocBytes125,4067
pooledReallocArray0 :: Storable a => Pool -> Ptr a -> Int -> IO (Ptr a)pooledReallocArray0156,5269
pooledReallocArray :: forall a . Storable a => Pool -> Ptr a -> Int -> IO (Ptr a)pooledReallocArray150,5014
pooledRealloc :: forall a . Storable a => Pool -> Ptr a -> IO (Ptr a)pooledRealloc120,3841
pooledNewArray0 :: Storable a => Pool -> a -> [a] -> IO (Ptr a)pooledNewArray0183,6170
pooledNewArray :: Storable a => Pool -> [a] -> IO (Ptr a)pooledNewArray174,5844
pooledNew :: Storable a => Pool -> a -> IO (Ptr a)pooledNew165,5599
pooledMallocBytes :: Pool -> Int -> IO (Ptr a)pooledMallocBytes110,3546
pooledMallocArray0 :: Storable a => Pool -> Int -> IO (Ptr a)pooledMallocArray0144,4830
pooledMallocArray :: forall a . Storable a => Pool -> Int -> IO (Ptr a)pooledMallocArray137,4508
pooledMalloc :: forall a . Storable a => Pool -> IO (Ptr a)pooledMalloc105,3351
newPool :: IO PoolnewPool75,2322
freePool :: Pool -> IO ()freePool81,2471

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/Marshal/Safe.hs,121
module Foreign.Marshal.Safe {-# DEPRECATED "Safe is now the default, please use Foreign.Marshal instead" #-}Safe20,516

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/Marshal/Unsafe.hs,101
module Foreign.Marshal.Unsafe (Unsafe18,512
unsafeLocalState :: IO a -> aunsafeLocalState43,1412

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/Marshal/Utils.hs,1038
module Foreign.Marshal.Utils (Utils18,517
foreign import ccall unsafe "string.h" memcpy  :: Ptr a -> Ptr a -> CSize -> IO (Ptr a)memcpy195,5512
foreign import ccall unsafe "string.h" memmove :: Ptr a -> Ptr a -> CSize -> IO (Ptr a)memmove196,5600
foreign import ccall unsafe "string.h" memset  :: Ptr a -> CInt  -> CSize -> IO (Ptr a)memset197,5688
withMany :: (a -> (b -> res) -> res)  -- withXXX combinator for one objectwithMany143,3959
with       :: Storable a => a -> (Ptr a -> IO b) -> IO bwith88,2391
toBool :: (Eq a, Num a) => a -> BooltoBool107,2845
new     :: Storable a => a -> IO (Ptr a)new74,1925
moveBytesmoveBytes170,4887
maybeWith :: (      a -> (Ptr b -> IO c) -> IO c)maybeWith125,3336
maybePeek                           :: (Ptr a -> IO b) -> Ptr a -> IO (Maybe b)maybePeek132,3561
maybeNew :: (      a -> IO (Ptr b))maybeNew118,3093
fromBool       :: Num a => Bool -> afromBool101,2697
fillBytes               :: Ptr a -> Word8 -> Int -> IO ()fillBytes185,5256
copyBytescopyBytes158,4568

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/Ptr.hs,313
module Foreign.Ptr (Ptr25,803
    freeHaskellFunPtr :: FunPtr a -> IO ()freeHaskellFunPtr75,1953
wordPtrToPtr :: WordPtr -> Ptr awordPtrToPtr97,2785
ptrToWordPtr :: Ptr a -> WordPtrptrToWordPtr93,2653
ptrToIntPtr :: Ptr a -> IntPtrptrToIntPtr101,2917
intPtrToPtr :: IntPtr -> Ptr aintPtrToPtr105,3033

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/Safe.hs,105
module Foreign.Safe {-# DEPRECATED "Safe is now the default, please use Foreign instead" #-}Safe21,593

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/StablePtr.hs,42
module Foreign.StablePtrStablePtr20,605

/home/effectfully/.fastdogs/base-4.15.1.0/Foreign/Storable.hs,728
module Foreign.StorableStorable21,730
class Storable a whereStorable75,2630
   sizeOf      :: a -> IntsizeOf80,2793
   alignment   :: a -> Intalignment84,2936
   peekElemOff :: Ptr a -> Int      -> IO apeekElemOff89,3150
   pokeElemOff :: Ptr a -> Int -> a -> IO ()pokeElemOff103,3793
   peekByteOff :: Ptr b -> Int      -> IO apeekByteOff110,4070
   pokeByteOff :: Ptr b -> Int -> a -> IO ()pokeByteOff116,4309
   peek        :: Ptr a      -> IO apeek122,4554
   poke        :: Ptr a -> a -> IO ()poke132,5000
pokeFingerprint :: Ptr Fingerprint -> Fingerprint -> IO ()pokeFingerprint271,9353
peekFingerprint :: Ptr Fingerprint -> IO FingerprintpeekFingerprint258,8884
lemOff = write }STORABLE169,6344

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Arr.hs,3781
module GHC.Arr (Arr20,612
data Array i eArray57,1665
data STArray s i eSTArray74,2309
writeSTArray :: Ix i => STArray s i e -> i -> e -> ST s ()writeSTArray600,21832
unsafeWriteSTArray :: STArray s i e -> Int -> e -> ST s ()unsafeWriteSTArray605,22020
unsafeThawSTArray :: Array i e -> ST s (STArray s i e)unsafeThawSTArray643,23666
unsafeReplace :: Array i e -> [(Int, e)] -> Array i eunsafeReplace416,15280
unsafeReadSTArray :: STArray s i e -> Int -> ST s eunsafeReadSTArray595,21660
unsafeFreezeSTArray :: STArray s i e -> ST s (Array i e)unsafeFreezeSTArray626,22929
unsafeAtA :: Applicative funsafeAtA248,9388
unsafeAt# :: Array i e -> Int -> (# e #)unsafeAt#244,9248
unsafeAt :: Array i e -> Int -> eunsafeAt239,9075
unsafeArray' :: (i,i) -> Int -> [(Int, e)] -> Array i eunsafeArray'150,5820
unsafeArray :: Ix i => (i,i) -> [(Int, e)] -> Array i eunsafeArray146,5682
unsafeAccumArray' :: (e -> a -> e) -> e -> (i,i) -> Int -> [(Int, a)] -> Array i eunsafeAccumArray'373,13590
unsafeAccumArray :: Ix i => (e -> a -> e) -> e -> (i,i) -> [(Int, a)] -> Array i eunsafeAccumArray369,13390
unsafeAccum :: (e -> a -> e) -> Array i e -> [(Int, a)] -> Array i eunsafeAccum435,16079
thawSTArray :: Array i e -> ST s (STArray s i e)thawSTArray631,23142
safeRangeSize :: Ix i => (i, i) -> IntsafeRangeSize201,7594
safeIndex :: Ix i => (i, i) -> Int -> i -> IntsafeIndex214,8096
readSTArray :: Ix i => STArray s i e -> i -> ST s ereadSTArray590,21486
numElementsSTArray :: STArray s i e -> IntnumElementsSTArray586,21374
numElements :: Array i e -> IntnumElements259,9718
newSTArray :: Ix i => (i,i) -> e -> ST s (STArray s i e)newSTArray575,20971
negRange :: Int   -- Uninformative, but Ix does not provide ShownegRange207,7818
listArray :: Ix i => (i,i) -> [e] -> Array i elistArray175,6722
lessSafeIndex :: Ix i => (i, i) -> Int -> i -> IntlessSafeIndex228,8637
ixmap :: (Ix i, Ix j) => (i,i) -> (i -> j) -> Array j e -> Array i eixmap489,17996
indices :: Ix i => Array i e -> [i]indices264,9863
freezeSTArray :: STArray s i e -> ST s (Array i e)freezeSTArray613,22326
foldrElems' :: (a -> b -> b) -> b -> Array i a -> bfoldrElems'295,10726
foldrElems :: (a -> b -> b) -> b -> Array i a -> bfoldrElems275,10183
foldr1Elems :: (a -> a -> a) -> Array i a -> afoldr1Elems326,11696
foldlElems' :: (b -> a -> b) -> b -> Array i a -> bfoldlElems'305,11018
foldlElems :: (b -> a -> b) -> b -> Array i a -> bfoldlElems285,10448
foldl1Elems :: (a -> a -> a) -> Array i a -> afoldl1Elems315,11327
fill :: MutableArray# s e -> (Int, e) -> STRep s a -> STRep s afill157,6081
eqArray :: (Ix i, Eq e) => Array i e -> Array i e -> BooleqArray494,18161
elems :: Array i e -> [e]elems269,10013
done :: i -> i -> Int -> MutableArray# s e -> STRep s (Array i e)done165,6357
cmpIntArray :: Ord e => Array Int e -> Array Int e -> OrderingcmpIntArray505,18582
cmpArray :: (Ix i, Ord e) => Array i e -> Array i e -> OrderingcmpArray501,18433
boundsSTArray :: STArray s i e -> (i,i)boundsSTArray582,21259
bounds :: Array i e -> (i,i)bounds254,9588
badSafeIndex :: Int -> Int -> IntbadSafeIndex234,8870
assocs :: Ix i => Array i e -> [(i, e)]assocs337,12054
array :: Ix iarray127,4705
arrEleBottom :: aarrEleBottom98,3331
amap :: (a -> b) -> Array i a -> Array i bamap441,16327
adjust' :: (e -> a -> e)adjust'388,14235
adjust :: (e -> a -> e) -> MutableArray# s e -> (Int, a) -> STRep s b -> STRep s badjust379,13892
accumArray :: Ix iaccumArray357,12920
accum :: Ix i => (e -> a -> e) -> Array i e -> [(i, a)] -> Array i eaccum430,15883
(//) :: Ix i => Array i e -> [(i, e)] -> Array i e//411,15105
(!#) :: Ix i => Array i e -> i -> (# e #)!#197,7457
(!) :: Ix i => Array i e -> i -> e!193,7338

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Base.hs,5127
module GHC.BaseBase99,3276
class Semigroup a whereSemigroup212,6711
        (<>) :: a -> a -> a<>217,6844
        sconcat :: NonEmpty a -> asconcat227,7195
        stimes :: Integral b => b -> a -> astimes245,7904
class Semigroup a => Monoid a whereMonoid266,8791
        mempty  :: amempty271,8937
        mappend :: a -> a -> amappend280,9382
        mconcat :: [a] -> amconcat292,9833
class Functor f whereFunctor519,16997
    fmap        :: (a -> b) -> f a -> f bfmap568,18911
    (<$)        :: a -> f b -> f a<$574,19144
class Functor f => Applicative f whereApplicative641,20859
    pure :: a -> f apure644,20964
    (<*>) :: f (a -> b) -> f a -> f b<*>663,21619
    liftA2 :: (a -> b -> c) -> f a -> f b -> f cliftA2680,22224
    (*>) :: f a -> f b -> f b*>705,23036
    (<*) :: f a -> f b -> f a<*719,23740
class Applicative m => Monad m whereMonad834,27182
    (>>=)       :: forall a b. m a -> (a -> m b) -> m b>>=844,27470
    (>>)        :: forall a b. m a -> m b -> m b>>856,27826
    return      :: a -> m areturn861,28029
class Applicative f => Alternative f whereAlternative1066,34956
    empty :: f aempty1068,35030
    (<|>) :: f a -> f a -> f a<|>1070,35088
    some :: f a -> f [a]some1073,35142
    many :: f a -> f [a]many1080,35296
class (Alternative m, Monad m) => MonadPlus m whereMonadPlus1097,35709
   mzero :: m amzero1108,35980
   mplus :: m a -> m a -> m amplus1116,36118
data NonEmpty a = a :| [a]NonEmpty1130,36360
data NonEmpty a = a :| [a]:|1130,36360
type String = [Char]String1398,45158
data Opaque = forall a. O aOpaque1474,47503
data Opaque = forall a. O aO1474,47503
when      :: (Applicative f) => Bool -> f () -> f ()when897,29337
until                   :: (a -> Bool) -> (a -> a) -> a -> auntil1523,49211
unsafeChr :: Int -> CharunsafeChr1400,45180
unIO :: IO a -> (State# RealWorld -> (# State# RealWorld, a #))unIO1584,50878
thenIO :: IO a -> IO b -> IO bthenIO1574,50515
shiftRL# :: Word# -> Int# -> Word#shiftRL#1649,53413
shiftL# :: Word# -> Int# -> Word#shiftL#1641,53007
sequence :: Monad m => [m a] -> m [a]sequence905,29647
returnIO :: a -> IO areturnIO1568,50340
quotInt, remInt, divInt, modInt :: Int -> Int -> IntremInt1605,51407
quotRemInt :: Int -> Int -> (Int, Int)quotRemInt1611,51649
quotInt, remInt, divInt, modInt :: Int -> Int -> IntquotInt1605,51407
otherwise               :: Boolotherwise1387,44825
ord :: Char -> Intord1404,45315
quotInt, remInt, divInt, modInt :: Int -> Int -> IntmodInt1605,51407
maxInt, minInt :: IntminInt1423,45937
maxInt, minInt :: IntmaxInt1423,45937
mapM :: Monad m => (a -> m b) -> [a] -> m [b]mapM911,29815
mapFB ::  (elt -> lst -> lst) -> (a -> elt) -> a -> lst -> lstmapFB1306,42030
map :: (a -> b) -> [a] -> [b]map1297,41738
liftM5  :: (Monad m) => (a1 -> a2 -> a3 -> a4 -> a5 -> r) -> m a1 -> m a2 -> m a3 -> m a4 -> m a5 -> m rliftM5961,31673
liftM4  :: (Monad m) => (a1 -> a2 -> a3 -> a4 -> r) -> m a1 -> m a2 -> m a3 -> m a4 -> m rliftM4956,31380
liftM3  :: (Monad m) => (a1 -> a2 -> a3 -> r) -> m a1 -> m a2 -> m a3 -> m rliftM3951,31114
liftM2  :: (Monad m) => (a1 -> a2 -> r) -> m a1 -> m a2 -> m rliftM2944,30767
liftM   :: (Monad m) => (a1 -> r) -> m a1 -> m rliftM935,30467
liftA3 :: Applicative f => (a -> b -> c -> d) -> f a -> f b -> f c -> f dliftA3753,24655
liftA :: Applicative f => (a -> b) -> f a -> f bliftA746,24435
join              :: (Monad m) => m (m a) -> m ajoin803,26091
id                      :: a -> aid1444,46446
iShiftRL# :: Int# -> Int# -> Int#iShiftRL#1671,54526
iShiftRA# :: Int# -> Int# -> Int#iShiftRA#1662,54025
iShiftL# :: Int# -> Int# -> Int#iShiftL#1655,53681
getTag :: a -> Int#getTag1592,51100
foldr            :: (a -> b -> b) -> b -> [a] -> bfoldr1204,38232
flip                    :: (a -> b -> c) -> b -> a -> cflip1496,48132
failIO :: String -> IO afailIO1581,50811
eqString :: String -> String -> BooleqString1409,45460
divModInt# :: Int# -> Int# -> (# Int#, Int# #)divModInt#1620,51980
divModInt :: Int -> Int -> (Int, Int)divModInt1616,51833
quotInt, remInt, divInt, modInt :: Int -> Int -> IntdivInt1605,51407
const                   :: a -> b -> aconst1482,47687
build   :: forall a. (forall b. (a -> b -> b) -> b -> b) -> [a]build1225,38963
breakpointCond :: Bool -> a -> abreakpointCond1471,47446
breakpoint :: a -> abreakpoint1468,47407
bindIO :: IO a -> (a -> IO b) -> IO bbindIO1571,50399
augment :: forall a. (forall b. (a->b->b) -> b -> b) -> [a] -> [a]augment1245,39728
assert :: Bool -> a -> aassert1465,47362
asTypeOf                :: a -> a -> aasTypeOf1532,49572
ap                :: (Monad m) => m (a -> b) -> m a -> m bap991,33074
(=<<)           :: Monad m => (a -> m b) -> m a -> m b=<<888,29033
(<**>) :: Applicative f => f a -> f (a -> b) -> f b<**>724,23851
(.)    :: (b -> c) -> (a -> b) -> a -> c.1489,47937
(++) :: [a] -> [a] -> [a]++1370,44304
($!) :: forall r a (b :: TYPE r). (a -> b) -> a -> b$!1519,49044
($) :: forall r a (b :: TYPE r). (a -> b) -> a -> b$1512,48787

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/ByteOrder.hs,311
module GHC.ByteOrder whereByteOrder19,517
data ByteOrderByteOrder27,654
    = BigEndian    -- ^ most-significant-byte occurs in lowest address.BigEndian28,669
    | LittleEndian -- ^ least-significant-byte occurs in lowest address.LittleEndian29,741
targetByteOrder :: ByteOrdertargetByteOrder40,1184

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Char.hs,56
module GHC.CharChar4,76
chr :: Int -> Charchr17,371

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Clock.hsc,148
module GHC.ClockClock4,65
    getMonotonicTimeNSec :: IO Word64getMonotonicTimeNSec24,582
getMonotonicTime :: IO DoublegetMonotonicTime16,294

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Conc.hs,28
module GHC.ConcConc25,855

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Conc/IO.hs,796
module GHC.Conc.IOIO28,883
foreign import ccall unsafe "rtsSupportsBoundThreads" threaded :: Boolthreaded218,7051
threadWaitWriteSTM :: Fd -> IO (Sync.STM (), IO ())threadWaitWriteSTM152,4717
threadWaitWrite :: Fd -> IO ()threadWaitWrite119,3540
threadWaitReadSTM :: Fd -> IO (Sync.STM (), IO ())threadWaitReadSTM133,4013
threadWaitRead :: Fd -> IO ()threadWaitRead103,2968
threadDelay :: Int -> IO ()threadDelay191,6167
registerDelay :: Int -> IO (TVar Bool)registerDelay208,6712
ioManagerCapabilitiesChanged :: IO ()ioManagerCapabilitiesChanged90,2463
interruptIOManager :: IO ()interruptIOManager83,2312
ensureIOManagerIsRunning :: IO ()ensureIOManagerIsRunning72,1927
closeFdWith :: (Fd -> IO ()) -- ^ Low-level action that performs the real close.closeFdWith175,5617

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Conc/POSIX.hs,2719
module GHC.Conc.POSIXPOSIX28,905
foreign import ccall unsafe "rtsSupportsBoundThreads" threaded :: Boolthreaded127,4288
data DelayReqDelayReq151,4993
  = Delay    {-# UNPACK #-} !USecs {-# UNPACK #-} !(MVar ())Delay152,5007
  | DelaySTM {-# UNPACK #-} !USecs {-# UNPACK #-} !(TVar Bool)DelaySTM153,5068
    getOrSetGHCConcWindowsPendingDelaysStore :: Ptr a -> IO (Ptr a)getOrSetGHCConcWindowsPendingDelaysStore162,5382
    getOrSetGHCConcWindowsIOManagerThreadStore :: Ptr a -> IO (Ptr a)getOrSetGHCConcWindowsIOManagerThreadStore171,5720
type USecs = Word64USecs206,6722
type NSecs = Word64NSecs207,6742
  getMonotonicNSec :: IO NSecsgetMonotonicNSec210,6810
    getOrSetGHCConcWindowsProddingStore :: Ptr a -> IO (Ptr a)getOrSetGHCConcWindowsProddingStore222,7148
  c_getIOManagerEvent :: IO HANDLEc_getIOManagerEvent295,9678
  c_readIOManagerEvent :: IO Word32c_readIOManagerEvent298,9794
  c_sendIOManagerEvent :: Word32 -> IO ()c_sendIOManagerEvent301,9911
   c_WaitForSingleObject :: HANDLE -> DWORD -> IO DWORDc_WaitForSingleObject304,10005
wakeupIOManager :: IO ()wakeupIOManager272,8787
waitForDelayEventSTM :: Int -> IO (TVar Bool)waitForDelayEventSTM138,4606
waitForDelayEvent :: Int -> IO ()waitForDelayEvent129,4360
threadDelay :: Int -> IO ()threadDelay111,3761
startIOManagerThread :: IO ()startIOManagerThread181,5974
service_loop :: HANDLE          -- read end of pipeservice_loop240,7699
service_cont :: HANDLE -> [DelayReq] -> IO ()service_cont267,8641
registerDelay :: Int -> IO (TVar Bool)registerDelay122,4111
prodding :: IORef Boolprodding216,6952
prodServiceThread :: IO ()prodServiceThread224,7212
pendingDelays :: IORef [DelayReq]pendingDelays156,5163
ioManagerThread :: MVar (Maybe ThreadId)ioManagerThread165,5484
ioManager :: IO ()ioManager235,7607
interruptIOManager :: IO ()interruptIOManager178,5914
insertDelay :: DelayReq -> [DelayReq] -> [DelayReq]insertDelay196,6426
getMonotonicUSec :: IO USecsgetMonotonicUSec212,6842
getDelay :: USecs -> [DelayReq] -> IO ([DelayReq], DWORD)getDelay278,9033
ensureIOManagerIsRunning :: IO ()ensureIOManagerIsRunning173,5791
delayTime :: DelayReq -> USecsdelayTime202,6635
calculateTarget :: Int -> IO USecscalculateTarget146,4862
asyncWriteBA :: Int -> Int -> Int -> Int -> MutableByteArray# RealWorld -> IO (Int,Int)asyncWriteBA97,3148
asyncWrite :: Int -> Int -> Int -> Ptr a -> IO (Int, Int)asyncWrite77,2201
asyncReadBA :: Int -> Int -> Int -> Int -> MutableByteArray# RealWorld -> IO (Int,Int)asyncReadBA93,2926
asyncRead :: Int -> Int -> Int -> Ptr a -> IO (Int, Int)asyncRead72,1971
asyncDoProc :: FunPtr (Ptr a -> IO Int) -> Ptr a -> IO IntasyncDoProc82,2434

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Conc/POSIX/Const.hsc,182
module GHC.Conc.POSIX.Const whereConst21,658
io_MANAGER_WAKEUP, io_MANAGER_DIE :: Word32io_MANAGER_WAKEUP27,729
io_MANAGER_WAKEUP, io_MANAGER_DIE :: Word32io_MANAGER_DIE27,729

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Conc/Signal.hs,641
module GHC.Conc.SignalSignal4,65
type Signal = CIntSignal32,972
type HandlerFun = ForeignPtr Word8 -> IO ()HandlerFun37,1019
  getOrSetGHCConcSignalSignalHandlerStore :: Ptr a -> IO (Ptr a)getOrSetGHCConcSignalSignalHandlerStore50,1573
signal_handlers :: MVar (IOArray Int (Maybe (HandlerFun,Dynamic)))signal_handlers42,1250
sharedCAF :: a -> (Ptr a -> IO (Ptr a)) -> IO asharedCAF89,3078
setHandler :: Signal -> Maybe (HandlerFun, Dynamic)setHandler52,1639
runHandlersPtr :: Ptr Word8 -> Signal -> IO ()runHandlersPtr77,2592
runHandlers :: ForeignPtr Word8 -> Signal -> IO ()runHandlers63,2076
maxSig :: IntmaxSig34,992

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Conc/Sync.hs,4981
module GHC.Conc.SyncSync33,995
data ThreadId = ThreadId ThreadId#ThreadId128,3120
foreign import ccall unsafe "rts_getThreadId" getThreadId :: ThreadId# -> CIntgetThreadId157,4175
foreign import ccall unsafe "eq_thread" eq_thread :: ThreadId# -> ThreadId# -> CBooleq_thread162,4312
foreign import ccall unsafe "cmp_thread" cmp_thread :: ThreadId# -> ThreadId# -> CIntcmp_thread164,4398
  rts_enableThreadAllocationLimit :: ThreadId# -> IO ()rts_enableThreadAllocationLimit243,7395
  rts_disableThreadAllocationLimit :: ThreadId# -> IO ()rts_disableThreadAllocationLimit246,7515
  c_setNumCapabilities :: CUInt -> IO ()c_setNumCapabilities374,12614
  c_getNumberOfProcessors :: IO CUIntc_getNumberOfProcessors383,12871
foreign import ccall "&enabled_capabilities" enabled_capabilities :: Ptr CIntenabled_capabilities389,13073
data BlockReasonBlockReason529,19217
  = BlockedOnMVarBlockedOnMVar530,19234
  | BlockedOnBlackHoleBlockedOnBlackHole536,19398
  | BlockedOnExceptionBlockedOnException538,19488
  | BlockedOnSTMBlockedOnSTM540,19544
  | BlockedOnForeignCallBlockedOnForeignCall542,19614
  | BlockedOnIOCompletionBlockedOnIOCompletion544,19679
  | BlockedOnOtherBlockedOnOther546,19761
data ThreadStatusThreadStatus556,20153
  = ThreadRunningThreadRunning557,20171
  | ThreadFinishedThreadFinished559,20245
  | ThreadBlocked  BlockReasonThreadBlocked561,20300
  | ThreadDiedThreadDied563,20382
data PrimMVarPrimMVar623,22881
newtype STM a = STM (State# RealWorld -> (# State# RealWorld, a #))STM645,23798
data TVar a = TVar (TVar# RealWorld a)TVar798,29690
        c_reportStackOverflow :: ThreadId# -> IO ()c_reportStackOverflow899,33099
        reportHeapOverflow :: IO ()reportHeapOverflow902,33201
   errorBelch :: CString -> CString -> IO ()errorBelch921,33992
yield :: IO ()yield481,17580
writeTVar :: TVar a -> a -> STM ()writeTVar834,30912
withMVar :: MVar a -> (a -> IO b) -> IO bwithMVar845,31371
unsafeIOToSTM :: IO a -> STM aunsafeIOToSTM713,25855
uncaughtExceptionHandler :: IORef (SomeException -> IO ())uncaughtExceptionHandler905,33280
unSTM :: STM a -> (State# RealWorld -> (# State# RealWorld, a #))unSTM647,23867
throwTo :: Exception e => ThreadId -> e -> IO ()throwTo467,17008
throwSTM :: Exception e => e -> STM athrowSTM781,28998
threadStatus :: ThreadId -> IO ThreadStatusthreadStatus570,20579
threadCapability :: ThreadId -> IO (Int, Bool)threadCapability596,21716
thenSTM :: STM a -> STM b -> STM bthenSTM676,24482
showThreadId :: ThreadId -> StringshowThreadId154,4119
sharedCAF :: a -> (Ptr a -> IO (Ptr a)) -> IO asharedCAF875,32371
setUncaughtExceptionHandler :: (SomeException -> IO ()) -> IO ()setUncaughtExceptionHandler923,34038
setNumCapabilities :: Int -> IO ()setNumCapabilities368,12360
setAllocationCounter :: Int64 -> IO ()setAllocationCounter195,5438
runSparks :: IO ()runSparks521,18976
returnSTM :: a -> STM areturnSTM682,24604
retry :: STM aretry746,27490
reportStackOverflow :: IO ()reportStackOverflow886,32724
reportError :: SomeException -> IO ()reportError891,32842
real_handler :: SomeException -> IO ()real_handler398,13485
readTVarIO :: TVar a -> IO areadTVarIO826,30645
readTVar :: TVar a -> STM areadTVar830,30783
pseq :: a -> b -> bpseq513,18790
par :: a -> b -> bpar517,18858
orElse :: STM a -> STM a -> STM aorElse755,27840
numSparks :: IO IntnumSparks386,12978
numCapabilities :: IntnumCapabilities339,11366
newTVarIO :: a -> IO (TVar a)newTVarIO814,30256
newTVar :: a -> STM (TVar a)newTVar805,29903
newStablePtrPrimMVar :: MVar () -> IO (StablePtr PrimMVar)newStablePtrPrimMVar629,23124
myThreadId :: IO ThreadIdmyThreadId472,17227
modifyMVar_ :: MVar a -> (a -> IO a) -> IO ()modifyMVar_855,31618
mkWeakThreadId :: ThreadId -> IO (Weak ThreadId)mkWeakThreadId617,22711
labelThread :: ThreadId -> String -> IO ()labelThread495,18123
killThread :: ThreadId -> IO ()killThread412,14036
id2TSO :: ThreadId -> ThreadId#id2TSO159,4255
getUncaughtExceptionHandler :: IO (SomeException -> IO ())getUncaughtExceptionHandler926,34170
getNumProcessors :: IO IntgetNumProcessors379,12730
getNumCapabilities :: IO IntgetNumCapabilities349,11643
getAllocationCounter :: IO Int64getAllocationCounter203,5686
forkOnWithUnmask :: Int -> ((forall a . IO a -> IO a) -> IO ()) -> IO ThreadIdforkOnWithUnmask328,10876
forkOn :: Int -> IO () -> IO ThreadIdforkOn316,10449
forkIOWithUnmask :: ((forall a . IO a -> IO a) -> IO ()) -> IO ThreadIdforkIOWithUnmask290,9234
forkIO :: IO () -> IO ThreadIdforkIO266,8291
enableAllocationLimit :: IO ()enableAllocationLimit229,7000
disableAllocationLimit :: IO ()disableAllocationLimit237,7208
childHandler :: SomeException -> IO ()childHandler391,13152
catchSTM :: Exception e => STM a -> (e -> STM a) -> STM acatchSTM790,29361
bindSTM :: STM a -> (a -> STM b) -> STM bbindSTM670,24349
atomically :: STM a -> IO aatomically738,27085

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Conc/WinIO.hs,35
module GHC.Conc.WinIOWinIO25,853

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Conc/Windows.hs,720
module GHC.Conc.WindowsWindows21,689
threadDelay :: Int -> IO ()threadDelay99,3463
registerDelay :: Int -> IO (TVar Bool)registerDelay105,3686
interruptIOManager :: IO ()interruptIOManager112,3939
ensureIOManagerIsRunning :: IO ()ensureIOManagerIsRunning108,3786
asyncWriteBA :: Int -> Int -> Int -> Int -> MutableByteArray# RealWorld -> IO (Int,Int)asyncWriteBA85,2850
asyncWrite :: Int -> Int -> Int -> Ptr a -> IO (Int, Int)asyncWrite65,1903
asyncReadBA :: Int -> Int -> Int -> Int -> MutableByteArray# RealWorld -> IO (Int,Int)asyncReadBA81,2628
asyncRead :: Int -> Int -> Int -> Ptr a -> IO (Int, Int)asyncRead60,1673
asyncDoProc :: FunPtr (Ptr a -> IO Int) -> Ptr a -> IO IntasyncDoProc70,2136

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/ConsoleHandler.hsc,505
module GHC.ConsoleHandlerConsoleHandler21,607
data HandlerHandler50,1242
 = DefaultDefault51,1255
 | IgnoreIgnore52,1266
 | Catch (ConsoleEvent -> IO ())Catch53,1276
foreign import ccall unsafe "rtsSupportsBoundThreads" threaded :: Boolthreaded135,4305
  rts_installHandler :: CInt -> Ptr (StablePtr (CInt -> IO ())) -> IO CIntrts_installHandler138,4445
  rts_ConsoleHandlerDone :: CInt -> IO ()rts_ConsoleHandlerDone140,4587
installHandler :: Handler -> IO HandlerinstallHandler74,2170

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Constants.hs,42
module GHC.Constants whereConstants4,65

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Desugar.hs,360
module GHC.Desugar ((>>>), AnnotationWrapper(..), toAnnotationWrapper) whereDesugar22,614
data AnnotationWrapper = forall a. (Data a) => AnnotationWrapper aAnnotationWrapper38,1361
toAnnotationWrapper :: (Data a) => a -> AnnotationWrappertoAnnotationWrapper40,1429
(>>>) :: forall arr. Arrow arr => forall a b c. arr a b -> arr b c -> arr a c>>>29,847

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Enum.hs,4206
module GHC.Enum(Enum25,687
class  Bounded a  whereBounded51,1553
    minBound, maxBound :: aminBound52,1577
    minBound, maxBound :: amaxBound52,1577
class  Enum a   whereEnum83,2766
    succ                :: a -> asucc85,2858
    pred                :: a -> apred87,2969
    toEnum              :: Int -> atoEnum89,3035
    fromEnum            :: a -> IntfromEnum93,3232
    enumFrom            :: a -> [a]enumFrom101,3576
    enumFromThen        :: a -> a -> [a]enumFromThen114,4174
    enumFromTo          :: a -> a -> [a]enumFromTo124,4577
    enumFromThenTo      :: a -> a -> a -> [a]enumFromThenTo140,5265
up_list :: Integer -> Integer -> Integer -> [Integer]up_list947,36205
up_fb :: (Integer -> a -> a) -> a -> Integer -> Integer -> Integer -> aup_fb936,35702
toEnumError :: (Show a) => String -> Int -> (a,a) -> btoEnumError191,7082
succError :: String -> asuccError207,7648
predError :: String -> apredError212,7815
maxIntWord :: WordmaxIntWord704,25637
go_up_char_list :: Int# -> Int# -> Int# -> Stringgo_up_char_list461,16742
go_up_char_fb :: (Char -> a -> a) -> a -> Int# -> Int# -> Int# -> ago_up_char_fb447,16286
go_dn_char_list :: Int# -> Int# -> Int# -> Stringgo_dn_char_list468,16949
go_dn_char_fb :: (Char -> a -> a) -> a -> Int# -> Int# -> Int# -> ago_dn_char_fb454,16514
fromEnumError :: (Show a) => String -> a -> bfromEnumError199,7355
enumNegDeltaToNatural :: Natural -> Natural -> Natural -> [Natural]enumNegDeltaToNatural998,37994
enumDeltaToNatural :: Natural -> Natural -> Natural -> [Natural]enumDeltaToNatural992,37814
enumDeltaToIntegerFB :: (Integer -> a -> a) -> aenumDeltaToIntegerFB906,34512
enumDeltaToInteger1FB :: (Integer -> a -> a) -> aenumDeltaToInteger1FB915,34901
enumDeltaToInteger1 :: Integer -> Integer -> [Integer]enumDeltaToInteger1929,35438
enumDeltaToInteger :: Integer -> Integer -> Integer -> [Integer]enumDeltaToInteger923,35226
enumDeltaNatural :: Natural -> Natural -> [Natural]enumDeltaNatural989,37708
enumDeltaIntegerFB :: (Integer -> b -> b) -> Integer -> Integer -> benumDeltaIntegerFB892,33982
enumDeltaInteger :: Integer -> Integer -> [Integer]enumDeltaInteger897,34164
eftWordFB :: (Word -> r -> r) -> r -> Word# -> Word# -> reftWordFB732,26648
eftWord :: Word# -> Word# -> [Word]eftWord722,26250
eftIntFB :: (Int -> r -> r) -> r -> Int# -> Int# -> reftIntFB551,19581
eftInt :: Int# -> Int# -> [Int]eftInt541,19224
eftCharFB :: (Char -> a -> a) -> a -> Int# -> Int# -> aeftCharFB402,14749
eftChar :: Int# -> Int# -> StringeftChar409,15008
efdtWordUpFB :: (Word -> r -> r) -> r -> Word# -> Word# -> Word# -> refdtWordUpFB792,29209
efdtWordUp :: Word# -> Word# -> Word# -> [Word]efdtWordUp776,28362
efdtWordFB :: (Word -> r -> r) -> r -> Word# -> Word# -> Word# -> refdtWordFB770,28137
efdtWordDnFB :: (Word -> r -> r) -> r -> Word# -> Word# -> Word# -> refdtWordDnFB823,30855
efdtWordDn :: Word# -> Word# -> Word# -> [Word]efdtWordDn807,30017
efdtWord :: Word# -> Word# -> Word# -> [Word]efdtWord763,27883
efdtIntUpFB :: (Int -> r -> r) -> r -> Int# -> Int# -> Int# -> refdtIntUpFB611,21963
efdtIntUp :: Int# -> Int# -> Int# -> [Int]efdtIntUp595,21180
efdtIntFB :: (Int -> r -> r) -> r -> Int# -> Int# -> Int# -> refdtIntFB589,20975
efdtIntDnFB :: (Int -> r -> r) -> r -> Int# -> Int# -> Int# -> refdtIntDnFB642,23482
efdtIntDn :: Int# -> Int# -> Int# -> [Int]efdtIntDn626,22708
efdtInt :: Int# -> Int# -> Int# -> [Int]efdtInt582,20742
efdtCharFB :: (Char -> a -> a) -> a -> Int# -> Int# -> Int# -> aefdtCharFB432,15806
efdtChar :: Int# -> Int# -> Int# -> StringefdtChar440,16077
efdWord :: Word# -> Word# -> [Word]efdWord756,27632
efdInt :: Int# -> Int# -> [Int]efdInt575,20516
efdCharFB :: (Char -> a -> a) -> a -> Int# -> Int# -> aefdCharFB416,15269
efdChar :: Int# -> Int# -> StringefdChar424,15530
dn_list :: Integer -> Integer -> Integer -> [Integer]dn_list952,36433
dn_fb :: (Integer -> a -> a) -> a -> Integer -> Integer -> Integer -> adn_fb941,35953
boundedEnumFromThen :: (Enum a, Bounded a) => a -> a -> [a]boundedEnumFromThen170,6345
boundedEnumFrom :: (Enum a, Bounded a) => a -> [a]boundedEnumFrom165,6125

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Environment.hs,237
module GHC.Environment (getFullArgs) whereEnvironment5,86
    getFullProgArgv :: Ptr CInt -> Ptr (Ptr CString) -> IO ()getFullProgArgv39,1107
getFullArgs :: IO [String]getFullArgs28,763
e WINDOWS_CCONV stdcallWINDOWS_CCONV16,337

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Err.hs,375
module GHC.Err( absentErr, error, errorWithoutStackTrace, undefined ) whereErr25,926
undefined :: forall (r :: RuntimeRep). forall (a :: TYPE r).undefined73,3085
errorWithoutStackTrace :: forall (r :: RuntimeRep). forall (a :: TYPE r).errorWithoutStackTrace46,1818
error :: forall (r :: RuntimeRep). forall (a :: TYPE r).error35,1315
absentErr :: aabsentErr79,3305

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event.hs,30
module GHC.EventEvent12,374

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/Arr.hs,250
module GHC.Event.ArrArr3,62
data Arr a = Arr (MutableArray# RealWorld a)Arr17,335
write :: Arr a -> Int -> a -> IO ()write30,714
size :: Arr a -> Intsize23,521
read :: Arr a -> Int -> IO aread26,585
new :: a -> Int -> IO (Arr a)new19,381

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/Array.hs,2111
module GHC.Event.ArrayArray4,84
newtype Array a = Array (IORef (AC a))Array55,1430
data AC a = ACAC58,1499
    memcpy :: Ptr a -> Ptr a -> CSize -> IO (Ptr a)memcpy325,10787
    memmove :: Ptr a -> Ptr a -> CSize -> IO (Ptr a)memmove328,10887
useAsPtr :: Array a -> (Ptr a -> Int -> IO b) -> IO buseAsPtr177,5392
unsafeWrite' :: Storable a => AC a -> Int -> a -> IO ()unsafeWrite'130,3763
unsafeWrite :: Storable a => Array a -> Int -> a -> IO ()unsafeWrite125,3621
unsafeRead :: Storable a => Array a -> Int -> IO aunsafeRead118,3327
unsafeLoad :: Array a -> (Ptr a -> Int -> IO Int) -> IO IntunsafeLoad138,4129
unsafeCopyFromBuffer :: Storable a => Array a -> Ptr a -> Int -> IO ()unsafeCopyFromBuffer147,4437
snoc :: Storable a => Array a -> a -> IO ()snoc182,5546
removeAt :: Storable a => Array a -> Int -> IO ()removeAt281,9217
reallocArray :: Storable a => ForeignPtr a -> Int -> Int -> IO (ForeignPtr a)reallocArray74,1961
new :: Storable a => Int -> IO (Array a)new88,2519
loop :: Storable a => Array a -> b -> (b -> a -> IO (b,Bool)) -> IO ()loop210,6410
length :: Array a -> IO Intlength108,3123
forM_ :: Storable a => Array a -> (a -> IO ()) -> IO ()forM_195,5908
firstPowerOf2 :: Int -> IntfirstPowerOf2307,10295
findIndex :: Storable a => (a -> Bool) -> Array a -> IO (Maybe (Int,a))findIndex227,7023
ensureCapacity' :: Storable a => AC a -> Int -> IO (AC a)ensureCapacity'166,5125
ensureCapacity :: Storable a => Array a -> Int -> IO ()ensureCapacity159,4901
empty :: IO (Array a)empty63,1648
duplicate :: Storable a => Array a -> IO (Array a)duplicate95,2671
copy' :: Storable a => AC a -> Int -> AC a -> Int -> Int -> IO (AC a)copy'261,8296
copy :: Storable a => Array a -> Int -> Array a -> Int -> Int -> IO ()copy253,7957
concat :: Storable a => Array a -> Array a -> IO ()concat245,7641
clear :: Array a -> IO ()clear190,5787
capacity :: Array a -> IO Intcapacity113,3223
allocArray :: Storable a => Int -> IO (ForeignPtr a)allocArray68,1747
+ show (_len_)) elseCHECK_BOUNDS49,1325
efine BOUNDS_CHECKING 1BOUNDS_CHECKING43,947

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/Control.hs,1600
module GHC.Event.ControlControl8,138
data ControlMessage = CMsgWakeupControlMessage56,1447
data ControlMessage = CMsgWakeupCMsgWakeup56,1447
                    | CMsgDieCMsgDie57,1480
                    | CMsgSignal {-# UNPACK #-} !(ForeignPtr Word8)CMsgSignal58,1510
data Control = W {Control65,1796
data Control = W {W65,1796
      controlReadFd  :: {-# UNPACK #-} !FdcontrolReadFd66,1815
    , controlWriteFd :: {-# UNPACK #-} !FdcontrolWriteFd67,1858
    , controlEventFd :: {-# UNPACK #-} !FdcontrolEventFd69,1927
    , wakeupReadFd   :: {-# UNPACK #-} !FdwakeupReadFd71,1976
    , wakeupWriteFd  :: {-# UNPACK #-} !FdwakeupWriteFd72,2019
    , didRegisterWakeupFd :: !BooldidRegisterWakeupFd74,2069
    , controlIsDead  :: !(IORef Bool)controlIsDead76,2156
    sizeof_siginfo_t :: CSizesizeof_siginfo_t150,4751
   c_eventfd :: CInt -> CInt -> IO CIntc_eventfd227,7866
   c_eventfd_write :: CInt -> CULLong -> IO CIntc_eventfd_write230,7965
   c_setIOManagerWakeupFd :: CInt -> IO ()c_setIOManagerWakeupFd234,8073
wakeupReadFd :: Control -> FdwakeupReadFd80,2227
sendWakeup :: Control -> IO ()sendWakeup185,6200
sendMessage :: Fd -> ControlMessage -> IO IntsendMessage217,7444
sendDie :: Control -> IO ()sendDie213,7320
readControlMessage :: Control -> Fd -> IO ControlMessagereadControlMessage152,4782
newControl :: Bool -> IO ControlnewControl87,2431
io_MANAGER_WAKEUP, io_MANAGER_DIE :: Word8io_MANAGER_WAKEUP145,4608
io_MANAGER_WAKEUP, io_MANAGER_DIE :: Word8io_MANAGER_DIE145,4608
closeControl :: Control -> IO ()closeControl131,4145

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/EPoll.hsc,2155
module GHC.Event.EPollEPoll19,605
data EPoll = EPoll {EPoll64,1680
      epollFd     :: {-# UNPACK #-} !EPollFdepollFd65,1701
    , epollEvents :: {-# UNPACK #-} !(A.Array Event)epollEvents66,1746
newtype EPollFd = EPollFd {EPollFd130,3910
      fromEPollFd :: CIntfromEPollFd131,3938
data Event = Event {Event134,3991
      eventTypes :: EventTypeeventTypes135,4012
    , eventFd    :: FdeventFd136,4042
newtype ControlOp = ControlOp CIntControlOp154,4580
 , controlOpAdd    = EPOLL_CTL_ADDcontrolOpAdd157,4644
 , controlOpModify = EPOLL_CTL_MODcontrolOpModify158,4679
 , controlOpDelete = EPOLL_CTL_DELcontrolOpDelete159,4714
newtype EventType = EventType {EventType162,4753
      unEventType :: Word32unEventType163,4785
 , epollIn  = EPOLLINepollIn172,5099
 , epollOut = EPOLLOUTepollOut173,5121
 , epollErr = EPOLLERRepollErr174,5144
 , epollHup = EPOLLHUPepollHup175,5167
 , epollOneShot = EPOLLONESHOTepollOneShot176,5190
    c_epoll_create :: CInt -> IO CIntc_epoll_create236,7363
    c_epoll_ctl :: CInt -> CInt -> CInt -> Ptr Event -> IO CIntc_epoll_ctl239,7454
    c_epoll_wait :: CInt -> Ptr Event -> CInt -> CInt -> IO CIntc_epoll_wait242,7570
    c_epoll_wait_unsafe :: CInt -> Ptr Event -> CInt -> CInt -> IO CIntc_epoll_wait_unsafe245,7689
toEvent :: EventType -> E.EventtoEvent222,6852
poll :: EPoll                     -- ^ statepoll110,3192
new :: IO E.Backendnew31,782
modifyFdOnce :: EPoll -> Fd -> E.Event -> IO BoolmodifyFdOnce93,2504
modifyFd :: EPoll -> Fd -> E.Event -> E.Event -> IO BoolmodifyFd84,2176
fromTimeout :: Timeout -> IntfromTimeout229,7119
fromEvent :: E.Event -> EventTypefromEvent215,6640
epollWaitNonBlock :: EPollFd -> Ptr Event -> Int -> IO IntepollWaitNonBlock209,6393
epollWait :: EPollFd -> Ptr Event -> Int -> Int -> IO IntepollWait203,6135
epollCreate :: IO EPollFdepollCreate187,5599
epollControl_ :: EPollFd -> ControlOp -> Fd -> Ptr Event -> IO CIntepollControl_199,5973
epollControl :: EPollFd -> ControlOp -> Fd -> Ptr Event -> IO ()epollControl195,5803
delete :: EPoll -> IO ()delete77,1996
available :: Boolavailable34,883

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/IntTable.hs,1067
module GHC.Event.IntTableIntTable6,187
newtype IntTable a = IntTable (IORef (IT a))IntTable35,1067
data IT a = IT {IT37,1113
      tabArr  :: {-# UNPACK #-} !(Arr (Bucket a))tabArr38,1130
    , tabSize :: {-# UNPACK #-} !(ForeignPtr Int)tabSize39,1180
data Bucket a = EmptyBucket42,1237
data Bucket a = EmptyEmpty42,1237
              | Bucket {Bucket43,1259
      bucketKey   :: {-# UNPACK #-} !IntbucketKey44,1284
    , bucketValue :: abucketValue45,1325
    , bucketNext  :: Bucket abucketNext46,1348
updateWith :: (a -> Maybe a) -> Int -> IntTable a -> IO (Maybe a)updateWith127,4289
reset :: Int -> Maybe a -> IntTable a -> IO ()reset116,3890
new_ :: Int -> IO (IT a)new_62,1765
new :: Int -> IO (IntTable a)new59,1673
lookup :: Int -> IntTable a -> IO (Maybe a)lookup49,1385
insertWith :: (a -> a -> a) -> Int -> a -> IntTable a -> IO (Maybe a)insertWith91,2858
indexOf :: Int -> IT a -> IntindexOf120,4048
grow :: IT a -> IORef (IT a) -> Int -> IO ()grow71,1988
delete :: Int -> IntTable a -> IO (Maybe a)delete124,4200

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/Internal.hs,871
module GHC.Event.InternalInternal6,145
data Backend = forall a. Backend {Backend32,660
      _beState :: !a_beState33,695
    , _bePoll :: a                          -- backend state_bePoll37,837
    , _beModifyFd :: a_beModifyFd44,1195
    , _beModifyFdOnce :: a_beModifyFdOnce52,1572
    , _beDelete :: a -> IO ()_beDelete57,1746
throwErrnoIfMinus1NoRetry :: (Eq a, Num a) => String -> IO a -> IO athrowErrnoIfMinus1NoRetry97,3246
poll :: Backend -> Maybe Timeout -> (Fd -> Event -> IO ()) -> IO Intpoll70,2130
modifyFdOnce :: Backend -> Fd -> Event -> IO BoolmodifyFdOnce84,2706
modifyFd :: Backend -> Fd -> Event -> Event -> IO BoolmodifyFd77,2417
exchangePtr :: Ptr (Ptr a) -> Ptr a -> IO (Ptr a)exchangePtr109,3653
delete :: Backend -> IO ()delete88,2858
backend :: (a -> Maybe Timeout -> (Fd -> Event -> IO ()) -> IO Int)backend60,1783

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/Internal/Types.hs,1117
module GHC.Event.Internal.TypesTypes17,589
newtype Event = Event IntEvent46,1121
data Lifetime = OneShot   -- ^ the registration will be active for only oneLifetime101,2482
data Lifetime = OneShot   -- ^ the registration will be active for only oneOneShot101,2482
              | MultiShot -- ^ the registration will trigger multiple timesMultiShot103,2593
newtype EventLifetime = EL IntEventLifetime129,3339
newtype EventLifetime = EL IntEL129,3339
data Timeout = Timeout {-# UNPACK #-} !Word64Timeout158,4173
             | ForeverForever159,4219
evtWrite :: EventevtWrite59,1399
evtRead :: EventevtRead54,1287
evtNothing :: EventevtNothing49,1184
evtConcat :: [Event] -> EventevtConcat94,2320
evtCombine :: Event -> Event -> EventevtCombine90,2206
evtClose :: EventevtClose64,1509
eventLifetime :: Event -> Lifetime -> EventLifetimeeventLifetime142,3688
eventIs :: Event -> Event -> BooleventIs68,1571
elSupremum :: Lifetime -> Lifetime -> LifetimeelSupremum109,2829
elLifetime :: EventLifetime -> LifetimeelLifetime149,3891
elEvent :: EventLifetime -> EventelEvent153,4022

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/KQueue.hsc,2491
module GHC.Event.KQueueKQueue9,183
data KQueue = KQueue {KQueue72,1781
      kqueueFd     :: {-# UNPACK #-} !KQueueFdkqueueFd73,1804
    , kqueueEvents :: {-# UNPACK #-} !(A.Array Event)kqueueEvents74,1851
newtype KQueueFd = KQueueFd {KQueueFd125,3410
      fromKQueueFd :: CIntfromKQueueFd126,3440
data Event = KEvent {Event131,3569
data Event = KEvent {KEvent131,3569
      ident  :: {-# UNPACK #-} !CUIntPtrident132,3591
    , filter :: {-# UNPACK #-} !Filterfilter133,3632
    , flags  :: {-# UNPACK #-} !Flagflags134,3671
    , fflags :: {-# UNPACK #-} !FFlagfflags135,3708
    , data_  :: {-# UNPACK #-} !Int64data_137,3774
    , udata  :: {-# UNPACK #-} !(Ptr ())udata141,3865
newtype FFlag = FFlag Word32FFlag171,5034
 , noteEOF = NOTE_EOFnoteEOF178,5231
newtype Flag = Flag Word32Flag182,5324
 , flagAdd     = EV_ADDflagAdd195,5701
 , flagDelete  = EV_DELETEflagDelete196,5725
 , flagOneshot = EV_ONESHOTflagOneshot197,5752
newtype Filter = Filter Int32Filter201,5851
data TimeSpec = TimeSpec {TimeSpec216,6245
      tv_sec  :: {-# UNPACK #-} !CTimetv_sec217,6272
    , tv_nsec :: {-# UNPACK #-} !CLongtv_nsec218,6311
    c_kqueue :: IO CIntc_kqueue294,9051
    c_kevent :: KQueueFd -> Ptr Event -> CInt -> Ptr Event -> CIntc_kevent298,9147
    c_kevent_unsafe :: KQueueFd -> Ptr Event -> CInt -> Ptr Event -> CIntc_kevent_unsafe302,9292
withTimeSpec :: TimeSpec -> (Ptr TimeSpec -> IO a) -> IO awithTimeSpec272,8344
toFilter :: E.Event -> [Filter]toFilter96,2411
toEvents :: Fd -> [Filter] -> Flag -> FFlag -> [Event]toEvents144,3947
toEvent :: Filter -> E.EventtoEvent287,8801
poll :: KQueuepoll105,2770
new :: IO E.Backendnew21,362
modifyFdOnce :: KQueue -> Fd -> E.Event -> IO BoolmodifyFdOnce101,2598
modifyFd :: KQueue -> Fd -> E.Event -> E.Event -> IO BoolmodifyFd89,2169
kqueueWaitNonBlock :: KQueueFd -> Ptr Event -> Int -> IO IntkqueueWaitNonBlock259,7686
kqueueWait :: KQueueFd -> Ptr Event -> Int -> TimeSpec -> IO IntkqueueWait254,7477
kqueueControl :: KQueueFd -> [Event] -> IO BoolkqueueControl239,6911
kqueue :: IO KQueueFdkqueue236,6826
kevent :: Bool -> KQueueFd -> Ptr Event -> Int -> Ptr Event -> Int -> Ptr TimeSpeckevent266,8038
fromTimeout :: Timeout -> TimeSpecfromTimeout277,8510
filterWrite :: FilterfilterWrite213,6178
filterRead :: FilterfilterRead211,6116
delete :: KQueue -> IO ()delete84,2069
available :: Boolavailable24,464
define NOTE_EOF 0NOTE_EOF62,1598

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/Manager.hs,2861
module GHC.Event.ManagerManager21,681
data FdData = FdData {FdData103,2704
      fdKey       :: {-# UNPACK #-} !FdKeyfdKey104,2727
    , fdEvents    :: {-# UNPACK #-} !EventLifetimefdEvents105,2770
    , _fdCallback :: !IOCallback_fdCallback106,2821
data FdKey = FdKey {FdKey110,2905
      keyFd     :: {-# UNPACK #-} !FdkeyFd111,2926
    , keyUnique :: {-# UNPACK #-} !UniquekeyUnique112,2964
type IOCallback = FdKey -> Event -> IO ()IOCallback118,3145
data State = CreatedState120,3188
data State = CreatedCreated120,3188
           | RunningRunning121,3209
           | DyingDying122,3230
           | ReleasingReleasing123,3249
           | FinishedFinished124,3272
data EventManager = EventManagerEventManager130,3447
    { emBackend      :: !BackendemBackend131,3480
    , emFds          :: {-# UNPACK #-} !(Array Int (MVar (IntTable [FdData])))emFds132,3513
    , emState        :: {-# UNPACK #-} !(IORef State)emState133,3592
    , emUniqueSource :: {-# UNPACK #-} !UniqueSourceemUniqueSource134,3646
    , emControl      :: {-# UNPACK #-} !ControlemControl135,3699
    , emLock         :: {-# UNPACK #-} !(MVar ())emLock136,3747
wakeManager :: EventManager -> IO ()wakeManager378,12428
unregisterFd_ :: EventManager -> FdKey -> IO BoolunregisterFd_394,12982
unregisterFd :: EventManager -> FdKey -> IO ()unregisterFd415,13952
unless :: Monad m => Bool -> m () -> m ()unless523,18322
step :: EventManager -> IO Statestep291,9165
shutdown :: EventManager -> IO ()shutdown227,6600
release :: EventManager -> IO ()release234,6849
registerFd_ :: EventManager -> IOCallback -> Fd -> Event -> LifetimeregisterFd_317,10122
registerFd :: EventManager -> IOCallback -> Fd -> Event -> Lifetime -> IO FdKeyregisterFd361,11842
registerControlFd :: EventManager -> Fd -> Event -> IO ()registerControlFd221,6360
onFdEvent :: EventManager -> Fd -> Event -> IO ()onFdEvent461,15610
nullToNothing :: [a] -> Maybe [a]nullToNothing519,18221
newWith :: Backend -> IO EventManagernewWith187,5154
newDefaultBackend :: IO BackendnewDefaultBackend171,4709
new :: IO EventManagernew183,5029
loop :: EventManager -> IO ()loop257,7597
haveOneShot :: BoolhaveOneShot151,4122
hashFd :: Fd -> InthashFd143,3875
handleControlEvent :: EventManager -> Fd -> Event -> IO ()handleControlEvent163,4429
finished :: EventManager -> IO Boolfinished239,7023
failOnInvalidFile :: String -> Fd -> IO Bool -> IO ()failOnInvalidFile213,6088
eventsOf :: [FdData] -> EventLifetimeeventsOf387,12697
closeFd_ :: EventManagercloseFd_440,14947
closeFd :: EventManager -> (Fd -> IO ()) -> Fd -> IO ()closeFd421,14137
cleanup :: EventManager -> IO ()cleanup242,7121
callbackTableVar :: EventManager -> Fd -> MVar (IntTable [FdData])callbackTableVar147,3974
callbackArraySize :: IntcallbackArraySize140,3826

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/PSQ.hs,2167
module GHC.Event.PSQPSQ11,316
type Prio = Word64Prio70,1473
type Nat = WordNat72,1493
type Key = UniqueKey74,1510
type Mask = IntMask77,1604
type PSQ a = IntPSQ aPSQ79,1621
data Elem a = EElem82,1698
data Elem a = EE82,1698
    { key   :: {-# UNPACK #-} !Keykey83,1714
    , prio  :: {-# UNPACK #-} !Prioprio84,1749
    , value :: avalue85,1785
data IntPSQ vIntPSQ90,1953
    = Bin {-# UNPACK #-} !Key {-# UNPACK #-} !Prio !v {-# UNPACK #-} !Mask !(IntPSQ v) !(IntPSQ v)Bin91,1967
    | Tip {-# UNPACK #-} !Key {-# UNPACK #-} !Prio !vTip92,2066
    | NilNil93,2120
zero :: Key -> Mask -> Boolzero127,2783
xor :: Nat -> Nat -> Natxor102,2257
unsafeInsertNew :: Key -> Prio -> v -> IntPSQ v -> IntPSQ vunsafeInsertNew216,5377
toList :: IntPSQ v -> [Elem v]toList336,9525
size :: IntPSQ v -> Intsize165,3835
singleton :: Key -> Prio -> v -> IntPSQ vsingleton206,5030
null :: IntPSQ v -> Boolnull160,3720
nomatch :: Key -> Key -> Mask -> Boolnomatch132,2895
natFromInt :: Int -> NatnatFromInt119,2633
minView :: IntPSQ v -> Maybe (Elem v, IntPSQ v)minView382,11196
merge :: Mask -> IntPSQ v -> IntPSQ v -> IntPSQ vmerge416,12404
maskW :: Nat -> NatmaskW139,3076
lookup :: Key -> IntPSQ v -> Maybe (Prio, v)lookup173,4120
link :: Key -> Prio -> v -> Key -> IntPSQ v -> IntPSQ v -> IntPSQ vlink244,6310
intFromNat :: Nat -> IntintFromNat123,2711
highestBitMask :: Nat -> NathighestBitMask150,3327
findMin :: IntPSQ v -> Maybe (Elem v)findMin190,4581
empty :: IntPSQ vempty202,4955
deleteView :: Key -> IntPSQ v -> Maybe (Prio, v, IntPSQ v)deleteView353,10127
deleteMin :: IntPSQ v -> IntPSQ vdeleteMin279,7543
delete :: Key -> IntPSQ v -> IntPSQ vdelete259,6911
complement :: Nat -> Natcomplement106,2342
branchMask :: Key -> Key -> MaskbranchMask143,3158
binShrinkR :: Key -> Prio -> v -> Mask -> IntPSQ v -> IntPSQ v -> IntPSQ vbinShrinkR326,9045
binShrinkL :: Key -> Prio -> v -> Mask -> IntPSQ v -> IntPSQ v -> IntPSQ vbinShrinkL319,8734
atMost :: Prio -> IntPSQ v -> ([Elem v], IntPSQ v)atMost392,11631
alteralter300,8137
adjustadjust285,7656
(.&.) :: Nat -> Nat -> Nat.&.98,2166

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/Poll.hsc,1220
module GHC.Event.PollPoll7,133
data Poll = Poll {Poll48,1060
      pollChanges :: {-# UNPACK #-} !(MVar (A.Array PollFd))pollChanges49,1079
    , pollFd      :: {-# UNPACK #-} !(A.Array PollFd)pollFd50,1140
data PollFd = PollFd {PollFd149,4871
      pfdFd      :: {-# UNPACK #-} !FdpfdFd150,4894
    , pfdEvents  :: {-# UNPACK #-} !EventpfdEvents151,4933
    , pfdRevents :: {-# UNPACK #-} !EventpfdRevents152,4975
newtype Event = Event CShortEvent155,5058
 , pollIn    = POLLINpollIn165,5399
 , pollOut   = POLLOUTpollOut166,5421
 , pollErr   = POLLERRpollErr167,5444
 , pollHup   = POLLHUPpollHup168,5467
    c_poll :: Ptr PollFd -> CNfds -> CInt -> IO CIntc_poll203,6542
    c_poll_unsafe :: Ptr PollFd -> CNfds -> CInt -> IO CIntc_poll_unsafe206,6638
toEvent :: Event -> E.EventtoEvent178,5700
reworkFd :: Poll -> PollFd -> IO ()reworkFd66,1672
poll :: Pollpoll79,2112
new :: IO E.Backendnew19,310
modifyFdOnce :: Poll -> Fd -> E.Event -> IO BoolmodifyFdOnce63,1539
modifyFd :: Poll -> Fd -> E.Event -> E.Event -> IO BoolmodifyFd57,1339
fromTimeout :: E.Timeout -> IntfromTimeout143,4676
fromEvent :: E.Event -> EventfromEvent171,5494
available :: Boolavailable22,410

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/Thread.hs,2521
module GHC.Event.ThreadThread4,79
    getOrSetSystemEventThreadEventManagerStore :: Ptr a -> IO (Ptr a)getOrSetSystemEventThreadEventManagerStore188,7593
    getOrSetSystemEventThreadIOManagerThreadStore :: Ptr a -> IO (Ptr a)getOrSetSystemEventThreadIOManagerThreadStore204,8207
    getOrSetSystemTimerThreadEventManagerStore :: Ptr a -> IO (Ptr a)getOrSetSystemTimerThreadEventManagerStore220,8775
    getOrSetSystemTimerThreadIOManagerThreadStore :: Ptr a -> IO (Ptr a)getOrSetSystemTimerThreadIOManagerThreadStore229,9122
foreign import ccall unsafe "rtsSupportsBoundThreads" threaded :: Boolthreaded323,12437
   c_setIOManagerControlFd :: CUInt -> CInt -> IO ()c_setIOManagerControlFd359,14091
   c_setTimerManagerControlFd :: CInt -> IO ()c_setTimerManagerControlFd362,14200
timerManagerThreadVar :: MVar (Maybe ThreadId)timerManagerThreadVar232,9235
timerManager :: IORef (Maybe TM.TimerManager)timerManager222,8846
threadWaitWriteSTM :: Fd -> IO (STM (), IO ())threadWaitWriteSTM163,6758
threadWaitWrite :: Fd -> IO ()threadWaitWrite88,3382
threadWaitSTM :: Event -> Fd -> IO (STM (), IO ())threadWaitSTM128,4991
threadWaitReadSTM :: Fd -> IO (STM (), IO ())threadWaitReadSTM151,6083
threadWaitRead :: Fd -> IO ()threadWaitRead78,2983
threadWait :: Event -> Fd -> IO ()threadWait114,4464
threadDelay :: Int -> IO ()threadDelay55,2107
startTimerManagerThread :: IO ()startTimerManagerThread293,11306
startIOManagerThreads :: IO ()startIOManagerThreads244,9579
startIOManagerThread :: IOArray Int (Maybe (ThreadId, EventManager))startIOManagerThread262,10130
show_int :: Int -> Stringshow_int252,9880
restartPollLoop :: EventManager -> Int -> IO ThreadIdrestartPollLoop255,9941
registerDelay :: Int -> IO (TVar Bool)registerDelay65,2467
numEnabledEventManagers :: IORef IntnumEnabledEventManagers198,7992
ioManagerLock :: MVar ()ioManagerLock209,8437
ioManagerCapabilitiesChanged :: IO ()ioManagerCapabilitiesChanged325,12509
getSystemTimerManager :: IO TM.TimerManagergetSystemTimerManager214,8580
getSystemEventManager_ :: IO EventManagergetSystemEventManager_181,7362
getSystemEventManager :: IO (Maybe EventManager)getSystemEventManager173,7119
eventManager :: IORef (IOArray Int (Maybe (ThreadId, EventManager)))eventManager190,7664
ensureIOManagerIsRunning :: IO ()ensureIOManagerIsRunning237,9413
closeFdWith :: (Fd -> IO ())        -- ^ Action that performs the close.closeFdWith97,3695
blockedOnBadFD :: SomeExceptionblockedOnBadFD125,4877

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/TimeOut.hs,321
module GHC.Event.TimeOut whereTimeOut16,515
type TimeoutQueue = Q.PSQ TimeoutCallbackTimeoutQueue25,707
type TimeoutCallback = IO ()TimeoutCallback33,1098
type TimeoutEdit = TimeoutQueue -> TimeoutQueueTimeoutEdit36,1171
newtype TimeoutKey = TK UniqueTimeoutKey39,1256
newtype TimeoutKey = TK UniqueTK39,1256

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/TimerManager.hs,1568
module GHC.Event.TimerManagerTimerManager10,253
data State = CreatedState70,1674
data State = CreatedCreated70,1674
           | RunningRunning71,1695
           | DyingDying72,1716
           | FinishedFinished73,1735
data TimerManager = TimerManagerTimerManager79,1910
    { emBackend      :: !BackendemBackend80,1943
    , emTimeouts     :: {-# UNPACK #-} !(IORef TimeoutQueue)emTimeouts81,1976
    , emState        :: {-# UNPACK #-} !(IORef State)emState82,2037
    , emUniqueSource :: {-# UNPACK #-} !UniqueSourceemUniqueSource83,2091
    , emControl      :: {-# UNPACK #-} !ControlemControl84,2144
wakeManager :: TimerManager -> IO ()wakeManager194,5793
updateTimeout :: TimerManager -> TimeoutKey -> Int -> IO ()updateTimeout235,7393
unregisterTimeout :: TimerManager -> TimeoutKey -> IO ()unregisterTimeout229,7187
step :: TimerManager -> IO Boolstep168,4813
shutdown :: TimerManager -> IO ()shutdown131,3640
registerTimeout :: TimerManager -> Int -> TimeoutCallback -> IO TimeoutKeyregisterTimeout216,6716
newWith :: Backend -> IO TimerManagernewWith109,2838
newDefaultBackend :: IO BackendnewDefaultBackend98,2572
new :: IO TimerManagernew106,2778
loop :: TimerManager -> IO ()loop153,4357
handleControlEvent :: TimerManager -> Fd -> Event -> IO ()handleControlEvent90,2285
finished :: TimerManager -> IO Boolfinished136,3808
expirationTime :: Int -> IO Q.PrioexpirationTime200,5992
editTimeouts :: TimerManager -> TimeoutEdit -> IO ()editTimeouts240,7570
cleanup :: TimerManager -> IO ()cleanup139,3906

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/Unique.hs,384
module GHC.Event.UniqueUnique5,140
data UniqueSource = US (MutableByteArray# RealWorld)UniqueSource19,337
data UniqueSource = US (MutableByteArray# RealWorld)US19,337
newtype Unique = Unique { asInt :: Int }Unique21,391
newtype Unique = Unique { asInt :: Int }asInt21,391
newUnique :: UniqueSource -> IO UniquenewUnique38,797
newSource :: IO UniqueSourcenewSource31,637

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/Windows.hsc,6045
module GHC.Event.Windows (Windows24,717
  getOrSetGHCConcWindowsIOManagerThreadStore :: Ptr a -> IO (Ptr a)getOrSetGHCConcWindowsIOManagerThreadStore283,12160
  registerIOCPHandle :: FFI.IOCP -> IO ()registerIOCPHandle289,12419
  c_registerAlertableWait :: Bool -> DWORD  -> IO ()c_registerAlertableWait293,12548
  getOverlappedEntries :: Ptr DWORD -> IO (Ptr OVERLAPPED_ENTRY)getOverlappedEntries296,12651
  completeSynchronousRequest :: IO ()completeSynchronousRequest299,12772
type EventElements = [(Event, HandleData)]EventElements314,13297
data EventData = EventData { evtTopLevel :: !Event, evtElems :: !EventElements }EventData315,13340
data EventData = EventData { evtTopLevel :: !Event, evtElems :: !EventElements }evtTopLevel315,13340
data EventData = EventData { evtTopLevel :: !Event, evtElems :: !EventElements }evtElems315,13340
data IOResult aIOResult326,13686
  = IOSuccess { ioValue :: a }IOSuccess327,13702
  = IOSuccess { ioValue :: a }ioValue327,13702
  | IOFailed  { ioErrCode :: Maybe Int }IOFailed328,13733
  | IOFailed  { ioErrCode :: Maybe Int }ioErrCode328,13733
data Manager = ManagerManager332,13898
    { mgrIOCP         :: {-# UNPACK #-} !FFI.IOCPmgrIOCP333,13921
    , mgrClock        ::                !ClockmgrClock334,13971
    , mgrUniqueSource :: {-# UNPACK #-} !UniqueSourcemgrUniqueSource335,14018
    , mgrTimeouts     :: {-# UNPACK #-} !(IORef TimeoutQueue)mgrTimeouts336,14072
    , mgrEvntHandlers :: {-# UNPACK #-}mgrEvntHandlers337,14134
    , mgrOverlappedEntriesmgrOverlappedEntries339,14231
    , mgrThreadPool   :: Maybe ThreadPoolmgrThreadPool341,14325
type StartCallback a = LPOVERLAPPED -> IO aStartCallback457,18653
type StartIOCallback a = StartCallback (CbResult a)StartIOCallback461,18785
data CbResult aCbResult465,18948
  = CbDone (Maybe DWORD) -- ^ Request was handled immediately, no queue.CbDone466,18964
  | CbPending            -- ^ Queued and to be handled by I/O managerCbPending467,19037
  | CbIncomplete         -- ^ I/O request is incomplete but not enqueued, handleCbIncomplete468,19107
  | CbError a            -- ^ I/O request abort, return failure immediatelyCbError470,19236
  | CbNone Bool          -- ^ The caller did not do any checking, the I/OCbNone471,19312
  c_getIOManagerEvent :: IO HANDLEc_getIOManagerEvent1195,56539
  c_readIOManagerEvent :: IO Word32c_readIOManagerEvent1202,56882
foreign import ccall unsafe "rtsSupportsBoundThreads" threadedIOMgr :: BoolthreadedIOMgr1204,56919
foreign import WINDOWS_CCONV unsafe "Sleep" sleepBlock :: Int -> IO ()sleepBlock1207,57016
data HandleData = HandleData {HandleData1213,57204
      tokenKey        :: {-# UNPACK #-} !HandleKeytokenKey1214,57235
    , tokenEvents     :: {-# UNPACK #-} !EventLifetimetokenEvents1215,57286
    , _handleCallback :: !EventCallback_handleCallback1216,57341
data HandleKey = HandleKey {HandleKey1220,57428
      handleValue  :: {-# UNPACK #-} !HANDLEhandleValue1221,57457
    , handleUnique :: {-# UNPACK #-} !UniquehandleUnique1222,57502
type EventCallback = HandleKey -> Event -> IO ()EventCallback1228,57686
withOverlappedEx :: forall a.withOverlappedEx528,21719
withOverlapped :: StringwithOverlapped783,37088
withException :: String -> IO (IOResult a) -> IO awithException810,38182
wakeupIOManager :: IO ()wakeupIOManager1185,56104
updateTimeout :: Manager -> TimeoutKey -> Seconds -> IO ()updateTimeout866,40563
unregisterTimeout :: Manager -> TimeoutKey -> IO ()unregisterTimeout880,41177
unregisterHandle :: Manager -> HandleKey -> IO ()unregisterHandle1244,58241
step :: Bool -> Manager -> IO (Bool, Maybe Seconds)step946,44016
startIOManagerThread :: IO () -> IO ()startIOManagerThread352,14730
secondsToNanoSeconds :: Seconds -> Q.PriosecondsToNanoSeconds441,18061
secondsToMilliSeconds :: Seconds -> Word32secondsToMilliSeconds444,18154
runExpiredTimeouts :: Manager -> IO (Maybe Seconds)runExpiredTimeouts896,41771
requests :: MVar Word64requests375,15563
removeRequest :: IO Word64removeRequest381,15715
registerTimeout :: Manager -> Int -> TimeoutCallback -> IO TimeoutKeyregisterTimeout854,40011
registerHandle :: Manager -> EventCallback -> HANDLE -> Event -> LifetimeregisterHandle1230,57736
registerAlertableWait :: Maybe Seconds  -> IO ()registerAlertableWait1138,53977
processRemoteCompletion :: IO ()processRemoteCompletion1105,52835
processCompletion :: Manager -> Int -> Maybe Seconds -> IO (Bool, Maybe Seconds)processCompletion1033,48798
outstandingRequests :: IO Word64outstandingRequests384,15809
nullReq :: Ptr CompletionDatanullReq309,13110
nanoSecondsToSeconds :: Q.Prio -> SecondsnanoSecondsToSeconds447,18243
managerRef :: MVar ManagermanagerRef391,16002
io_mngr_loop :: HANDLE -> Manager -> IO ()io_mngr_loop1146,54313
io_MANAGER_WAKEUP, io_MANAGER_DIE :: Word32io_MANAGER_WAKEUP1177,55690
io_MANAGER_WAKEUP, io_MANAGER_DIE :: Word32io_MANAGER_DIE1177,55690
ioSuccess :: a -> IO (IOResult a)ioSuccess819,38500
ioManagerThread :: MVar (Maybe ThreadId)ioManagerThread277,11924
ioFailedAny :: Integral a => a -> IO (IOResult b)ioFailedAny828,38839
ioFailed :: Integral a => a -> IO (IOResult a)ioFailed823,38632
invalidHandle :: HANDLEinvalidHandle483,19793
interruptSystemManager :: IO ()interruptSystemManager425,17504
getSystemManager :: IO ManagergetSystemManager387,15890
fromTimeout :: Maybe Seconds -> Word32fromTimeout929,43244
expirationTime :: Clock -> Int -> IO Q.PrioexpirationTime835,39092
errorIsCompleted :: ErrCode -> BoolerrorIsCompleted797,37683
editTimeouts :: Manager -> TimeoutEdit -> IO ()editTimeouts886,41431
debugIO :: String -> IO ()debugIO1267,59053
cdOffset :: IntcdOffset305,12985
callbackArraySize :: IntcallbackArraySize435,17921
c_DEBUG_DUMP :: IO Boolc_DEBUG_DUMP1263,58960
associateHandle' :: HANDLE -> IO ()associateHandle'477,19617
associateHandle :: Manager -> HANDLE -> IO ()associateHandle488,20013
addRequest :: IO Word64addRequest378,15627

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/Windows/Clock.hs,477
module GHC.Event.Windows.Clock (Clock3,65
newtype Clock = Clock (IO Seconds)Clock21,360
type Seconds = DoubleSeconds23,396
tryInOrder :: Monad m => [m (Maybe a)] -> m atryInOrder36,757
queryPerformanceCounter :: IO (Maybe Clock)queryPerformanceCounter43,982
mapJust :: Monad m => m (Maybe a) -> (a -> b) -> m (Maybe b)mapJust40,889
getTime :: Clock -> IO SecondsgetTime26,492
getTickCount64 :: IO ClockgetTickCount6451,1246
getClock :: IO ClockgetClock30,625

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/Windows/ConsoleEvent.hsc,476
module GHC.Event.Windows.ConsoleEvent (ConsoleEvent19,657
data ConsoleEventConsoleEvent38,1024
  = ControlCControlC39,1042
  | BreakBreak40,1055
  | CloseClose41,1065
  | LogoffLogoff43,1113
  | ShutdownShutdown44,1124
win32ConsoleHandler :: MVar (ConsoleEvent -> IO ())win32ConsoleHandler70,2002
toWin32ConsoleEvent :: (Eq a, Num a) => a -> Maybe ConsoleEventtoWin32ConsoleEvent60,1607
start_console_handler :: Word32 -> IO ()start_console_handler52,1353

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/Windows/FFI.hsc,3603
module GHC.Event.Windows.FFI (FFI23,699
newtype IOCP = IOCP HANDLEIOCP90,2035
type CompletionKey = ULONG_PTRCompletionKey93,2092
    c_CreateIoCompletionPort :: HANDLE -> IOCP -> ULONG_PTR -> DWORDc_CreateIoCompletionPort107,2724
    c_GetOverlappedResult :: HANDLE -> LPOVERLAPPED -> Ptr DWORD -> BOOLc_GetOverlappedResult122,3366
    c_GetQueuedCompletionStatusEx :: IOCP -> LPOVERLAPPED_ENTRY -> Word32c_GetQueuedCompletionStatusEx135,3916
    c_PostQueuedCompletionStatus :: IOCP -> DWORD -> ULONG_PTR -> LPOVERLAPPEDc_PostQueuedCompletionStatus212,8223
type CompletionCallback a = ErrCode   -- ^ 0 indicates successCompletionCallback227,8905
type IOCallback = CompletionCallback ()IOCallback232,9147
  wrapIOCallback :: IOCallback -> IO (FunPtr IOCallback)wrapIOCallback236,9264
  mkIOCallback :: FunPtr IOCallback -> IOCallbackmkIOCallback240,9415
data CompletionData = CompletionData { cdHandle   :: !HANDLECompletionData249,9806
data CompletionData = CompletionData { cdHandle   :: !HANDLEcdHandle249,9806
                                     , cdCallback :: !IOCallbackcdCallback250,9867
data OVERLAPPEDOVERLAPPED272,10603
data HASKELL_OVERLAPPEDHASKELL_OVERLAPPED276,10720
type LPOVERLAPPED = Ptr OVERLAPPEDLPOVERLAPPED280,10879
type LPHASKELL_OVERLAPPED = Ptr HASKELL_OVERLAPPEDLPHASKELL_OVERLAPPED283,10973
data OVERLAPPED_ENTRY = OVERLAPPED_ENTRY {OVERLAPPED_ENTRY287,11115
      lpCompletionKey            :: ULONG_PTR,lpCompletionKey288,11158
      lpOverlapped               :: LPOVERLAPPED,lpOverlapped289,11205
      dwNumberOfBytesTransferred :: DWORDdwNumberOfBytesTransferred290,11255
type LPOVERLAPPED_ENTRY = Ptr OVERLAPPED_ENTRYLPOVERLAPPED_ENTRY293,11304
    c_CancelIoEx :: HANDLE -> LPOVERLAPPED -> IO BOOLc_CancelIoEx376,14905
    c_GetTickCount64 :: IO #{type ULONGLONG}c_GetTickCount64392,15589
type QPFunc = Ptr Int64 -> IO BOOLQPFunc437,17257
    c_QueryPerformanceCounter :: QPFuncc_QueryPerformanceCounter440,17358
    c_QueryPerformanceFrequency :: QPFuncc_QueryPerformanceFrequency443,17466
type ULONG_PTR  = #type ULONG_PTRULONG_PTR458,17873
    c_SetLastError :: ErrCode -> IO ()c_SetLastError469,18150
zeroOverlapped :: LPHASKELL_OVERLAPPED -> IO ()zeroOverlapped334,13018
withRequest :: Word64 -> CompletionDatawithRequest349,13597
throwWinErr :: String -> ErrCode -> IO athrowWinErr460,17908
setLastError :: ErrCode -> IO ()setLastError465,18025
queryPerformanceFrequency :: IO (Maybe Int64)queryPerformanceFrequency428,16903
queryPerformanceCounter :: IO Int64queryPerformanceCounter419,16500
postQueuedCompletionStatus :: IOCP -> DWORD -> CompletionKey -> LPOVERLAPPEDpostQueuedCompletionStatus217,8476
pokeOffsetOverlapped :: LPOVERLAPPED -> Word64 -> IO ()pokeOffsetOverlapped339,13217
overlappedIOStatus :: LPOVERLAPPED -> IO NTSTATUSoverlappedIOStatus197,7642
overlappedIONumBytes :: LPOVERLAPPED -> IO ULONG_PTRoverlappedIONumBytes205,7963
newIOCP :: IO IOCPnewIOCP111,2873
getTickCount64 :: IO Word64getTickCount64402,15883
getQueuedCompletionStatusEx :: IOCPgetQueuedCompletionStatusEx172,6218
getOverlappedResult :: HANDLE -> Ptr OVERLAPPED -> BOOL -> IO (Maybe DWORD)getOverlappedResult126,3550
cancelIoEx' :: HANDLE -> LPOVERLAPPED -> IO BoolcancelIoEx'385,15364
cancelIoEx :: HANDLE -> LPOVERLAPPED -> IO ()cancelIoEx382,15253
callQP :: QPFunc -> IO (Maybe Int64)callQP445,17509
associateHandleWithIOCP :: IOCP -> HANDLE -> CompletionKey -> IO ()associateHandleWithIOCP116,3068
allocOverlapped :: Word64 -- ^ Offset/OffsetHighallocOverlapped325,12715

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/Windows/ManagedThreadPool.hs,922
module GHC.Event.Windows.ManagedThreadPoolManagedThreadPool24,766
type WorkerJob = IO ()WorkerJob46,1289
data ThreadPool = ThreadPoolThreadPool49,1344
  { thrMainThread    :: Maybe ThreadIdthrMainThread50,1373
  , thrMaxThreads    :: {-# UNPACK #-} !IntthrMaxThreads51,1412
  , thrMinThreads    :: {-# UNPACK #-} !IntthrMinThreads52,1456
  , thrCurThreads    :: {-# UNPACK #-} !IntthrCurThreads53,1500
  , thrCallBack      :: WorkerJobthrCallBack54,1544
  , thrActiveThreads :: MVar IntthrActiveThreads55,1578
  , thrMonitor       :: MVar ()thrMonitor56,1611
  , thrThreadIds     :: {-#UNPACK #-} !(A.Array ThreadId)thrThreadIds57,1643
startThreadPool :: WorkerJob -> IO ThreadPoolstartThreadPool60,1706
notifyWaiting :: Maybe ThreadPool -> IO ()notifyWaiting88,2515
notifyRunning :: Maybe ThreadPool -> IO ()notifyRunning81,2290
monitorThreadPool :: MVar () -> IO ()monitorThreadPool75,2177

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Event/Windows/Thread.hs,273
module GHC.Event.Windows.Thread (Thread3,36
threadDelay :: Int -> IO ()threadDelay22,415
registerDelay :: Int -> IO (TVar Bool)registerDelay29,653
interruptIOManager :: IO ()interruptIOManager19,342
ensureIOManagerIsRunning :: IO ()ensureIOManagerIsRunning16,264

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Exception.hs,769
module GHC.ExceptionException25,716
data ErrorCall = ErrorCallWithLocation String StringErrorCall54,1682
data ErrorCall = ErrorCallWithLocation String StringErrorCallWithLocation54,1682
pattern ErrorCall :: String -> ErrorCallErrorCall59,1829
throw :: forall (r :: RuntimeRep). forall (a :: TYPE r). forall e.throw48,1412
showCCSStack :: [String] -> [String]showCCSStack86,2764
prettySrcLoc :: SrcLoc -> StringprettySrcLoc96,3065
prettyCallStackLines :: CallStack -> [String]prettyCallStackLines111,3437
prettyCallStack :: CallStack -> StringprettyCallStack108,3339
errorCallWithCallStackException :: String -> CallStack -> SomeExceptionerrorCallWithCallStackException77,2366
errorCallException :: String -> SomeExceptionerrorCallException74,2270

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Exception/Type.hs,1190
module GHC.Exception.TypeType24,693
data SomeException = forall e . Exception e => SomeException eSomeException42,1236
class (Typeable e, Show e) => Exception e whereException134,4655
    toException   :: e -> SomeExceptiontoException135,4703
    fromException :: SomeException -> Maybe efromException136,4743
    displayException :: e -> StringdisplayException146,5010
data ArithExceptionArithException156,5267
  = OverflowOverflow157,5287
  | UnderflowUnderflow158,5300
  | LossOfPrecisionLossOfPrecision159,5314
  | DivideByZeroDivideByZero160,5334
  | DenormalDenormal161,5351
  | RatioZeroDenominator -- ^ @since 4.6.0.0RatioZeroDenominator162,5364
divZeroException, overflowException, ratioZeroDenomException, underflowException  :: SomeExceptionunderflowException167,5489
divZeroException, overflowException, ratioZeroDenomException, underflowException  :: SomeExceptionratioZeroDenomException167,5489
divZeroException, overflowException, ratioZeroDenomException, underflowException  :: SomeExceptionoverflowException167,5489
divZeroException, overflowException, ratioZeroDenomException, underflowException  :: SomeExceptiondivZeroException167,5489

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/ExecutionStack.hs,170
module GHC.ExecutionStack (ExecutionStack32,866
showStackTrace :: IO (Maybe String)showStackTrace49,1353
getStackTrace :: IO (Maybe [Location])getStackTrace45,1175

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/ExecutionStack/Internal.hsc,2142
module GHC.ExecutionStack.Internal (Internal22,597
data SrcLoc = SrcLoc { sourceFile   :: StringSrcLoc47,1271
data SrcLoc = SrcLoc { sourceFile   :: StringsourceFile47,1271
                     , sourceLine   :: IntsourceLine48,1317
                     , sourceColumn :: IntsourceColumn49,1360
data Location = Location { objectName   :: StringLocation53,1488
data Location = Location { objectName   :: StringobjectName53,1488
                         , functionName :: StringfunctionName54,1538
                         , srcLoc       :: Maybe SrcLocsrcLoc55,1588
data Chunk = Chunk { chunkFrames     :: !WordChunk59,1705
data Chunk = Chunk { chunkFrames     :: !WordchunkFrames59,1705
                   , chunkNext       :: !(Ptr Chunk)chunkNext60,1751
                   , chunkFirstFrame :: !(Ptr Addr)chunkFirstFrame61,1804
newtype StackTrace = StackTrace (ForeignPtr StackTrace)StackTrace65,1916
type Addr = Ptr ()Addr68,1989
data SessionSession182,6543
    libdw_pool_take :: IO (Ptr Session)libdw_pool_take185,6601
    libdw_pool_release :: FunPtr (Ptr Session -> IO ())libdw_pool_release188,6690
    libdw_pool_clear :: IO ()libdw_pool_clear191,6792
    libdw_lookup_location :: Ptr Session -> Ptr Location -> Addr -> IO CIntlibdw_lookup_location194,6873
    libdw_get_backtrace :: Ptr Session -> IO (Ptr StackTrace)libdw_get_backtrace197,6998
    backtrace_free :: FunPtr (Ptr StackTrace -> IO ())backtrace_free200,7106
withSession :: (ForeignPtr Session -> IO a) -> IO (Maybe a)withSession70,2009
stackFrames :: StackTrace -> Maybe [Location]stackFrames133,4389
stackDepth :: StackTrace -> IntstackDepth80,2361
showStackFrames :: [Location] -> ShowSshowStackFrames214,7605
showLocation :: Location -> ShowSshowLocation223,7868
peekLocation :: Ptr Location -> IO LocationpeekLocation106,3262
peekChunk :: Ptr Chunk -> IO ChunkpeekChunk87,2582
locationSize :: IntlocationSize129,4288
invalidateDebugCache :: IO ()invalidateDebugCache210,7497
collectStackTrace :: IO (Maybe StackTrace)collectStackTrace203,7191
chunksList :: StackTrace -> IO [Chunk]chunksList95,2887

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Exts.hs,949
module GHC.ExtsExts22,754
data SpecConstrAnnotation = NoSpecConstr | ForceSpecConstrSpecConstrAnnotation186,5821
data SpecConstrAnnotation = NoSpecConstr | ForceSpecConstrNoSpecConstr186,5821
data SpecConstrAnnotation = NoSpecConstr | ForceSpecConstrForceSpecConstr186,5821
class IsList l whereIsList202,6525
  type Item lItem205,6633
  fromList  :: [Item l] -> lfromList209,6747
  fromListN :: Int -> [Item l] -> lfromListN217,7125
  toList :: l -> [Item l]toList222,7317
traceEvent :: String -> IO ()traceEvent168,4988
the :: Eq a => [a] -> athe139,3756
sortWith :: Ord b => (a -> b) -> [a] -> [a]sortWith147,4097
resizeSmallMutableArray#resizeSmallMutableArray#296,9472
maxTupleSize :: IntmaxTupleSize134,3610
groupWith :: Ord b => (a -> b) -> [a] -> [[a]]groupWith154,4439
groupByFB :: ([a] -> lst -> lst) -> lst -> (a -> a -> Bool) -> [a] -> lstgroupByFB158,4646
atomicModifyMutVar#atomicModifyMutVar#275,8629

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Fingerprint.hs,644
module GHC.Fingerprint (Fingerprint16,431
data MD5ContextMD5Context106,3086
   c_MD5Init   :: Ptr MD5Context -> IO ()c_MD5Init109,3150
   c_MD5Update :: Ptr MD5Context -> Ptr Word8 -> CInt -> IO ()c_MD5Update111,3241
   c_MD5Final  :: Ptr Word8 -> Ptr MD5Context -> IO ()c_MD5Final113,3352
getFileHash :: FilePath -> IO FingerprintgetFileHash75,2109
fingerprintString :: String -> FingerprintfingerprintString59,1517
fingerprintFingerprints :: [Fingerprint] -> FingerprintfingerprintFingerprints45,998
fingerprintData :: Ptr Word8 -> Int -> IO FingerprintfingerprintData50,1199
fingerprint0 :: Fingerprintfingerprint042,938

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Fingerprint/Type.hs,160
module GHC.Fingerprint.Type (Fingerprint(..)) whereType13,386
data Fingerprint = Fingerprint {-# UNPACK #-} !Word64 {-# UNPACK #-} !Word64Fingerprint24,608

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Float.hs,9921
module GHC.FloatFloat46,1298
class  (Fractional a) => Floating a  whereFloating89,2387
    pi                  :: api90,2430
    exp, log, sqrt      :: a -> aexp91,2459
    exp, log, sqrt      :: a -> alog91,2459
    exp, log, sqrt      :: a -> asqrt91,2459
    (**), logBase       :: a -> a -> a**92,2493
    (**), logBase       :: a -> a -> alogBase92,2493
    sin, cos, tan       :: a -> asin93,2532
    sin, cos, tan       :: a -> acos93,2532
    sin, cos, tan       :: a -> atan93,2532
    asin, acos, atan    :: a -> aasin94,2566
    asin, acos, atan    :: a -> aacos94,2566
    asin, acos, atan    :: a -> aatan94,2566
    sinh, cosh, tanh    :: a -> asinh95,2600
    sinh, cosh, tanh    :: a -> acosh95,2600
    sinh, cosh, tanh    :: a -> atanh95,2600
    asinh, acosh, atanh :: a -> aasinh96,2634
    asinh, acosh, atanh :: a -> aacosh96,2634
    asinh, acosh, atanh :: a -> aatanh96,2634
    log1p               :: a -> alog1p102,2834
    expm1               :: a -> aexpm1108,3032
    log1pexp            :: a -> alog1pexp122,3494
    log1mexp            :: a -> alog1mexp136,3955
class  (RealFrac a, Floating a) => RealFloat a  whereRealFloat168,4953
    floatRadix          :: a -> IntegerfloatRadix171,5098
    floatDigits         :: a -> IntfloatDigits174,5241
    floatRange          :: a -> (Int,Int)floatRange177,5378
    decodeFloat         :: a -> (Integer,Int)decodeFloat189,6141
    encodeFloat         :: Integer -> Int -> aencodeFloat197,6652
    exponent            :: a -> Intexponent205,7122
    significand         :: a -> asignificand210,7415
    scaleFloat          :: Int -> a -> ascaleFloat212,7526
    isNaN               :: a -> BoolisNaN214,7639
    isInfinite          :: a -> BoolisInfinite216,7749
    isDenormalized      :: a -> BoolisDenormalized219,7877
    isNegativeZero      :: a -> BoolisNegativeZero221,7971
    isIEEE              :: a -> BoolisIEEE223,8073
    atan2               :: a -> a -> aatan2233,8736
data FFFormat = FFExponent | FFFixed | FFGenericFFFormat711,26198
data FFFormat = FFExponent | FFFixed | FFGenericFFExponent711,26198
data FFFormat = FFExponent | FFFixed | FFGenericFFFixed711,26198
data FFFormat = FFExponent | FFFixed | FFGenericFFGeneric711,26198
foreign import ccall unsafe "isFloatNaN" isFloatNaN :: Float -> IntisFloatNaN1271,48218
foreign import ccall unsafe "isFloatInfinite" isFloatInfinite :: Float -> IntisFloatInfinite1272,48286
foreign import ccall unsafe "isFloatDenormalized" isFloatDenormalized :: Float -> IntisFloatDenormalized1273,48364
foreign import ccall unsafe "isFloatNegativeZero" isFloatNegativeZero :: Float -> IntisFloatNegativeZero1274,48450
foreign import ccall unsafe "isFloatFinite" isFloatFinite :: Float -> IntisFloatFinite1275,48536
foreign import ccall unsafe "isDoubleNaN" isDoubleNaN :: Double -> IntisDoubleNaN1277,48611
foreign import ccall unsafe "isDoubleInfinite" isDoubleInfinite :: Double -> IntisDoubleInfinite1278,48682
foreign import ccall unsafe "isDoubleDenormalized" isDoubleDenormalized :: Double -> IntisDoubleDenormalized1279,48763
foreign import ccall unsafe "isDoubleNegativeZero" isDoubleNegativeZero :: Double -> IntisDoubleNegativeZero1280,48852
foreign import ccall unsafe "isDoubleFinite" isDoubleFinite :: Double -> IntisDoubleFinite1281,48941
    stgWord32ToFloat :: Word# -> Float#stgWord32ToFloat1400,53072
    stgFloatToWord32 :: Float# -> Word#stgFloatToWord321413,53411
    stgWord64ToDouble :: Word# -> Double#stgWord64ToDouble1428,53784
    stgDoubleToWord64 :: Double# -> Word#stgDoubleToWord641445,54216
word2Float :: Word -> Floatword2Float1290,49256
word2Double :: Word -> Doubleword2Double1287,49184
plusFloat, minusFloat, timesFloat, divideFloat :: Float -> Float -> FloattimesFloat1176,44504
plusDouble, minusDouble, timesDouble, divideDouble :: Double -> Double -> DoubletimesDouble1222,46317
sinhFloat, coshFloat, tanhFloat  :: Float -> FloattanhFloat1195,45319
sinhDouble, coshDouble, tanhDouble  :: Double -> DoubletanhDouble1247,47278
sinFloat, cosFloat, tanFloat  :: Float -> FloattanFloat1193,45220
sinDouble, cosDouble, tanDouble  :: Double -> DoubletanDouble1245,47169
logFloat, log1pFloat, sqrtFloat, fabsFloat :: Float -> FloatsqrtFloat1192,45159
logDouble, log1pDouble, sqrtDouble, fabsDouble :: Double -> DoublesqrtDouble1244,47102
sinhFloat, coshFloat, tanhFloat  :: Float -> FloatsinhFloat1195,45319
sinhDouble, coshDouble, tanhDouble  :: Double -> DoublesinhDouble1247,47278
sinFloat, cosFloat, tanFloat  :: Float -> FloatsinFloat1193,45220
sinDouble, cosDouble, tanDouble  :: Double -> DoublesinDouble1245,47169
showSignedFloat :: (RealFloat a)showSignedFloat1347,51068
showFloat :: (RealFloat a) => a -> ShowSshowFloat706,26031
roundingMode# :: Integer -> Int# -> Int#roundingMode#1140,43188
roundTo :: Int -> Int -> [Int] -> (Int,[Int])roundTo795,29102
rationalToFloat :: Integer -> Integer -> FloatrationalToFloat327,12418
rationalToDouble :: Integer -> Integer -> DoublerationalToDouble523,19318
powerFloat :: Float -> Float -> FloatpowerFloat1216,46127
powerDouble :: Double -> Double -> DoublepowerDouble1268,48132
plusFloat, minusFloat, timesFloat, divideFloat :: Float -> Float -> FloatplusFloat1176,44504
plusDouble, minusDouble, timesDouble, divideDouble :: Double -> Double -> DoubleplusDouble1222,46317
negateFloat :: Float -> FloatnegateFloat1182,44775
negateDouble :: Double -> DoublenegateDouble1228,46567
plusFloat, minusFloat, timesFloat, divideFloat :: Float -> Float -> FloatminusFloat1176,44504
plusDouble, minusDouble, timesDouble, divideDouble :: Double -> Double -> DoubleminusDouble1222,46317
minExpt, maxExpt :: IntminExpt1024,37767
maxExpt10 :: IntmaxExpt101041,38144
minExpt, maxExpt :: IntmaxExpt1024,37767
gtFloat, geFloat, ltFloat, leFloat :: Float -> Float -> BoolltFloat1185,44854
gtDouble, geDouble, leDouble, ltDouble :: Double -> Double -> BoolltDouble1231,46651
logFloat, log1pFloat, sqrtFloat, fabsFloat :: Float -> FloatlogFloat1192,45159
logDouble, log1pDouble, sqrtDouble, fabsDouble :: Double -> DoublelogDouble1244,47102
logFloat, log1pFloat, sqrtFloat, fabsFloat :: Float -> Floatlog1pFloat1192,45159
logDouble, log1pDouble, sqrtDouble, fabsDouble :: Double -> Doublelog1pDouble1244,47102
log1mexpOrd :: (Ord a, Floating a) => a -> alog1mexpOrd160,4688
gtFloat, geFloat, ltFloat, leFloat :: Float -> Float -> BoolleFloat1185,44854
gtDouble, geDouble, leDouble, ltDouble :: Double -> Double -> BoolleDouble1231,46651
gtFloat, geFloat, ltFloat, leFloat :: Float -> Float -> BoolgtFloat1185,44854
gtDouble, geDouble, leDouble, ltDouble :: Double -> Double -> BoolgtDouble1231,46651
gtFloat, geFloat, ltFloat, leFloat :: Float -> Float -> BoolgeFloat1185,44854
gtDouble, geDouble, leDouble, ltDouble :: Double -> Double -> BoolgeDouble1231,46651
fromRat'' :: RealFloat a => Int -> Int -> Integer -> Integer -> afromRat''1064,38944
fromRat' :: (RealFloat a) => Rational -> afromRat'1003,36746
fromRat :: (RealFloat a) => Rational -> afromRat984,35923
formatRealFloatAlt :: (RealFloat a) => FFFormat -> Maybe Int -> Bool -> aformatRealFloatAlt718,26473
formatRealFloat :: (RealFloat a) => FFFormat -> Maybe Int -> a -> StringformatRealFloat715,26334
floatToDigits :: (RealFloat a) => Integer -> a -> ([Int], Int)floatToDigits832,30184
float2Double :: Float -> Doublefloat2Double1240,46983
logFloat, log1pFloat, sqrtFloat, fabsFloat :: Float -> FloatfabsFloat1192,45159
logDouble, log1pDouble, sqrtDouble, fabsDouble :: Double -> DoublefabsDouble1244,47102
expts10 :: Array Int Integerexpts101044,38178
expts :: Array Int Integerexpts1038,38046
expt :: Integer -> Int -> Integerexpt1028,37819
expFloat, expm1Float :: Float -> Floatexpm1Float1191,45120
expDouble, expm1Double :: Double -> Doubleexpm1Double1243,47059
expFloat, expm1Float :: Float -> FloatexpFloat1191,45120
expDouble, expm1Double :: Double -> DoubleexpDouble1243,47059
double2Float :: Double -> Floatdouble2Float1237,46907
plusFloat, minusFloat, timesFloat, divideFloat :: Float -> Float -> FloatdivideFloat1176,44504
plusDouble, minusDouble, timesDouble, divideDouble :: Double -> Double -> DoubledivideDouble1222,46317
sinhFloat, coshFloat, tanhFloat  :: Float -> FloatcoshFloat1195,45319
sinhDouble, coshDouble, tanhDouble  :: Double -> DoublecoshDouble1247,47278
sinFloat, cosFloat, tanFloat  :: Float -> FloatcosFloat1193,45220
sinDouble, cosDouble, tanDouble  :: Double -> DoublecosDouble1245,47169
clamp :: Int -> Int -> Intclamp1363,51684
castWord64ToDouble :: Word64 -> DoublecastWord64ToDouble1423,53618
castWord32ToFloat :: Word32 -> FloatcastWord32ToFloat1396,52937
castFloatToWord32 :: Float -> Word32castFloatToWord321409,53276
castDoubleToWord64 :: Double -> Word64castDoubleToWord641440,54048
asinhFloat, acoshFloat, atanhFloat  :: Float -> FloatatanhFloat1196,45370
asinhDouble, acoshDouble, atanhDouble  :: Double -> DoubleatanhDouble1248,47334
asinFloat, acosFloat, atanFloat  :: Float -> FloatatanFloat1194,45268
asinDouble, acosDouble, atanDouble  :: Double -> DoubleatanDouble1246,47222
asinhFloat, acoshFloat, atanhFloat  :: Float -> FloatasinhFloat1196,45370
asinhDouble, acoshDouble, atanhDouble  :: Double -> DoubleasinhDouble1248,47334
asinFloat, acosFloat, atanFloat  :: Float -> FloatasinFloat1194,45268
asinDouble, acosDouble, atanDouble  :: Double -> DoubleasinDouble1246,47222
asinhFloat, acoshFloat, atanhFloat  :: Float -> FloatacoshFloat1196,45370
asinhDouble, acoshDouble, atanhDouble  :: Double -> DoubleacoshDouble1248,47334
asinFloat, acosFloat, atanFloat  :: Float -> FloatacosFloat1194,45268
asinDouble, acosDouble, atanDouble  :: Double -> DoubleacosDouble1246,47222
define WSHIFT 5WSHIFT36,1145
efine MMASK 31MMASK37,1164

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Float/ConversionUtils.hs,551
module GHC.Float.ConversionUtils ( elimZerosInteger, elimZerosInt# ) whereConversionUtils22,653
data BA = BA ByteArray#BA78,2213
zeroCountArr :: BAzeroCountArr81,2280
zeroCount :: Int# -> Int#zeroCount69,2036
toByte64# :: Int64# -> Int#toByte64#36,897
toByte# :: Int# -> Int#toByte#74,2138
elimZerosInteger :: Integer -> Int# -> (# Integer, Int# #)elimZerosInteger58,1578
elimZerosInt# :: Int# -> Int# -> (# Integer, Int# #)elimZerosInt#61,1680
elim64# :: Int64# -> Int# -> (# Integer, Int# #)elim64#40,1043
egerToInt64#TO6434,883

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Float/RealFracMethods.hs,1985
module GHC.Float.RealFracMethodsRealFracMethods24,735
    c_rintDouble :: Double -> Doublec_rintDouble338,11646
    c_rintFloat :: Float -> Floatc_rintFloat341,11724
uncheckedIShiftRA64# :: Int# -> Int# -> Int#uncheckedIShiftRA64#78,1896
uncheckedIShiftL64# :: Int# -> Int# -> Int#uncheckedIShiftL64#81,1984
truncateFloatInteger :: Float -> IntegertruncateFloatInteger154,4747
truncateDoubleInteger :: Double -> IntegertruncateDoubleInteger258,8743
roundFloatInteger :: Float -> IntegerroundFloatInteger181,5738
roundFloatInt :: Float -> IntroundFloatInt119,3260
roundDoubleInteger :: Double -> IntegerroundDoubleInteger284,9658
roundDoubleInt :: Double -> IntroundDoubleInt215,6978
properFractionFloatInteger :: Float -> (Integer, Float)properFractionFloatInteger134,3858
properFractionFloatInt :: Float -> (Int, Float)properFractionFloatInt98,2590
properFractionDoubleInteger :: Double -> (Integer, Double)properFractionDoubleInteger232,7622
properFractionDoubleInt :: Double -> (Int, Double)properFractionDoubleInt194,6330
int2Float :: Int -> Floatint2Float300,10125
int2Double :: Int -> Doubleint2Double294,9993
floorFloatInteger :: Float -> IntegerfloorFloatInteger162,5023
floorFloatInt :: Float -> IntfloorFloatInt107,2866
floorDoubleInteger :: Double -> IntegerfloorDoubleInteger266,9024
floorDoubleInt :: Double -> IntfloorDoubleInt203,6600
float2Integer :: Float -> Integerfloat2Integer321,10828
float2Int :: Float -> Intfloat2Int297,10061
double2Integer :: Double -> Integerdouble2Integer311,10512
double2Int :: Double -> Intdouble2Int291,9925
ceilingFloatInteger :: Float -> IntegerceilingFloatInteger176,5575
ceilingFloatInt :: Float -> IntceilingFloatInt113,3061
ceilingDoubleInteger :: Double -> IntegerceilingDoubleInteger279,9489
ceilingDoubleInt :: Double -> IntceilingDoubleInt209,6787
egerToInt64#TO6466,1687
E64 negateInt64#NEGATE6469,1774
S64 minusInt64#MINUS6468,1745
egerFromInt64#FROM6467,1718

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Foreign.hs,1439
module GHC.Foreign (Foreign20,607
type CString    = Ptr CCharCString78,1744
type CStringLen = (Ptr CChar, Int)CStringLen79,1772
withEncodedCString :: TextEncoding         -- ^ Encoding of CString to createwithEncodedCString224,7807
withCStringsLen :: TextEncodingwithCStringsLen148,4328
withCStringLen         :: TextEncoding -> String -> (CStringLen -> IO a) -> IO awithCStringLen136,3836
withCStringBuffer :: Buffer Word8 -> Bool -> (CStringLen -> IO r) -> IO rwithCStringBuffer246,9025
withCString :: TextEncoding -> String -> (CString -> IO a) -> IO awithCString126,3378
tryFillBuffer :: TextEncoder dstate -> Bool -> Buffer Char -> Ptr Word8 -> InttryFillBuffer278,10561
putDebugMsg :: String -> IO ()putDebugMsg72,1525
peekEncodedCString :: TextEncoding -- ^ Encoding of CStringpeekEncodedCString195,5940
peekCStringLen           :: TextEncoding -> CStringLen -> IO StringpeekCStringLen93,2147
peekCString    :: TextEncoding -> CString -> IO StringpeekCString86,1918
newEncodedCString :: TextEncoding  -- ^ Encoding of CString to createnewEncodedCString254,9407
newCStringLen     :: TextEncoding -> String -> IO CStringLennewCStringLen114,2929
newCString :: TextEncoding -> String -> IO CStringnewCString104,2547
nUL :: CCharnUL186,5796
charIsRepresentable :: TextEncoding -> Char -> IO BoolcharIsRepresentable163,4887
c_DEBUG_DUMP :: Boolc_DEBUG_DUMP69,1482
cCharSize :: IntcCharSize190,5847

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/ForeignPtr.hs,2843
module GHC.ForeignPtrForeignPtr24,683
data ForeignPtr a = ForeignPtr Addr# ForeignPtrContentsForeignPtr86,2720
data FinalizersFinalizers101,3630
  = NoFinalizersNoFinalizers102,3646
  | CFinalizers (Weak# ())CFinalizers106,3850
  | HaskellFinalizers [IO ()]HaskellFinalizers108,3918
data ForeignPtrContentsForeignPtrContents122,4617
  = PlainForeignPtr !(IORef Finalizers)PlainForeignPtr123,4641
  | FinalPtrFinalPtr127,4888
  | MallocPtr (MutableByteArray# RealWorld) !(IORef Finalizers)MallocPtr135,5257
  | PlainPtr (MutableByteArray# RealWorld)PlainPtr160,6651
type FinalizerPtr a        = FunPtr (Ptr a -> IO ())FinalizerPtr234,10180
type FinalizerEnvPtr env a = FunPtr (Ptr env -> Ptr a -> IO ())FinalizerEnvPtr235,10233
data MyWeak = MyWeak (Weak# ())MyWeak449,20432
withForeignPtr :: ForeignPtr a -> (Ptr a -> IO b) -> IO bwithForeignPtr510,22934
unsafeWithForeignPtr :: ForeignPtr a -> (Ptr a -> IO b) -> IO bunsafeWithForeignPtr546,24557
unsafeForeignPtrToPtr :: ForeignPtr a -> Ptr aunsafeForeignPtrToPtr583,26367
touchForeignPtr :: ForeignPtr a -> IO ()touchForeignPtr552,24721
touch :: ForeignPtrContents -> IO ()touch580,26270
plusForeignPtr :: ForeignPtr a -> Int -> ForeignPtr bplusForeignPtr605,27404
noMixingError :: anoMixingError486,22056
newForeignPtr_ :: Ptr a -> IO (ForeignPtr a)newForeignPtr_503,22647
newConcForeignPtr :: Ptr a -> IO () -> IO (ForeignPtr a)newConcForeignPtr237,10298
mallocPlainForeignPtrBytes :: Int -> IO (ForeignPtr a)mallocPlainForeignPtrBytes349,15591
mallocPlainForeignPtrAlignedBytes :: Int -> Int -> IO (ForeignPtr a)mallocPlainForeignPtrAlignedBytes362,16243
mallocPlainForeignPtr :: Storable a => IO (ForeignPtr a)mallocPlainForeignPtr332,14751
mallocForeignPtrBytes :: Int -> IO (ForeignPtr a)mallocForeignPtrBytes294,12904
mallocForeignPtrAlignedBytes :: Int -> Int -> IO (ForeignPtr a)mallocForeignPtrAlignedBytes308,13504
mallocForeignPtr :: Storable a => IO (ForeignPtr a)mallocForeignPtr259,11302
insertHaskellFinalizer :: IORef Finalizers -> IO () -> IO BoolinsertHaskellFinalizer440,20056
insertCFinalizer ::insertCFinalizer451,20465
foreignPtrFinalizer :: IORef Finalizers -> IO ()foreignPtrFinalizer492,22274
finalizeForeignPtr :: ForeignPtr a -> IO ()finalizeForeignPtr623,28301
ensureCFinalizerWeak :: IORef Finalizers -> value -> IO MyWeakensureCFinalizerWeak466,21210
castForeignPtr :: ForeignPtr a -> ForeignPtr bcastForeignPtr600,27245
addForeignPtrFinalizerEnv ::addForeignPtrFinalizerEnv389,17721
addForeignPtrFinalizer :: FinalizerPtr a -> ForeignPtr a -> IO ()addForeignPtrFinalizer371,16723
addForeignPtrConcFinalizer_ :: ForeignPtrContents -> IO () -> IO ()addForeignPtrConcFinalizer_417,19106
addForeignPtrConcFinalizer :: ForeignPtr a -> IO () -> IO ()addForeignPtrConcFinalizer398,18214

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/GHCi.hs,293
module GHC.GHCi {-# WARNING "This is an unstable interface." #-} (GHCi20,546
class (Monad m) => GHCiSandboxIO m whereGHCiSandboxIO28,855
    ghciStepIO :: m a -> IO aghciStepIO29,896
newtype NoIO a = NoIO { noio :: IO a }NoIO36,1040
newtype NoIO a = NoIO { noio :: IO a }noio36,1040

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/GHCi/Helpers.hs,192
module GHC.GHCi.HelpersHelpers15,448
flushAll :: IO ()flushAll29,727
evalWrapper :: String -> [String] -> IO a -> IO aevalWrapper34,792
disableBuffering :: IO ()disableBuffering23,574

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Generics.hs,7296
module GHC.Generics  (Generics38,1431
data V1 (p :: k)V1761,27523
data U1 (p :: k) = U1U1776,27966
newtype Par1 p = Par1 { unPar1 :: p }Par1827,28876
newtype Par1 p = Par1 { unPar1 :: p }unPar1827,28876
newtype Rec1 (f :: k -> Type) (p :: k) = Rec1 { unRec1 :: f p }Rec1855,29623
newtype Rec1 (f :: k -> Type) (p :: k) = Rec1 { unRec1 :: f p }unRec1855,29623
newtype K1 (i :: Type) c (p :: k) = K1 { unK1 :: c }K1885,30551
newtype K1 (i :: Type) c (p :: k) = K1 { unK1 :: c }unK1885,30551
newtype M1 (i :: Type) (c :: Meta) (f :: k -> Type) (p :: k) =M1926,31746
    M1 { unM1 :: f p }unM1927,31809
data (:+:) (f :: k -> Type) (g :: k -> Type) (p :: k) = L1 (f p) | R1 (g p):+:939,32199
data (:+:) (f :: k -> Type) (g :: k -> Type) (p :: k) = L1 (f p) | R1 (g p)L1939,32199
data (:+:) (f :: k -> Type) (g :: k -> Type) (p :: k) = L1 (f p) | R1 (g p)R1939,32199
data (:*:) (f :: k -> Type) (g :: k -> Type) (p :: k) = f p :*: g p:*:951,32653
newtype (:.:) (f :: k2 -> Type) (g :: k1 -> k2) (p :: k1) =:.:992,34048
    Comp1 { unComp1 :: f (g p) }Comp1993,34108
    Comp1 { unComp1 :: f (g p) }unComp1993,34108
data family URec (a :: Type) (p :: k)URec1024,35140
data instance URec (Ptr ()) (p :: k) = UAddr { uAddr# :: Addr# }UAddr1029,35245
data instance URec (Ptr ()) (p :: k) = UAddr { uAddr# :: Addr# }uAddr#1029,35245
data instance URec Char (p :: k) = UChar { uChar# :: Char# }UChar1040,35600
data instance URec Char (p :: k) = UChar { uChar# :: Char# }uChar#1040,35600
data instance URec Double (p :: k) = UDouble { uDouble# :: Double# }UDouble1052,35995
data instance URec Double (p :: k) = UDouble { uDouble# :: Double# }uDouble#1052,35995
data instance URec Float (p :: k) = UFloat { uFloat# :: Float# }UFloat1064,36397
data instance URec Float (p :: k) = UFloat { uFloat# :: Float# }uFloat#1064,36397
data instance URec Int (p :: k) = UInt { uInt# :: Int# }UInt1074,36673
data instance URec Int (p :: k) = UInt { uInt# :: Int# }uInt#1074,36673
data instance URec Word (p :: k) = UWord { uWord# :: Word# }UWord1086,37062
data instance URec Word (p :: k) = UWord { uWord# :: Word# }uWord#1086,37062
type UAddr   = URec (Ptr ())UAddr1098,37449
type UChar   = URec CharUChar1102,37538
type UDouble = URec DoubleUDouble1107,37626
type UFloat  = URec FloatUFloat1112,37715
type UInt    = URec IntUInt1117,37801
type UWord   = URec WordUWord1122,37886
data RR1125,37956
type Rec0  = K1 RRec01128,38022
data DD1131,38067
data CC1133,38103
data SS1135,38143
type D1 = M1 DD11138,38213
type C1 = M1 CC11141,38294
type S1 = M1 SS11144,38379
class Datatype d whereDatatype1147,38445
  datatypeName :: t d (f :: k -> Type) (a :: k) -> [Char]datatypeName1149,38514
  moduleName   :: t d (f :: k -> Type) (a :: k) -> [Char]moduleName1151,38645
  packageName :: t d (f :: k -> Type) (a :: k) -> [Char]packageName1155,38793
  isNewtype    :: t d (f :: k -> Type) (a :: k) -> BoolisNewtype1159,38926
class Constructor c whereConstructor1171,39384
  conName :: t c (f :: k -> Type) (a :: k) -> [Char]conName1173,39445
  conFixity :: t c (f :: k -> Type) (a :: k) -> FixityconFixity1176,39536
  conIsRecord :: t c (f :: k -> Type) (a :: k) -> BoolconIsRecord1180,39660
data Fixity = Prefix | Infix Associativity IntFixity1192,40119
data Fixity = Prefix | Infix Associativity IntPrefix1192,40119
data Fixity = Prefix | Infix Associativity IntInfix1192,40119
data FixityI = PrefixI | InfixI Associativity NatFixityI1203,40468
data FixityI = PrefixI | InfixI Associativity NatPrefixI1203,40468
data FixityI = PrefixI | InfixI Associativity NatInfixI1203,40468
data Associativity = LeftAssociativeAssociativity1211,40690
data Associativity = LeftAssociativeLeftAssociative1211,40690
                   | RightAssociativeRightAssociative1212,40727
                   | NotAssociativeNotAssociative1213,40765
data SourceUnpackedness = NoSourceUnpackednessSourceUnpackedness1237,41545
data SourceUnpackedness = NoSourceUnpackednessNoSourceUnpackedness1237,41545
                        | SourceNoUnpackSourceNoUnpack1238,41592
                        | SourceUnpackSourceUnpack1239,41633
data SourceStrictness = NoSourceStrictnessSourceStrictness1261,42328
data SourceStrictness = NoSourceStrictnessNoSourceStrictness1261,42328
                      | SourceLazySourceLazy1262,42371
                      | SourceStrictSourceStrict1263,42406
data DecidedStrictness = DecidedLazyDecidedStrictness1296,43765
data DecidedStrictness = DecidedLazyDecidedLazy1296,43765
                       | DecidedStrictDecidedStrict1297,43802
                       | DecidedUnpackDecidedUnpack1298,43841
class Selector s whereSelector1310,44270
  selName :: t s (f :: k -> Type) (a :: k) -> [Char]selName1312,44325
  selSourceUnpackedness :: t s (f :: k -> Type) (a :: k) -> SourceUnpackednessselSourceUnpackedness1316,44458
  selSourceStrictness :: t s (f :: k -> Type) (a :: k) -> SourceStrictnessselSourceStrictness1320,44615
  selDecidedStrictness :: t s (f :: k -> Type) (a :: k) -> DecidedStrictnessselDecidedStrictness1324,44781
class Generic a whereGeneric1343,45439
  type Rep a :: Type -> TypeRep1345,45496
  from  :: a -> (Rep a) xfrom1347,45580
  to    :: (Rep a) x -> ato1349,45661
class Generic1 (f :: k -> Type) whereGeneric11362,45993
  type Rep1 f :: k -> TypeRep11364,46066
  from1  :: f a -> (Rep1 f) afrom11366,46148
  to1    :: (Rep1 f) a -> f ato11368,46233
data Meta = MetaData Symbol Symbol Symbol BoolMeta1390,47252
data Meta = MetaData Symbol Symbol Symbol BoolMetaData1390,47252
          | MetaCons Symbol FixityI BoolMetaCons1391,47299
          | MetaSel  (Maybe Symbol)MetaSel1392,47340
data family Sing (a :: k)Sing1500,49761
class SingI (a :: k) whereSingI1503,49861
  sing :: Sing asing1506,50028
class SingKind k whereSingKind1511,50276
  type DemoteRep k :: TypeDemoteRep1514,50418
  fromSing :: Sing (a :: k) -> DemoteRep kfromSing1517,50499
  SSym :: KnownSymbol s => Sing sSSym1521,50603
  STrue  :: Sing 'TrueSTrue1533,50914
  SFalse :: Sing 'FalseSFalse1534,50937
  SNothing :: Sing 'NothingSNothing1550,51276
  SJust    :: Sing a -> Sing ('Just a)SJust1551,51304
  SPrefix :: Sing 'PrefixISPrefix1567,51754
  SInfix  :: Sing a -> Integer -> Sing ('InfixI a n)SInfix1568,51781
  SLeftAssociative  :: Sing 'LeftAssociativeSLeftAssociative1585,52298
  SRightAssociative :: Sing 'RightAssociativeSRightAssociative1586,52343
  SNotAssociative   :: Sing 'NotAssociativeSNotAssociative1587,52389
  SNoSourceUnpackedness :: Sing 'NoSourceUnpackednessSNoSourceUnpackedness1607,53016
  SSourceNoUnpack       :: Sing 'SourceNoUnpackSSourceNoUnpack1608,53070
  SSourceUnpack         :: Sing 'SourceUnpackSSourceUnpack1609,53118
  SNoSourceStrictness :: Sing 'NoSourceStrictnessSNoSourceStrictness1629,53784
  SSourceLazy         :: Sing 'SourceLazySSourceLazy1630,53834
  SSourceStrict       :: Sing 'SourceStrictSSourceStrict1631,53876
  SDecidedLazy   :: Sing 'DecidedLazySDecidedLazy1651,54512
  SDecidedStrict :: Sing 'DecidedStrictSDecidedStrict1652,54550
  SDecidedUnpack :: Sing 'DecidedUnpackSDecidedUnpack1653,54590
prec :: Fixity -> Intprec1206,40562

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO.hs,1761
module GHC.IO (IO26,733
type FilePath = StringFilePath119,3993
data MaskingStateMaskingState275,10342
  = Unmasked -- ^ asynchronous exceptions are unmasked (the normal state)Unmasked276,10360
  | MaskedInterruptibleMaskedInterruptible277,10434
  | MaskedUninterruptibleMaskedUninterruptible279,10579
unsafeUnmask :: IO a -> IO aunsafeUnmask251,9565
unsafeSTToIO :: ST s a -> IO aunsafeSTToIO111,3616
unsafeIOToST        :: IO a -> ST s aunsafeIOToST102,3218
uninterruptibleMask_ :: IO a -> IO auninterruptibleMask_360,14412
uninterruptibleMask :: ((forall a. IO a -> IO a) -> IO b) -> IO buninterruptibleMask356,14255
unblock :: IO a -> IO aunblock248,9517
throwIO :: Exception e => e -> IO athrowIO220,8258
stToIO        :: ST RealWorld a -> IO astToIO90,2739
onException :: IO a -> IO b -> IO aonException294,11173
mplusIO :: IO a -> IO a -> IO amplusIO202,7486
mkUserError       :: [Char]  -> SomeExceptionmkUserError461,18185
mask_ :: IO a -> IO amask_344,13670
mask  :: ((forall a. IO a -> IO a) -> IO b) -> IO bmask341,13545
liftIO :: IO a -> State# RealWorld -> STret RealWorld aliftIO80,2254
ioToST        :: IO a -> ST RealWorld aioToST96,2983
interruptible :: IO a -> IO ainterruptible262,9953
getMaskingState :: IO MaskingStategetMaskingState286,10882
finally :: IO a         -- ^ computation to run firstfinally392,15411
evaluate :: a -> IO aevaluate436,17189
catchException :: Exception e => IO a -> (e -> IO a) -> IO acatchException143,4792
catchAny :: IO a -> (forall e . Exception e => e -> IO a) -> IO acatchAny195,7144
catch   :: Exception ecatch179,6551
bracketbracket380,14965
blockUninterruptible :: IO a -> IO ablockUninterruptible270,10156
block :: IO a -> IO ablock240,9227

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Buffer.hs,3057
module GHC.IO.Buffer (Buffer19,573
type RawBuffer e = ForeignPtr eRawBuffer104,2587
type CharBufElem = Word16CharBufElem113,2903
type RawCharBuffer = RawBuffer CharBufElemRawCharBuffer118,2967
data Buffer eBuffer201,6466
        bufRaw    :: !(RawBuffer e),bufRaw203,6493
        bufState  :: BufferState,bufState204,6530
        bufSize   :: !Int,          -- in elements, not bytesbufSize205,6564
        bufOffset :: !Word64,       -- start location for next read/writebufOffset206,6626
        bufL      :: !Int,          -- offset of first item in the bufferbufL207,6700
        bufR      :: !Int           -- offset of last item + 1bufR208,6774
type CharBuffer = Buffer Word16CharBuffer212,6869
data BufferState = ReadBuffer | WriteBufferBufferState217,6945
data BufferState = ReadBuffer | WriteBufferReadBuffer217,6945
data BufferState = ReadBuffer | WriteBufferWriteBuffer217,6945
   memmove :: Ptr a -> Ptr a -> CSize -> IO (Ptr a)memmove300,9751
writeWord8Buf :: RawBuffer Word8 -> Int -> Word8 -> IO ()writeWord8Buf109,2742
writeCharBufPtr :: Ptr CharBufElem -> Int -> Char -> IO IntwriteCharBufPtr148,4073
writeCharBuf :: RawCharBuffer -> Int -> Char -> IO IntwriteCharBuf130,3386
withRawBuffer :: RawBuffer e -> (Ptr e -> IO a) -> IO awithRawBuffer223,7149
withBuffer :: Buffer e -> (Ptr e -> IO a) -> IO awithBuffer220,7024
summaryBuffer :: Buffer a -> StringsummaryBuffer302,9804
slideContents :: Buffer Word8 -> IO (Buffer Word8)slideContents291,9438
readWord8Buf :: RawBuffer Word8 -> Int -> IO Word8readWord8Buf106,2620
readCharBufPtr :: Ptr CharBufElem -> Int -> IO (Char, Int)readCharBufPtr134,3552
readCharBuf :: RawCharBuffer -> Int -> IO (Char, Int)readCharBuf126,3229
peekCharBuf :: RawCharBuffer -> Int -> IO CharpeekCharBuf120,3011
newCharBuffer :: Int -> BufferState -> IO CharBuffernewCharBuffer282,9119
newByteBuffer :: Int -> BufferState -> IO (Buffer Word8)newByteBuffer279,9023
newBuffer :: Int -> Int -> BufferState -> IO (Buffer e)newBuffer285,9224
isWriteBuffer :: Buffer e -> BoolisWriteBuffer240,7664
isFullCharBuffer :: Buffer e -> BoolisFullCharBuffer233,7507
isFullBuffer :: Buffer e -> BoolisFullBuffer229,7349
isEmptyBuffer :: Buffer e -> BoolisEmptyBuffer226,7266
emptyBuffer :: RawBuffer e -> Int -> BufferState -> Buffer eemptyBuffer275,8854
checkBuffer :: Buffer a -> IO ()checkBuffer322,10662
check :: Buffer a -> Bool -> IO ()check332,11001
charSize :: IntcharSize163,4624
bufferRemove :: Int -> Buffer e -> Buffer ebufferRemove251,7994
bufferOffset :: Buffer e -> Word64bufferOffset262,8353
bufferElems :: Buffer e -> IntbufferElems245,7829
bufferAvailable :: Buffer e -> IntbufferAvailable248,7906
bufferAdjustOffset :: Word64 -> Buffer e -> Buffer ebufferAdjustOffset265,8432
bufferAdjustL :: Int -> Buffer e -> Buffer ebufferAdjustL254,8101
bufferAddOffset :: Int -> Buffer e -> Buffer ebufferAddOffset271,8716
bufferAdd :: Int -> Buffer e -> Buffer ebufferAdd259,8260
#define CHARBUF_UTF32CHARBUF_UTF3287,1914

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/BufferedIO.hs,1000
module GHC.IO.BufferedIO (BufferedIO19,557
class BufferedIO dev whereBufferedIO38,1163
  newBuffer         :: dev -> BufferState -> IO (Buffer Word8)newBuffer42,1368
  fillReadBuffer    :: dev -> Buffer Word8 -> IO (Int, Buffer Word8)fillReadBuffer47,1604
  fillReadBuffer0   :: dev -> Buffer Word8 -> IO (Maybe Int, Buffer Word8)fillReadBuffer052,1824
  emptyWriteBuffer  :: dev -> Buffer Word8 -> IO (Buffer Word8)emptyWriteBuffer62,2342
  flushWriteBuffer  :: dev -> Buffer Word8 -> IO (Buffer Word8)flushWriteBuffer68,2635
  flushWriteBuffer0 :: dev -> Buffer Word8 -> IO (Int, Buffer Word8)flushWriteBuffer073,2858
writeBufNonBlocking :: RawIO dev => dev -> Buffer Word8 -> IO (Int, Buffer Word8)writeBufNonBlocking126,4942
writeBuf :: RawIO dev => dev -> Buffer Word8 -> IO (Buffer Word8)writeBuf116,4610
readBufNonBlocking :: RawIO dev => dev -> Buffer Word8readBufNonBlocking102,3974
readBuf :: RawIO dev => dev -> Buffer Word8 -> IO (Int, Buffer Word8)readBuf92,3584

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Device.hs,1861
module GHC.IO.Device (Device18,519
class RawIO a whereRawIO40,1134
  read                :: a -> Ptr Word8 -> Word64 -> Int -> IO Intread47,1569
  readNonBlocking     :: a -> Ptr Word8 -> Word64 -> Int -> IO (Maybe Int)readNonBlocking52,1830
  write               :: a -> Ptr Word8 -> Word64 -> Int -> IO ()write55,1977
  writeNonBlocking    :: a -> Ptr Word8 -> Word64 -> Int -> IO IntwriteNonBlocking59,2188
class IODevice a whereIODevice63,2325
  ready :: a -> Bool -> Int -> IO Boolready69,2574
  close :: a -> IO ()close73,2706
  isTerminal :: a -> IO BoolisTerminal76,2791
  isSeekable :: a -> IO BoolisSeekable80,2915
  seek :: a -> SeekMode -> Integer -> IO Integerseek84,3026
  tell :: a -> IO Integertell88,3164
  getSize :: a -> IO IntegergetSize92,3263
  setSize :: a -> Integer -> IO ()setSize96,3368
  setEcho :: a -> Bool -> IO ()setEcho101,3532
  getEcho :: a -> IO BoolgetEcho105,3649
  setRaw :: a -> Bool -> IO ()setRaw111,3903
  devType :: a -> IO IODeviceTypedevType115,4039
  dup :: a -> IO adup119,4218
  dup2 :: a -> a -> IO adup2125,4489
data IODeviceTypeIODeviceType141,5114
  = Directory -- ^ The standard libraries do not have direct supportDirectory142,5132
  | Stream    -- ^ A duplex communications channel (results inStream150,5652
  | RegularFile -- ^ A file that may be read or written, and alsoRegularFile154,5912
  | RawDevice -- ^ A "raw" (disk) device which supports block binaryRawDevice156,6014
data SeekModeSeekMode167,6462
  = AbsoluteSeek        -- ^ the position of @hdl@ is set to @i@.AbsoluteSeek168,6476
  | RelativeSeek        -- ^ the position of @hdl@ is set to offset @i@RelativeSeek169,6542
  | SeekFromEnd         -- ^ the position of @hdl@ is set to offset @i@SeekFromEnd171,6668
ioe_unsupportedOperation :: IO aioe_unsupportedOperation128,4553

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Encoding.hs,1844
module GHC.IO.Encoding (Encoding19,542
utf8_bom  :: TextEncodingutf8_bom77,2548
utf8  :: TextEncodingutf866,2114
utf32le  :: TextEncodingutf32le99,3122
utf32be  :: TextEncodingutf32be103,3218
utf32  :: TextEncodingutf3295,3029
utf16le  :: TextEncodingutf16le86,2788
utf16be  :: TextEncodingutf16be90,2884
utf16  :: TextEncodingutf1682,2695
unknownEncodingErr :: String -> IO aunknownEncodingErr315,12338
setLocaleEncoding, setFileSystemEncoding, setForeignEncoding :: TextEncoding -> IO ()setLocaleEncoding135,4290
setLocaleEncoding, setFileSystemEncoding, setForeignEncoding :: TextEncoding -> IO ()setForeignEncoding135,4290
setLocaleEncoding, setFileSystemEncoding, setForeignEncoding :: TextEncoding -> IO ()setFileSystemEncoding135,4290
mkTextEncoding' :: CodingFailureMode -> String -> IO TextEncodingmkTextEncoding'260,9545
mkTextEncoding :: String -> IO TextEncodingmkTextEncoding247,9048
mkGlobal :: a -> (IO a, a -> IO ())mkGlobal144,4724
latin1_encode :: CharBuffer -> Buffer Word8 -> IO (CharBuffer, Buffer Word8)latin1_encode307,11755
latin1_decode :: Buffer Word8 -> CharBuffer -> IO (Buffer Word8, CharBuffer)latin1_decode311,12061
latin1  :: TextEncodinglatin162,2026
initLocaleEncoding, initFileSystemEncoding, initForeignEncoding :: TextEncodinginitLocaleEncoding151,4912
initLocaleEncoding, initFileSystemEncoding, initForeignEncoding :: TextEncodinginitForeignEncoding151,4912
initLocaleEncoding, initFileSystemEncoding, initForeignEncoding :: TextEncodinginitFileSystemEncoding151,4912
getLocaleEncoding :: IO TextEncodinggetLocaleEncoding109,3337
getForeignEncoding :: IO TextEncodinggetForeignEncoding131,4195
getFileSystemEncoding :: IO TextEncodinggetFileSystemEncoding123,3880
char8 :: TextEncodingchar8196,6849
argvEncoding :: IO TextEncodingargvEncoding180,6348

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Encoding/CodePage.hs,1306
module GHC.IO.Encoding.CodePage(CodePage5,134
type CodePage = DWORDCodePage40,1033
    getConsoleCP :: IO Word32getConsoleCP53,1446
    getACP :: IO Word32getACP56,1532
simpleCodec :: (Buffer from -> Buffer to -> IO (Buffer from, Buffer to))simpleCodec88,2777
mkLocaleEncoding :: CodingFailureMode -> TextEncodingmkLocaleEncoding65,1757
mkCodePageEncoding :: CodingFailureMode -> Word32 -> TextEncodingmkCodePageEncoding72,1978
lookupConv :: ConvArray Char -> Word8 -> CharlookupConv153,5307
lookupCompact :: Char -> ConvArray Int -> ConvArray Word8 -> Char -> Maybe Word8lookupCompact157,5421
localeEncoding :: TextEncodinglocaleEncoding62,1670
indexWord8 :: ConvArray Word8 -> Int -> Word8indexWord8173,5907
indexInt :: ConvArray Int -> Int -> IntindexInt169,5780
indexChar :: ConvArray Char -> Int -> CharindexChar177,6042
getCurrentCodePage :: IO CodePagegetCurrentCodePage44,1158
encodeToSingleByte :: CompactArray Char Word8 -> EncodeBufferencodeToSingleByte121,4043
decodeFromSingleByte :: ConvArray Char -> DecodeBufferdecodeFromSingleByte99,3122
currentCodePage :: Word32currentCodePage59,1590
codePageEncoding :: Word32 -> TextEncodingcodePageEncoding69,1875
buildEncoding :: CodingFailureMode -> Word32 -> CodePageArrays -> TextEncodingbuildEncoding80,2378

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Encoding/CodePage/API.hs,1737
module GHC.IO.Encoding.CodePage.API (API6,187
type LPCSTR = Ptr Word8LPCSTR46,912
data CPINFO = CPINFO {CPINFO56,1115
    maxCharSize :: UINT,maxCharSize57,1138
    defaultChar :: [BYTE], -- ^ Always of length mAX_DEFAULTCHARdefaultChar58,1163
    leadByte    :: [BYTE]  -- ^ Always of length mAX_LEADBYTESleadByte59,1228
    c_GetCPInfo :: UINT       -- ^ CodePagec_GetCPInfo86,2454
    c_MultiByteToWideChar :: UINT   -- ^ CodePagec_MultiByteToWideChar91,2638
    c_WideCharToMultiByte :: UINT   -- ^ CodePagec_WideCharToMultiByte100,3060
    c_IsDBCSLeadByteEx :: UINT    -- ^ CodePagec_IsDBCSLeadByteEx111,3593
utf16_native_encode' :: EncodeBufferutf16_native_encode'153,5269
utf16_native_encode :: CodeBuffer Char CWcharutf16_native_encode190,7112
utf16_native_decode' :: DecodeBufferutf16_native_decode'154,5306
utf16_native_decode :: CodeBuffer CWchar Charutf16_native_decode195,7297
saner :: CodeBuffer from tosaner163,5538
pokeArray' :: Storable a => String -> Int -> Ptr a -> [a] -> IO ()pokeArray'80,2111
newCP :: (Buffer from -> Buffer to -> IO (Buffer from, Buffer to))newCP129,4373
mkCodePageEncoding :: CodingFailureMode -> Word32 -> TextEncodingmkCodePageEncoding121,4084
mAX_LEADBYTES :: IntmAX_LEADBYTES52,982
mAX_DEFAULTCHAR :: IntmAX_DEFAULTCHAR49,938
debugIO :: String -> IO ()debugIO39,793
cwcharView :: Buffer Word8 -> Buffer CWcharcwcharView185,6682
cpRecode :: forall from to. Storable fromcpRecode372,19009
cpEncode :: Word32 -> Int -> EncodeBuffercpEncode261,11625
cpDecode :: Word32 -> Int -> DecodeBuffercpDecode200,7482
c_DEBUG_DUMP :: Boolc_DEBUG_DUMP36,750
byteView :: Buffer CWchar -> Buffer Word8byteView182,6471
bSearch :: StringbSearch328,16024

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Encoding/CodePage/Table.hs,672
module GHC.IO.Encoding.CodePage.Table whereTable36,610
data ConvArray a = ConvArray Addr#ConvArray41,703
data CompactArray a b = CompactArray {CompactArray42,738
    encoderMax :: !a,encoderMax43,777
    encoderIndices :: !(ConvArray Int),encoderIndices44,799
    encoderValues :: !(ConvArray b)encoderValues45,839
data CodePageArrays = SingleByteCP {CodePageArrays48,880
data CodePageArrays = SingleByteCP {SingleByteCP48,880
    decoderArray :: !(ConvArray Char),decoderArray49,917
    encoderArray :: !(CompactArray Char Word8)encoderArray50,956
codePageMap :: [(Word32, CodePageArrays)]codePageMap55,1045
blockBitSize :: IntblockBitSize53,1008

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Encoding/Failure.hs,994
module GHC.IO.Encoding.Failure (Failure18,537
data CodingFailureModeCodingFailureMode39,1018
  = ErrorOnCodingFailureErrorOnCodingFailure40,1041
  | IgnoreCodingFailureIgnoreCodingFailure42,1133
  | TransliterateCodingFailureTransliterateCodingFailure45,1247
  | RoundtripFailureRoundtripFailure48,1363
unrepresentableChar :: CharunrepresentableChar106,4009
unescapeRoundtripCharacterSurrogate :: Char -> Maybe Word8unescapeRoundtripCharacterSurrogate140,5499
recoverEncode :: CodingFailureMode -> Buffer Char -> Buffer Word8recoverEncode162,6496
recoverDecode :: CodingFailureMode -> Buffer Word8 -> Buffer CharrecoverDecode146,5734
isSurrogate :: Char -> BoolisSurrogate124,4820
ioe_encodingError :: IO aioe_encodingError200,8250
ioe_decodingError :: IO aioe_decodingError195,8089
escapeToRoundtripCharacterSurrogate :: Word8 -> CharescapeToRoundtripCharacterSurrogate131,5079
codingFailureModeSuffix :: CodingFailureMode -> StringcodingFailureModeSuffix95,3495

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Encoding/Iconv.hs,1037
module GHC.IO.Encoding.Iconv (Iconv22,627
type IConv = CLong -- ToDo: (#type iconv_t)IConv72,1937
    hs_iconv_open :: CString -> CString -> IO IConvhs_iconv_open75,2026
    hs_iconv_close :: IConv -> IO CInths_iconv_close78,2124
    hs_iconv :: IConv -> Ptr CString -> Ptr CSize -> Ptr CString -> Ptr CSizehs_iconv81,2203
    c_localeEncoding :: IO CStringc_localeEncoding85,2349
newIConv :: String -> StringnewIConv126,3885
mkIconvEncoding :: CodingFailureMode -> String -> IO (Maybe TextEncoding)mkIconvEncoding109,3089
localeEncodingName :: StringlocaleEncodingName63,1535
iconv_trace :: String -> IO ()iconv_trace54,1291
iconvRecode :: IConv -> Buffer a -> Int -> Buffer b -> InticonvRecode151,4897
iconvEncoding :: String -> IO (Maybe TextEncoding)iconvEncoding100,2695
iconvEncode :: IConv -> EncodeBuffericonvEncode148,4784
iconvDecode :: IConv -> DecodeBuffericonvDecode145,4671
haskellChar :: StringhaskellChar87,2385
char_shift :: Intchar_shift96,2614
c_DEBUG_DUMP :: Boolc_DEBUG_DUMP51,1248

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Encoding/Latin1.hs,1116
module GHC.IO.Encoding.Latin1 (Latin126,808
single_byte_checked_encode :: Int -> EncodeBuffersingle_byte_checked_encode209,6778
mkLatin1_checked :: CodingFailureMode -> TextEncodingmkLatin1_checked81,2281
mkLatin1 :: CodingFailureMode -> TextEncodingmkLatin152,1337
mkAscii :: CodingFailureMode -> TextEncodingmkAscii104,3071
latin1_encode :: EncodeBufferlatin1_encode182,5854
latin1_decode :: DecodeBufferlatin1_decode137,4149
latin1_checked_encode :: EncodeBufferlatin1_checked_encode201,6552
latin1_checked_EF :: CodingFailureMode -> IO (TextEncoder ())latin1_checked_EF86,2554
latin1_checked :: TextEncodinglatin1_checked77,2174
latin1_EF :: CodingFailureMode -> IO (TextEncoder ())latin1_EF67,1872
latin1_DF :: CodingFailureMode -> IO (TextDecoder ())latin1_DF57,1570
latin1 :: TextEncodinglatin148,1254
ascii_encode :: EncodeBufferascii_encode205,6674
ascii_decode :: DecodeBufferascii_decode158,4948
ascii_EF :: CodingFailureMode -> IO (TextEncoder ())ascii_EF119,3592
ascii_DF :: CodingFailureMode -> IO (TextDecoder ())ascii_DF109,3293
ascii :: TextEncodingascii100,2991

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Encoding/Types.hs,1550
module GHC.IO.Encoding.Types (Types19,584
data BufferCodec from to state = BufferCodec {BufferCodec36,961
  encode :: CodeBuffer from to,encode37,1008
  recover :: Buffer from -> Buffer to -> IO (Buffer from, Buffer to),recover53,1875
  close  :: IO (),close72,2875
  getState :: IO state,getState77,3044
  setState :: state -> IO ()setState90,3692
type CodeBuffer from to = Buffer from -> Buffer to -> IO (CodingProgress, Buffer from, Buffer to)CodeBuffer95,3820
type DecodeBuffer = CodeBuffer Word8 CharDecodeBuffer96,3918
type EncodeBuffer = CodeBuffer Char Word8EncodeBuffer97,3960
type TextDecoder state = BufferCodec Word8 CharBufElem stateTextDecoder99,4003
type TextEncoder state = BufferCodec CharBufElem Word8 stateTextEncoder100,4064
data TextEncodingTextEncoding107,4399
        textEncodingName :: String,textEncodingName109,4460
        mkTextDecoder :: IO (TextDecoder dstate),mkTextDecoder112,4640
        mkTextEncoder :: IO (TextEncoder estate)mkTextEncoder115,4881
data CodingProgress = InputUnderflow  -- ^ Stopped because the input contains insufficient available elements,CodingProgress126,5282
data CodingProgress = InputUnderflow  -- ^ Stopped because the input contains insufficient available elements,InputUnderflow126,5282
                    | OutputUnderflow -- ^ Stopped because the output contains insufficient free elementsOutputUnderflow128,5497
                    | InvalidSequence -- ^ Stopped because there are sufficient free elements in the outputInvalidSequence129,5603

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Encoding/UTF16.hs,1660
module GHC.IO.Encoding.UTF16 (UTF1627,798
validate2       ::  Word16 -> Word16 -> Boolvalidate2355,12686
validate1    :: Word16 -> Boolvalidate1351,12574
utf16le_encode :: EncodeBufferutf16le_encode305,10684
utf16le_decode :: DecodeBufferutf16le_decode234,7543
utf16le_EF :: CodingFailureMode -> IO (TextEncoder ())utf16le_EF189,5723
utf16le_DF :: CodingFailureMode -> IO (TextDecoder ())utf16le_DF179,5418
utf16le :: TextEncodingutf16le170,5095
utf16be_encode :: EncodeBufferutf16be_encode268,9057
utf16be_decode :: DecodeBufferutf16be_decode200,6029
utf16be_EF :: CodingFailureMode -> IO (TextEncoder ())utf16be_EF160,4790
utf16be_DF :: CodingFailureMode -> IO (TextDecoder ())utf16be_DF150,4485
utf16be :: TextEncodingutf16be141,4162
utf16_native_encode :: EncodeBufferutf16_native_encode132,3958
utf16_native_decode :: DecodeBufferutf16_native_decode129,3884
utf16_encode :: IORef Bool -> EncodeBufferutf16_encode86,2375
utf16_decode :: IORef (Maybe DecodeBuffer) -> DecodeBufferutf16_decode100,2907
utf16_EF :: CodingFailureMode -> IO (TextEncoder Bool)utf16_EF75,2022
utf16_DF :: CodingFailureMode -> IO (TextDecoder (Maybe DecodeBuffer))utf16_DF64,1651
utf16  :: TextEncodingutf1655,1344
mkUTF16le :: CodingFailureMode -> TextEncodingmkUTF16le174,5181
mkUTF16be :: CodingFailureMode -> TextEncodingmkUTF16be145,4248
mkUTF16 :: CodingFailureMode -> TextEncodingmkUTF1659,1425
chr2 :: Word16 -> Word16 -> Charchr2342,12308
bomB, bomL, bom1, bom2 :: Word8bomL124,3779
bomB, bomL, bom1, bom2 :: Word8bomB124,3779
bomB, bomL, bom1, bom2 :: Word8bom2124,3779
bomB, bomL, bom1, bom2 :: Word8bom1124,3779

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Encoding/UTF32.hs,1663
module GHC.IO.Encoding.UTF32 (UTF3227,798
validate    :: Char -> Boolvalidate332,10902
utf32le_encode :: EncodeBufferutf32le_encode284,9333
utf32le_decode :: DecodeBufferutf32le_decode232,7331
utf32le_EF :: CodingFailureMode -> IO (TextEncoder ())utf32le_EF193,5952
utf32le_DF :: CodingFailureMode -> IO (TextDecoder ())utf32le_DF183,5647
utf32le :: TextEncodingutf32le174,5324
utf32be_encode :: EncodeBufferutf32be_encode260,8404
utf32be_decode :: DecodeBufferutf32be_decode204,6258
utf32be_EF :: CodingFailureMode -> IO (TextEncoder ())utf32be_EF163,5018
utf32be_DF :: CodingFailureMode -> IO (TextDecoder ())utf32be_DF153,4713
utf32be :: TextEncodingutf32be144,4390
utf32_native_encode :: EncodeBufferutf32_native_encode138,4211
utf32_native_decode :: DecodeBufferutf32_native_decode135,4137
utf32_encode :: IORef Bool -> EncodeBufferutf32_encode86,2374
utf32_decode :: IORef (Maybe DecodeBuffer) -> DecodeBufferutf32_decode102,3009
utf32_EF :: CodingFailureMode -> IO (TextEncoder Bool)utf32_EF75,2021
utf32_DF :: CodingFailureMode -> IO (TextDecoder (Maybe DecodeBuffer))utf32_DF64,1650
utf32  :: TextEncodingutf3255,1346
ord4 :: Char -> (Word8,Word8,Word8,Word8)ord4322,10671
mkUTF32le :: CodingFailureMode -> TextEncodingmkUTF32le178,5410
mkUTF32be :: CodingFailureMode -> TextEncodingmkUTF32be148,4476
mkUTF32 :: CodingFailureMode -> TextEncodingmkUTF3259,1427
chr4 :: Word8 -> Word8 -> Word8 -> Word8 -> Charchr4308,10262
bom0, bom1, bom2, bom3 :: Word8bom3128,4014
bom0, bom1, bom2, bom3 :: Word8bom2128,4014
bom0, bom1, bom2, bom3 :: Word8bom1128,4014
bom0, bom1, bom2, bom3 :: Word8bom0128,4014

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Encoding/UTF8.hs,1475
module GHC.IO.Encoding.UTF8 (UTF827,795
validate4             :: Word8 -> Word8 -> Word8 -> Word8 -> Boolvalidate4344,12663
validate3          :: Word8 -> Word8 -> Word8 -> Boolvalidate3324,11960
utf8_encode :: EncodeBufferutf8_encode214,7897
utf8_decode :: DecodeBufferutf8_decode146,4475
utf8_bom_encode :: IORef Bool -> EncodeBufferutf8_bom_encode126,3839
utf8_bom_decode :: IORef Bool -> DecodeBufferutf8_bom_decode103,2955
utf8_bom_EF :: CodingFailureMode -> IO (TextEncoder Bool)utf8_bom_EF92,2612
utf8_bom_DF :: CodingFailureMode -> IO (TextDecoder Bool)utf8_bom_DF81,2269
utf8_bom :: TextEncodingutf8_bom73,1957
utf8_EF :: CodingFailureMode -> IO (TextEncoder ())utf8_EF63,1661
utf8_DF :: CodingFailureMode -> IO (TextDecoder ())utf8_DF53,1365
utf8 :: TextEncodingutf843,1071
ord4   :: Char -> (Word8,Word8,Word8,Word8)ord4274,10344
ord3   :: Char -> (Word8,Word8,Word8)ord3266,10068
ord2   :: Char -> (Word8,Word8)ord2259,9861
mkUTF8_bom :: CodingFailureMode -> TextEncodingmkUTF8_bom76,2026
mkUTF8 :: CodingFailureMode -> TextEncodingmkUTF847,1148
chr4             :: Word8 -> Word8 -> Word8 -> Word8 -> Charchr4303,11275
chr3          :: Word8 -> Word8 -> Word8 -> Charchr3292,10922
chr2       :: Word8 -> Word8 -> Charchr2283,10675
bom0, bom1, bom2 :: Word8bom2141,4412
bom0, bom1, bom2 :: Word8bom1141,4412
bom0, bom1, bom2 :: Word8bom0141,4412
between :: Word8                -- ^ byte to checkbetween317,11738

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Exception.hs,3921
module GHC.IO.Exception (Exception21,669
data BlockedIndefinitelyOnMVar = BlockedIndefinitelyOnMVarBlockedIndefinitelyOnMVar68,1853
data BlockedIndefinitelyOnSTM = BlockedIndefinitelyOnSTMBlockedIndefinitelyOnSTM84,2428
data Deadlock = DeadlockDeadlock100,2980
data AllocationLimitExceeded = AllocationLimitExceededAllocationLimitExceeded116,3322
newtype CompactionFailed = CompactionFailed StringCompactionFailed138,4002
newtype AssertionFailed = AssertionFailed StringAssertionFailed163,4732
data SomeAsyncException = forall e . Exception e => SomeAsyncException eSomeAsyncException177,5022
data AsyncExceptionAsyncException198,5625
  = StackOverflowStackOverflow199,5645
  | HeapOverflowHeapOverflow205,5924
  | ThreadKilledThreadKilled220,6680
  | UserInterruptUserInterrupt225,6896
data ArrayExceptionArrayException239,7409
  = IndexOutOfBounds    StringIndexOutOfBounds240,7429
  | UndefinedElement    StringUndefinedElement243,7550
data FixIOException = FixIOExceptionFixIOException280,8798
data ExitCodeExitCode296,9272
  = ExitSuccess -- ^ indicates successful termination;ExitSuccess297,9286
  | ExitFailure IntExitFailure298,9341
type IOError = IOExceptionIOError324,10313
data IOExceptionIOException330,10532
 = IOError {IOError331,10549
     ioe_handle   :: Maybe Handle,   -- the handle used by the action flaggingioe_handle332,10562
     ioe_type     :: IOErrorType,    -- what it was.ioe_type334,10692
     ioe_location :: String,         -- location.ioe_location335,10745
     ioe_description :: String,      -- error type specific information.ioe_description336,10795
     ioe_errno    :: Maybe CInt,     -- errno leading to this error, if any.ioe_errno337,10868
     ioe_filename :: Maybe FilePath  -- filename the error is related to.ioe_filename338,10945
data IOErrorTypeIOErrorType350,11351
  = AlreadyExistsAlreadyExists352,11387
  | NoSuchThingNoSuchThing353,11405
  | ResourceBusyResourceBusy354,11421
  | ResourceExhaustedResourceExhausted355,11438
  | EOFEOF356,11460
  | IllegalOperationIllegalOperation357,11468
  | PermissionDeniedPermissionDenied358,11489
  | UserErrorUserError359,11510
  | UnsatisfiedConstraintsUnsatisfiedConstraints361,11539
  | SystemErrorSystemError362,11566
  | ProtocolErrorProtocolError363,11582
  | OtherErrorOtherError364,11600
  | InvalidArgumentInvalidArgument365,11615
  | InappropriateTypeInappropriateType366,11635
  | HardwareFaultHardwareFault367,11657
  | UnsupportedOperationUnsupportedOperation368,11675
  | TimeExpiredTimeExpired369,11700
  | ResourceVanishedResourceVanished370,11716
  | InterruptedInterrupted371,11737
userError       :: String  -> IOErroruserError410,13068
untangle :: Addr# -> String -> Stringuntangle457,14661
unsupportedOperation :: IOErrorunsupportedOperation446,14372
stackOverflow, heapOverflow :: SomeExceptionstackOverflow254,7848
ioException     :: IOException -> IO aioException308,9728
ioError         :: IOError -> IO aioError312,9841
stackOverflow, heapOverflow :: SomeExceptionheapOverflow254,7848
cannotCompactPinned :: SomeException -- for the RTScannotCompactPinned152,4405
cannotCompactMutable :: SomeException -- for the RTScannotCompactMutable156,4545
cannotCompactFunction :: SomeException -- for the RTScannotCompactFunction148,4266
blockedIndefinitelyOnSTM :: SomeException -- for the RTSblockedIndefinitelyOnSTM93,2723
blockedIndefinitelyOnMVar :: SomeException -- for the RTSblockedIndefinitelyOnMVar77,2152
asyncExceptionToException :: Exception e => e -> SomeExceptionasyncExceptionToException187,5289
asyncExceptionFromException :: Exception e => SomeException -> Maybe easyncExceptionFromException191,5433
assertError :: (?callStack :: CallStack) => Bool -> a -> aassertError435,13940
allocationLimitExceeded :: SomeException -- for the RTSallocationLimitExceeded128,3688

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/FD.hs,4473
module GHC.IO.FD (FD23,684
data FD = FD {FD81,2176
  fdFD :: {-# UNPACK #-} !CInt,fdFD82,2191
  fdIsSocket_ :: {-# UNPACK #-} !IntfdIsSocket_86,2367
  setmode :: CInt -> Bool -> IO CIntsetmode303,9943
   c_closesocket :: CInt -> IO CIntc_closesocket353,11346
  fdReady :: CInt -> CBool -> Int64 -> CBool -> IO CIntfdReady423,13320
  unsafe_fdReady :: CInt -> CBool -> Int64 -> CBool -> IO CIntunsafe_fdReady586,20187
   c_safe_recv :: CInt -> Ptr Word8 -> CInt -> CInt{-flags-} -> IO CIntc_safe_recv669,24237
   c_safe_send :: CInt -> Ptr Word8 -> CInt -> CInt{-flags-} -> IO CIntc_safe_send672,24351
foreign import ccall unsafe "rtsSupportsBoundThreads" threaded :: Boolthreaded676,24432
  lockFile :: Word64 -> Word64 -> Word64 -> CInt -> IO CIntlockFile701,25222
  unlockFile :: Word64 -> IO CIntunlockFile704,25324
  c_getUniqueFileInfo :: CInt -> Ptr Word64 -> Ptr Word64 -> IO ()c_getUniqueFileInfo708,25439
std_flags, output_flags, read_flags, write_flags, rw_flags,write_flags218,6969
writeRawBufferPtrNoBlock :: String -> FD -> Ptr Word8 -> Int -> CSize -> IO CIntwriteRawBufferPtrNoBlock567,19296
writeRawBufferPtr :: String -> FD -> Ptr Word8 -> Int -> CSize -> IO CIntwriteRawBufferPtr552,18514
writeBuf' :: FD -> Buffer Word8 -> IO (Buffer Word8)writeBuf'160,5100
throwErrnoIfMinus1RetryOnBlock  :: String -> IO CSsize -> IO CSsize -> IO CSsizethrowErrnoIfMinus1RetryOnBlock682,24625
tell :: FD -> IO Integertell372,11866
stdin, stdout, stderr :: FDstdout321,10437
stdin, stdout, stderr :: FDstdin321,10437
stdin, stdout, stderr :: FDstderr321,10437
std_flags, output_flags, read_flags, write_flags, rw_flags,std_flags218,6969
stdFD :: CInt -> FDstdFD309,10099
setSize :: FD -> Integer -> IO ()setSize381,12063
setRaw :: FD -> Bool -> IO ()setRaw443,13887
setNonBlockingMode :: FD -> Bool -> IO FDsetNonBlockingMode401,12677
setEcho :: FD -> Bool -> IO ()setEcho437,13715
seek :: FD -> SeekMode -> Integer -> IO Integerseek361,11502
std_flags, output_flags, read_flags, write_flags, rw_flags,rw_flags218,6969
release :: FD -> IO ()release347,11151
ready :: FD -> Bool -> Int -> IO Boolready410,12884
std_flags, output_flags, read_flags, write_flags, rw_flags,read_flags218,6969
readRawBufferPtrNoBlock :: String -> FD -> Ptr Word8 -> Int -> CSize -> IO IntreadRawBufferPtrNoBlock536,17735
readRawBufferPtr :: String -> FD -> Ptr Word8 -> Int -> CSize -> IO IntreadRawBufferPtr519,16864
readBuf' :: FD -> Buffer Word8 -> IO (Int, Buffer Word8)readBuf'151,4803
std_flags, output_flags, read_flags, write_flags, rw_flags,output_flags218,6969
openFileopenFile171,5502
    append_flags, nonblock_flags :: CIntnonblock_flags219,7029
mkFD :: CIntmkFD233,7604
isTerminal :: FD -> IO BoolisTerminal428,13483
isSeekable :: FD -> IO BoolisSeekable356,11390
isNonBlocking :: FD -> BoolisNonBlocking582,20077
ifSupported :: String -> a -> aifSupported105,2843
getUniqueFileInfo :: CInt -> CDev -> CIno -> IO (Word64, Word64)getUniqueFileInfo290,9514
getSize :: FD -> IO IntegergetSize378,12000
getEcho :: FD -> IO BoolgetEcho440,13807
fdWriteNonBlocking :: FD -> Ptr Word8 -> Word64 -> Int -> IO IntfdWriteNonBlocking474,15023
fdWrite :: FD -> Ptr Word8 -> Word64 -> Int -> IO ()fdWrite464,14639
fdReadNonBlocking :: FD -> Ptr Word8 -> Word64 -> Int -> IO (Maybe Int)fdReadNonBlocking455,14321
fdRead :: FD -> Ptr Word8 -> Word64 -> Int -> IO IntfdRead449,14092
fdIsSocket :: FD -> BoolfdIsSocket96,2676
dup2 :: FD -> FD -> IO FDdup2394,12425
dup :: FD -> IO FDdup389,12301
devType :: FD -> IO IODeviceTypedevType386,12211
dEFAULT_FD_BUFFER_SIZE :: IntdEFAULT_FD_BUFFER_SIZE140,4285
close :: FD -> IO ()close329,10633
clampWriteSize, clampReadSize :: Int -> IntclampWriteSize74,1952
clampWriteSize, clampReadSize :: Int -> IntclampReadSize74,1952
c_DEBUG_DUMP :: Boolc_DEBUG_DUMP67,1652
blockingWriteRawBufferPtr :: String -> FD -> Ptr Word8-> Int -> CSize -> IO CIntblockingWriteRawBufferPtr645,22973
blockingReadRawBufferPtr :: String -> FD -> Ptr Word8 -> Int -> CSize -> IO CIntblockingReadRawBufferPtr632,22281
asyncWriteRawBufferPtr :: String -> FD -> Ptr Word8 -> Int -> CSize -> IO CIntasyncWriteRawBufferPtr619,21646
asyncReadRawBufferPtr :: String -> FD -> Ptr Word8 -> Int -> CSize -> IO CIntasyncReadRawBufferPtr608,21081
    append_flags, nonblock_flags :: CIntappend_flags219,7029
e WINDOWS_CCONV stdcallWINDOWS_CCONV59,1512

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Handle.hs,2401
module GHC.IO.Handle (Handle23,647
data HandlePosn = HandlePosn Handle HandlePositionHandlePosn334,11816
type HandlePosition = IntegerHandlePosition349,12372
try :: IO () -> IO ()try717,25968
showHandle' :: String -> Bool -> Handle -> IO StringshowHandle'753,27197
isEOF :: IO BoolisEOF177,5790
ioe_dupHandlesNotCompatible :: Handle -> IO aioe_dupHandlesNotCompatible720,26064
hTell :: Handle -> IO IntegerhTell450,16303
hShow :: Handle -> IO StringhShow749,27054
hSetPosn :: HandlePosn -> IO ()hSetPosn368,12970
hSetNewlineMode :: Handle -> NewlineMode -> IO ()hSetNewlineMode628,22518
hSetFileSize :: Handle -> Integer -> IO ()hSetFileSize134,4224
hSetEncoding :: Handle -> TextEncoding -> IO ()hSetEncoding268,9146
hSetEcho :: Handle -> Bool -> IO ()hSetEcho555,20023
hSetBuffering :: Handle -> BufferMode -> IO ()hSetBuffering218,7195
hSetBinaryMode :: Handle -> Bool -> IO ()hSetBinaryMode597,21359
hSeek :: Handle -> SeekMode -> Integer -> IO ()hSeek405,14454
hLookAhead :: Handle -> IO CharhLookAhead191,6201
hIsWritable :: Handle -> IO BoolhIsWritable519,18665
hIsTerminalDevice :: Handle -> IO BoolhIsTerminalDevice581,20767
hIsSeekable :: Handle -> IO BoolhIsSeekable541,19509
hIsReadable :: Handle -> IO BoolhIsReadable510,18317
hIsOpen :: Handle -> IO BoolhIsOpen485,17624
hIsEOF :: Handle -> IO BoolhIsEOF155,5102
hIsClosed :: Handle -> IO BoolhIsClosed493,17877
hGetPosn :: Handle -> IO HandlePosnhGetPosn354,12530
hGetEncoding :: Handle -> IO (Maybe TextEncoding)hGetEncoding290,10136
hGetEcho :: Handle -> IO BoolhGetEcho568,20409
hGetBuffering :: Handle -> IO BufferModehGetBuffering531,19102
hFlushAll :: Handle -> IO ()hFlushAll328,11617
hFlush :: Handle -> IO ()hFlush308,10813
hFileSize :: Handle -> IO IntegerhFileSize116,3504
hDuplicateTo :: Handle -> Handle -> IO ()hDuplicateTo699,25166
hDuplicate :: Handle -> IO HandlehDuplicate643,23124
hClose_rethrow :: SomeException -> Handle -> IO ()hClose_rethrow101,2955
hClose_maybethrow :: Maybe SomeException -> Handle -> IO ()hClose_maybethrow97,2803
hClose' :: Handle -> MVar Handle__ -> IO (Maybe SomeException)hClose'107,3136
hClose :: Handle -> IO ()hClose89,2567
dupHandle_ :: (RawIO dev, IODevice dev, BufferedIO dev, Typeable dev) => devdupHandle_673,24247
dupHandleTo :: FilePathdupHandleTo725,26268
dupHandle :: FilePathdupHandle656,23655

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Handle/FD.hs,982
module GHC.IO.Handle.FD ( FD18,538
  setmode :: CInt -> Bool -> IO CIntsetmode103,3316
stdout :: Handlestdout60,1913
stdin :: Handlestdin49,1521
stderr :: Handlestderr71,2311
stdHandleFinalizer :: FilePath -> MVar Handle__ -> IO ()stdHandleFinalizer82,2673
setBinaryMode :: FD.FD -> IO ()setBinaryMode93,3052
openFileBlocking :: FilePath -> IOMode -> IO HandleopenFileBlocking160,5808
openFile' :: String -> IOMode -> Bool -> Bool -> IO HandleopenFile'181,6710
openFile :: FilePath -> IOMode -> IO HandleopenFile143,5044
openBinaryFile :: FilePath -> IOMode -> IO HandleopenBinaryFile175,6524
mkHandleFromFDmkHandleFromFD203,7634
handleToFd :: Handle -> IO FD.FDhandleToFd287,10798
fdToHandle' :: CIntfdToHandle'243,8842
fdToHandle :: Posix.FD -> IO HandlefdToHandle270,9961
dEFAULT_OPEN_IN_BINARY_MODE :: BooldEFAULT_OPEN_IN_BINARY_MODE304,11355
addFilePathToIOError :: String -> FilePath -> IOException -> IOExceptionaddFilePathToIOError109,3470

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Handle/Internals.hs,4812
module GHC.IO.Handle.Internals (Internals29,910
type HandleFinalizer = FilePath -> MVar Handle__ -> IO ()HandleFinalizer91,2515
writeCharBuffer :: Handle__ -> CharBuffer -> IO ()writeCharBuffer524,20108
withHandle__' :: String -> Handle -> MVar Handle__ -> (Handle__ -> IO Handle__)withHandle__'157,5107
withHandle_' :: String -> Handle -> MVar Handle__ -> (Handle__ -> IO a) -> IO awithHandle_'146,4620
withHandle_ :: String -> Handle -> (Handle__ -> IO a) -> IO awithHandle_142,4417
withHandle' :: String -> Handle -> MVar Handle__withHandle'132,4163
withHandle :: String -> Handle -> (Handle__ -> IO (Handle__,a)) -> IO awithHandle128,3954
withAllHandles__ :: String -> Handle -> (Handle__ -> IO Handle__) -> IO ()withAllHandles__151,4846
wantWritableHandle'wantWritableHandle'241,8501
wantWritableHandle :: String -> Handle -> (Handle__ -> IO a) -> IO awantWritableHandle233,8135
wantSeekableHandle :: String -> Handle -> (Handle__ -> IO a) -> IO awantSeekableHandle311,11312
wantReadableHandle_ :: String -> Handle -> (Handle__ -> IO a) -> IO awantReadableHandle_274,9741
wantReadableHandle'wantReadableHandle'282,10114
wantReadableHandle :: String -> Handle -> (Handle__ -> IO (Handle__,a)) -> IO awantReadableHandle270,9584
trymaybe :: IO () -> IO (Maybe SomeException)trymaybe798,30908
traceIO :: String -> IO ()traceIO865,33203
streamEncode :: BufferCodec from to statestreamEncode383,14241
recoveringEncode :: BufferCodec from to state -> CodeBuffer from torecoveringEncode389,14600
readTextDeviceNonBlocking :: Handle__ -> CharBuffer -> IO CharBufferreadTextDeviceNonBlocking978,38022
readTextDevice' :: Handle__ -> Buffer Word8 -> CharBuffer -> IO CharBufferreadTextDevice'930,35801
readTextDevice :: Handle__ -> CharBuffer -> IO CharBufferreadTextDevice887,34025
openTextEncodingopenTextEncoding752,28983
noCharBuffer :: CharBuffernoCharBuffer830,32164
noByteBuffer :: Buffer Word8noByteBuffer834,32282
newFileHandle :: FilePath -> Maybe HandleFinalizer -> Handle__ -> IO HandlenewFileHandle93,2574
mkUnBuffer :: BufferState -> IO (IORef CharBuffer, BufferMode)mkUnBuffer463,17708
mkHandle :: (RawIO dev, IODevice dev, BufferedIO dev, Typeable dev) => devmkHandle652,24946
mkFileHandle :: (RawIO dev, IODevice dev, BufferedIO dev, Typeable dev)mkFileHandle703,26853
mkDuplexHandle :: (RawIO dev, IODevice dev, BufferedIO dev, Typeable dev) => devmkDuplexHandle724,27919
ioe_closedHandle, ioe_semiclosedHandle, ioe_EOF,ioe_semiclosedHandle331,12147
  ioe_notReadable, ioe_notWritable, ioe_cannotFlushNotSeekable,ioe_notWritable332,12196
  ioe_notSeekable :: IO aioe_notSeekable333,12260
  ioe_notReadable, ioe_notWritable, ioe_cannotFlushNotSeekable,ioe_notReadable332,12196
ioe_finalizedHandle :: FilePath -> Handle__ioe_finalizedHandle357,13150
ioe_closedHandle, ioe_semiclosedHandle, ioe_EOF,ioe_closedHandle331,12147
  ioe_notReadable, ioe_notWritable, ioe_cannotFlushNotSeekable,ioe_cannotFlushNotSeekable332,12196
ioe_bufsiz :: Int -> IO aioe_bufsiz362,13315
ioe_closedHandle, ioe_semiclosedHandle, ioe_EOF,ioe_EOF331,12147
ioModeToHandleType :: IOMode -> HandleTypeioModeToHandleType742,28620
initBufferState :: HandleType -> BufferStateinitBufferState748,28856
handleFinalizer :: FilePath -> MVar Handle__ -> IO ()handleFinalizer435,16841
hLookAhead_ :: Handle__ -> IO CharhLookAhead_840,32469
hClose_help :: Handle__ -> IO (Handle__, Maybe SomeException)hClose_help786,30353
hClose_handle_ :: Handle__ -> IO (Handle__, Maybe SomeException)hClose_handle_801,31032
getCharBuffer :: IODevice dev => dev -> BufferStategetCharBuffer450,17321
flushWriteBuffer :: Handle__ -> IO ()flushWriteBuffer507,19422
flushCharReadBuffer :: Handle__ -> IO ()flushCharReadBuffer563,21496
flushCharBuffer :: Handle__ -> IO ()flushCharBuffer487,18551
flushByteWriteBuffer :: Handle__ -> IO ()flushByteWriteBuffer512,19584
flushByteReadBuffer :: Handle__ -> IO ()flushByteReadBuffer614,23473
flushBuffer :: Handle__ -> IO ()flushBuffer476,18233
do_operation :: String -> Handle -> (Handle__ -> IO a) -> MVar Handle__ -> IO ado_operation166,5343
decodeByteBuf :: Handle__ -> CharBuffer -> IO CharBufferdecodeByteBuf990,38457
debugIO :: String -> IO ()debugIO855,32912
dEFAULT_CHAR_BUFFER_SIZE :: IntdEFAULT_CHAR_BUFFER_SIZE447,17235
closeTextCodecs :: Handle__ -> IO ()closeTextCodecs772,29700
checkWritableHandle :: (Handle__ -> IO a) -> Handle__ -> IO acheckWritableHandle247,8689
checkSeekableHandle :: (Handle__ -> IO a) -> Handle__ -> IO acheckSeekableHandle318,11646
checkReadableHandle :: (Handle__ -> IO a) -> Handle__ -> IO acheckReadableHandle288,10301
c_DEBUG_DUMP :: Boolc_DEBUG_DUMP85,2367
augmentIOError :: IOException -> String -> Handle -> IOExceptionaugmentIOError216,7345

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Handle/Lock.hs,192
module GHC.IO.Handle.Lock (Lock7,147
hUnlock :: Handle -> IO ()hUnlock64,1921
hTryLock :: Handle -> LockMode -> IO BoolhTryLock58,1751
hLock :: Handle -> LockMode -> IO ()hLock52,1602

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Handle/Lock/Common.hs,315
module GHC.IO.Handle.Lock.CommonCommon4,92
data FileLockingNotSupported = FileLockingNotSupportedFileLockingNotSupported14,312
data LockMode = SharedLock | ExclusiveLockLockMode21,526
data LockMode = SharedLock | ExclusiveLockSharedLock21,526
data LockMode = SharedLock | ExclusiveLockExclusiveLock21,526

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Handle/Lock/Flock.hsc,228
module GHC.IO.Handle.Lock.Flock whereFlock8,184
  c_flock :: CInt -> CInt -> IO CIntc_flock51,1372
unlockImpl :: Handle -> IO ()unlockImpl45,1188
lockImpl :: Handle -> String -> LockMode -> Bool -> IO BoollockImpl29,600

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Handle/Lock/LinuxOFD.hsc,629
module GHC.IO.Handle.Lock.LinuxOFD whereLinuxOFD7,178
  c_fcntl :: CInt -> CInt -> Ptr FLock -> IO CIntc_fcntl44,1168
data FLock  = FLock { l_type   :: CShortFLock46,1219
data FLock  = FLock { l_type   :: CShortl_type46,1219
                    , l_whence :: CShortl_whence47,1260
                    , l_start  :: COffl_start48,1301
                    , l_len    :: COffl_len49,1340
                    , l_pid    :: CPidl_pid50,1379
unlockImpl :: Handle -> IO ()unlockImpl94,3065
lockImpl :: Handle -> String -> LockMode -> Bool -> IO BoollockImpl70,2161
fine _FILE_OFFSET_BITS 64_FILE_OFFSET_BITS16,413

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Handle/Lock/NoOp.hs,171
module GHC.IO.Handle.Lock.NoOp whereNoOp3,36
unlockImpl :: Handle -> IO ()unlockImpl15,350
lockImpl :: Handle -> String -> LockMode -> Bool -> IO BoollockImpl11,211

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Handle/Lock/Windows.hsc,739
module GHC.IO.Handle.Lock.Windows whereWindows8,178
  c_get_osfhandle :: CInt -> IO HANDLEc_get_osfhandle127,4646
  c_LockFileEx :: HANDLE -> DWORD -> DWORD -> DWORD -> DWORD -> LPOVERLAPPEDc_LockFileEx131,4816
  c_UnlockFileEx :: HANDLE -> DWORD -> DWORD -> DWORD -> LPOVERLAPPED -> IO BOOLc_UnlockFileEx136,5052
unlockImplWinIO :: Handle -> IO ()unlockImplWinIO97,3535
unlockImplPOSIX :: Handle -> IO ()unlockImplPOSIX113,4081
unlockImpl :: Handle -> IO ()unlockImpl94,3455
lockImplWinIO :: Handle -> String -> LockMode -> Bool -> IO BoollockImplWinIO39,977
lockImplPOSIX :: Handle -> String -> LockMode -> Bool -> IO BoollockImplPOSIX68,2173
lockImpl :: Handle -> String -> LockMode -> Bool -> IO BoollockImpl36,873

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Handle/Text.hs,3747
module GHC.IO.Handle.Text (Text26,701
   memcpy :: Ptr a -> Ptr a -> CSize -> IO (Ptr ())memcpy1149,45249
writeChunkNonBlocking :: Handle__ -> Ptr Word8 -> Word64 -> Int -> IO IntwriteChunkNonBlocking890,34150
writeChunk :: Handle__ -> Ptr Word8 -> Word64 -> Int -> IO IntwriteChunk885,33977
writeBlocks :: Handle -> Bool -> Bool -> Newline -> Buffer CharBufElem -> String -> IO ()writeBlocks665,24631
unpack_nl :: RawCharBuffer -> Int -> Int -> [Char] -> IO ([Char],Int)unpack_nl290,10411
unpack :: RawCharBuffer -> Int -> Int -> [Char] -> IO [Char]unpack260,9150
strictReadLoop' :: Handle__ -> [CharBuffer] -> CharBuffer -> IO [CharBuffer]strictReadLoop'502,18587
strictReadLoop :: Handle__ -> [CharBuffer] -> CharBuffer -> IO [CharBuffer]strictReadLoop489,18106
strictRead :: Handle -> Handle__ -> IO (Handle__, Either SomeException String)strictRead478,17701
maybeFillReadBuffer :: Handle__ -> CharBuffer -> IO (Maybe CharBuffer)maybeFillReadBuffer245,8721
lazyReadBuffered :: Handle -> Handle__ -> IO (Handle__, [Char])lazyReadBuffered399,14566
lazyRead :: Handle -> IO StringlazyRead385,13980
lazyBuffersToString :: Newline -> [CharBuffer] -> String -> IO StringlazyBuffersToString511,19033
illegalBufferSize :: Handle -> String -> Int -> IO aillegalBufferSize1154,45399
hWaitForInput :: Handle -> Int -> IO BoolhWaitForInput89,2784
hPutcBuffered :: Handle__ -> Char -> IO ()hPutcBuffered557,20806
hPutStrLn :: Handle -> String -> IO ()hPutStrLn616,22827
hPutStr' :: Handle -> String -> Bool -> IO ()hPutStr'623,23107
hPutStr :: Handle -> String -> IO ()hPutStr612,22684
hPutChars :: Handle -> [Char] -> IO ()hPutChars640,23726
hPutChar :: Handle -> Char -> IO ()hPutChar551,20635
hPutBufNonBlockinghPutBufNonBlocking789,29706
hPutBuf':: Handle                       -- handle to write tohPutBuf'796,30062
hPutBuf :: Handle                       -- handle to write tohPutBuf782,29397
hGetLineBufferedLoop :: Handle__hGetLineBufferedLoop196,6676
hGetLineBuffered :: Handle__ -> IO StringhGetLineBuffered191,6520
hGetLine :: Handle -> IO StringhGetLine186,6391
hGetContents' :: Handle -> IO StringhGetContents'468,17365
hGetContents :: Handle -> IO StringhGetContents375,13574
hGetChar :: Handle -> IO CharhGetChar129,4392
hGetBufSome :: Handle -> Ptr a -> Int -> IO InthGetBufSome1020,39686
hGetBufNonBlocking :: Handle -> Ptr a -> Int -> IO InthGetBufNonBlocking1065,41997
hGetBuf :: Handle -> Ptr a -> Int -> IO InthGetBuf912,35070
getSpareBuffer :: Handle__ -> IO (BufferMode, CharBuffer)getSpareBuffer645,23898
getSomeCharacters :: Handle__ -> CharBuffer -> IO CharBuffergetSomeCharacters428,15815
flushByteWriteBufferGiven :: Handle__ -> Buffer Word8 -> IO (Buffer Word8)flushByteWriteBufferGiven854,32688
copyToRawBuffer :: RawBuffer e -> Int -> Ptr e -> Int -> IO ()copyToRawBuffer1136,44788
copyFromRawBuffer :: Ptr e -> RawBuffer e -> Int -> Int -> IO ()copyFromRawBuffer1142,44998
commitBuffer' :: RawCharBuffer -> Int -> Int -> Bool -> Bool -> Handle__commitBuffer'736,27587
commitBuffercommitBuffer704,26155
bufferChunk :: Handle__ -> Buffer Word8 -> Ptr Word8 -> Int -> IO IntbufferChunk867,33175
bufWrite :: Handle__-> Ptr Word8 -> Int -> Bool -> IO IntbufWrite822,31191
bufReadNonEmpty :: Handle__ -> Buffer Word8 -> Ptr Word8 -> Int -> Int -> IO IntbufReadNonEmpty933,35937
bufReadNBNonEmpty :: Handle__ -> Buffer Word8 -> Ptr Word8 -> Int -> Int -> IO IntbufReadNBNonEmpty1106,43689
bufReadNBEmpty :: Handle__ -> Buffer Word8 -> Ptr Word8 -> Int -> Int -> IO IntbufReadNBEmpty1078,42556
bufReadEmpty :: Handle__ -> Buffer Word8 -> Ptr Word8 -> Int -> Int -> IO IntbufReadEmpty967,37312
#define CHARBUF_UTF32CHARBUF_UTF32256,9050

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Handle/Types.hs,2904
module GHC.IO.Handle.Types (Types23,662
data HandleHandle99,3396
  = FileHandle                          -- A normal handle to a fileFileHandle100,3408
  | DuplexHandle                        -- A handle to a read/write streamDuplexHandle105,3629
data Handle__Handle__122,4316
      haDevice      :: !dev,haDevice125,4441
      haType        :: HandleType,           -- type (read/write/append etc.)haType126,4470
      haByteBuffer  :: !(IORef (Buffer Word8)), -- See [note Buffering Implementation]haByteBuffer127,4548
      haBufferMode  :: BufferMode,haBufferMode128,4635
      haLastDecode  :: !(IORef (dec_state, Buffer Word8)),haLastDecode129,4670
      haCharBuffer  :: !(IORef (Buffer CharBufElem)), -- See [note Buffering Implementation]haCharBuffer131,4804
      haBuffers     :: !(IORef (BufferList CharBufElem)),  -- spare buffershaBuffers132,4897
      haEncoder     :: Maybe (TextEncoder enc_state),haEncoder133,4973
      haDecoder     :: Maybe (TextDecoder dec_state),haDecoder134,5027
      haCodec       :: Maybe TextEncoding,haCodec135,5081
      haInputNL     :: Newline,haInputNL136,5124
      haOutputNL    :: Newline,haOutputNL137,5156
      haOtherSide   :: Maybe (MVar Handle__) -- ptr to the write side of ahaOtherSide138,5188
data BufferList eBufferList145,5509
  = BufferListNilBufferListNil146,5527
  | BufferListCons (RawBuffer e) (BufferList e)BufferListCons147,5545
data HandleTypeHandleType152,5666
 = ClosedHandleClosedHandle153,5682
 | SemiClosedHandleSemiClosedHandle154,5698
 | ReadHandleReadHandle155,5718
 | WriteHandleWriteHandle156,5732
 | AppendHandleAppendHandle157,5747
 | ReadWriteHandleReadWriteHandle158,5763
data BufferModeBufferMode249,9474
 = NoBuffering  -- ^ buffering is disabled if possible.NoBuffering250,9490
 | LineBufferingLineBuffering251,9546
 | BlockBuffering (Maybe Int)BlockBuffering253,9630
data Newline = LF    -- ^ @\'\\n\'@Newline361,13779
data Newline = LF    -- ^ @\'\\n\'@LF361,13779
             | CRLF  -- ^ @\'\\r\\n\'@CRLF362,13815
data NewlineModeNewlineMode374,14400
  = NewlineMode { inputNL :: Newline,inputNL375,14417
                  outputNL :: NewlineoutputNL377,14520
universalNewlineMode :: NewlineModeuniversalNewlineMode403,15508
showHandle :: FilePath -> String -> StringshowHandle446,17063
noNewlineTranslation :: NewlineModenoNewlineTranslation420,16156
nativeNewlineMode    :: NewlineModenativeNewlineMode412,15871
nativeNewline :: NewlinenativeNewline388,14973
isWritableHandleType :: HandleType -> BoolisWritableHandleType165,5969
isReadableHandleType :: HandleType -> BoolisReadableHandleType160,5783
isReadWriteHandleType :: HandleType -> BoolisReadWriteHandleType171,6190
isAppendHandleType :: HandleType -> BoolisAppendHandleType175,6330
checkHandleInvariants :: Handle__ -> IO ()checkHandleInvariants188,6833

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Handle/Windows.hs,879
module GHC.IO.Handle.Windows (Windows18,539
stdout :: Handlestdout78,2884
stdin :: Handlestdin69,2529
stderr :: Handlestderr87,3244
stdHandleFinalizer :: FilePath -> MVar Handle__ -> IO ()stdHandleFinalizer96,3568
openFileBlocking :: FilePath -> IOMode -> IO HandleopenFileBlocking150,5838
openFile' :: String -> IOMode -> Bool -> Bool -> IO HandleopenFile'171,6738
openFile :: FilePath -> IOMode -> IO HandleopenFile138,5357
openBinaryFile :: FilePath -> IOMode -> IO HandleopenBinaryFile165,6552
mkHandleFromHANDLEmkHandleFromHANDLE187,7424
mkConsoleHandle :: Win.IoHandle Win.ConsoleHandlemkConsoleHandle51,1711
handleToHANDLE :: Handle -> IO Win.HANDLEhandleToHANDLE216,8427
dEFAULT_OPEN_IN_BINARY_MODE :: BooldEFAULT_OPEN_IN_BINARY_MODE234,9261
addFilePathToIOError :: String -> FilePath -> IOException -> IOExceptionaddFilePathToIOError108,3935

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/IOMode.hs,490
module GHC.IO.IOMode (IOMode(..)) whereIOMode19,523
data IOMode      =  ReadMode | WriteMode | AppendMode | ReadWriteModeIOMode28,674
data IOMode      =  ReadMode | WriteMode | AppendMode | ReadWriteModeReadMode28,674
data IOMode      =  ReadMode | WriteMode | AppendMode | ReadWriteModeWriteMode28,674
data IOMode      =  ReadMode | WriteMode | AppendMode | ReadWriteModeAppendMode28,674
data IOMode      =  ReadMode | WriteMode | AppendMode | ReadWriteModeReadWriteMode28,674

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/StdHandles.hs,346
module GHC.IO.StdHandlesStdHandles20,608
stdout :: Handlestdout38,994
stdin :: Handlestdin35,943
stderr :: Handlestderr41,1049
openFileBlocking :: FilePath -> IOMode -> IO HandleopenFileBlocking50,1304
openFile :: FilePath -> IOMode -> IO HandleopenFile44,1104
openBinaryFile :: FilePath -> IOMode -> IO HandleopenBinaryFile47,1192

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/SubSystem.hs,437
module GHC.IO.SubSystem (SubSystem20,619
withIoSubSystem' :: (IoSubSystem -> a) -> awithIoSubSystem'73,1787
withIoSubSystem :: (IoSubSystem -> IO a) -> IO awithIoSubSystem70,1703
whenIoSubSystem :: IoSubSystem -> IO () -> IO ()whenIoSubSystem76,1867
isWindowsNativeIO :: BoolisWindowsNativeIO59,1466
ioSubSystem :: IoSubSystemioSubSystem62,1528
conditional :: a -> a -> aconditional44,1138
(<!>) :: a -> a -> a<!>56,1424

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Unsafe.hs,342
module GHC.IO.Unsafe (Unsafe22,588
unsafePerformIO :: IO a -> aunsafePerformIO121,4437
unsafeInterleaveIO :: IO a -> IO aunsafeInterleaveIO149,5612
unsafeDupablePerformIO  :: IO a -> aunsafeDupablePerformIO138,5164
unsafeDupableInterleaveIO :: IO a -> IO aunsafeDupableInterleaveIO185,7215
noDuplicate :: IO ()noDuplicate202,7795

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Windows/Encoding.hs,1048
module GHC.IO.Windows.EncodingEncoding15,351
  wideCharToMultiBytewideCharToMultiByte87,2928
  multiByteToWideCharmultiByteToWideChar125,4366
  multiByteToWideChar'multiByteToWideChar'144,5004
  wideCharToMultiByte'wideCharToMultiByte'169,6028
withUTF16ToGhcInternal :: Ptr Word8 -- Buffer to store the encoded string in.withUTF16ToGhcInternal186,6643
withGhcInternalToUTF16 :: Ptr Word8 -> Int -> ((Ptr Word16, CInt) -> IO a)withGhcInternalToUTF16156,5403
stringToUnicode :: CodePage -> String -> IO StringstringToUnicode103,3522
encodeMultiByteRawIO :: CodePage -> String -> IO (LPCSTR, CInt)encodeMultiByteRawIO81,2637
encodeMultiByteIO' :: CodePage -> String -> ((LPCSTR, CInt) -> IO a) -> IO aencodeMultiByteIO'53,1599
encodeMultiByteIO :: CodePage -> String -> IO StringencodeMultiByteIO75,2399
encodeMultiByte :: CodePage -> String -> StringencodeMultiByte48,1418
decodeMultiByteIO :: CodePage -> String -> IO StringdecodeMultiByteIO139,4823
decodeMultiByte :: CodePage -> String -> StringdecodeMultiByte134,4600

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Windows/Handle.hsc,7668
module GHC.IO.Windows.HandleHandle26,846
data NativeHandleNativeHandle97,2652
data ConsoleHandleConsoleHandle98,2670
data IoHandle a whereIoHandle105,2970
  NativeHandle  :: { getNativeHandle  :: HANDLE } -> IoHandle NativeHandleNativeHandle106,2992
  NativeHandle  :: { getNativeHandle  :: HANDLE } -> IoHandle NativeHandlegetNativeHandle106,2992
  ConsoleHandle :: { getConsoleHandle :: HANDLEConsoleHandle107,3067
  ConsoleHandle :: { getConsoleHandle :: HANDLEgetConsoleHandle107,3067
                   , cookedHandle :: IORef BoolcookedHandle108,3115
type Io a = IoHandle aIo111,3211
      => RawHandle a whereRawHandle142,4175
  toHANDLE   :: a -> HANDLEtoHANDLE143,4202
  fromHANDLE :: HANDLE -> afromHANDLE144,4230
  isLockable :: a -> BoolisLockable145,4258
  setCooked  :: a -> Bool -> IO asetCooked146,4284
  isCooked   :: a -> IO BoolisCooked147,4318
type StdHandleId  = DWORDStdHandleId242,7405
type PCONSOLE_READCONSOLE_CONTROL = Ptr CONSOLE_READCONSOLE_CONTROLPCONSOLE_READCONSOLE_CONTROL281,8777
data CONSOLE_READCONSOLE_CONTROL = CONSOLE_READCONSOLE_CONTROLCONSOLE_READCONSOLE_CONTROL282,8845
  { crcNLength           :: ULONGcrcNLength283,8908
  , crcNInitialChars     :: ULONGcrcNInitialChars284,8942
  , crcDwCtrlWakeupMask  :: ULONGcrcDwCtrlWakeupMask285,8976
  , crcDwControlKeyState :: ULONGcrcDwControlKeyState286,9010
type PINPUT_RECORD = Ptr ()PINPUT_RECORD330,10675
    c_CreateFile :: LPCTSTR -> DWORD -> DWORD -> LPSECURITY_ATTRIBUTESc_CreateFile336,10863
    c_SetFileCompletionNotificationModes :: HANDLE -> UCHAR -> IO BOOLc_SetFileCompletionNotificationModes341,11091
    c_ReadFile :: HANDLE -> LPVOID -> DWORD -> LPDWORD -> LPOVERLAPPEDc_ReadFile344,11218
    c_WriteFile :: HANDLE -> LPVOID -> DWORD -> LPDWORD -> LPOVERLAPPEDc_WriteFile348,11372
    c_GetStdHandle :: StdHandleId -> IO HANDLEc_GetStdHandle352,11531
    c_handle_ready :: HANDLE -> BOOL -> CInt -> IO CIntc_handle_ready355,11622
    c_is_console :: HANDLE -> IO BOOLc_is_console358,11720
    c_set_console_buffering :: HANDLE -> BOOL -> IO BOOLc_set_console_buffering361,11811
    c_set_console_echo :: HANDLE -> BOOL -> IO BOOLc_set_console_echo364,11916
    c_get_console_echo :: HANDLE -> IO BOOLc_get_console_echo367,12016
    c_close_handle :: HANDLE -> IO Boolc_close_handle370,12104
    c_handle_type :: HANDLE -> IO Intc_handle_type373,12187
  c_set_file_pointer :: HANDLE -> CLong -> DWORD -> Ptr CLong -> IO BOOLc_set_file_pointer376,12273
  c_get_file_pointer :: HANDLE -> IO CLongc_get_file_pointer379,12394
  c_get_file_size :: HANDLE -> IO CLongc_get_file_size382,12482
  c_set_file_size :: HANDLE -> CLong -> IO BOOLc_set_file_size385,12567
  c_duplicate_handle :: HANDLE -> Ptr HANDLE -> IO BOOLc_duplicate_handle388,12663
  c_set_console_pointer :: HANDLE -> CLong -> DWORD -> Ptr CLong -> IO BOOLc_set_console_pointer391,12770
  c_get_console_pointer :: HANDLE -> IO CLongc_get_console_pointer394,12897
  c_get_console_buffer_size :: HANDLE -> IO CLongc_get_console_buffer_size397,12998
  c_set_console_buffer_size :: HANDLE -> CLong -> IO BOOLc_set_console_buffer_size400,13103
  c_read_console :: HANDLE -> Ptr Word16 -> DWORD -> Ptr DWORDc_read_console403,13221
  c_write_console :: HANDLE -> Ptr Word16 -> DWORD -> Ptr DWORD -> Ptr ()c_write_console407,13405
  c_read_console_input :: HANDLE -> PINPUT_RECORD -> DWORD -> LPDWORD -> IO BOOLc_read_console_input411,13573
type LPSECURITY_ATTRIBUTES = LPVOIDLPSECURITY_ATTRIBUTES413,13655
data TempFileOptions = NoTemp | TempNonExcl | TempExcl deriving EqTempFileOptions778,30970
data TempFileOptions = NoTemp | TempNonExcl | TempExcl deriving EqNoTemp778,30970
data TempFileOptions = NoTemp | TempNonExcl | TempExcl deriving EqTempNonExcl778,30970
data TempFileOptions = NoTemp | TempNonExcl | TempExcl deriving EqTempExcl778,30970
  c_get_handle_access_mask :: HANDLE -> IO DWORDc_get_handle_access_mask936,38631
  lockFile :: CUIntPtr -> Word64 -> Word64 -> CInt -> IO CIntlockFile949,39075
  unlockFile :: CUIntPtr -> IO CIntunlockFile952,39179
  c_getUniqueFileInfo :: HANDLE -> Ptr Word64 -> Ptr Word64 -> IO ()c_getUniqueFileInfo957,39372
writeBuf' :: RawHandle a => a -> Buffer Word8 -> IO (Buffer Word8)writeBuf'233,7088
stdin, stdout, stderr :: Io ConsoleHandlestdout254,7708
stdin, stdout, stderr :: Io ConsoleHandlestdin254,7708
stdin, stdout, stderr :: Io ConsoleHandlestderr254,7708
release :: RawHandle a => a -> IO ()release938,38681
readBuf' :: RawHandle a => a -> Buffer Word8 -> IO (Int, Buffer Word8)readBuf'225,6794
optimizeFileAccess :: HANDLE -> IO ()optimizeFileAccess916,37657
openFileAsTempopenFileAsTemp791,31574
openFile'openFile'801,32006
openFileopenFile782,31160
mkConsoleHandle :: HANDLE -> IO (Io ConsoleHandle)mkConsoleHandle259,7983
hwndWriteNonBlocking :: Io NativeHandle -> Ptr Word8 -> Word64 -> Int -> IO InthwndWriteNonBlocking491,17409
hwndWrite :: Io NativeHandle -> Ptr Word8 -> Word64 -> Int -> IO ()hwndWrite472,16610
hwndReadNonBlocking :: Io NativeHandle -> Ptr Word8 -> Word64 -> InthwndReadNonBlocking448,15402
hwndRead :: Io NativeHandle -> Ptr Word8 -> Word64 -> Int -> IO InthwndRead422,14052
handle_tell :: RawHandle a => a -> IO Integerhandle_tell705,28199
handle_set_size :: RawHandle a => a -> Integer -> IO ()handle_set_size711,28395
handle_set_echo :: RawHandle a => a -> Bool -> IO ()handle_set_echo722,28792
handle_set_console_size :: RawHandle a => a -> Integer -> IO ()handle_set_console_size763,30354
handle_set_buffering :: RawHandle a => a -> Bool -> IO ()handle_set_buffering739,29407
handle_seek :: RawHandle a => a -> SeekMode -> Integer -> IO Integerhandle_seek692,27693
handle_ready :: RawHandle a => a -> Bool -> Int -> IO Boolhandle_ready667,26662
handle_is_seekable :: RawHandle a => a -> IO Boolhandle_is_seekable687,27539
handle_is_console :: RawHandle a => a -> IO Boolhandle_is_console673,26930
handle_get_size :: RawHandle a => a -> IO Integerhandle_get_size716,28587
handle_get_echo :: RawHandle a => a -> IO Boolhandle_get_echo727,28971
handle_get_console_size :: RawHandle a => a -> IO Integerhandle_get_console_size768,30580
handle_duplicate :: RawHandle a => a -> IO ahandle_duplicate730,29067
handle_dev_type :: RawHandle a => a -> IO IODeviceTypehandle_dev_type680,27175
handle_console_tell :: RawHandle a => a -> IO Integerhandle_console_tell757,30131
handle_console_seek :: RawHandle a => a -> SeekMode -> Integer -> IO Integerhandle_console_seek744,29606
handle_close :: RawHandle a => a -> IO ()handle_close676,27024
handleToMode :: HANDLE -> IO IOModehandleToMode924,37995
getUniqueFileInfo :: RawHandle a => a -> IO (Word64, Word64)getUniqueFileInfo961,39518
getStdHandle :: StdHandleId -> IO HANDLEgetStdHandle250,7576
eotControl :: CONSOLE_READCONSOLE_CONTROLeotControl320,10357
dEFAULT_BUFFER_SIZE :: IntdEFAULT_BUFFER_SIZE203,6073
convertHandle :: Io ConsoleHandle -> Io NativeHandleconvertHandle115,3336
console_set_buffering :: Io ConsoleHandle -> Bool -> IO ()console_set_buffering736,29278
consoleWriteNonBlocking :: Io ConsoleHandle -> Ptr Word8 -> Word64 -> Int -> IO IntconsoleWriteNonBlocking544,20006
consoleWrite :: Io ConsoleHandle -> Ptr Word8 -> Word64 -> Int -> IO ()consoleWrite531,19409
consoleReadNonBlocking :: Io ConsoleHandle -> Ptr Word8 -> Word64 -> IntconsoleReadNonBlocking659,26343
consoleRead :: Io ConsoleHandle -> Ptr Word8 -> Word64 -> Int -> IO IntconsoleRead555,20521
acEotMask :: ULONGacEotMask277,8650
acCtrlZ :: IntacCtrlZ273,8559
acCtrlD :: IntacCtrlD269,8396

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IO/Windows/Paths.hs,174
module GHC.IO.Windows.PathsPaths21,658
    c_GetDevicePath :: CWString -> IO CWStringc_GetDevicePath34,892
getDevicePath :: FilePath -> IO FilePathgetDevicePath44,1467

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IOArray.hs,540
module GHC.IOArray (IOArray20,584
newtype IOArray i e = IOArray (STArray RealWorld i e)IOArray41,1119
writeIOArray :: Ix i => IOArray i e -> i -> e -> IO ()writeIOArray71,2229
unsafeWriteIOArray :: IOArray i e -> Int -> e -> IO ()unsafeWriteIOArray62,1876
unsafeReadIOArray  :: IOArray i e -> Int -> IO eunsafeReadIOArray57,1681
readIOArray  :: Ix i => IOArray i e -> i -> IO ereadIOArray67,2079
newIOArray :: Ix i => (i,i) -> e -> IO (IOArray i e)newIOArray52,1473
boundsIOArray :: IOArray i e -> (i,i)boundsIOArray75,2379

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IOPort.hs,456
module GHC.IOPort (IOPort29,1006
data IOPortException = IOPortException deriving ShowIOPortException43,1254
data IOPort a = IOPort (IOPort# RealWorld a)IOPort52,1496
writeIOPort  :: IOPort a -> a -> IO BoolwriteIOPort117,3828
readIOPort :: IOPort a -> IO areadIOPort107,3497
newIOPort :: a -> IO (IOPort a)newIOPort93,3043
newEmptyIOPort  :: IO (IOPort a)newEmptyIOPort87,2842
doubleReadException :: SomeExceptiondoubleReadException49,1408

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/IORef.hs,869
module GHC.IORef (IORef21,593
newtype IORef a = IORef (STRef RealWorld a)IORef36,1025
data Box a = Box aBox107,3830
writeIORef  :: IORef a -> a -> IO ()writeIORef51,1408
readIORef   :: IORef a -> IO areadIORef47,1290
newIORef    :: a -> IO (IORef a)newIORef43,1158
atomicSwapIORef :: IORef a -> a -> IO aatomicSwapIORef101,3581
atomicModifyIORefP :: IORef a -> (a -> (a,b)) -> IO batomicModifyIORefP77,2625
atomicModifyIORefLazy_ :: IORef a -> (a -> a) -> IO (a, a)atomicModifyIORefLazy_86,2998
atomicModifyIORef2Lazy :: IORef a -> (a -> (a,b)) -> IO (a, (a, b))atomicModifyIORef2Lazy60,1855
atomicModifyIORef2 :: IORef a -> (a -> (a,b)) -> IO (a, (a, b))atomicModifyIORef270,2363
atomicModifyIORef'_ :: IORef a -> (a -> a) -> IO (a, a)atomicModifyIORef'_94,3344
atomicModifyIORef' :: IORef a -> (a -> (a,b)) -> IO batomicModifyIORef'120,4233

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Int.hs,2608
module GHC.Int (Int22,702
sInt8" #-} Int8 = I8# Int#Int857,1816
sInt8" #-} Int8 = I8# Int#I8#57,1816
Int16" #-} Int16 = I16# Int#Int16268,9870
Int16" #-} Int16 = I16# Int#I16#268,9870
Int32" #-} Int32 = I32# Int#Int32484,18293
Int32" #-} Int32 = I32# Int#I32#484,18293
Int64" #-} Int64 = I64# Int64#Int64711,27228
Int64" #-} Int64 = I64# Int64#I64#711,27228
Int64" #-} Int64 = I64# Int#Int64924,36030
Int64" #-} Int64 = I64# Int#I64#924,36030
uncheckedIShiftRA64# :: Int# -> Int# -> Int#uncheckedIShiftRA64#1110,43166
uncheckedIShiftL64# :: Int# -> Int# -> Int#uncheckedIShiftL64#1107,43080
eqInt8, neInt8 :: Int8 -> Int8 -> BoolneInt866,2008
eqInt64, neInt64 :: Int64 -> Int64 -> BoolneInt64720,27428
eqInt32, neInt32 :: Int32 -> Int32 -> BoolneInt32493,18491
eqInt16, neInt16 :: Int16 -> Int16 -> BoolneInt16277,10068
divInt64#, modInt64# :: Int64# -> Int64# -> Int64#modInt64#825,31677
gtInt8, geInt8, ltInt8, leInt8 :: Int8 -> Int8 -> BoolltInt883,2404
gtInt64, geInt64, ltInt64, leInt64 :: Int64 -> Int64 -> BoolltInt64737,27859
gtInt32, geInt32, ltInt32, leInt32 :: Int32 -> Int32 -> BoolltInt32510,18908
gtInt16, geInt16, ltInt16, leInt16 :: Int16 -> Int16 -> BoolltInt16294,10485
gtInt8, geInt8, ltInt8, leInt8 :: Int8 -> Int8 -> BoolleInt883,2404
gtInt64, geInt64, ltInt64, leInt64 :: Int64 -> Int64 -> BoolleInt64737,27859
gtInt32, geInt32, ltInt32, leInt32 :: Int32 -> Int32 -> BoolleInt32510,18908
gtInt16, geInt16, ltInt16, leInt16 :: Int16 -> Int16 -> BoolleInt16294,10485
iShiftL64#, iShiftRA64# :: Int64# -> Int# -> Int64#iShiftRA64#896,34664
iShiftL64#, iShiftRA64# :: Int64# -> Int# -> Int64#iShiftL64#896,34664
gtInt8, geInt8, ltInt8, leInt8 :: Int8 -> Int8 -> BoolgtInt883,2404
gtInt64, geInt64, ltInt64, leInt64 :: Int64 -> Int64 -> BoolgtInt64737,27859
gtInt32, geInt32, ltInt32, leInt32 :: Int32 -> Int32 -> BoolgtInt32510,18908
gtInt16, geInt16, ltInt16, leInt16 :: Int16 -> Int16 -> BoolgtInt16294,10485
gtInt8, geInt8, ltInt8, leInt8 :: Int8 -> Int8 -> BoolgeInt883,2404
gtInt64, geInt64, ltInt64, leInt64 :: Int64 -> Int64 -> BoolgeInt64737,27859
gtInt32, geInt32, ltInt32, leInt32 :: Int32 -> Int32 -> BoolgeInt32510,18908
gtInt16, geInt16, ltInt16, leInt16 :: Int16 -> Int16 -> BoolgeInt16294,10485
eqInt8, neInt8 :: Int8 -> Int8 -> BooleqInt866,2008
eqInt64, neInt64 :: Int64 -> Int64 -> BooleqInt64720,27428
eqInt32, neInt32 :: Int32 -> Int32 -> BooleqInt32493,18491
eqInt16, neInt16 :: Int16 -> Int16 -> BooleqInt16277,10068
divInt64#, modInt64# :: Int64# -> Int64# -> Int64#divInt64#825,31677

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Integer.hs,3082
module GHC.Integer (Integer11,223
xorInteger :: Integer -> Integer -> IntegerxorInteger196,4708
wordToInteger :: Word# -> IntegerwordToInteger72,1856
word64ToInteger :: Word64# -> Integerword64ToInteger80,2022
timesInteger :: Integer -> Integer -> IntegertimesInteger117,2924
testBitInteger :: Integer -> Int# -> BooltestBitInteger208,5056
smallInteger :: Int# -> IntegersmallInteger66,1726
signumInteger :: Integer -> IntegersignumInteger126,3128
shiftRInteger :: Integer -> Int# -> IntegershiftRInteger205,4958
shiftLInteger :: Integer -> Int# -> IntegershiftLInteger202,4860
remInteger :: Integer -> Integer -> IntegerremInteger144,3608
quotRemInteger :: Integer -> Integer -> (# Integer, Integer #)quotRemInteger138,3435
quotInteger :: Integer -> Integer -> IntegerquotInteger141,3534
popCountInteger :: Integer -> Int#popCountInteger217,5300
plusInteger :: Integer -> Integer -> IntegerplusInteger111,2776
orInteger :: Integer -> Integer -> IntegerorInteger193,4640
neqInteger# :: Integer -> Integer -> Int#neqInteger#174,4226
neqInteger :: Integer -> Integer -> BoolneqInteger151,3745
negateInteger :: Integer -> IntegernegateInteger120,2999
modInteger :: Integer -> Integer -> IntegermodInteger135,3364
minusInteger :: Integer -> Integer -> IntegerminusInteger114,2849
ltInteger# :: Integer -> Integer -> Int#ltInteger#183,4432
ltInteger :: Integer -> Integer -> BoolltInteger160,3942
leInteger# :: Integer -> Integer -> Int#leInteger#177,4296
leInteger :: Integer -> Integer -> BoolleInteger154,3812
integerToWord64 :: Integer -> Word64#integerToWord6483,2100
integerToWord :: Integer -> Word#integerToWord75,1926
integerToInt64 :: Integer -> Int64#integerToInt6489,2250
integerToInt :: Integer -> Int#integerToInt69,1792
int64ToInteger :: Int64# -> Integerint64ToInteger86,2176
hashInteger :: Integer -> Int#hashInteger211,5164
gtInteger# :: Integer -> Integer -> Int#gtInteger#180,4364
gtInteger :: Integer -> Integer -> BoolgtInteger157,3877
geInteger# :: Integer -> Integer -> Int#geInteger#186,4500
geInteger :: Integer -> Integer -> BoolgeInteger163,4007
floatFromInteger :: Integer -> Float#floatFromInteger98,2423
eqInteger# :: Integer -> Integer -> Int#eqInteger#171,4158
eqInteger :: Integer -> Integer -> BooleqInteger148,3680
encodeFloatInteger :: Integer -> Int# -> Float#encodeFloatInteger95,2331
encodeDoubleInteger :: Integer -> Int# -> Double#encodeDoubleInteger101,2499
doubleFromInteger :: Integer -> Double#doubleFromInteger104,2595
divModInteger :: Integer -> Integer -> (# Integer, Integer #)divModInteger129,3197
divInteger :: Integer -> Integer -> IntegerdivInteger132,3293
decodeDoubleInteger :: Double# -> (# Integer, Int# #)decodeDoubleInteger107,2675
complementInteger :: Integer -> IntegercomplementInteger199,4779
compareInteger :: Integer -> Integer -> OrderingcompareInteger166,4072
bitInteger :: Int# -> IntegerbitInteger214,5226
andInteger :: Integer -> Integer -> IntegerandInteger190,4569
absInteger :: Integer -> IntegerabsInteger123,3068

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Integer/Logarithms.hs,212
module GHC.Integer.LogarithmsLogarithms5,114
wordLog2# :: Word# -> Int#wordLog2#17,342
integerLogBase# :: Integer -> Integer -> Int#integerLogBase#23,489
integerLog2# :: Integer -> Int#integerLog2#20,410

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Ix.hs,587
module GHC.Ix (Ix18,547
class (Ord a) => Ix a whereIx46,1383
    range               :: (a,a) -> [a]range50,1542
    index               :: (a,a) -> a -> Intindex52,1636
    unsafeIndex         :: (a,a) -> a -> IntunsafeIndex54,1753
    inRange             :: (a,a) -> a -> BoolinRange57,1894
    rangeSize           :: (a,a) -> IntrangeSize59,2002
    unsafeRangeSize     :: (a,a) -> IntunsafeRangeSize62,2131
indexError :: Show a => (a,a) -> a -> String -> bindexError146,5140
hopelessIndexError :: Int -- Try to use 'indexError' instead!hopelessIndexError153,5438

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/List.hs,5249
module GHC.List (List20,636
zipWithFB :: (a -> b -> c) -> (d -> e -> a) -> d -> e -> b -> czipWithFB1479,47080
zipWith3FB :: (d -> xs -> xs') -> (a -> b -> c -> d) -> a -> b -> c -> xs -> xs'zipWith3FB1503,48145
zipWith3                :: (a->b->c->d) -> [a]->[b]->[c]->[d]zipWith31496,47909
zipWith :: (a->b->c) -> [a]->[b]->[c]zipWith1469,46761
zipFB :: ((a, b) -> c -> d) -> a -> b -> c -> dzipFB1416,44826
zip3FB :: ((a,b,c) -> xs -> xs') -> a -> b -> c -> xs -> xs'zip3FB1437,45582
zip3 :: [a] -> [b] -> [c] -> [(a,b,c)]zip31430,45357
zip :: [a] -> [b] -> [(a,b)]zip1410,44653
unzip3   :: [(a,b,c)] -> ([a],[b],[c])unzip31531,49124
unzip    :: [(a,b)] -> ([a],[b])unzip1518,48678
unsafeTake :: Int -> [a] -> [a]unsafeTake844,27683
uncons                  :: [a] -> Maybe (a, [a])uncons98,2846
tooLarge :: Int -> atooLarge1271,39892
takeWhileFB :: (a -> Bool) -> (a -> b -> b) -> b -> a -> b -> btakeWhileFB775,25232
takeWhile               :: (a -> Bool) -> [a] -> [a]takeWhile768,24988
takeFB :: (a -> b -> b) -> b -> a -> (Int -> b) -> Int -> btakeFB868,28572
take                   :: Int -> [a] -> [a]take825,26934
tail                    :: [a] -> [a]tail111,3179
sum                     :: (Num a) => [a] -> asum352,10976
strictUncurryScanr :: (a -> b -> c) -> (a, b) -> cstrictUncurryScanr548,17354
splitAt                :: Int -> [a] -> ([a],[a])splitAt939,30616
span                    :: (a -> Bool) -> [a] -> ([a],[a])span968,31542
scanrFB :: (a -> b -> b) -> (b -> c -> c) -> a -> (b, c) -> (b, c)scanrFB553,17554
scanr1                  :: (a -> a -> a) -> [a] -> [a]scanr1606,19913
scanr                   :: (a -> b -> b) -> b -> [a] -> [b]scanr542,17127
scanlFB' :: (b -> a -> b) -> (b -> c -> c) -> a -> (b -> c) -> b -> cscanlFB'463,14408
scanlFB :: (b -> a -> b) -> (b -> c -> c) -> a -> (b -> c) -> b -> cscanlFB412,12778
scanl1                  :: (a -> a -> a) -> [a] -> [a]scanl1438,13489
scanl'           :: (b -> a -> b) -> b -> [a] -> [b]scanl'444,13697
scanl                   :: (b -> a -> b) -> b -> [a] -> [b]scanl395,12152
reverse                 :: [a] -> [a]reverse1008,32743
replicate               :: Int -> a -> [a]replicate741,24096
repeatFB :: (a -> b -> b) -> a -> brepeatFB720,23548
repeat :: a -> [a]repeat714,23340
product                 :: (Num a) => [a] -> aproduct368,11341
prel_list_str :: Stringprel_list_str1549,49765
or                      :: [Bool] -> Boolor1064,34229
null                    :: [a] -> Boolnull171,4831
notElem                 :: (Eq a) => a -> [a] -> BoolnotElem1180,37265
negIndex :: anegIndex1274,39991
minimum                 :: (Ord a) => [a] -> aminimum649,21396
maximum                 :: (Ord a) => [a] -> amaximum625,20533
lookup                  :: (Eq a) => a -> [(a,b)] -> Maybe blookup1202,37880
lengthFB :: x -> (Int -> Int) -> Int -> IntlengthFB201,5715
length                  :: [a] -> Intlength186,5271
lenAcc          :: [a] -> Int -> IntlenAcc189,5348
lastError :: alastError137,4035
last                    :: [a] -> alast124,3520
iterateFB :: (a -> b -> b) -> (a -> a) -> a -> biterateFB676,22263
iterate'FB :: (a -> b -> b) -> (a -> a) -> a -> biterate'FB698,22888
iterate' :: (a -> a) -> a -> [a]iterate'692,22722
iterate :: (a -> a) -> a -> [a]iterate672,22132
init                    :: [a] -> [a]init150,4313
idLength :: Int -> IntidLength205,5821
head                    :: [a] -> ahead67,1993
foldr3_left :: (a -> b -> c -> d -> e) -> e -> a ->foldr3_left1317,41379
foldr3 :: (a -> b -> c -> d -> d) -> d -> [a] -> [b] -> [c] -> dfoldr31307,41081
foldr2_left :: (a -> b -> c -> d) -> d -> a -> ([b] -> c) -> [b] -> dfoldr2_left1297,40676
foldr2 :: (a -> b -> c -> c) -> c -> [a] -> [b] -> cfoldr21289,40437
foldr1                  :: (a -> a -> a) -> [a] -> afoldr1519,16316
foldl1'                  :: (a -> a -> a) -> [a] -> afoldl1'333,10509
foldl1                  :: (a -> a -> a) -> [a] -> afoldl1328,10329
foldl'           :: forall a b . (b -> a -> b) -> b -> [a] -> bfoldl'307,9592
foldl :: forall a b. (b -> a -> b) -> b -> [a] -> bfoldl261,7680
flipSeqTake :: a -> Int -> aflipSeqTake864,28460
flipSeqScanl' :: a -> b -> aflipSeqScanl'468,14624
filterFB :: (a -> b -> b) -> (a -> Bool) -> a -> b -> bfilterFB223,6329
filter :: (a -> Bool) -> [a] -> [a]filter216,6111
errorEmptyList :: String -> aerrorEmptyList1545,49647
elem                    :: (Eq a) => a -> [a] -> Boolelem1155,36674
dropWhile               :: (a -> Bool) -> [a] -> [a]dropWhile801,26329
drop                   :: Int -> [a] -> [a]drop898,29406
cycle                   :: [a] -> [a]cycle754,24538
constScanl :: a -> b -> aconstScanl417,12988
concatMap               :: (a -> [b]) -> [a] -> [b]concatMap1217,38375
concat :: [[a]] -> [a]concat1236,38770
break                   :: (a -> Bool) -> [a] -> ([a],[a])break986,32194
badHead :: abadHead72,2120
any                     :: (a -> Bool) -> [a] -> Boolany1094,35047
and                     :: [Bool] -> Booland1034,33430
all                     :: (a -> Bool) -> [a] -> Boolall1125,35881
(!!)                    :: [a] -> Int -> a!!1259,39412

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/MVar.hs,615
module GHC.MVar (MVar20,587
data MVar a = MVar (MVar# RealWorld a)MVar37,884
tryTakeMVar :: MVar a -> IO (Maybe a)tryTakeMVar140,4910
tryReadMVar :: MVar a -> IO (Maybe a)tryReadMVar160,5732
tryPutMVar  :: MVar a -> a -> IO BooltryPutMVar149,5328
takeMVar :: MVar a -> IO atakeMVar89,2859
readMVar :: MVar a -> IO areadMVar114,3812
putMVar  :: MVar a -> a -> IO ()putMVar131,4533
newMVar :: a -> IO (MVar a)newMVar68,2040
newEmptyMVar  :: IO (MVar a)newEmptyMVar62,1851
isEmptyMVar :: MVar a -> IO BoolisEmptyMVar172,6292
addMVarFinalizer :: MVar a -> IO () -> IO ()addMVarFinalizer179,6577

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Maybe.hs,173
module GHC.MaybeMaybe5,85
data  Maybe a  =  Nothing | Just aMaybe29,956
data  Maybe a  =  Nothing | Just aNothing29,956
data  Maybe a  =  Nothing | Just aJust29,956

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Natural.hs,2016
module GHC.NaturalNatural11,269
pattern NatS# :: Word# -> NaturalNatS#60,1219
pattern NatJ# :: B.BigNat -> NaturalNatJ#63,1279
xorNatural :: Natural -> Natural -> NaturalxorNatural137,3282
wordToNatural# :: Word -> NaturalwordToNatural#181,4488
wordToNatural :: Word -> NaturalwordToNatural169,4134
word2Int :: Word -> Intword2Int71,1459
timesNatural :: Natural -> Natural -> NaturaltimesNatural105,2475
testBitNatural :: Natural -> Int -> BooltestBitNatural143,3427
signumNatural :: Natural -> NaturalsignumNatural111,2619
shiftRNatural :: Natural -> Int -> NaturalshiftRNatural152,3704
shiftLNatural :: Natural -> Int -> NaturalshiftLNatural149,3608
remNatural :: Natural -> Natural -> NaturalremNatural117,2782
quotRemNatural :: Natural -> Natural -> (Natural, Natural)quotRemNatural114,2688
quotNatural :: Natural -> Natural -> NaturalquotNatural120,2853
powModNatural :: Natural -> Natural -> Natural -> NaturalpowModNatural188,4680
popCountNatural :: Natural -> IntpopCountNatural146,3522
plusNatural :: Natural -> Natural -> NaturalplusNatural88,1938
orNatural :: Natural -> Natural -> NaturalorNatural134,3214
negateNatural :: Natural -> NaturalnegateNatural108,2550
naturalToWordMaybe :: Natural -> Maybe WordnaturalToWordMaybe176,4324
naturalToWord :: Natural -> WordnaturalToWord159,3900
naturalToInteger :: Natural -> IntegernaturalToInteger156,3820
naturalFromInteger :: Integer -> NaturalnaturalFromInteger163,3987
mkNatural :: [Word] -> NaturalmkNatural75,1572
minusNaturalMaybe :: Natural -> Natural -> Maybe NaturalminusNaturalMaybe99,2279
minusNatural :: Natural -> Natural -> NaturalminusNatural93,2105
lcmNatural :: Natural -> Natural -> NaturallcmNatural128,3072
isValidNatural :: Natural -> BoolisValidNatural84,1847
int2Word :: Int -> Wordint2Word68,1399
gcdNatural :: Natural -> Natural -> NaturalgcdNatural124,2965
bitNatural :: Int# -> NaturalbitNatural140,3353
andNatural :: Natural -> Natural -> NaturalandNatural131,3143

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Num.hs,548
module GHC.NumNum20,586
class  Num a  whereNum63,2057
    (+), (-), (*)       :: a -> a -> a+66,2149
    (+), (-), (*)       :: a -> a -> a-66,2149
    (+), (-), (*)       :: a -> a -> a*66,2149
    negate              :: a -> anegate68,2213
    abs                 :: a -> aabs70,2272
    signum              :: a -> asignum78,2544
    fromInteger         :: Integer -> afromInteger83,2803
subtract :: (Num a) => a -> a -> asubtract96,3233
quotRemInteger :: Integer -> Integer -> (# Integer, Integer #)quotRemInteger150,4788

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/OldList.hs,63
module GHC.OldList (module Data.OldList) whereOldList27,1052

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/OverloadedLabels.hs,140
module GHC.OverloadedLabelsOverloadedLabels47,1686
class IsLabel (x :: Symbol) a whereIsLabel53,1779
  fromLabel :: afromLabel54,1815

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Pack.hs,815
module GHC.PackPack24,810
data ByteArray ix              = ByteArray        ix ix ByteArray#ByteArray42,1141
data MutableByteArray s ix     = MutableByteArray ix ix (MutableByteArray# s)MutableByteArray43,1208
write_ps_array  :: MutableByteArray s Int -> Int# -> Char# -> ST s ()write_ps_array85,2491
unpackCString :: Ptr a -> [Char]unpackCString45,1287
packStringST :: [Char] -> ST s (ByteArray Int)packStringST56,1625
packString :: [Char] -> ByteArray IntpackString53,1544
packNBytesST :: Int -> [Char] -> ST s (ByteArray Int)packNBytesST61,1742
packCString#         :: [Char]          -> ByteArray#packCString#50,1412
new_ps_array    :: Int# -> ST s (MutableByteArray s Int)new_ps_array84,2434
freeze_ps_array :: MutableByteArray s Int -> Int# -> ST s (ByteArray Int)freeze_ps_array86,2561

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Profiling.hs,174
module GHC.Profiling whereProfiling5,85
foreign import ccall stopProfTimer :: IO ()stopProfTimer13,237
foreign import ccall startProfTimer :: IO ()startProfTimer19,390

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Ptr.hs,574
module GHC.Ptr (Ptr20,608
data Ptr a = Ptr Addr#Ptr47,1367
data FunPtr a = FunPtr Addr# deriving (Eq, Ord)FunPtr96,3227
plusPtr :: Ptr a -> Int -> Ptr bplusPtr71,2296
nullPtr :: Ptr anullPtr63,2080
nullFunPtr :: FunPtr anullFunPtr140,5092
minusPtr :: Ptr a -> Ptr b -> IntminusPtr88,2924
castPtrToFunPtr :: Ptr a -> FunPtr bcastPtrToFunPtr162,5883
castPtr :: Ptr a -> Ptr bcastPtr67,2191
castFunPtrToPtr :: FunPtr a -> Ptr bcastFunPtrToPtr153,5531
castFunPtr :: FunPtr a -> FunPtr bcastFunPtr144,5202
alignPtr :: Ptr a -> Int -> Ptr aalignPtr78,2638

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/RTS/Flags.hsc,9153
module GHC.RTS.FlagsFlags12,355
type RtsTime = Word64RtsTime60,1172
data GiveGCStatsGiveGCStats66,1318
    = NoGCStatsNoGCStats67,1335
    | CollectGCStatsCollectGCStats68,1351
    | OneLineGCStatsOneLineGCStats69,1372
    | SummaryGCStatsSummaryGCStats70,1393
    | VerboseGCStatsVerboseGCStats71,1414
data IoSubSystemIoSubSystem94,2279
  = IoPOSIX   -- ^ Use a POSIX I/O Sub-SystemIoPOSIX95,2296
  | IoNative  -- ^ Use platform native Sub-System. For unix OSes this is theIoNative96,2342
data GCFlags = GCFlagsGCFlags120,3189
    { statsFile             :: Maybe FilePathstatsFile121,3212
    , giveStats             :: GiveGCStatsgiveStats122,3258
    , maxStkSize            :: Word32maxStkSize123,3301
    , initialStkSize        :: Word32initialStkSize124,3339
    , stkChunkSize          :: Word32stkChunkSize125,3377
    , stkChunkBufferSize    :: Word32stkChunkBufferSize126,3415
    , maxHeapSize           :: Word32maxHeapSize127,3453
    , minAllocAreaSize      :: Word32minAllocAreaSize128,3491
    , largeAllocLim         :: Word32largeAllocLim129,3529
    , nurseryChunkSize      :: Word32nurseryChunkSize130,3567
    , minOldGenSize         :: Word32minOldGenSize131,3605
    , heapSizeSuggestion    :: Word32heapSizeSuggestion132,3643
    , heapSizeSuggestionAuto :: BoolheapSizeSuggestionAuto133,3681
    , oldGenFactor          :: DoubleoldGenFactor134,3718
    , pcFreeHeap            :: DoublepcFreeHeap135,3756
    , generations           :: Word32generations136,3794
    , squeezeUpdFrames      :: BoolsqueezeUpdFrames137,3832
    , compact               :: Bool -- ^ True <=> "compact all the time"compact138,3868
    , compactThreshold      :: DoublecompactThreshold139,3941
    , sweep                 :: Boolsweep140,3979
    , ringBell              :: BoolringBell142,4095
    , idleGCDelayTime       :: RtsTimeidleGCDelayTime143,4131
    , doIdleGC              :: BooldoIdleGC144,4170
    , heapBase              :: Word -- ^ address to ask the OS for memoryheapBase145,4206
    , allocLimitGrace       :: WordallocLimitGrace146,4280
    , numa                  :: Boolnuma147,4316
    , numaMask              :: WordnumaMask148,4352
data ConcFlags = ConcFlagsConcFlags156,4560
    { ctxtSwitchTime  :: RtsTimectxtSwitchTime157,4587
    , ctxtSwitchTicks :: IntctxtSwitchTicks158,4620
data MiscFlags = MiscFlagsMiscFlags166,4806
    { tickInterval          :: RtsTimetickInterval167,4833
    , installSignalHandlers :: BoolinstallSignalHandlers168,4872
    , installSEHHandlers    :: BoolinstallSEHHandlers169,4908
    , generateCrashDumpFile :: BoolgenerateCrashDumpFile170,4944
    , generateStackTrace    :: BoolgenerateStackTrace171,4980
    , machineReadable       :: BoolmachineReadable172,5016
    , disableDelayedOsMemoryReturn :: BooldisableDelayedOsMemoryReturn173,5052
    , internalCounters      :: BoolinternalCounters174,5095
    , linkerAlwaysPic       :: BoollinkerAlwaysPic175,5131
    , linkerMemBase         :: WordlinkerMemBase176,5167
    , ioManager             :: IoSubSystemioManager178,5273
    , numIoWorkerThreads    :: Word32numIoWorkerThreads179,5316
data DebugFlags = DebugFlagsDebugFlags188,5563
    { scheduler      :: Bool -- ^ @s@scheduler189,5592
    , interpreter    :: Bool -- ^ @i@interpreter190,5630
    , weak           :: Bool -- ^ @w@weak191,5668
    , gccafs         :: Bool -- ^ @G@gccafs192,5706
    , gc             :: Bool -- ^ @g@gc193,5744
    , nonmoving_gc   :: Bool -- ^ @n@nonmoving_gc194,5782
    , block_alloc    :: Bool -- ^ @b@block_alloc195,5820
    , sanity         :: Bool -- ^ @S@sanity196,5858
    , stable         :: Bool -- ^ @t@stable197,5896
    , prof           :: Bool -- ^ @p@prof198,5934
    , linker         :: Bool -- ^ @l@ the object linkerlinker199,5972
    , apply          :: Bool -- ^ @a@apply200,6028
    , stm            :: Bool -- ^ @m@stm201,6066
    , squeeze        :: Bool -- ^ @z@ stack squeezing & lazy blackholingsqueeze202,6104
    , hpc            :: Bool -- ^ @c@ coveragehpc203,6177
    , sparks         :: Bool -- ^ @r@sparks204,6224
data DoCostCentresDoCostCentres212,6440
    = CostCentresNoneCostCentresNone213,6459
    | CostCentresSummaryCostCentresSummary214,6481
    | CostCentresVerboseCostCentresVerbose215,6506
    | CostCentresAllCostCentresAll216,6531
    | CostCentresJSONCostCentresJSON217,6552
data CCFlags = CCFlagsCCFlags240,7502
    { doCostCentres :: DoCostCentresdoCostCentres241,7525
    , profilerTicks :: IntprofilerTicks242,7562
    , msecsPerTick  :: IntmsecsPerTick243,7589
data DoHeapProfileDoHeapProfile251,7793
    = NoHeapProfilingNoHeapProfiling252,7812
    | HeapByCCSHeapByCCS253,7834
    | HeapByModHeapByMod254,7850
    | HeapByDescrHeapByDescr255,7866
    | HeapByTypeHeapByType256,7884
    | HeapByRetainerHeapByRetainer257,7901
    | HeapByLDVHeapByLDV258,7922
    | HeapByClosureTypeHeapByClosureType259,7938
data ProfFlags = ProfFlagsProfFlags288,9169
    { doHeapProfile            :: DoHeapProfiledoHeapProfile289,9196
    , heapProfileInterval      :: RtsTime -- ^ time between samplesheapProfileInterval290,9244
    , heapProfileIntervalTicks :: Word    -- ^ ticks between samples (derived)heapProfileIntervalTicks291,9312
    , includeTSOs              :: BoolincludeTSOs292,9391
    , showCCSOnException       :: BoolshowCCSOnException293,9430
    , maxRetainerSetSize       :: WordmaxRetainerSetSize294,9469
    , ccsLength                :: WordccsLength295,9508
    , modSelector              :: Maybe StringmodSelector296,9547
    , descrSelector            :: Maybe StringdescrSelector297,9594
    , typeSelector             :: Maybe StringtypeSelector298,9641
    , ccSelector               :: Maybe StringccSelector299,9688
    , ccsSelector              :: Maybe StringccsSelector300,9735
    , retainerSelector         :: Maybe StringretainerSelector301,9782
    , bioSelector              :: Maybe StringbioSelector302,9829
data DoTraceDoTrace310,10034
    = TraceNone      -- ^ no tracingTraceNone311,10047
    | TraceEventLog  -- ^ send tracing events to the event logTraceEventLog312,10084
    | TraceStderr    -- ^ send tracing events to @stderr@TraceStderr313,10147
data TraceFlags = TraceFlagsTraceFlags332,10799
    { tracing        :: DoTracetracing333,10828
    , timestamp      :: Bool -- ^ show timestamp in stderr outputtimestamp334,10860
    , traceScheduler :: Bool -- ^ trace scheduler eventstraceScheduler335,10926
    , traceGc        :: Bool -- ^ trace GC eventstraceGc336,10983
    , traceNonmovingGctraceNonmovingGc337,11033
    , sparksSampled  :: Bool -- ^ trace spark events by a sampled methodsparksSampled339,11129
    , sparksFull     :: Bool -- ^ trace spark events 100% accuratelysparksFull340,11202
    , user           :: Bool -- ^ trace user events (emitted from Haskell code)user341,11271
data TickyFlags = TickyFlagsTickyFlags349,11529
    { showTickyStats :: BoolshowTickyStats350,11558
    , tickyFile      :: Maybe FilePathtickyFile351,11587
data ParFlags = ParFlagsParFlags359,11795
    { nCapabilities :: Word32nCapabilities360,11820
    , migrate :: Boolmigrate361,11850
    , maxLocalSparks :: Word32maxLocalSparks362,11872
    , parGcEnabled :: BoolparGcEnabled363,11903
    , parGcGen :: Word32parGcGen364,11930
    , parGcLoadBalancingEnabled :: BoolparGcLoadBalancingEnabled365,11955
    , parGcLoadBalancingGen :: Word32parGcLoadBalancingGen366,11995
    , parGcNoSyncWithIdle :: Word32parGcNoSyncWithIdle367,12033
    , parGcThreads :: Word32parGcThreads368,12069
    , setAffinity :: BoolsetAffinity369,12098
data RTSFlags = RTSFlagsRTSFlags378,12289
    { gcFlags         :: GCFlagsgcFlags379,12314
    , concurrentFlags :: ConcFlagsconcurrentFlags380,12347
    , miscFlags       :: MiscFlagsmiscFlags381,12382
    , debugFlags      :: DebugFlagsdebugFlags382,12417
    , costCentreFlags :: CCFlagscostCentreFlags383,12453
    , profilingFlags  :: ProfFlagsprofilingFlags384,12486
    , traceFlags      :: TraceFlagstraceFlags385,12521
    , tickyFlags      :: TickyFlagstickyFlags386,12557
    , parFlags        :: ParFlagsparFlags387,12593
foreign import ccall "&RtsFlags" rtsFlagsPtr :: Ptr RTSFlagsrtsFlagsPtr392,12733
peekFilePath :: Ptr () -> IO (Maybe FilePath)peekFilePath406,13090
peekCStringOpt :: Ptr CChar -> IO (Maybe String)peekCStringOpt412,13315
getTraceFlags :: IO TraceFlagsgetTraceFlags602,21811
getTickyFlags :: IO TickyFlagsgetTickyFlags622,22709
getRTSFlags :: IO RTSFlagsgetRTSFlags394,12795
getProfFlags :: IO ProfFlagsgetProfFlags582,20621
getParFlags :: IO ParFlagsgetParFlags456,15260
getMiscFlags :: IO MiscFlagsgetMiscFlags482,16232
getIoManagerFlag :: IO IoSubSystemgetIoManagerFlag532,18438
getGCFlags :: IO GCFlagsgetGCFlags417,13466
getDebugFlags :: IO DebugFlagsgetDebugFlags538,18665
getConcFlags :: IO ConcFlagsgetConcFlags475,15977
getCCFlags :: IO CCFlagsgetCCFlags574,20294

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Read.hs,2077
module GHC.ReadRead19,615
class Read a whereRead184,5861
  readsPrec    :: Int   -- ^ the operator precedence of the enclosingreadsPrec200,6455
  readList     :: ReadS [a]readList210,7009
  readPrec     :: ReadPrec areadPrec213,7118
  readListPrec :: ReadPrec [a]readListPrec218,7371
wrap_tup :: ReadPrec a -> ReadPrec awrap_tup680,21815
skipSpacesThenP :: ReadPrec a -> ReadPrec askipSpacesThenP306,10518
read_tup8 :: (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h)read_tup8700,22334
read_tup4 :: (Read a, Read b, Read c, Read d) => ReadPrec (a,b,c,d)read_tup4693,22134
read_tup2 :: (Read a, Read b) => ReadPrec (a,b)read_tup2686,21944
read_comma :: ReadPrec ()read_comma683,21883
readSymField :: String -> ReadPrec a -> ReadPrec areadSymField402,13826
readParen       :: Bool -> ReadS a -> ReadS areadParen84,1760
readNumber :: Num a => (L.Lexeme -> ReadPrec a) -> ReadPrec areadNumber557,18499
readLitChar :: ReadS Char       -- As defined by H2010readLitChar281,9922
readListPrecDefault :: Read a => ReadPrec [a]readListPrecDefault232,7911
readListDefault :: Read a => ReadS [a]readListDefault226,7607
readFieldHash :: String -> ReadPrec a -> ReadPrec areadFieldHash388,13278
readField :: String -> ReadPrec a -> ReadPrec areadField373,12725
parens :: ReadPrec a -> ReadPrec aparens323,10977
paren' :: ReadPrec a -> ReadPrec aparen'319,10837
paren :: ReadPrec a -> ReadPrec aparen314,10673
list :: ReadPrec a -> ReadPrec [a]list332,11304
lexP :: ReadPrec L.LexemelexP291,10224
lexLitChar :: ReadS String      -- As defined by H2010lexLitChar263,9163
lexDigits :: ReadS StringlexDigits285,10062
lex :: ReadS String             -- As defined by H2010lex255,8903
expectP :: L.Lexeme -> ReadPrec ()expectP295,10296
expectCharP :: Char -> ReadPrec a -> ReadPrec aexpectCharP298,10372
convertInt :: Num a => L.Lexeme -> ReadPrec aconvertInt571,18809
convertFrac :: forall a . RealFloat a => L.Lexeme -> ReadPrec aconvertFrac576,18959
choose :: [(String, ReadPrec a)] -> ReadPrec achoose353,11787

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Real.hs,3513
module GHC.Real whereReal21,697
data  Ratio a = !a :% !a  deriving Eq -- ^ @since 2.01Ratio76,2411
data  Ratio a = !a :% !a  deriving Eq -- ^ @since 2.01:%76,2411
type  Rational          =  Ratio IntegerRational81,2626
class  (Num a, Ord a) => Real a  whereReal127,4192
    toRational          ::  a -> RationaltoRational129,4305
class  (Real a, Enum a) => Integral a  whereIntegral145,4965
    quot                :: a -> a -> aquot147,5058
    rem                 :: a -> a -> arem151,5186
    div                 :: a -> a -> adiv153,5286
    mod                 :: a -> a -> amod157,5411
    quotRem             :: a -> a -> (a,a)quotRem159,5489
    divMod              :: a -> a -> (a,a)divMod161,5570
    toInteger           :: a -> IntegertoInteger163,5646
class  (Num a) => Fractional a  whereFractional188,6624
    (/)                 :: a -> a -> a/192,6741
    recip               :: a -> arecip194,6810
    fromRational        :: Rational -> afromRational199,7080
class  (Real a, Fractional a) => RealFrac a  whereRealFrac207,7283
    properFraction      :: (Integral b) => a -> (b,a)properFraction218,7798
    truncate            :: (Integral b) => a -> btruncate220,7929
    round               :: (Integral b) => a -> bround223,8105
    ceiling             :: (Integral b) => a -> bceiling225,8222
    floor               :: (Integral b) => a -> bfloor227,8343
underflowError :: aunderflowError63,1915
showSigned :: (Real a)showSigned626,22866
reduce ::  (Integral a) => a -> a -> Ratio areduce112,3660
realToFrac :: (Real a, Fractional b) => a -> brealToFrac617,22528
ratioZeroDenominatorError :: aratioZeroDenominatorError55,1700
ratioPrec, ratioPrec1 :: IntratioPrec183,2668
ratioPrec, ratioPrec1 :: IntratioPrec83,2668
overflowError :: aoverflowError59,1822
even, odd       :: (Integral a) => a -> Boolodd635,23202
numericEnumFromTo       :: (Ord a, Fractional a) => a -> a -> [a]numericEnumFromTo263,9667
numericEnumFromThenTo   :: (Ord a, Fractional a) => a -> a -> a -> [a]numericEnumFromThenTo266,9803
numericEnumFromThen     :: (Fractional a) => a -> a -> [a]numericEnumFromThen255,9416
numericEnumFrom         :: (Fractional a) => a -> [a]numericEnumFrom248,9194
numerator       :: Ratio a -> anumerator101,3273
infinity, notANumber :: RationalnotANumber87,2775
naturalFromInt :: Int -> NaturalnaturalFromInt610,22325
lcm             :: (Integral a) => a -> a -> alcm795,29879
integralEnumFromTo :: Integral a => a -> a -> [a]integralEnumFromTo832,31219
integralEnumFromThenTo :: Integral a => a -> a -> a -> [a]integralEnumFromThenTo837,31443
integralEnumFromThen :: (Integral a, Bounded a) => a -> a -> [a]integralEnumFromThen822,30797
integralEnumFrom :: (Integral a, Bounded a) => a -> [a]integralEnumFrom817,30551
infinity, notANumber :: Rationalinfinity87,2775
gcd             :: (Integral a) => a -> a -> agcd788,29589
fromIntegral :: (Integral a, Num b) => a -> bfromIntegral569,20735
even, odd       :: (Integral a) => a -> Booleven635,23202
divZeroError :: adivZeroError51,1599
denominator     :: Ratio a -> adenominator106,3456
(^^%^^)         :: Integral a => Rational -> a -> Rational^^%^^768,28597
(^^)            :: (Fractional a, Integral b) => a -> b -> a^^662,24284
(^%^)           :: Integral a => Rational -> a -> Rational^%^760,28307
(^) :: (Num a, Integral b) => a -> b -> a^648,23653
(%)                     :: (Integral a) => a -> a -> Ratio a%96,3063

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Records.hs,127
module GHC.RecordsRecords25,779
class HasField x r a | x r -> a whereHasField39,1357
  getField :: r -> agetField41,1458

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/ResponseFile.hs,643
module GHC.ResponseFile (ResponseFile19,463
data Quoting = NoneQ | SngQ | DblQQuoting122,4049
data Quoting = NoneQ | SngQ | DblQNoneQ122,4049
data Quoting = NoneQ | SngQ | DblQSngQ122,4049
data Quoting = NoneQ | SngQ | DblQDblQ122,4049
unescapeArgs :: String -> [String]unescapeArgs81,2229
unescape :: String -> [String]unescape124,4085
getArgsWithResponseFiles :: IO [String]getArgsWithResponseFiles61,1171
expandResponse :: [String] -> IO [String]expandResponse110,3663
escapeArgs :: [String] -> StringescapeArgs100,3181
escapeArg :: String -> StringescapeArg150,5360
escape :: String -> Char -> Stringescape153,5430

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/ST.hs,480
module GHC.ST (ST19,563
newtype ST s a = ST (STRep s a)ST53,1638
type STRep s a = State# s -> (# State# s, a #)STRep54,1670
data STret s a = STret (State# s) aSTret93,2565
unsafeInterleaveST :: ST s a -> ST s aunsafeInterleaveST106,3092
unsafeDupableInterleaveST :: ST s a -> ST s aunsafeDupableInterleaveST120,3711
runST :: (forall s. ST s a) -> arunST137,4221
noDuplicateST :: ST s ()noDuplicateST99,2778
liftST :: ST s a -> State# s -> STret s aliftST96,2675

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/STRef.hs,243
module GHC.STRef (STRef19,568
data STRef s a = STRef (MutVar# s a)STRef30,719
writeSTRef :: STRef s a -> a -> ST s ()writeSTRef54,1404
readSTRef :: STRef s a -> ST s areadSTRef50,1273
newSTRef :: a -> ST s (STRef s a)newSTRef44,1084

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Show.hs,1474
module GHC.ShowShow34,1035
type ShowS = String -> StringShowS62,1791
class  Show a  whereShow113,3858
    showsPrec :: Int    -- ^ the operator precedence of the enclosingshowsPrec130,4421
    show      :: a   -> Stringshow138,4838
    showList  :: [a] -> ShowSshowList145,5200
shows           :: (Show a) => a -> ShowSshows340,12443
show_tuple :: [ShowS] -> ShowSshow_tuple330,12089
showWord :: Word# -> ShowSshowWord202,6765
showString      :: String -> ShowSshowString350,12793
showSpace :: ShowSshowSpace358,13082
showSignedInt :: Int -> Int -> ShowSshowSignedInt445,16985
showParen       :: Bool -> ShowS -> ShowSshowParen355,12971
showMultiLineString :: String -> [String]showMultiLineString402,15185
showLitString :: String -> ShowSshowLitString387,14346
showLitChar                :: Char -> ShowSshowLitChar370,13420
showList__ :: (a -> ShowS) ->  [a] -> ShowSshowList__151,5343
showCommaSpace :: ShowSshowCommaSpace361,13148
showChar        :: Char -> ShowSshowChar345,12627
protectEsc :: (Char -> Bool) -> ShowS -> ShowSprotectEsc420,15881
itos :: Int# -> String -> Stringitos450,17179
isDec :: Char -> BoolisDec417,15827
integerToString :: Integer -> String -> StringintegerToString492,18762
intToDigit :: Int -> CharintToDigit439,16688
asciiTab :: [String]asciiTab426,16093
appPrec, appPrec1 :: IntappPrec1158,5558
appPrec, appPrec1 :: IntappPrec158,5558
DIGITS       9DIGITS8,229
  1000000000BASE9,263

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Stable.hs,476
module GHC.Stable (Stable22,578
lePtr" #-} StablePtr a = StablePtr (StablePtr# a)StablePtr50,1476
foreign import ccall unsafe "hs_free_stable_ptr" freeStablePtr :: StablePtr a -> IO ()freeStablePtr79,2655
newStablePtr   :: a -> IO (StablePtr a)newStablePtr55,1600
deRefStablePtr :: StablePtr a -> IO adeRefStablePtr66,2033
castStablePtrToPtr :: StablePtr a -> Ptr ()castStablePtrToPtr89,3137
castPtrToStablePtr :: Ptr () -> StablePtr acastPtrToStablePtr103,3583

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/StableName.hs,309
module GHC.StableName (StableName30,1177
data StableName a = StableName (StableName# a)StableName73,2641
makeStableName  :: a -> IO (StableName a)makeStableName77,2822
hashStableName :: StableName a -> InthashStableName85,3224
eqStableName :: StableName a -> StableName b -> BooleqStableName99,3608

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Stack.hs,276
module GHC.Stack (Stack19,573
withFrozenCallStack :: HasCallStackwithFrozenCallStack97,2556
popCallStack :: CallStack -> CallStackpopCallStack75,1921
errorWithStackTrace :: String -> aerrorWithStackTrace62,1513
callStack :: HasCallStack => CallStackcallStack87,2277

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Stack/CCS.hsc,880
module GHC.Stack.CCS (CCS19,564
data CostCentreStackCostCentreStack52,1110
data CostCentreCostCentre55,1184
whoCreated :: a -> IO [String]whoCreated130,3980
renderStack :: [String] -> StringrenderStack135,4073
getCurrentCCS :: dummy -> IO (Ptr CostCentreStack)getCurrentCCS61,1507
getCCSOf :: a -> IO (Ptr CostCentreStack)getCCSOf67,1737
currentCallStack :: IO [String]currentCallStack108,3253
clearCCS :: IO a -> IO aclearCCS75,2082
ccsToStrings :: Ptr CostCentreStack -> IO [String]ccsToStrings112,3391
ccsParent :: Ptr CostCentreStack -> IO (Ptr CostCentreStack)ccsParent83,2350
ccsCC :: Ptr CostCentreStack -> IO (Ptr CostCentre)ccsCC79,2214
ccSrcSpan :: Ptr CostCentre -> IO CStringccSrcSpan95,2752
ccModule :: Ptr CostCentre -> IO CStringccModule91,2623
ccLabel :: Ptr CostCentre -> IO CStringccLabel87,2502
#define PROFILINGPROFILING48,1016

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Stack/Types.hs,1046
module GHC.Stack.Types (Types29,919
type HasCallStack = (?callStack :: CallStack)HasCallStack69,2237
data CallStackCallStack134,4814
  = EmptyCallStackEmptyCallStack135,4829
  | PushCallStack [Char] SrcLoc CallStackPushCallStack136,4848
  | FreezeCallStack CallStackFreezeCallStack137,4890
data SrcLoc = SrcLocSrcLoc210,7279
  { srcLocPackage   :: [Char]srcLocPackage211,7300
  , srcLocModule    :: [Char]srcLocModule212,7330
  , srcLocFile      :: [Char]srcLocFile213,7360
  , srcLocStartLine :: IntsrcLocStartLine214,7390
  , srcLocStartCol  :: IntsrcLocStartCol215,7417
  , srcLocEndLine   :: IntsrcLocEndLine216,7444
  , srcLocEndCol    :: IntsrcLocEndCol217,7471
pushCallStack :: ([Char], SrcLoc) -> CallStack -> CallStackpushCallStack182,6556
getCallStack :: CallStack -> [([Char], SrcLoc)]getCallStack148,5214
fromCallSiteList :: [([Char], SrcLoc)] -> CallStackfromCallSiteList157,5510
freezeCallStack :: CallStack -> CallStackfreezeCallStack202,7098
emptyCallStack :: CallStackemptyCallStack192,6813

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/StaticPtr.hs,1166
module GHC.StaticPtrStaticPtr39,1652
data StaticPtr a = StaticPtr Word64# Word64# -- The flattened Fingerprint isStaticPtr63,2187
data StaticPtr a = StaticPtr Word# Word#StaticPtr67,2391
type StaticKey = FingerprintStaticKey76,2688
foreign import ccall unsafe hs_spt_lookup :: Ptr Word64 -> IO (Ptr a)hs_spt_lookup97,3440
class IsStatic p whereIsStatic100,3567
    fromStaticPtr :: StaticPtr a -> p afromStaticPtr101,3590
data StaticPtrInfo = StaticPtrInfoStaticPtrInfo108,3774
      spInfoUnitId  :: StringspInfoUnitId110,3883
    , spInfoModuleName :: StringspInfoModuleName112,3979
    , spInfoSrcLoc     :: (Int, Int)spInfoSrcLoc115,4116
foreign import ccall unsafe hs_spt_key_count :: IO CInths_spt_key_count133,4688
foreign import ccall unsafe hs_spt_keys :: Ptr a -> CInt -> IO CInths_spt_keys135,4745
unsafeLookupStaticPtr :: StaticKey -> IO (Maybe (StaticPtr a))unsafeLookupStaticPtr89,3151
staticPtrKeys :: IO [StaticKey]staticPtrKeys124,4359
staticPtrInfo :: StaticPtr a -> StaticPtrInfostaticPtrInfo120,4243
staticKey :: StaticPtr a -> StaticKeystaticKey79,2790
deRefStaticPtr :: StaticPtr a -> adeRefStaticPtr71,2520

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/StaticPtr/Internal.hs,128
module GHC.StaticPtr.Internal (makeStatic) whereInternal17,512
makeStatic :: (Int, Int) -> a -> StaticPtr amakeStatic24,709

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Stats.hsc,3250
module GHC.StatsStats16,600
foreign import ccall "getRTSStats" getRTSStats_ :: Ptr () -> IO ()getRTSStats_38,1011
foreign import ccall "getRTSStatsEnabled" getRTSStatsEnabled :: IO BoolgetRTSStatsEnabled43,1180
data RTSStats = RTSStats {RTSStats51,1414
    gcs :: Word32gcs56,1551
  , major_gcs :: Word32major_gcs58,1624
  , allocated_bytes :: Word64allocated_bytes60,1679
  , max_live_bytes :: Word64max_live_bytes63,1826
  , max_large_objects_bytes :: Word64max_large_objects_bytes65,1899
  , max_compact_bytes :: Word64max_compact_bytes67,1983
  , max_slop_bytes :: Word64max_slop_bytes69,2037
  , max_mem_in_use_bytes :: Word64max_mem_in_use_bytes71,2108
  , cumulative_live_bytes :: Word64cumulative_live_bytes74,2283
  , copied_bytes :: Word64copied_bytes76,2363
  , par_copied_bytes :: Word64par_copied_bytes78,2443
  , cumulative_par_max_copied_bytes :: Word64cumulative_par_max_copied_bytes80,2548
  , cumulative_par_balanced_copied_bytes :: Word64cumulative_par_balanced_copied_bytes82,2660
  , init_cpu_ns :: RtsTimeinit_cpu_ns91,2986
  , init_elapsed_ns :: RtsTimeinit_elapsed_ns94,3087
  , mutator_cpu_ns :: RtsTimemutator_cpu_ns96,3162
  , mutator_elapsed_ns :: RtsTimemutator_elapsed_ns98,3240
  , gc_cpu_ns :: RtsTimegc_cpu_ns100,3313
  , gc_elapsed_ns :: RtsTimegc_elapsed_ns102,3381
  , cpu_ns :: RtsTimecpu_ns104,3455
  , elapsed_ns :: RtsTimeelapsed_ns106,3526
  , nonmoving_gc_sync_cpu_ns :: RtsTimenonmoving_gc_sync_cpu_ns110,3652
  , nonmoving_gc_sync_elapsed_ns :: RtsTimenonmoving_gc_sync_elapsed_ns113,3790
  , nonmoving_gc_sync_max_elapsed_ns :: RtsTimenonmoving_gc_sync_max_elapsed_ns116,3940
  , nonmoving_gc_cpu_ns :: RtsTimenonmoving_gc_cpu_ns119,4087
  , nonmoving_gc_elapsed_ns :: RtsTimenonmoving_gc_elapsed_ns122,4220
  , nonmoving_gc_max_elapsed_ns :: RtsTimenonmoving_gc_max_elapsed_ns125,4365
  , gc :: GCDetailsgc128,4451
data GCDetails = GCDetails {GCDetails139,4797
    gcdetails_gen :: Word32gcdetails_gen141,4868
  , gcdetails_threads :: Word32gcdetails_threads143,4939
  , gcdetails_allocated_bytes :: Word64gcdetails_allocated_bytes145,5028
  , gcdetails_live_bytes :: Word64gcdetails_live_bytes149,5255
  , gcdetails_large_objects_bytes :: Word64gcdetails_large_objects_bytes151,5342
  , gcdetails_compact_bytes :: Word64gcdetails_compact_bytes153,5440
  , gcdetails_slop_bytes :: Word64gcdetails_slop_bytes155,5524
  , gcdetails_mem_in_use_bytes :: Word64gcdetails_mem_in_use_bytes157,5609
  , gcdetails_copied_bytes :: Word64gcdetails_copied_bytes159,5702
  , gcdetails_par_max_copied_bytes :: Word64gcdetails_par_max_copied_bytes162,5832
  , gcdetails_par_balanced_copied_bytes :: Word64gcdetails_par_balanced_copied_bytes164,5952
  , gcdetails_sync_elapsed_ns :: RtsTimegcdetails_sync_elapsed_ns166,6061
  , gcdetails_cpu_ns :: RtsTimegcdetails_cpu_ns168,6146
  , gcdetails_elapsed_ns :: RtsTimegcdetails_elapsed_ns170,6221
  , gcdetails_nonmoving_gc_sync_cpu_ns :: RtsTimegcdetails_nonmoving_gc_sync_cpu_ns174,6357
  , gcdetails_nonmoving_gc_sync_elapsed_ns :: RtsTimegcdetails_nonmoving_gc_sync_elapsed_ns177,6505
type RtsTime = Int64RtsTime184,6773
getRTSStats :: IO RTSStatsgetRTSStats190,6864

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Storable.hs,2990
module GHC.StorableStorable19,575
writeWordOffPtr      :: Ptr Word          -> Int -> Word        -> IO ()writeWordOffPtr112,4517
writeWord8OffPtr     :: Ptr Word8         -> Int -> Word8       -> IO ()writeWord8OffPtr122,5247
writeWord64OffPtr    :: Ptr Word64        -> Int -> Word64      -> IO ()writeWord64OffPtr125,5466
writeWord32OffPtr    :: Ptr Word32        -> Int -> Word32      -> IO ()writeWord32OffPtr124,5393
writeWord16OffPtr    :: Ptr Word16        -> Int -> Word16      -> IO ()writeWord16OffPtr123,5320
writeWideCharOffPtr  :: Ptr Char          -> Int -> Char        -> IO ()writeWideCharOffPtr110,4371
writeStablePtrOffPtr :: Ptr (StablePtr a) -> Int -> StablePtr a -> IO ()writeStablePtrOffPtr117,4882
writePtrOffPtr       :: Ptr (Ptr a)       -> Int -> Ptr a       -> IO ()writePtrOffPtr113,4590
writeIntOffPtr       :: Ptr Int           -> Int -> Int         -> IO ()writeIntOffPtr111,4444
writeInt8OffPtr      :: Ptr Int8          -> Int -> Int8        -> IO ()writeInt8OffPtr118,4955
writeInt64OffPtr     :: Ptr Int64         -> Int -> Int64       -> IO ()writeInt64OffPtr121,5174
writeInt32OffPtr     :: Ptr Int32         -> Int -> Int32       -> IO ()writeInt32OffPtr120,5101
writeInt16OffPtr     :: Ptr Int16         -> Int -> Int16       -> IO ()writeInt16OffPtr119,5028
writeFunPtrOffPtr    :: Ptr (FunPtr a)    -> Int -> FunPtr a    -> IO ()writeFunPtrOffPtr114,4663
writeFloatOffPtr     :: Ptr Float         -> Int -> Float       -> IO ()writeFloatOffPtr115,4736
writeDoubleOffPtr    :: Ptr Double        -> Int -> Double      -> IO ()writeDoubleOffPtr116,4809
readWordOffPtr      :: Ptr Word          -> Int -> IO WordreadWordOffPtr62,1688
readWord8OffPtr     :: Ptr Word8         -> Int -> IO Word8readWord8OffPtr72,2302
readWord64OffPtr    :: Ptr Word64        -> Int -> IO Word64readWord64OffPtr75,2484
readWord32OffPtr    :: Ptr Word32        -> Int -> IO Word32readWord32OffPtr74,2423
readWord16OffPtr    :: Ptr Word16        -> Int -> IO Word16readWord16OffPtr73,2362
readWideCharOffPtr  :: Ptr Char          -> Int -> IO CharreadWideCharOffPtr60,1571
readStablePtrOffPtr :: Ptr (StablePtr a) -> Int -> IO (StablePtr a)readStablePtrOffPtr67,1995
readPtrOffPtr       :: Ptr (Ptr a)       -> Int -> IO (Ptr a)readPtrOffPtr63,1747
readIntOffPtr       :: Ptr Int           -> Int -> IO IntreadIntOffPtr61,1630
readInt8OffPtr      :: Ptr Int8          -> Int -> IO Int8readInt8OffPtr68,2063
readInt64OffPtr     :: Ptr Int64         -> Int -> IO Int64readInt64OffPtr71,2242
readInt32OffPtr     :: Ptr Int32         -> Int -> IO Int32readInt32OffPtr70,2182
readInt16OffPtr     :: Ptr Int16         -> Int -> IO Int16readInt16OffPtr69,2122
readFunPtrOffPtr    :: Ptr (FunPtr a)    -> Int -> IO (FunPtr a)readFunPtrOffPtr64,1809
readFloatOffPtr     :: Ptr Float         -> Int -> IO FloatreadFloatOffPtr65,1874
readDoubleOffPtr    :: Ptr Double        -> Int -> IO DoublereadDoubleOffPtr66,1934

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/TopHandler.hs,1323
module GHC.TopHandler (TopHandler25,762
  setMainThread :: Weak# ThreadId -> IO ()setMainThread76,2366
  stg_sig_installstg_sig_install120,3836
   errorBelch :: CString -> CString -> IO ()errorBelch202,7054
  shutdownHaskellAndSignal :: CInt -> CInt -> IO ()shutdownHaskellAndSignal264,9278
  shutdownHaskellAndExit :: CInt -> CInt -> IO ()shutdownHaskellAndExit280,9767
useFastExit, useSafeExit :: CIntuseSafeExit282,9818
useFastExit, useSafeExit :: CIntuseFastExit282,9818
unreachable :: IO aunreachable243,8486
topHandlerFastExit :: SomeException -> IO atopHandlerFastExit162,5588
topHandler :: SomeException -> IO atopHandler159,5489
safeExit, fastExit :: Int -> IO asafeExit239,8383
runNonIO :: a -> IO arunNonIO156,5417
runMainIO :: IO a -> IO arunMainIO81,2599
runIOFastExit :: IO a -> IO arunIOFastExit148,5083
runIO :: IO a -> IO arunIO133,4395
real_handler :: (Int -> IO a) -> SomeException -> IO areal_handler170,5871
install_interrupt_handler :: IO () -> IO ()install_interrupt_handler96,3045
flushStdHandles :: IO ()flushStdHandles234,8250
safeExit, fastExit :: Int -> IO afastExit239,8383
exitInterrupted :: IO aexitInterrupted267,9338
exitHelper :: CInt -> Int -> IO aexitHelper246,8589
disasterHandler :: (Int -> IO a) -> IOError -> IO adisasterHandler204,7100

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/TypeLits.hs,1489
module GHC.TypeLitsTypeLits34,1203
class KnownSymbol (n :: Symbol) whereKnownSymbol80,2499
  symbolSing :: SSymbol nsymbolSing81,2537
data SomeSymbol = forall n. KnownSymbol n => SomeSymbol (Proxy n)SomeSymbol103,3166
type family CmpSymbol (m :: Symbol) (n :: Symbol) :: OrderingCmpSymbol144,4458
type family AppendSymbol (m ::Symbol) (n :: Symbol) :: SymbolAppendSymbol149,4585
a {-kind-} ErrorMessage = Text SymbolErrorMessage152,4694
a {-kind-} ErrorMessage = Text SymbolText152,4694
                           | forall t. ShowType tShowType155,4788
                           | ErrorMessage :<>: ErrorMessage:<>:159,4960
                           | ErrorMessage :$$: ErrorMessage:$$:163,5139
type family TypeError (a :: ErrorMessage) :: b whereTypeError196,6217
newtype SSymbol (s :: Symbol) = SSymbol StringSSymbol214,6803
data WrapS a b = WrapS (KnownSymbol a => Proxy a -> b)WrapS216,6851
withSSymbol :: (KnownSymbol a => Proxy a -> b)withSSymbol219,6962
symbolVal' :: forall n. KnownSymbol n => Proxy# n -> StringsymbolVal'97,2972
symbolVal :: forall n proxy. KnownSymbol n => proxy n -> StringsymbolVal88,2698
someSymbolVal :: String -> SomeSymbolsomeSymbolVal117,3569
someNatVal :: Integer -> Maybe N.SomeNatsomeNatVal109,3352
sameSymbol :: (KnownSymbol a, KnownSymbol b) =>sameSymbol205,6490
natVal' :: forall n. KnownNat n => Proxy# n -> IntegernatVal'93,2860
natVal :: forall n proxy. KnownNat n => proxy n -> IntegernatVal84,2584

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/TypeNats.hs,1209
module GHC.TypeNatsTypeNats24,732
class KnownNat (n :: Nat) whereKnownNat58,1680
  natSing :: SNat nnatSing59,1712
data SomeNat    = forall n. KnownNat n    => SomeNat    (Proxy n)SomeNat74,2100
type x <= y = (x <=? y) ~ 'True<=168,5739
type family CmpNat    (m :: Nat)    (n :: Nat)    :: OrderingCmpNat173,5848
type family (m :: Nat) <=? (n :: Nat) :: Bool<=?179,6148
type family (m :: Nat) + (n :: Nat) :: Nat+184,6254
type family (m :: Nat) * (n :: Nat) :: Nat*189,6363
type family (m :: Nat) ^ (n :: Nat) :: Nat^194,6472
type family (m :: Nat) - (n :: Nat) :: Nat-199,6578
type family Div (m :: Nat) (n :: Nat) :: NatDiv205,6747
type family Mod (m :: Nat) (n :: Nat) :: NatMod211,6904
type family Log2 (m :: Nat) :: NatLog2217,7075
newtype SNat    (n :: Nat)    = SNat    NaturalSNat234,7613
data WrapN a b = WrapN (KnownNat    a => Proxy a -> b)WrapN236,7662
withSNat :: (KnownNat a => Proxy a -> b)withSNat239,7773
someNatVal :: Natural -> SomeNatsomeNatVal79,2249
sameNat :: (KnownNat a, KnownNat b) =>sameNat225,7329
natVal' :: forall n. KnownNat n => Proxy# n -> NaturalnatVal'67,1897
natVal :: forall n proxy. KnownNat n => proxy n -> NaturalnatVal62,1754

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Unicode.hs,4203
module GHC.Unicode (Unicode21,729
data GeneralCategoryGeneralCategory108,2798
        = UppercaseLetter       -- ^ Lu: Letter, UppercaseUppercaseLetter109,2819
        | LowercaseLetter       -- ^ Ll: Letter, LowercaseLowercaseLetter110,2878
        | TitlecaseLetter       -- ^ Lt: Letter, TitlecaseTitlecaseLetter111,2937
        | ModifierLetter        -- ^ Lm: Letter, ModifierModifierLetter112,2996
        | OtherLetter           -- ^ Lo: Letter, OtherOtherLetter113,3054
        | NonSpacingMark        -- ^ Mn: Mark, Non-SpacingNonSpacingMark114,3109
        | SpacingCombiningMark  -- ^ Mc: Mark, Spacing CombiningSpacingCombiningMark115,3168
        | EnclosingMark         -- ^ Me: Mark, EnclosingEnclosingMark116,3233
        | DecimalNumber         -- ^ Nd: Number, DecimalDecimalNumber117,3290
        | LetterNumber          -- ^ Nl: Number, LetterLetterNumber118,3347
        | OtherNumber           -- ^ No: Number, OtherOtherNumber119,3403
        | ConnectorPunctuation  -- ^ Pc: Punctuation, ConnectorConnectorPunctuation120,3458
        | DashPunctuation       -- ^ Pd: Punctuation, DashDashPunctuation121,3522
        | OpenPunctuation       -- ^ Ps: Punctuation, OpenOpenPunctuation122,3581
        | ClosePunctuation      -- ^ Pe: Punctuation, CloseClosePunctuation123,3640
        | InitialQuote          -- ^ Pi: Punctuation, Initial quoteInitialQuote124,3700
        | FinalQuote            -- ^ Pf: Punctuation, Final quoteFinalQuote125,3768
        | OtherPunctuation      -- ^ Po: Punctuation, OtherOtherPunctuation126,3834
        | MathSymbol            -- ^ Sm: Symbol, MathMathSymbol127,3894
        | CurrencySymbol        -- ^ Sc: Symbol, CurrencyCurrencySymbol128,3948
        | ModifierSymbol        -- ^ Sk: Symbol, ModifierModifierSymbol129,4006
        | OtherSymbol           -- ^ So: Symbol, OtherOtherSymbol130,4064
        | Space                 -- ^ Zs: Separator, SpaceSpace131,4119
        | LineSeparator         -- ^ Zl: Separator, LineLineSeparator132,4177
        | ParagraphSeparator    -- ^ Zp: Separator, ParagraphParagraphSeparator133,4234
        | Control               -- ^ Cc: Other, ControlControl134,4296
        | Format                -- ^ Cf: Other, FormatFormat135,4352
        | Surrogate             -- ^ Cs: Other, SurrogateSurrogate136,4407
        | PrivateUse            -- ^ Co: Other, Private UsePrivateUse137,4465
        | NotAssigned           -- ^ Cn: Other, Not AssignedNotAssigned138,4525
  iswalpha :: Int -> Intiswalpha380,12759
  iswalnum :: Int -> Intiswalnum383,12826
  iswcntrl :: Int -> Intiswcntrl386,12893
  iswspace :: Int -> Intiswspace389,12960
  iswprint :: Int -> Intiswprint392,13027
  iswlower :: Int -> Intiswlower395,13094
  iswupper :: Int -> Intiswupper398,13161
  towlower :: Int -> Inttowlower401,13228
  towupper :: Int -> Inttowupper404,13295
  towtitle :: Int -> Inttowtitle407,13362
  wgencat :: Int -> Intwgencat410,13427
unicodeVersion :: VersionunicodeVersion50,1519
toUpper                 :: Char -> ChartoUpper350,11680
toTitle                 :: Char -> ChartoTitle360,12097
toLower                 :: Char -> ChartoLower354,11837
isUpper                 :: Char -> BoolisUpper220,7500
isSymbol :: Char -> BoolisSymbol340,11298
isSpace                 :: Char -> BoolisSpace204,6724
isPunctuation :: Char -> BoolisPunctuation294,10074
isPrint                 :: Char -> BoolisPrint200,6565
isOctDigit              :: Char -> BoolisOctDigit248,8754
isLower                 :: Char -> BoolisLower223,7606
isLatin1                :: Char -> BoolisLatin1181,5877
isHexDigit              :: Char -> BoolisHexDigit253,8969
isDigit                 :: Char -> BoolisDigit239,8317
isControl               :: Char -> BoolisControl196,6419
isAsciiUpper :: Char -> BoolisAsciiUpper191,6233
isAsciiLower :: Char -> BoolisAsciiLower186,6056
isAscii                 :: Char -> BoolisAscii176,5669
isAlphaNum              :: Char -> BoolisAlphaNum236,8226
isAlpha                 :: Char -> BoolisAlpha228,7854
generalCategory :: Char -> GeneralCategorygeneralCategory171,5437

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Weak.hs,338
module GHC.Weak (Weak24,636
data Weak v = Weak (Weak# v)Weak92,3643
runFinalizerBatch :: Int -> Array# (State# RealWorld -> State# RealWorld)runFinalizerBatch144,5430
mkWeak  :: k                            -- ^ keymkWeak98,3818
finalize :: Weak v -> IO ()finalize125,4902
deRefWeak :: Weak v -> IO (Maybe v)deRefWeak116,4569

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Windows.hs,2209
module GHC.Windows (Windows23,745
type BOOL     = BoolBOOL107,2309
type LPBOOL   = Ptr BOOLLPBOOL108,2330
type BYTE     = Word8BYTE109,2355
type DWORD    = Word32DWORD110,2377
type UINT     = Word32UINT111,2400
type ULONG    = Word32ULONG112,2423
type ErrCode  = DWORDErrCode113,2446
type HANDLE   = Ptr ()HANDLE114,2468
type LPWSTR   = Ptr CWcharLPWSTR115,2491
type LPCTSTR  = LPTSTRLPCTSTR116,2518
type LPVOID   = Ptr ()LPVOID117,2541
type LPDWORD  = Ptr DWORDLPDWORD118,2564
type LPSTR    = Ptr CCharLPSTR119,2590
type LPCSTR   = LPSTRLPCSTR120,2616
type LPCWSTR  = LPWSTRLPCWSTR121,2638
type WORD     = Word16WORD122,2661
type UCHAR    = Word8UCHAR123,2684
type NTSTATUS = Int32NTSTATUS124,2706
type DDWORD        = Word64DDWORD130,2824
type LPTSTR = LPWSTRLPTSTR135,3037
   c_maperrno :: IO ()c_maperrno220,5845
   c_maperrno_func :: ErrCode -> Errnoc_maperrno_func225,6038
    c_getErrorMessage :: DWORD -> IO LPWSTRc_getErrorMessage228,6148
    localFree :: Ptr a -> IO (Ptr a)localFree231,6251
    getLastError :: IO ErrCodegetLastError235,6413
throwGetLastError :: String -> IO athrowGetLastError144,3253
nullHANDLE :: HANDLEnullHANDLE126,2729
iNVALID_HANDLE_VALUE :: HANDLEiNVALID_HANDLE_VALUE140,3108
iNFINITE :: DWORDiNFINITE137,3059
getErrorMessage :: ErrCode -> IO StringgetErrorMessage170,4218
finiteBitSize :: (Bits a) => a -> IntfiniteBitSize101,2211
failWith :: String -> ErrCode -> IO afailWith149,3428
failUnlessSuccessOr :: ErrCode -> String -> IO ErrCode -> IO BoolfailUnlessSuccessOr205,5297
failUnlessSuccess :: String -> IO ErrCode -> IO ()failUnlessSuccess200,5144
failIf_ :: (a -> Bool) -> String -> IO a -> IO ()failIf_186,4770
failIfZero :: (Eq a, Num a) => String -> IO a -> IO afailIfZero194,4991
failIfNull :: String -> IO (Ptr a) -> IO (Ptr a)failIfNull191,4908
failIfFalse_ :: String -> IO Bool -> IO ()failIfFalse_197,5073
failIf :: (a -> Bool) -> String -> IO a -> IO afailIf181,4636
errCodeToIOError :: String -> ErrCode -> IO IOErrorerrCodeToIOError154,3596
dwordsToDdword:: (DWORD,DWORD) -> DDWORDdwordsToDdword246,6788
ddwordToDwords :: DDWORD -> (DWORD,DWORD)ddwordToDwords241,6592

/home/effectfully/.fastdogs/base-4.15.1.0/GHC/Word.hs,3126
module GHC.Word (Word22,669
Word8" #-} Word8 = W8# Word#Word870,1891
Word8" #-} Word8 = W8# Word#W8#70,1891
ord16" #-} Word16 = W16# Word#Word16265,9274
ord16" #-} Word16 = W16# Word#W16#265,9274
ord32" #-} Word32 = W32# Word#Word32503,18386
ord32" #-} Word32 = W32# Word#W32#503,18386
ord64" #-} Word64 = W64# Word64#Word64702,25643
ord64" #-} Word64 = W64# Word64#W64#702,25643
ord64" #-} Word64 = W64# Word#Word64857,32096
ord64" #-} Word64 = W64# Word#W64#857,32096
wordToWord64 :: Word -> Word64wordToWord64957,35495
word64ToWord :: Word64 -> Wordword64ToWord954,35430
uncheckedShiftRL64# :: Word# -> Int# -> Word#uncheckedShiftRL64#1034,38628
uncheckedShiftL64# :: Word# -> Int# -> Word#uncheckedShiftL64#1031,38543
shiftL64#, shiftRL64# :: Word64# -> Int# -> Word64#shiftRL64#835,31175
shiftL64#, shiftRL64# :: Word64# -> Int# -> Word64#shiftL64#835,31175
eqWord8, neWord8 :: Word8 -> Word8 -> BoolneWord879,2090
eqWord64, neWord64 :: Word64 -> Word64 -> BoolneWord64711,25850
eqWord32, neWord32 :: Word32 -> Word32 -> BoolneWord32512,18591
eqWord16, neWord16 :: Word16 -> Word16 -> BoolneWord16274,9479
gtWord8, geWord8, ltWord8, leWord8 :: Word8 -> Word8 -> BoolltWord896,2515
gtWord64, geWord64, ltWord64, leWord64 :: Word64 -> Word64 -> BoolltWord64728,26300
gtWord32, geWord32, ltWord32, leWord32 :: Word32 -> Word32 -> BoolltWord32529,19037
gtWord16, geWord16, ltWord16, leWord16 :: Word16 -> Word16 -> BoolltWord16291,9925
gtWord8, geWord8, ltWord8, leWord8 :: Word8 -> Word8 -> BoolleWord896,2515
gtWord64, geWord64, ltWord64, leWord64 :: Word64 -> Word64 -> BoolleWord64728,26300
gtWord32, geWord32, ltWord32, leWord32 :: Word32 -> Word32 -> BoolleWord32529,19037
gtWord16, geWord16, ltWord16, leWord16 :: Word16 -> Word16 -> BoolleWord16291,9925
gtWord8, geWord8, ltWord8, leWord8 :: Word8 -> Word8 -> BoolgtWord896,2515
gtWord64, geWord64, ltWord64, leWord64 :: Word64 -> Word64 -> BoolgtWord64728,26300
gtWord32, geWord32, ltWord32, leWord32 :: Word32 -> Word32 -> BoolgtWord32529,19037
gtWord16, geWord16, ltWord16, leWord16 :: Word16 -> Word16 -> BoolgtWord16291,9925
gtWord8, geWord8, ltWord8, leWord8 :: Word8 -> Word8 -> BoolgeWord896,2515
gtWord64, geWord64, ltWord64, leWord64 :: Word64 -> Word64 -> BoolgeWord64728,26300
gtWord32, geWord32, ltWord32, leWord32 :: Word32 -> Word32 -> BoolgeWord32529,19037
gtWord16, geWord16, ltWord16, leWord16 :: Word16 -> Word16 -> BoolgeWord16291,9925
eqWord8, neWord8 :: Word8 -> Word8 -> BooleqWord879,2090
eqWord64, neWord64 :: Word64 -> Word64 -> BooleqWord64711,25850
eqWord32, neWord32 :: Word32 -> Word32 -> BooleqWord32512,18591
eqWord16, neWord16 :: Word16 -> Word16 -> BooleqWord16274,9479
byteSwap64 :: Word64 -> Word64byteSwap641070,39526
byteSwap32 :: Word32 -> Word32byteSwap32693,25341
byteSwap16 :: Word16 -> Word16byteSwap16419,15009
bitReverse8 :: Word8 -> Word8bitReverse81080,39761
bitReverse64 :: Word64 -> Word64bitReverse641099,40293
bitReverse32 :: Word32 -> Word32bitReverse321092,40095
bitReverse16 :: Word16 -> Word16bitReverse161086,39924

/home/effectfully/.fastdogs/base-4.15.1.0/Numeric.hs,1134
module Numeric (Numeric19,584
showOct :: (Integral a, Show a) => a -> ShowSshowOct290,9280
showIntAtBase :: (Integral a, Show a) => a -> (Int -> Char) -> a -> ShowSshowIntAtBase271,8523
showInt :: Integral a => a -> ShowSshowInt142,3809
showHex :: (Integral a,Show a) => a -> ShowSshowHex286,9141
showHFloat :: RealFloat a => a -> ShowSshowHFloat230,7132
showGFloatAlt    :: (RealFloat a) => Maybe Int -> a -> ShowSshowGFloatAlt215,6652
showGFloat    :: (RealFloat a) => Maybe Int -> a -> ShowSshowGFloat192,5808
showFFloatAlt    :: (RealFloat a) => Maybe Int -> a -> ShowSshowFFloatAlt205,6279
showFFloat    :: (RealFloat a) => Maybe Int -> a -> ShowSshowFFloat183,5373
showEFloat    :: (RealFloat a) => Maybe Int -> a -> ShowSshowEFloat175,5020
readSigned :: (Real a) => ReadS a -> ReadS areadSigned126,3120
readOct :: (Eq a, Num a) => ReadS areadOct91,2098
readInt :: Num areadInt80,1695
readHex :: (Eq a, Num a) => ReadS areadHex106,2478
readFloatP :: RealFrac a => ReadP areadFloatP114,2705
readFloat :: RealFrac a => ReadS areadFloat111,2635
readDec :: (Eq a, Num a) => ReadS areadDec98,2256

/home/effectfully/.fastdogs/base-4.15.1.0/Numeric/Natural.hs,38
module Numeric.NaturalNatural20,571

/home/effectfully/.fastdogs/base-4.15.1.0/Prelude.hs,32
module Prelude (Prelude20,681

/home/effectfully/.fastdogs/base-4.15.1.0/System/CPUTime.hsc,134
module System.CPUTimeCPUTime26,647
getCPUTime :: IO IntegergetCPUTime66,2043
cpuTimePrecision :: IntegercpuTimePrecision59,1756

/home/effectfully/.fastdogs/base-4.15.1.0/System/CPUTime/Posix/ClockGetTime.hsc,514
module System.CPUTime.Posix.ClockGetTimeClockGetTime10,151
data TimespecTimespec31,736
foreign import capi unsafe "time.h clock_getres"  clock_getres  :: CInt -> Ptr Timespec -> IO CIntclock_getres43,1279
foreign import capi unsafe "time.h clock_gettime" clock_gettime :: CInt -> Ptr Timespec -> IO CIntclock_gettime44,1378
withTimespec :: (Ptr Timespec -> IO a) -> IO (a, Integer)withTimespec35,899
getCpuTimePrecision :: IO IntegergetCpuTimePrecision26,551
getCPUTime :: IO IntegergetCPUTime21,382

/home/effectfully/.fastdogs/base-4.15.1.0/System/CPUTime/Posix/RUsage.hsc,357
module System.CPUTime.Posix.RUsageRUsage6,90
type CRUsage = ()CRUsage35,1079
foreign import capi unsafe "HsBase.h getrusage" getrusage :: CInt -> Ptr CRUsage -> IO CIntgetrusage36,1097
foreign import ccall unsafe clk_tck :: CLongclk_tck42,1307
getCpuTimePrecision :: IO IntegergetCpuTimePrecision38,1190
getCPUTime :: IO IntegergetCPUTime21,339

/home/effectfully/.fastdogs/base-4.15.1.0/System/CPUTime/Posix/Times.hsc,348
module System.CPUTime.Posix.TimesTimes6,90
type CTms = ()CTms29,702
foreign import ccall unsafe times :: Ptr CTms -> IO CClocktimes30,717
foreign import ccall unsafe clk_tck :: CLongclk_tck36,884
getCpuTimePrecision :: IO IntegergetCpuTimePrecision32,777
getCPUTime :: IO IntegergetCPUTime21,329
clockTicks :: IntegerclockTicks38,930

/home/effectfully/.fastdogs/base-4.15.1.0/System/CPUTime/Unsupported.hs,153
module System.CPUTime.UnsupportedUnsupported1,0
getCpuTimePrecision :: IO IntegergetCpuTimePrecision15,318
getCPUTime :: IO IntegergetCPUTime8,115

/home/effectfully/.fastdogs/base-4.15.1.0/System/CPUTime/Utils.hs,227
module System.CPUTime.UtilsUtils1,0
csuSecondsToInteger :: CSUSeconds -> IntegercsuSecondsToInteger18,438
cTimeToInteger :: CTime -> IntegercTimeToInteger15,360
cClockToInteger :: CClock -> IntegercClockToInteger12,278

/home/effectfully/.fastdogs/base-4.15.1.0/System/CPUTime/Windows.hsc,793
module System.CPUTime.WindowsWindows6,116
type FILETIME = ()FILETIME51,1734
type HANDLE = ()HANDLE52,1753
foreign import stdcall unsafe "GetCurrentProcess" getCurrentProcess :: IO (Ptr HANDLE)getCurrentProcess56,1859
foreign import stdcall unsafe "GetProcessTimes" getProcessTimes :: Ptr HANDLE -> Ptr FILETIME -> Ptr FILETIME -> Ptr FILETIME -> Ptr FILETIME -> IO CIntgetProcessTimes57,1946
foreign import ccall unsafe "GetCurrentProcess" getCurrentProcess :: IO (Ptr HANDLE)getCurrentProcess59,2131
foreign import ccall unsafe "GetProcessTimes" getProcessTimes :: Ptr HANDLE -> Ptr FILETIME -> Ptr FILETIME -> Ptr FILETIME -> Ptr FILETIME -> IO CIntgetProcessTimes60,2216
getCpuTimePrecision :: IO IntegergetCpuTimePrecision48,1665
getCPUTime :: IO IntegergetCPUTime19,315

/home/effectfully/.fastdogs/base-4.15.1.0/System/Console/GetOpt.hs,2192
module System.Console.GetOpt (GetOpt42,1411
data ArgOrder aArgOrder68,2108
  = RequireOrder                -- ^ no option processing after first non-optionRequireOrder69,2124
  | Permute                     -- ^ freely intersperse options and non-optionsPermute70,2205
  | ReturnInOrder (String -> a) -- ^ wrap non-options into optionsReturnInOrder71,2285
data OptDescr a =              -- description of a single options:OptDescr86,2575
   Option [Char]                --    list of short option charactersOption87,2642
data ArgDescr aArgDescr94,3047
   = NoArg                   a         -- ^   no argument expectedNoArg95,3063
   | ReqArg (String       -> a) String -- ^   option requires argumentReqArg96,3130
   | OptArg (Maybe String -> a) String -- ^   optional argumentOptArg97,3201
data OptKind a                -- kind of cmd line arg (internal use only):OptKind115,3753
   = Opt       a                --    an optionOpt116,3828
   | UnreqOpt  String           --    an un-recognized optionUnreqOpt117,3876
   | NonOpt    String           --    a non-optionNonOpt118,3938
   | EndOfOpts                  --    end-of-options marker (i.e. "--")EndOfOpts119,3989
   | OptErr    String           --    something went wrong...OptErr120,4061
usageInfo :: String                    -- headerusageInfo125,4278
shortOpt :: Char -> String -> [String] -> [OptDescr a] -> (OptKind a,[String])shortOpt230,9329
longOpt :: String -> [String] -> [OptDescr a] -> (OptKind a,[String])longOpt209,8225
getOpt' :: ArgOrder a                         -- non-option handlinggetOpt'182,6650
getOpt :: ArgOrder a                   -- non-option handlinggetOpt170,6071
getNext :: String -> [String] -> [OptDescr a] -> (OptKind a,[String])getNext202,7898
fmtShort :: ArgDescr a -> Char -> StringfmtShort146,5269
fmtOpt :: OptDescr a -> [(String,String,String)]fmtOpt135,4849
fmtLong :: ArgDescr a -> String -> StringfmtLong151,5464
errUnrec :: String -> StringerrUnrec256,10609
errReq :: String -> String -> OptKind aerrReq253,10478
errNoArg :: String -> OptKind aerrNoArg259,10700
errAmbig :: [OptDescr a] -> String -> OptKind aerrAmbig249,10300

/home/effectfully/.fastdogs/base-4.15.1.0/System/Environment.hs,2004
module System.EnvironmentEnvironment18,527
  getProgArgv :: Ptr CInt -> Ptr (Ptr CString) -> IO ()getProgArgv82,2068
  c_GetLastError:: IO DWORDc_GetLastError148,4034
  c_GetEnvironmentVariable :: LPWSTR -> LPWSTR -> DWORD -> IO DWORDc_GetEnvironmentVariable172,4860
   c_getenv :: CString -> IO (Ptr CChar)c_getenv184,5247
  c_SetEnvironmentVariable :: LPTSTR -> LPTSTR -> IO Boolc_SetEnvironmentVariable232,6850
foreign import ccall unsafe "putenv" c_putenv :: CString -> IO CIntc_putenv249,7430
foreign import ccall unsafe "__hsbase_unsetenv" c_unsetenv :: CString -> IO CIntc_unsetenv273,8274
  c_setProgArgv  :: CInt -> Ptr CString -> IO ()c_setProgArgv320,9500
  c_GetEnvironmentStrings :: IO (Ptr CWchar)c_GetEnvironmentStrings356,10862
  c_FreeEnvironmentStrings :: Ptr CWchar -> IO Boolc_FreeEnvironmentStrings359,10980
  getEnvBlock :: IO (Ptr CString)getEnvBlock370,11320
withProgName :: String -> IO a -> IO awithProgName293,8718
withProgArgv :: [String] -> IO a -> IO awithProgArgv304,9001
withArgv :: [String] -> IO a -> IO awithArgv301,8939
withArgs :: [String] -> IO a -> IO awithArgs284,8498
unsetEnv :: String -> IO ()unsetEnv259,7745
unpackProgName  :: Ptr (Ptr CChar) -> IO String   -- argv[0]unpackProgName103,2801
setProgArgv :: [String] -> IO ()setProgArgv312,9258
setEnv_ :: String -> String -> IO ()setEnv_225,6548
setEnv :: String -> String -> IO ()setEnv215,6167
putEnv :: String -> IO ()putEnv240,7126
lookupEnv :: String -> IO (Maybe String)lookupEnv160,4311
ioe_missingEnvVar :: String -> IO aioe_missingEnvVar187,5296
getProgName :: IO StringgetProgName94,2554
getEnvironment :: IO [(String, String)]getEnvironment327,9779
getEnv :: String -> IO StringgetEnv134,3609
getArgs :: IO [String]getArgs70,1751
eRROR_ENVVAR_NOT_FOUND :: DWORDeRROR_ENVVAR_NOT_FOUND144,3911
divvy :: String -> (String, String)divvy373,11362
basename :: FilePath -> FilePathbasename109,2982
e WINDOWS_CCONV stdcallWINDOWS_CCONV55,1353

/home/effectfully/.fastdogs/base-4.15.1.0/System/Environment/Blank.hsc,896
module System.Environment.BlankBlank33,1083
  c_SetEnvironmentVariable :: LPTSTR -> LPTSTR -> IO Boolc_SetEnvironmentVariable131,3683
   c_setenv :: CString -> CString -> CInt -> IO CIntc_setenv140,3970
  c_GetLastError:: IO DWORDc_GetLastError161,4779
   c_unsetenv :: CString -> IO CIntc_unsetenv169,5032
   c_unsetenv :: CString -> IO ()c_unsetenv175,5210
foreign import ccall unsafe "putenv" c_putenv :: CString -> IO CIntc_putenv192,5660
unsetEnv :: String -> IO ()unsetEnv146,4239
throwInvalidArgument :: String -> IO athrowInvalidArgument82,2048
setEnv_ :: String -> String -> IO ()setEnv_124,3381
setEnv ::setEnv104,2841
putEnv :: String -> IO ()putEnv183,5354
getEnvDefault ::getEnvDefault95,2424
getEnv :: String -> IO (Maybe String)getEnv87,2223
eRROR_ENVVAR_NOT_FOUND :: DWORDeRROR_ENVVAR_NOT_FOUND157,4656
ne WINDOWS_CCONV stdcallWINDOWS_CCONV72,1878

/home/effectfully/.fastdogs/base-4.15.1.0/System/Environment/ExecutablePath.hsc,1293
module System.Environment.ExecutablePath ( getExecutablePath ) whereExecutablePath19,574
type UInt32 = Word32UInt3281,2272
    c__NSGetExecutablePath :: CString -> Ptr UInt32 -> IO CIntc__NSGetExecutablePath84,2359
    c_realpath :: CString -> CString -> IO CStringc_realpath106,3271
    c_readlink :: CString -> CString -> CSize -> IO CIntc_readlink127,3929
  c_sysctlc_sysctl149,4606
    c_GetModuleFileName :: Ptr () -> CWString -> Word32 -> IO Word32c_GetModuleFileName246,8002
    c_pathFileExists :: CWString -> IO Boolc_pathFileExists249,8136
    c_createFile :: CWStringc_createFile252,8241
  c_closeHandle  :: Ptr () -> IO Boolc_closeHandle271,8819
  c_getFinalPathHandle :: Ptr () -> CWString -> Word32 -> Word32 -> IO Word32c_getFinalPathHandle274,8932
    c_getFullProgArgv :: Ptr CInt -> Ptr (Ptr CString) -> IO ()c_getFullProgArgv282,9169
realpath :: FilePath -> IO FilePathrealpath112,3469
readSymbolicLink :: FilePath -> IO FilePathreadSymbolicLink133,4086
getFinalPath :: FilePath -> IO FilePathgetFinalPath218,6864
getExecutablePath :: IO FilePathgetExecutablePath74,2115
createFile :: CWString -> IO (Ptr ())createFile261,8465
_NSGetExecutablePath :: IO FilePath_NSGetExecutablePath90,2545
ne WINDOWS_CCONV stdcallWINDOWS_CCONV188,5734

/home/effectfully/.fastdogs/base-4.15.1.0/System/Exit.hs,191
module System.ExitExit17,471
exitWith :: ExitCode -> IO aexitWith60,2052
exitSuccess :: IO aexitSuccess75,2613
exitFailure :: IO aexitFailure69,2429
die :: String -> IO adie81,2767

/home/effectfully/.fastdogs/base-4.15.1.0/System/IO.hs,2594
module System.IO (IO18,517
foreign import ccall "getTempFileNameErrorNo" c_getTempFileNameErrorNoc_getTempFileNameErrorNo601,20597
foreign import ccall "__createUUIDTempFileErrNo" c_createUUIDTempFileErrNoc_createUUIDTempFileErrNo604,20741
data OpenNewFileResultOpenNewFileResult649,22306
  = NewFileCreated CIntNewFileCreated650,22329
  | FileExistsFileExists651,22353
  | OpenNewError ErrnoOpenNewError652,22368
writeFile :: FilePath -> String -> IO ()writeFile354,9321
withFile :: FilePath -> IOMode -> (Handle -> IO r) -> IO rwithFile424,12096
withBinaryFile :: FilePath -> IOMode -> (Handle -> IO r) -> IO rwithBinaryFile431,12470
tempCounter :: IORef InttempCounter638,22027
std_flags, output_flags, rw_flags :: CIntstd_flags684,23190
std_flags, output_flags, rw_flags :: CIntrw_flags684,23190
readLn          :: Read a => IO areadLn371,9988
readIO          :: Read a => String -> IO areadIO379,10268
readFile'       :: FilePath -> IO StringreadFile'349,9118
readFile        :: FilePath -> IO StringreadFile340,8825
rand_string :: IO Stringrand_string643,22159
putStrLn        :: String -> IO ()putStrLn282,6946
putStr          :: String -> IO ()putStr277,6816
putChar         :: Char -> IO ()putChar271,6661
print           :: Show a => a -> IO ()print296,7438
pathSeparatorChar :: CharpathSeparatorChar674,22947
pathSeparator :: String -> BoolpathSeparator607,20882
output_flags = std_flagsoutput_flags610,20982
openTempFileWithDefaultPermissions :: FilePath -> StringopenTempFileWithDefaultPermissions504,15934
openTempFile' :: String -> FilePath -> String -> Bool -> CModeopenTempFile'515,16539
openTempFile :: FilePath   -- ^ Directory in which to create the fileopenTempFile489,15078
openNewFile :: FilePath -> Bool -> CMode -> IO OpenNewFileResultopenNewFile654,22392
openBinaryTempFileWithDefaultPermissions :: FilePath -> StringopenBinaryTempFileWithDefaultPermissions510,16260
openBinaryTempFile :: FilePath -> String -> IO (FilePath, Handle)openBinaryTempFile499,15698
localeEncoding :: TextEncodinglocaleEncoding391,10878
interact        ::  (String -> String) -> IO ()interact332,8542
hReady          :: Handle -> IO BoolhReady401,11171
hPrint          :: Show a => Handle -> a -> IO ()hPrint415,11624
getLine         :: IO StringgetLine308,7747
getContents'    :: IO StringgetContents'324,8216
getContents     :: IO StringgetContents315,7965
getChar         :: IO ChargetChar302,7603
fixIO :: (a -> IO a) -> IO afixIO440,12869
appendFile      :: FilePath -> String -> IO ()appendFile366,9811

/home/effectfully/.fastdogs/base-4.15.1.0/System/IO/Error.hs,3068
module System.IO.Error (Error18,509
userErrorType            :: IOErrorTypeuserErrorType220,7010
tryIOError     :: IO a -> IO (Either IOError a)tryIOError105,2261
resourceVanishedErrorType :: IOErrorTyperesourceVanishedErrorType228,7319
permissionErrorType      :: IOErrorTypepermissionErrorType216,6880
modifyIOError :: (IOError -> IOError) -> IO a -> IO amodifyIOError322,10740
mkIOError :: IOErrorType -> String -> Maybe Handle -> Maybe FilePath -> IOErrormkIOError117,2771
isUserErrorType :: IOErrorType -> BoolisUserErrorType275,9068
isUserError         :: IOError -> BoolisUserError173,5258
isResourceVanishedErrorType :: IOErrorType -> BoolisResourceVanishedErrorType283,9299
isResourceVanishedError :: IOError -> BoolisResourceVanishedError180,5507
isPermissionErrorType :: IOErrorType -> BoolisPermissionErrorType270,8900
isPermissionError   :: IOError -> BoolisPermissionError169,5080
isIllegalOperationErrorType :: IOErrorType -> BoolisIllegalOperationErrorType264,8616
isIllegalOperation  :: IOError -> BoolisIllegalOperation163,4814
isFullErrorType :: IOErrorType -> BoolisFullErrorType253,8278
isFullError         :: IOError -> BoolisFullError149,4148
isEOFErrorType :: IOErrorType -> BoolisEOFErrorType259,8473
isEOFError          :: IOError -> BoolisEOFError154,4357
isDoesNotExistErrorType :: IOErrorType -> BoolisDoesNotExistErrorType242,7826
isDoesNotExistError :: IOError -> BoolisDoesNotExistError137,3619
isAlreadyInUseErrorType :: IOErrorType -> BoolisAlreadyInUseErrorType248,8081
isAlreadyInUseError :: IOError -> BoolisAlreadyInUseError144,3953
isAlreadyExistsErrorType :: IOErrorType -> BoolisAlreadyExistsErrorType236,7605
isAlreadyExistsError :: IOError -> BoolisAlreadyExistsError132,3406
ioeSetLocation    :: IOError -> String      -> IOErrorioeSetLocation310,10173
ioeSetHandle      :: IOError -> Handle      -> IOErrorioeSetHandle311,10228
ioeSetFileName    :: IOError -> FilePath    -> IOErrorioeSetFileName312,10283
ioeSetErrorType   :: IOError -> IOErrorType -> IOErrorioeSetErrorType308,10063
ioeSetErrorString :: IOError -> String      -> IOErrorioeSetErrorString309,10118
ioeGetLocation        :: IOError -> StringioeGetLocation292,9631
ioeGetHandle          :: IOError -> Maybe HandleioeGetHandle293,9674
ioeGetFileName        :: IOError -> Maybe FilePathioeGetFileName294,9723
ioeGetErrorType       :: IOError -> IOErrorTypeioeGetErrorType290,9540
ioeGetErrorString     :: IOError -> StringioeGetErrorString291,9588
illegalOperationErrorType :: IOErrorTypeillegalOperationErrorType211,6651
fullErrorType            :: IOErrorTypefullErrorType202,6350
eofErrorType             :: IOErrorTypeeofErrorType207,6525
doesNotExistErrorType    :: IOErrorTypedoesNotExistErrorType193,5986
catchIOError :: IO a -> (IOError -> IO a) -> IO acatchIOError362,12478
annotateIOError :: IOErrorannotateIOError331,11161
alreadyInUseErrorType    :: IOErrorTypealreadyInUseErrorType198,6197
alreadyExistsErrorType   :: IOErrorTypealreadyExistsErrorType188,5812

/home/effectfully/.fastdogs/base-4.15.1.0/System/IO/Unsafe.hs,95
module System.IO.Unsafe (Unsafe18,512
unsafeFixIO :: (a -> IO a) -> IO aunsafeFixIO44,1160

/home/effectfully/.fastdogs/base-4.15.1.0/System/Info.hs,349
module System.InfoInfo21,687
splitVersion :: String -> [String]splitVersion50,1567
os :: Stringos69,2009
fullCompilerVersion :: VersionfullCompilerVersion44,1393
compilerVersionRaw :: IntcompilerVersionRaw109,2760
compilerVersion :: VersioncompilerVersion37,1044
compilerName :: StringcompilerName106,2715
arch :: Stringarch100,2542

/home/effectfully/.fastdogs/base-4.15.1.0/System/Mem.hs,230
module System.MemMem18,545
foreign import ccall "performMajorGC" performMajorGC :: IO ()performMajorGC41,1053
foreign import ccall "performGC" performMinorGC :: IO ()performMinorGC46,1190
performGC :: IO ()performGC35,932

/home/effectfully/.fastdogs/base-4.15.1.0/System/Mem/StableName.hs,50
module System.Mem.StableName (StableName27,1076

/home/effectfully/.fastdogs/base-4.15.1.0/System/Mem/Weak.hs,239
module System.Mem.Weak (Weak52,2432
mkWeakPtr :: k -> Maybe (IO ()) -> IO (Weak k)mkWeakPtr83,3035
mkWeakPair :: k -> v -> Maybe (IO ()) -> IO (Weak (k,v))mkWeakPair110,4028
addFinalizer :: key -> IO () -> IO ()addFinalizer98,3591

/home/effectfully/.fastdogs/base-4.15.1.0/System/Posix/Internals.hs,9376
module System.Posix.Internals whereInternals23,766
flock" #-} CFLockCFLock65,1761
group" #-} CGroupCGroup66,1802
lconv" #-} CLconvCLconv67,1843
asswd" #-} CPasswdCPasswd68,1885
ction" #-} CSigactionCSigaction69,1931
set_t" #-} CSigsetCSigset70,1972
 stat" #-}  CStatCStat71,2013
rmios" #-} CTermiosCTermios72,2056
ct tm" #-} CTmCTm73,2096
t tms" #-} CTmsCTms74,2132
imbuf" #-} CUtimbufCUtimbuf75,2173
sname" #-} CUtsnameCUtsname76,2218
type FD = CIntFD78,2239
   get_saved_termios :: CInt -> IO (Ptr CTermios)get_saved_termios257,8535
   set_saved_termios :: CInt -> (Ptr CTermios) -> IO ()set_saved_termios260,8652
   set_console_buffering :: CInt -> CInt -> IO CIntset_console_buffering300,10187
   set_console_echo :: CInt -> CInt -> IO CIntset_console_echo303,10301
   get_console_echo :: CInt -> IO CIntget_console_echo306,10410
   is_console :: CInt -> IO CIntis_console309,10505
type CFilePath = CStringCFilePath350,11821
   c_open :: CFilePath -> CInt -> CMode -> IO CIntc_open356,11939
   c_safe_open :: CFilePath -> CInt -> CMode -> IO CIntc_safe_open359,12042
   c_fstat :: CInt -> Ptr CStat -> IO CIntc_fstat362,12153
   lstat :: CFilePath -> Ptr CStat -> IO CIntlstat365,12251
   c_lseek :: CInt -> COff -> CInt -> IO COffc_lseek386,13019
   c_access :: CString -> CInt -> IO CIntc_access389,13112
   c_chmod :: CString -> CMode -> IO CIntc_chmod392,13200
   c_close :: CInt -> IO CIntc_close395,13288
   c_creat :: CString -> CMode -> IO CIntc_creat398,13364
   c_dup :: CInt -> IO CIntc_dup401,13450
   c_dup2 :: CInt -> CInt -> IO CIntc_dup2404,13523
   c_isatty :: CInt -> IO CIntc_isatty407,13607
   c_read :: CInt -> Ptr Word8 -> CUInt -> IO CIntc_read412,13739
   c_safe_read :: CInt -> Ptr Word8 -> CUInt -> IO CIntc_safe_read416,13860
   c_umask :: CMode -> IO CModec_umask419,13963
   c_write :: CInt -> Ptr Word8 -> CUInt -> IO CIntc_write423,14068
   c_safe_write :: CInt -> Ptr Word8 -> CUInt -> IO CIntc_safe_write427,14191
   c_pipe :: Ptr CInt -> IO CIntc_pipe430,14294
   c_read :: CInt -> Ptr Word8 -> CSize -> IO CSsizec_read438,14560
   c_safe_read :: CInt -> Ptr Word8 -> CSize -> IO CSsizec_safe_read442,14682
   c_umask :: CMode -> IO CModec_umask445,14786
   c_write :: CInt -> Ptr Word8 -> CSize -> IO CSsizec_write449,14890
   c_safe_write :: CInt -> Ptr Word8 -> CSize -> IO CSsizec_safe_write453,15014
   c_pipe :: Ptr CInt -> IO CIntc_pipe456,15118
   c_unlink :: CString -> IO CIntc_unlink460,15205
   c_utime :: CString -> Ptr CUtimbuf -> IO CIntc_utime463,15284
   c_getpid :: IO CPidc_getpid466,15380
   c_stat :: CFilePath -> Ptr CStat -> IO CIntc_stat469,15457
   c_ftruncate :: CInt -> COff -> IO CIntc_ftruncate472,15563
   c_fcntl_read  :: CInt -> CInt -> IO CIntc_fcntl_read476,15680
   c_fcntl_write :: CInt -> CInt -> CLong -> IO CIntc_fcntl_write479,15769
   c_fcntl_lock  :: CInt -> CInt -> Ptr CFLock -> IO CIntc_fcntl_lock482,15867
   c_fork :: IO CPidc_fork485,15970
   c_link :: CString -> CString -> IO CIntc_link488,16036
   c_mkfifo :: CString -> CMode -> IO CIntc_mkfifo492,16165
   c_sigemptyset :: Ptr CSigset -> IO CIntc_sigemptyset495,16259
   c_sigaddset :: Ptr CSigset -> CInt -> IO CIntc_sigaddset498,16351
   c_sigprocmask :: CInt -> Ptr CSigset -> Ptr CSigset -> IO CIntc_sigprocmask501,16451
   c_tcgetattr :: CInt -> Ptr CTermios -> IO CIntc_tcgetattr505,16606
   c_tcsetattr :: CInt -> CInt -> Ptr CTermios -> IO CIntc_tcsetattr509,16745
   c_waitpid :: CPid -> Ptr CInt -> CInt -> IO CPidc_waitpid512,16851
foreign import ccall unsafe "HsBase.h __hscore_o_rdonly" o_RDONLY :: CInto_RDONLY516,16932
foreign import ccall unsafe "HsBase.h __hscore_o_wronly" o_WRONLY :: CInto_WRONLY517,17006
foreign import ccall unsafe "HsBase.h __hscore_o_rdwr"   o_RDWR   :: CInto_RDWR518,17080
foreign import ccall unsafe "HsBase.h __hscore_o_append" o_APPEND :: CInto_APPEND519,17154
foreign import ccall unsafe "HsBase.h __hscore_o_creat"  o_CREAT  :: CInto_CREAT520,17228
foreign import ccall unsafe "HsBase.h __hscore_o_excl"   o_EXCL   :: CInto_EXCL521,17302
foreign import ccall unsafe "HsBase.h __hscore_o_trunc"  o_TRUNC  :: CInto_TRUNC522,17376
foreign import ccall unsafe "HsBase.h __hscore_o_noctty"   o_NOCTTY   :: CInto_NOCTTY525,17471
foreign import ccall unsafe "HsBase.h __hscore_o_nonblock" o_NONBLOCK :: CInto_NONBLOCK526,17549
foreign import ccall unsafe "HsBase.h __hscore_o_binary"   o_BINARY   :: CInto_BINARY527,17627
foreign import capi unsafe "sys/stat.h S_ISREG"  c_s_isreg  :: CMode -> CIntc_s_isreg529,17706
foreign import capi unsafe "sys/stat.h S_ISCHR"  c_s_ischr  :: CMode -> CIntc_s_ischr530,17783
foreign import capi unsafe "sys/stat.h S_ISBLK"  c_s_isblk  :: CMode -> CIntc_s_isblk531,17860
foreign import capi unsafe "sys/stat.h S_ISDIR"  c_s_isdir  :: CMode -> CIntc_s_isdir532,17937
foreign import capi unsafe "sys/stat.h S_ISFIFO" c_s_isfifo :: CMode -> CIntc_s_isfifo533,18014
foreign import ccall unsafe "HsBase.h __hscore_sizeof_stat" sizeof_stat :: Intsizeof_stat546,18380
foreign import ccall unsafe "HsBase.h __hscore_st_mtime" st_mtime :: Ptr CStat -> IO CTimest_mtime547,18459
foreign import ccall unsafe "HsBase.h __hscore_st_size" st_size :: Ptr CStat -> IO Int64st_size549,18579
foreign import ccall unsafe "HsBase.h __hscore_st_mode" st_mode :: Ptr CStat -> IO CModest_mode553,18769
foreign import ccall unsafe "HsBase.h __hscore_st_dev" st_dev :: Ptr CStat -> IO CDevst_dev554,18858
foreign import ccall unsafe "HsBase.h __hscore_st_ino" st_ino :: Ptr CStat -> IO CInost_ino555,18944
foreign import ccall unsafe "HsBase.h __hscore_echo"         const_echo :: CIntconst_echo557,19031
foreign import ccall unsafe "HsBase.h __hscore_tcsanow"      const_tcsanow :: CIntconst_tcsanow558,19111
foreign import ccall unsafe "HsBase.h __hscore_icanon"       const_icanon :: CIntconst_icanon559,19194
foreign import ccall unsafe "HsBase.h __hscore_vmin"         const_vmin   :: CIntconst_vmin560,19276
foreign import ccall unsafe "HsBase.h __hscore_vtime"        const_vtime  :: CIntconst_vtime561,19358
foreign import ccall unsafe "HsBase.h __hscore_sigttou"      const_sigttou :: CIntconst_sigttou562,19440
foreign import ccall unsafe "HsBase.h __hscore_sig_block"    const_sig_block :: CIntconst_sig_block563,19523
foreign import ccall unsafe "HsBase.h __hscore_sig_setmask"  const_sig_setmask :: CIntconst_sig_setmask564,19608
foreign import ccall unsafe "HsBase.h __hscore_f_getfl"      const_f_getfl :: CIntconst_f_getfl565,19695
foreign import ccall unsafe "HsBase.h __hscore_f_setfl"      const_f_setfl :: CIntconst_f_setfl566,19778
foreign import ccall unsafe "HsBase.h __hscore_f_setfd"      const_f_setfd :: CIntconst_f_setfd567,19861
foreign import ccall unsafe "HsBase.h __hscore_fd_cloexec"   const_fd_cloexec :: CLongconst_fd_cloexec568,19944
foreign import ccall unsafe "HsBase.h __hscore_sizeof_termios"  sizeof_termios :: Intsizeof_termios571,20060
foreign import ccall unsafe "HsBase.h __hscore_sizeof_sigset_t" sizeof_sigset_t :: Intsizeof_sigset_t572,20146
foreign import ccall unsafe "HsBase.h __hscore_lflag" c_lflag :: Ptr CTermios -> IO CTcflagc_lflag574,20234
foreign import ccall unsafe "HsBase.h __hscore_poke_lflag" poke_c_lflag :: Ptr CTermios -> CTcflag -> IO ()poke_c_lflag575,20326
foreign import ccall unsafe "HsBase.h __hscore_ptr_c_cc" ptr_c_cc  :: Ptr CTermios -> IO (Ptr Word8)ptr_c_cc576,20434
foreign import capi unsafe "sys/stat.h S_ISSOCK" c_s_issock :: CMode -> CIntc_s_issock582,20638
foreign import ccall unsafe "__hscore_bufsiz"  dEFAULT_BUFFER_SIZE :: IntdEFAULT_BUFFER_SIZE587,20748
foreign import capi  unsafe "stdio.h value SEEK_CUR" sEEK_CUR :: CIntsEEK_CUR588,20822
foreign import capi  unsafe "stdio.h value SEEK_SET" sEEK_SET :: CIntsEEK_SET589,20892
foreign import capi  unsafe "stdio.h value SEEK_END" sEEK_END :: CIntsEEK_END590,20962
withFilePath :: FilePath -> (CWString -> IO a) -> IO awithFilePath161,4807
tcSetAttr :: FD -> (Ptr CTermios -> IO a) -> IO atcSetAttr221,6823
statGetType :: Ptr CStat -> IO IODeviceTypestatGetType118,3408
setNonBlockingFD :: FD -> Bool -> IO ()setNonBlockingFD316,10676
setEcho :: FD -> Bool -> IO ()setEcho188,5661
setCooked :: FD -> Bool -> IO ()setCooked203,6148
setCloseOnExec :: FD -> IO ()setCloseOnExec340,11536
s_issock :: CMode -> Bools_issock579,20543
s_isreg  :: CMode -> Bools_isreg535,18092
s_isfifo :: CMode -> Bools_isfifo543,18320
s_isdir  :: CMode -> Bools_isdir541,18263
s_ischr  :: CMode -> Bools_ischr537,18149
s_isblk  :: CMode -> Bools_isblk539,18206
puts :: String -> IO ()puts54,1362
peekFilePathLen :: CStringLen -> IO FilePathpeekFilePathLen174,5163
peekFilePath :: CWString -> IO FilePathpeekFilePath167,4957
newFilePath :: FilePath -> IO CWStringnewFilePath164,4891
ioe_unknownfiletype :: IOExceptionioe_unknownfiletype130,3913
ioe_unk_error :: String -> String -> IOExceptionioe_unk_error279,9457
getEcho :: FD -> IO BoolgetEcho197,5978
fileType :: FilePath -> IO IODeviceTypefileType95,2694
fdType :: FD -> IO IODeviceTypefdType115,3327
fdStat :: FD -> IO (IODeviceType, CDev, CIno)fdStat105,3056
fdGetMode :: FD -> IO IOModefdGetMode136,4125
fdFileSize :: FD -> IO IntegerfdFileSize83,2359

/home/effectfully/.fastdogs/base-4.15.1.0/System/Posix/Types.hs,639
module System.Posix.Types (Types25,818
type LinkCount      = CNlinkLinkCount237,5011
type UserID         = CUidUserID240,5072
type GroupID        = CGidGroupID243,5131
type ByteCount      = CSizeByteCount246,5166
type ClockTick      = CClockClockTick247,5194
type EpochTime      = CTimeEpochTime248,5223
type DeviceID       = CDevDeviceID249,5251
type FileID         = CInoFileID250,5278
type FileMode       = CModeFileMode251,5305
type ProcessID      = CPidProcessID252,5333
type FileOffset     = COffFileOffset253,5360
type ProcessGroupID = CPidProcessGroupID254,5387
type Limit          = CLongLimit255,5414

/home/effectfully/.fastdogs/base-4.15.1.0/System/Timeout.hs,180
module System.Timeout ( Timeout, timeout ) whereTimeout19,602
newtype Timeout = Timeout Unique deriving EqTimeout42,1369
timeout :: Int -> IO a -> IO (Maybe a)timeout93,4017

/home/effectfully/.fastdogs/base-4.15.1.0/Text/ParserCombinators/ReadP.hs,2260
module Text.ParserCombinators.ReadPReadP25,976
type ReadS a = String -> [(a,String)]ReadS91,2024
data P aP97,2210
  = Get (Char -> P a)Get98,2219
  | Look (String -> P a)Look99,2241
  | FailFail100,2266
  | Result a (P a)Result101,2275
  | Final (NonEmpty (a,String))Final102,2294
newtype ReadP a = R (forall b . (a -> P b) -> P b)ReadP164,4281
newtype ReadP a = R (forall b . (a -> P b) -> P b)R164,4281
string :: String -> ReadP Stringstring277,7512
skipSpaces :: ReadP ()skipSpaces311,8643
skipMany1 :: ReadP a -> ReadP ()skipMany1354,9961
skipMany :: ReadP a -> ReadP ()skipMany350,9852
sepBy1 :: ReadP a -> ReadP sep -> ReadP [a]sepBy1363,10280
sepBy :: ReadP a -> ReadP sep -> ReadP [a]sepBy358,10069
satisfy :: (Char -> Bool) -> ReadP Charsatisfy262,7068
run :: P a -> ReadS arun199,5028
readS_to_P :: ReadS a -> ReadP areadS_to_P425,12772
readP_to_S :: ReadP a -> ReadS areadP_to_S418,12494
pfail :: ReadP apfail219,5585
optional :: ReadP a -> ReadP ()optional338,9471
option :: a -> ReadP a -> ReadP aoption333,9320
munch1 :: (Char -> Bool) -> ReadP Stringmunch1296,8153
munch :: (Char -> Bool) -> ReadP Stringmunch285,7783
manyTill :: ReadP a -> ReadP end -> ReadP [a]manyTill409,12119
many1 :: ReadP a -> ReadP [a]many1346,9732
many :: ReadP a -> ReadP [a]many342,9613
look :: ReadP Stringlook214,5461
get :: ReadP Charget209,5346
gather :: ReadP a -> ReadP (String, a)gather244,6294
final :: [(a,String)] -> P afinal195,4949
eof :: ReadP ()eof271,7359
endBy1 :: ReadP a -> ReadP sep -> ReadP [a]endBy1373,10688
endBy :: ReadP a -> ReadP sep -> ReadP [a]endBy368,10497
count :: Int -> ReadP a -> ReadP [a]count320,8828
choice :: [ReadP a] -> ReadP achoice305,8490
char :: Char -> ReadP Charchar267,7258
chainr1 :: ReadP a -> ReadP (a -> a -> a) -> ReadP achainr1392,11570
chainr :: ReadP a -> ReadP (a -> a -> a) -> a -> ReadP achainr378,10881
chainl1 :: ReadP a -> ReadP (a -> a -> a) -> ReadP achainl1401,11858
chainl :: ReadP a -> ReadP (a -> a -> a) -> a -> ReadP achainl385,11226
between :: ReadP open -> ReadP close -> ReadP a -> ReadP abetween325,8999
(<++) :: ReadP a -> ReadP a -> ReadP a<++227,5748
(+++) :: ReadP a -> ReadP a -> ReadP a+++223,5645

/home/effectfully/.fastdogs/base-4.15.1.0/Text/ParserCombinators/ReadPrec.hs,988
module Text.ParserCombinators.ReadPrecReadPrec18,607
newtype ReadPrec a = P (Prec -> ReadP a)ReadPrec72,1384
newtype ReadPrec a = P (Prec -> ReadP a)P72,1384
type Prec = IntPrec103,2013
step :: ReadPrec a -> ReadPrec astep115,2279
reset :: ReadPrec a -> ReadPrec areset119,2390
readS_to_Prec :: (Int -> ReadS a) -> ReadPrec areadS_to_Prec175,4021
readPrec_to_S :: ReadPrec a -> (Int -> ReadS a)readPrec_to_S172,3931
readPrec_to_P :: ReadPrec a -> (Int -> ReadP a)readPrec_to_P166,3787
readP_to_Prec :: (Int -> ReadP a) -> ReadPrec areadP_to_Prec169,3860
prec :: Prec -> ReadPrec a -> ReadPrec aprec123,2503
pfail :: ReadPrec apfail155,3482
minPrec :: PrecminPrec105,2030
look :: ReadPrec Stringlook140,2998
lift :: ReadP a -> ReadPrec alift111,2167
get :: ReadPrec Charget135,2871
choice :: [ReadPrec a] -> ReadPrec achoice159,3547
(<++) :: ReadPrec a -> ReadPrec a -> ReadPrec a<++149,3252
(+++) :: ReadPrec a -> ReadPrec a -> ReadPrec a+++145,3134

/home/effectfully/.fastdogs/base-4.15.1.0/Text/Printf.hs,4133
module Text.Printf(Printf24,881
class PrintfType t wherePrintfType267,9848
    spr :: String -> [UPrintf] -> tspr268,9873
class HPrintfType t whereHPrintfType273,10064
    hspr :: Handle -> String -> [UPrintf] -> thspr274,10090
class PrintfArg a wherePrintfArg313,11534
    formatArg :: a -> FieldFormatterformatArg315,11582
    parseFormat :: a -> ModifierParserparseFormat317,11643
class IsChar c whereIsChar402,13699
    toChar :: c -> ChartoChar404,13744
    fromChar :: Char -> cfromChar406,13792
data FormatAdjustment = LeftAdjust | ZeroPadFormatAdjustment419,14061
data FormatAdjustment = LeftAdjust | ZeroPadLeftAdjust419,14061
data FormatAdjustment = LeftAdjust | ZeroPadZeroPad419,14061
data FormatSign = SignPlus | SignSpaceFormatSign425,14245
data FormatSign = SignPlus | SignSpaceSignPlus425,14245
data FormatSign = SignPlus | SignSpaceSignSpace425,14245
data FieldFormat = FieldFormat {FieldFormat431,14433
  fmtWidth :: Maybe Int,       -- ^ Total width of the field.fmtWidth432,14466
  fmtPrecision :: Maybe Int,   -- ^ Secondary field width specifier.fmtPrecision433,14528
  fmtAdjust :: Maybe FormatAdjustment,  -- ^ Kind of filling or paddingfmtAdjust434,14597
  fmtSign :: Maybe FormatSign, -- ^ Whether to insist on afmtSign436,14726
  fmtAlternate :: Bool,        -- ^ Indicates an "alternatefmtAlternate439,14885
  fmtModifiers :: String,      -- ^ Characters that appearedfmtModifiers443,15119
  fmtChar :: Char              -- ^ The format characterfmtChar449,15475
data FormatParse = FormatParse {FormatParse465,16153
  fpModifiers :: String,   -- ^ Any modifiers found.fpModifiers466,16186
  fpChar :: Char,          -- ^ Primary format character.fpChar467,16239
  fpRest :: String         -- ^ Rest of the format string.fpRest468,16297
type FieldFormatter = FieldFormat -> ShowSFieldFormatter507,17399
type ModifierParser = String -> FormatParseModifierParser513,17551
type UPrintf = (ModifierParser, FieldFormatter)UPrintf631,21459
vFmt :: Char -> FieldFormat -> FieldFormatvFmt521,17800
uprintfs :: String -> [UPrintf] -> ShowSuprintfs643,21927
uprintf :: String -> [UPrintf] -> Stringuprintf637,21718
stoi :: String -> (Int, String)stoi744,25660
printf :: (PrintfType r) => String -> rprintf254,9229
perror :: String -> aperror890,30113
parseIntFormat :: a -> String -> FormatParseparseIntFormat481,16693
integral_prec :: Maybe Int -> String -> Stringintegral_prec738,25448
intModifierMap :: [(String, Integer)]intModifierMap473,16433
hPrintf :: (HPrintfType r) => Handle -> String -> rhPrintf259,9421
getStar :: [UPrintf] -> ([UPrintf], Int)getStar856,29104
getSpecs :: Bool -> Bool -> Maybe FormatSign -> Bool -> String -> [UPrintf]getSpecs765,26237
formatString :: IsChar a => [a] -> FieldFormatterformatString535,18158
formatRealFloat :: RealFloat a => a -> FieldFormatterformatRealFloat614,20834
formatIntegral :: Maybe Integer -> Integer -> FieldFormatterformatIntegral582,19573
formatInteger :: Integer -> FieldFormatterformatInteger573,19239
formatInt :: (Integral a, Bounded a) => a -> FieldFormatterformatInt560,18907
formatChar :: Char -> FieldFormatterformatChar528,17981
fmtu :: Integer -> Maybe String -> Maybe Int -> Maybe Integer -> Integerfmtu712,24621
fmti :: Maybe Int -> Integer -> (String, String)fmti700,24061
fmt :: String -> [UPrintf] -> ShowSfmt656,22513
fixupMods :: FieldFormat -> Maybe Integer -> Maybe IntegerfixupMods548,18594
errorShortFormat, errorMissingArgument, errorBadArgument :: aerrorShortFormat900,30377
errorShortFormat, errorMissingArgument, errorBadArgument :: aerrorMissingArgument900,30377
errorBadFormat :: Char -> aerrorBadFormat897,30287
errorShortFormat, errorMissingArgument, errorBadArgument :: aerrorBadArgument900,30377
dfmt :: (RealFloat a) => Char -> Maybe Int -> Bool -> a -> (String, String)dfmt871,29505
adjustment :: Maybe Int -> Maybe a -> Bool -> Booladjustment753,25885
adjustSigned :: FieldFormat -> (String, String) -> StringadjustSigned690,23668
adjust :: FieldFormat -> (String, String) -> Stringadjust667,22960

/home/effectfully/.fastdogs/base-4.15.1.0/Text/Read.hs,244
module Text.Read (Read24,881
reads :: Read a => ReadS areads58,1533
readMaybe :: Read a => String -> Maybe areadMaybe94,2424
readEither :: Read a => String -> Either String areadEither72,1892
read :: Read a => String -> aread109,2977

/home/effectfully/.fastdogs/base-4.15.1.0/Text/Read/Lex.hs,2930
module Text.Read.LexLex18,573
data LexemeLexeme63,1591
  = Char   Char         -- ^ Character literalChar64,1603
  | String String       -- ^ String literal, with escapes interpretedString65,1650
  | Punc   String       -- ^ Punctuation or reserved symbol, e.g. @(@, @::@Punc66,1720
  | Ident  String       -- ^ Haskell identifier, e.g. @foo@, @Baz@Ident67,1796
  | Symbol String       -- ^ Haskell symbol, e.g. @>>@, @:%@Symbol68,1863
  | Number Number       -- ^ @since 4.6.0.0Number69,1924
  | EOFEOF70,1968
data Number = MkNumber Int              -- BaseNumber76,2077
data Number = MkNumber Int              -- BaseMkNumber76,2077
            | MkDecimal Digits          -- Integral partMkDecimal78,2182
type Base   = IntBase414,13284
type Digits = [Int]Digits415,13302
valSimple :: (Num a, Integral d) => a -> [d] -> avalSimple491,15477
valInteger :: Integer -> Digits -> IntegervalInteger505,15985
valDig :: (Eq a, Num a) => a -> Char -> Maybe IntvalDig542,17389
valDecDig :: Char -> Maybe IntvalDecDig557,17827
val :: Num a => a -> Digits -> aval482,15259
readOctP, readDecP, readHexP :: (Eq a, Num a) => ReadP areadOctP579,18600
readIntP' :: (Eq a, Num a) => a -> ReadP areadIntP'572,18332
readIntP :: Num a => a -> (Char -> Bool) -> (Char -> Int) -> ReadP areadIntP565,18065
readOctP, readDecP, readHexP :: (Eq a, Num a) => ReadP areadHexP579,18600
readOctP, readDecP, readHexP :: (Eq a, Num a) => ReadP areadDecP579,18600
numberToRational :: Number -> RationalnumberToRational150,5402
numberToRangedRational :: (Int, Int) -> NumbernumberToRangedRational120,4115
numberToInteger :: Number -> Maybe IntegernumberToInteger86,2457
numberToFixed :: Integer -> Number -> Maybe (Integer, Integer)numberToFixed92,2698
lexToken :: ReadP LexemelexToken184,6650
lexSymbol :: ReadP LexemelexSymbol216,7453
lexString :: ReadP LexemelexString388,12672
lexPunc :: ReadP LexemelexPunc204,7147
lexNumber :: ReadP LexemelexNumber417,13323
lexLitChar :: ReadP LexemelexLitChar251,8614
lexInteger :: Base -> ReadP IntegerlexInteger477,15137
lexId :: ReadP LexemelexId239,8242
lexHexOct :: ReadP LexemelexHexOct423,13546
lexFrac :: ReadP (Maybe Digits)lexFrac447,14264
lexExp :: ReadP (Maybe Integer)lexExp454,14479
lexEOF :: ReadP LexemelexEOF196,6943
lexDigits :: Int -> ReadP DigitslexDigits464,14760
lexDecNumber :: ReadP LexemelexDecNumber440,14063
lexCharE :: ReadP (Char, Bool)  -- "escaped or not"?lexCharE271,9165
lexChar :: ReadP CharlexChar259,8801
lexBaseChar :: ReadP IntlexBaseChar430,13713
lex :: ReadP Lexemelex169,6241
isSymbolChar :: Char -> BoolisSymbolChar226,7749
isPuncChar :: Char -> BoolisPuncChar210,7303
hsLex :: ReadP StringhsLex178,6480
guard           :: (MonadPlus m) => Bool -> m ()guard55,1367
fracExp :: Integer -> Integer -> Digits -> RationalfracExp533,17091
expect :: Lexeme -> ReadP ()expect173,6311

/home/effectfully/.fastdogs/base-4.15.1.0/Text/Show.hs,96
module Text.Show (Show19,562
showListWith :: (a -> ShowS) -> [a] -> ShowSshowListWith33,818

/home/effectfully/.fastdogs/base-4.15.1.0/Text/Show/Functions.hs,53
module Text.Show.Functions () whereFunctions22,677

/home/effectfully/.fastdogs/base-4.15.1.0/Type/Reflection.hs,42
module Type.ReflectionReflection29,1131

/home/effectfully/.fastdogs/base-4.15.1.0/Type/Reflection/Unsafe.hs,113
module Type.Reflection.Unsafe (Unsafe17,656
mkTrApp :: forall k1 k2 (a :: k1 -> k2) (b :: k1).mkTrApp30,1121

/home/effectfully/.fastdogs/base-4.15.1.0/Unsafe/Coerce.hs,619
module Unsafe.CoerceCoerce10,417
data UnsafeEquality a b whereUnsafeEquality216,8253
  UnsafeRefl :: UnsafeEquality a aUnsafeRefl217,8283
unsafeEqualityProof :: forall a b . UnsafeEquality a bunsafeEqualityProof220,8356
unsafeCoerceUnlifted :: forall (a :: TYPE 'UnliftedRep) (b :: TYPE 'UnliftedRep) . a -> bunsafeCoerceUnlifted269,10345
unsafeCoerceAddr :: forall (a :: TYPE 'AddrRep) (b :: TYPE 'AddrRep) . a -> bunsafeCoerceAddr273,10574
unsafeCoerce# :: forall (r1 :: RuntimeRep) (r2 :: RuntimeRep)unsafeCoerce#281,11024
unsafeCoerce :: forall (a :: Type) (b :: Type) . a -> bunsafeCoerce266,10221

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString.hs,8514
module Data.ByteString (ByteString43,1557
zipWith' :: (Word8 -> Word8 -> Word8) -> ByteString -> ByteString -> ByteStringzipWith'1502,59375
zipWith :: (Word8 -> Word8 -> a) -> ByteString -> ByteString -> [a]zipWith1490,58882
zip :: ByteString -> ByteString -> [(Word8,Word8)]zip1481,58469
writeFile :: FilePath -> ByteString -> IO ()writeFile1882,74289
useAsCStringLen :: ByteString -> (CStringLen -> IO a) -> IO auseAsCStringLen1592,62899
useAsCString :: ByteString -> (CString -> IO a) -> IO auseAsCString1581,62402
unzip :: [(Word8,Word8)] -> (ByteString,ByteString)unzip1527,60248
unsnoc :: ByteString -> Maybe (ByteString, Word8)unsnoc431,18245
unpackFoldr :: ByteString -> (Word8 -> a -> a) -> a -> aunpackFoldr341,14975
unpack :: ByteString -> [Word8]unpack334,14834
unfoldrN :: Int -> (a -> Maybe (Word8, a)) -> a -> (ByteString, Maybe a)unfoldrN792,32517
unfoldr :: (a -> Maybe (Word8, a)) -> a -> ByteStringunfoldr775,31861
uncons :: ByteString -> Maybe (Word8, ByteString)uncons404,17161
transpose :: [ByteString] -> [ByteString]transpose479,20073
takeWhileEnd :: (Word8 -> Bool) -> ByteString -> ByteStringtakeWhileEnd845,34436
takeWhile :: (Word8 -> Bool) -> ByteString -> ByteStringtakeWhile837,34113
take :: Int -> ByteString -> ByteStringtake810,33236
tails :: ByteString -> [ByteString]tails1539,60711
tail :: ByteString -> ByteStringtail396,16924
stripSuffix :: ByteString -> ByteString -> Maybe ByteStringstripSuffix1335,52927
stripPrefix :: ByteString -> ByteString -> Maybe ByteStringstripPrefix1309,51873
splitWith :: (Word8 -> Bool) -> ByteString -> [ByteString]splitWith978,39014
splitAt :: Int -> ByteString -> (ByteString, ByteString)splitAt827,33745
split :: Word8 -> ByteString -> [ByteString]split1020,40608
spanEnd :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)spanEnd967,38494
spanByte :: Word8 -> ByteString -> (ByteString, ByteString)spanByte926,37321
span :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)span916,36975
sort :: ByteString -> ByteStringsort1549,61072
snoc :: ByteString -> Word8 -> ByteStringsnoc378,16180
singleton :: Word8 -> ByteStringsingleton301,13856
scanr1 :: (Word8 -> Word8 -> Word8) -> ByteString -> ByteStringscanr1742,30651
scanr :: (Word8 -> Word8 -> Word8) -> Word8 -> ByteString -> ByteStringscanr726,30082
scanl1 :: (Word8 -> Word8 -> Word8) -> ByteString -> ByteStringscanl1719,29854
scanl :: (Word8 -> Word8 -> Word8) -> Word8 -> ByteString -> ByteStringscanl695,29003
reverse :: ByteString -> ByteStringreverse463,19356
replicate :: Int -> Word8 -> ByteStringreplicate757,31150
readFile :: FilePath -> IO ByteStringreadFile1862,73365
putStrLn :: ByteString -> IO ()putStrLn1730,68021
putStr :: ByteString -> IO ()putStr1726,67909
partition :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)partition1258,50121
packCStringLen :: CStringLen -> IO ByteStringpackCStringLen1610,63700
packCString :: CString -> IO ByteStringpackCString1601,63334
pack :: [Word8] -> ByteStringpack330,14732
null :: ByteString -> Boolnull354,15340
notElem :: Word8 -> ByteString -> BoolnotElem1195,47919
moduleErrorMsg :: String -> String -> StringmoduleErrorMsg1921,75666
moduleErrorIO :: String -> String -> IO amoduleErrorIO1917,75523
moduleError :: String -> String -> amoduleError1913,75403
modifyFile :: IOMode -> FilePath -> ByteString -> IO ()modifyFile1878,74136
mkPS :: RawBuffer Word8 -> Int -> Int -> IO ByteStringmkPS1683,66268
mkBigPS :: Int -> [ByteString] -> IO ByteStringmkBigPS1690,66464
minimum :: ByteString -> Word8minimum636,26601
maximum :: ByteString -> Word8maximum626,26173
mapAccumR :: (acc -> Word8 -> (acc, Word8)) -> acc -> ByteString -> (acc, ByteString)mapAccumR668,28064
mapAccumL :: (acc -> Word8 -> (acc, Word8)) -> acc -> ByteString -> (acc, ByteString)mapAccumL649,27213
map :: (Word8 -> Word8) -> ByteString -> ByteStringmap449,18848
length :: ByteString -> Intlength360,15573
last :: ByteString -> Word8last414,17633
isSuffixOf :: ByteString -> ByteString -> BoolisSuffixOf1323,52372
isPrefixOf :: ByteString -> ByteString -> BoolisPrefixOf1295,51316
isInfixOf :: ByteString -> ByteString -> BoolisInfixOf1342,53245
intersperse :: Word8 -> ByteString -> ByteStringintersperse471,19732
intercalateWithByte :: Word8 -> ByteString -> ByteString -> ByteStringintercalateWithByte1077,42788
intercalate :: ByteString -> [ByteString] -> ByteStringintercalate1065,42351
interact :: (ByteString -> ByteString) -> IO ()interact1857,73198
inits :: ByteString -> [ByteString]inits1535,60550
init :: ByteString -> ByteStringinit423,18005
index :: ByteString -> Int -> Word8index1092,43428
illegalBufferSize :: Handle -> String -> Int -> IO aillegalBufferSize1800,70885
head :: ByteString -> Word8head388,16566
hPutStrLn :: Handle -> ByteString -> IO ()hPutStrLn1720,67689
hPutStr :: Handle -> ByteString -> IO ()hPutStr1716,67570
hPutNonBlocking :: Handle -> ByteString -> IO ByteStringhPutNonBlocking1710,67308
hPut :: Handle -> ByteString -> IO ()hPut1698,66730
hGetSome :: Handle -> Int -> IO ByteStringhGetSome1779,70048
hGetNonBlocking :: Handle -> Int -> IO ByteStringhGetNonBlocking1768,69569
hGetLine :: Handle -> IO ByteStringhGetLine1637,64674
hGetContentsSizeHint :: HandlehGetContentsSizeHint1827,71900
hGetContents :: Handle -> IO ByteStringhGetContents1818,71635
hGet :: Handle -> Int -> IO ByteStringhGet1754,68984
groupBy :: (Word8 -> Word8 -> Bool) -> ByteString -> [ByteString]groupBy1055,41910
group :: ByteString -> [ByteString]group1047,41684
getLine :: IO ByteStringgetLine1632,64591
getContents :: IO ByteStringgetContents1849,72869
foldr1' :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8foldr1'573,24100
foldr1 :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8foldr1565,23818
foldr' :: (Word8 -> a -> a) -> a -> ByteString -> afoldr'534,22445
foldr :: (Word8 -> a -> a) -> a -> ByteString -> afoldr519,21794
foldl1' :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8foldl1'556,23422
foldl1 :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8foldl1548,23097
foldl' :: (a -> Word8 -> a) -> a -> ByteString -> afoldl'505,21146
foldl :: (a -> Word8 -> a) -> a -> ByteString -> afoldl489,20484
finiteBitSize = bitSizefiniteBitSize290,13561
findSubstrings :: ByteString -- ^ String to search for.findSubstrings1448,57091
findSubstring :: ByteString -- ^ String to search for.findSubstring1432,56513
findIndices :: (Word8 -> Bool) -> ByteString -> [Int]findIndices1179,47316
findIndexOrEnd :: (Word8 -> Bool) -> ByteString -> IntfindIndexOrEnd1894,74719
findIndexEnd :: (Word8 -> Bool) -> ByteString -> Maybe IntfindIndexEnd1167,46715
findIndex :: (Word8 -> Bool) -> ByteString -> Maybe IntfindIndex1152,46081
findFromEndUntil :: (Word8 -> Bool) -> ByteString -> IntfindFromEndUntil1925,75829
find :: (Word8 -> Bool) -> ByteString -> Maybe Word8find1246,49670
filter :: (Word8 -> Bool) -> ByteString -> ByteStringfilter1202,48159
errorEmptyList :: String -> aerrorEmptyList1909,75284
empty :: ByteStringempty297,13755
elemIndices :: Word8 -> ByteString -> [Int]elemIndices1126,44897
elemIndexEnd :: Word8 -> ByteString -> Maybe IntelemIndexEnd1119,44593
elemIndex :: Word8 -> ByteString -> Maybe IntelemIndex1104,43992
elem :: Word8 -> ByteString -> Boolelem1190,47751
dropWhileEnd :: (Word8 -> Bool) -> ByteString -> ByteStringdropWhileEnd858,34925
dropWhile :: (Word8 -> Bool) -> ByteString -> ByteStringdropWhile850,34670
drop  :: Int -> ByteString -> ByteStringdrop819,33506
count :: Word8 -> ByteString -> Intcount1144,45706
copy :: ByteString -> ByteStringcopy1624,64325
cons :: Word8 -> ByteString -> ByteStringcons371,15900
concatMap :: (Word8 -> ByteString) -> ByteString -> ByteStringconcatMap587,24569
concat :: [ByteString] -> ByteStringconcat583,24446
breakSubstring :: ByteString -- ^ String to search forbreakSubstring1377,54331
breakEnd :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)breakEnd911,36730
breakByte :: Word8 -> ByteString -> (ByteString, ByteString)breakByte901,36231
break :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)break872,35367
appendFile :: FilePath -> ByteString -> IO ()appendFile1886,74406
append :: ByteString -> ByteString -> ByteStringappend440,18570
any :: (Word8 -> Bool) -> ByteString -> Boolany594,24837
all :: (Word8 -> Bool) -> ByteString -> Boolall609,25434

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Builder.hs,1300
module Data.ByteString.BuilderBuilder176,6797
word8 :: Word8 -> Builderword8318,11411
word64LE :: Word64 -> Builderword64LE353,12402
word64BE :: Word64 -> Builderword64BE398,13650
word32LE :: Word32 -> Builderword32LE348,12265
word32BE :: Word32 -> Builderword32BE393,13516
word16LE :: Word16 -> Builderword16LE343,12128
word16BE :: Word16 -> Builderword16BE388,13382
toLazyByteString :: Builder -> L.ByteStringtoLazyByteString280,10073
stringUtf8 :: String -> BuilderstringUtf8450,15136
string8 :: String -> Builderstring8436,14719
string7 :: String -> Builderstring7422,14310
int8 :: Int8 -> Builderint8312,11294
int64LE :: Int64 -> Builderint64LE338,11995
int64BE :: Int64 -> Builderint64BE383,13252
int32LE :: Int32 -> Builderint32LE333,11863
int32BE :: Int32 -> Builderint32BE378,13123
int16LE :: Int16 -> Builderint16LE328,11731
int16BE :: Int16 -> Builderint16BE373,12994
hPutBuilder :: Handle -> Builder -> IO ()hPutBuilder301,10972
floatLE :: Float -> BuilderfloatLE358,12537
floatBE :: Float -> BuilderfloatBE403,13782
doubleLE :: Double -> BuilderdoubleLE363,12670
doubleBE :: Double -> BuilderdoubleBE408,13912
charUtf8 :: Char -> BuildercharUtf8445,15015
char8 :: Char -> Builderchar8431,14612
char7 :: Char -> Builderchar7417,14203

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Builder/ASCII.hs,2098
module Data.ByteString.Builder.ASCIIASCII15,430
    c_int_dec_padded9 :: CInt -> Ptr Word8 -> IO ()c_int_dec_padded9382,11408
    c_long_long_int_dec_padded18 :: CLLong -> Ptr Word8 -> IO ()c_long_long_int_dec_padded18385,11540
wordHex :: Word -> BuilderwordHex245,6606
wordDec :: Word -> BuilderwordDec196,5128
word8HexFixed :: Word8 -> Builderword8HexFixed274,7425
word8Hex :: Word8 -> Builderword8Hex225,5922
word8Dec :: Word8 -> Builderword8Dec176,4516
word64HexFixed :: Word64 -> Builderword64HexFixed289,7881
word64Hex :: Word64 -> Builderword64Hex240,6437
word64Dec :: Word64 -> Builderword64Dec191,4977
word32HexFixed :: Word32 -> Builderword32HexFixed284,7727
word32Hex :: Word32 -> Builderword32Hex235,6264
word32Dec :: Word32 -> Builderword32Dec186,4822
word16HexFixed :: Word16 -> Builderword16HexFixed279,7574
word16Hex :: Word16 -> Builderword16Hex230,6091
word16Dec :: Word16 -> Builderword16Dec181,4667
string7 :: String -> Builderstring7129,3267
nteger integerQuotRem#quotRemInteger92,2361
maxPow10 :: IntegermaxPow10331,9498
lazyByteStringHex :: L.ByteString -> BuilderlazyByteStringHex309,8631
integerDec :: Integer -> BuilderintegerDec335,9651
intDecPadded :: P.BoundedPrim IntintDecPadded388,11634
intDec :: Int -> BuilderintDec167,4331
int8HexFixed :: Int8 -> Builderint8HexFixed254,6819
int8Dec :: Int8 -> Builderint8Dec147,3739
int64HexFixed :: Int64 -> Builderint64HexFixed269,7257
int64Dec :: Int64 -> Builderint64Dec162,4185
int32HexFixed :: Int32 -> Builderint32HexFixed264,7109
int32Dec :: Int32 -> Builderint32Dec157,4035
int16HexFixed :: Int16 -> Builderint16HexFixed259,6962
int16Dec :: Int16 -> Builderint16Dec152,3885
floatHexFixed :: Float -> BuilderfloatHexFixed294,8038
floatDec :: Float -> BuilderfloatDec207,5403
doubleHexFixed :: Double -> BuilderdoubleHexFixed299,8194
doubleDec :: Double -> BuilderdoubleDec212,5545
byteStringHex :: S.ByteString -> BuilderbyteStringHex304,8400
,b) (# a,b #)PAIR323,9198
fine IS S#IS97,2445
efine HAS_INTEGER_CONSTR 1HAS_INTEGER_CONSTR91,2318

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Builder/Extra.hs,834
module Data.ByteString.Builder.ExtraExtra18,647
type BufferWriter = Ptr Word8 -> Int -> IO (Int, Next)BufferWriter95,2806
data Next =Next100,2962
     DoneDone102,3054
   | More   !Int          BufferWriterMore109,3451
   | Chunk  !S.ByteString BufferWriterChunk116,3868
wordHost :: Word -> BuilderwordHost184,6196
word64Host :: Word64 -> Builderword64Host199,6674
word32Host :: Word32 -> Builderword32Host194,6512
word16Host :: Word16 -> Builderword16Host189,6350
runBuilder :: Builder -> BufferWriterrunBuilder120,3973
intHost :: Int -> BuilderintHost159,5318
int64Host :: Int64 -> Builderint64Host174,5778
int32Host :: Int32 -> Builderint32Host169,5622
int16Host :: Int16 -> Builderint16Host164,5466
floatHost :: Float -> BuilderfloatHost205,6908
doubleHost :: Double -> BuilderdoubleHost210,7046

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Builder/Internal.hs,3969
module Data.ByteString.Builder.Internal (Internal55,2680
data BufferRange = BufferRange {-# UNPACK #-} !(Ptr Word8)  -- First byte of rangeBufferRange179,5530
data Buffer = Buffer {-# UNPACK #-} !(ForeignPtr Word8)Buffer184,5837
data ChunkIOStream a =ChunkIOStream230,7703
       Finished Buffer aFinished231,7726
     | Yield1 S.ByteString (IO (ChunkIOStream a))Yield1233,7822
type BuildStep a = BufferRange -> IO (BuildSignal a)BuildStep273,9474
data BuildSignal a =BuildSignal277,9672
    Done {-# UNPACK #-} !(Ptr Word8) aDone278,9693
  | BufferFullBufferFull279,9732
  | InsertChunkInsertChunk283,9842
newtype Builder = Builder (forall r. BuildStep r -> BuildStep r)Builder353,12356
newtype Put a = Put { unPut :: forall r. (a -> BuildStep r) -> BuildStep r }Put457,16701
newtype Put a = Put { unPut :: forall r. (a -> BuildStep r) -> BuildStep r }unPut457,16701
data AllocationStrategy = AllocationStrategyAllocationStrategy1006,37572
yield1 :: S.ByteString -> IO (ChunkIOStream a) -> IO (ChunkIOStream a)yield1239,8040
wrappedBytesCopyStep :: BufferRange  -- ^ Input 'BufferRange'.wrappedBytesCopyStep825,30432
untrimmedStrategy :: Int -- ^ Size of the first bufferuntrimmedStrategy1038,38930
trimmedChunkFromBuffer :: AllocationStrategy -> BuffertrimmedChunkFromBuffer211,6835
toLazyByteStringWithtoLazyByteStringWith1095,41588
shortByteStringCopyStep :: Sh.ShortByteString  -- ^ Input 'SH.ShortByteString'.shortByteStringCopyStep916,34058
shortByteString :: Sh.ShortByteString -> BuildershortByteString911,33833
sanitize :: Int -> Intsanitize1031,38632
safeStrategy :: Int  -- ^ Size of first buffersafeStrategy1055,39751
runPut :: Put a       -- ^ Put to runrunPut484,18093
runBuilderWith :: Builder      -- ^ 'Builder' to runrunBuilderWith388,14075
runBuilder :: Builder      -- ^ 'Builder' to runrunBuilder381,13770
putToLazyByteStringWithputToLazyByteStringWith790,29260
putToLazyByteStringputToLazyByteString773,28621
putBuilder :: Builder -> Put ()putBuilder528,19461
put :: (forall r. (a -> BuildStep r) -> BuildStep r)put463,17020
newBuffer :: Int -> IO BuffernewBuffer196,6228
maximalCopySize :: IntmaximalCopySize990,36993
lazyByteStringThreshold :: Int -> L.ByteString -> BuilderlazyByteStringThreshold942,34985
lazyByteStringInsert :: L.ByteString -> BuilderlazyByteStringInsert959,35658
lazyByteStringCopy :: L.ByteString -> BuilderlazyByteStringCopy951,35394
lazyByteString :: L.ByteString -> BuilderlazyByteString979,36429
insertChunk :: Ptr Word8insertChunk312,10869
hPut :: forall a. Handle -> Put a -> IO ahPut615,22109
fromPut :: Put () -> BuilderfromPut533,19612
flush :: Builderflush429,15379
finalBuildStep :: BuildStep ()finalBuildStep376,13607
fillWithBuildStepfillWithBuildStep324,11247
ensureFree :: Int -> BuilderensureFree816,30142
empty :: Builderempty396,14421
done :: Ptr Word8      -- ^ Next free byte in current 'BufferRange'done290,10057
customStrategycustomStrategy1014,37866
ciosUnitToLazyByteString :: AllocationStrategyciosUnitToLazyByteString246,8335
ciosToLazyByteString :: AllocationStrategyciosToLazyByteString256,8810
byteStringThreshold :: Int -> S.ByteString -> BuilderbyteStringThreshold858,31716
byteStringInsert :: S.ByteString -> BuilderbyteStringInsert901,33494
byteStringFromBuffer :: Buffer -> S.ByteStringbyteStringFromBuffer204,6534
byteStringCopyStep :: S.ByteString -> BuildStep a -> BuildStep abyteStringCopyStep877,32444
byteStringCopy :: S.ByteString -> BuilderbyteStringCopy873,32311
byteString :: S.ByteString -> BuilderbyteString969,36058
builder :: (forall r. BuildStep r -> BuildStep r)builder358,12547
buildStepToCIOSbuildStepToCIOS1112,42234
bufferSize :: Buffer -> IntbufferSize190,6033
bufferFull :: IntbufferFull297,10274
append :: Builder -> Builder -> Builderappend406,14860
ap_r :: Put a -> Put b -> Put bap_r502,18792
ap_l :: Put a -> Put b -> Put aap_l496,18583

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Builder/Prim.hs,1179
module Data.ByteString.Builder.Prim (Prim353,17363
primUnfoldrFixed :: FixedPrim b -> (a -> Maybe (b, a)) -> a -> BuilderprimUnfoldrFixed500,22374
primUnfoldrBounded :: BoundedPrim b -> (a -> Maybe (b, a)) -> a -> BuilderprimUnfoldrBounded610,26950
primMapListFixed :: FixedPrim a -> ([a] -> Builder)primMapListFixed495,22168
primMapListBounded :: BoundedPrim a -> [a] -> BuilderprimMapListBounded589,26208
primMapLazyByteStringFixed :: FixedPrim Word8 -> (L.ByteString -> Builder)primMapLazyByteStringFixed520,23350
primMapLazyByteStringBounded :: BoundedPrim Word8 -> L.ByteString -> BuilderprimMapLazyByteStringBounded670,29228
primMapByteStringFixed :: FixedPrim Word8 -> (S.ByteString -> Builder)primMapByteStringFixed514,23073
primMapByteStringBounded :: BoundedPrim Word8 -> S.ByteString -> BuilderprimMapByteStringBounded636,28003
primFixed :: FixedPrim a -> (a -> Builder)primFixed490,21994
primBounded :: BoundedPrim a -> (a -> Builder)primBounded549,24850
encodeCharUtf8 :: (Word8 -> a)                             -- ^ 1-byte UTF-8encodeCharUtf8716,30983
charUtf8 :: BoundedPrim CharcharUtf8691,29936
char8 :: FixedPrim Charchar8681,29642

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Builder/Prim/ASCII.hs,2277
module Data.ByteString.Builder.Prim.ASCIIASCII15,428
foreign import ccall unsafe "static _hs_bytestring_int_dec" c_int_decc_int_dec107,2749
foreign import ccall unsafe "static _hs_bytestring_long_long_int_dec" c_long_long_int_decc_long_long_int_dec110,2863
foreign import ccall unsafe "static _hs_bytestring_uint_dec" c_uint_decc_uint_dec149,3895
foreign import ccall unsafe "static _hs_bytestring_long_long_uint_dec" c_long_long_uint_decc_long_long_uint_dec152,4012
foreign import ccall unsafe "static _hs_bytestring_uint_hex" c_uint_hexc_uint_hex193,5248
foreign import ccall unsafe "static _hs_bytestring_long_long_uint_hex" c_long_long_uint_hexc_long_long_uint_hex196,5365
wordHex :: BoundedPrim WordwordHex226,6290
wordDec :: BoundedPrim WordwordDec181,4908
word8HexFixed :: FixedPrim Word8word8HexFixed237,6567
word8Hex :: BoundedPrim Word8word8Hex206,5758
word8Dec :: BoundedPrim Word8word8Dec161,4373
word64HexFixed :: FixedPrim Word64word64HexFixed256,7225
word64Hex :: BoundedPrim Word64word64Hex221,6130
word64Dec :: BoundedPrim Word64word64Dec176,4752
word32HexFixed :: FixedPrim Word32word32HexFixed250,6993
word32Hex :: BoundedPrim Word32word32Hex216,6005
word32Dec :: BoundedPrim Word32word32Dec171,4624
word16HexFixed :: FixedPrim Word16word16HexFixed243,6764
word16Hex :: BoundedPrim Word16word16Hex211,5880
word16Dec :: BoundedPrim Word16word16Dec166,4497
intDec :: BoundedPrim IntintDec140,3732
int8HexFixed :: FixedPrim Int8int8HexFixed263,7474
int8Dec :: BoundedPrim Int8int8Dec119,3216
int64HexFixed :: FixedPrim Int64int64HexFixed278,7921
int64Dec :: BoundedPrim Int64int64Dec135,3581
int32HexFixed :: FixedPrim Int32int32HexFixed273,7770
int32Dec :: BoundedPrim Int32int32Dec130,3458
int16HexFixed :: FixedPrim Int16int16HexFixed268,7620
int16Dec :: BoundedPrim Int16int16Dec124,3335
floatHexFixed :: FixedPrim FloatfloatHexFixed283,8077
encodeWordHex :: forall a. (Storable a, Integral a) => BoundedPrim aencodeWordHex200,5533
encodeWordDecimal :: Integral a => Int -> BoundedPrim aencodeWordDecimal156,4184
encodeIntDecimal :: Integral a => Int -> BoundedPrim aencodeIntDecimal114,3031
doubleHexFixed :: FixedPrim DoubledoubleHexFixed288,8241
char7 :: FixedPrim Charchar796,2449

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Builder/Prim/Binary.hs,1346
module Data.ByteString.Builder.Prim.Binary (Binary11,272
wordHost :: FixedPrim WordwordHost210,6584
word8 :: FixedPrim Word8word875,1287
word64LE :: FixedPrim Word64word64LE172,4808
word64Host :: FixedPrim Word64word64Host225,7025
word64BE :: FixedPrim Word64word64BE136,3214
word32LE :: FixedPrim Word32word32LE120,2659
word32Host :: FixedPrim Word32word32Host220,6876
word32BE :: FixedPrim Word32word32BE107,2194
word16LE :: FixedPrim Word16word16LE96,1868
word16Host :: FixedPrim Word16word16Host215,6727
word16BE :: FixedPrim Word16word16BE85,1539
intHost :: FixedPrim IntintHost282,8710
int8 :: FixedPrim Int8int8241,7502
int64LE :: FixedPrim Int64int64LE271,8293
int64Host :: FixedPrim Int64int64Host297,9136
int64BE :: FixedPrim Int64int64BE266,8158
int32LE :: FixedPrim Int32int32LE261,8026
int32Host :: FixedPrim Int32int32Host292,8992
int32BE :: FixedPrim Int32int32BE256,7891
int16LE :: FixedPrim Int16int16LE251,7759
int16Host :: FixedPrim Int16int16Host287,8848
int16BE :: FixedPrim Int16int16BE246,7624
floatLE :: FixedPrim FloatfloatLE310,9459
floatHost :: FixedPrim FloatfloatHost328,10002
floatBE :: FixedPrim FloatfloatBE305,9320
doubleLE :: FixedPrim DoubledoubleLE320,9742
doubleHost :: FixedPrim DoubledoubleHost333,10147
doubleBE :: FixedPrim DoubledoubleBE315,9597

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Builder/Prim/Internal.hs,2050
module Data.ByteString.Builder.Prim.Internal (Internal28,1129
class Contravariant f whereContravariant84,2084
    contramap :: (b -> a) -> f a -> f bcontramap85,2112
class Monoidal f whereMonoidal118,3123
    pair :: f a -> f b -> f (a, b)pair119,3146
type Size = IntSize145,3763
data FixedPrim a = FP {-# UNPACK #-} !Int (a -> Ptr Word8 -> IO ())FixedPrim154,4077
data FixedPrim a = FP {-# UNPACK #-} !Int (a -> Ptr Word8 -> IO ())FP154,4077
data BoundedPrim a = BP {-# UNPACK #-} !Int (a -> Ptr Word8 -> IO (Ptr Word8))BoundedPrim230,6991
data BoundedPrim a = BP {-# UNPACK #-} !Int (a -> Ptr Word8 -> IO (Ptr Word8))BP230,6991
toB :: FixedPrim a -> BoundedPrim atoB194,5418
storableToF :: forall a. Storable a => FixedPrim astorableToF203,5723
sizeBound :: BoundedPrim a -> IntsizeBound234,7186
size :: FixedPrim a -> Intsize161,4322
runF :: FixedPrim a -> a -> Ptr Word8 -> IO ()runF165,4396
runB :: BoundedPrim a -> a -> Ptr Word8 -> IO (Ptr Word8)runB246,7534
pairF :: FixedPrim a -> FixedPrim b -> FixedPrim (a, b)pairF175,4732
pairB :: BoundedPrim a -> BoundedPrim b -> BoundedPrim (a, b)pairB269,8348
liftFixedToBounded :: FixedPrim a -> BoundedPrim aliftFixedToBounded199,5611
fixedPrim :: Int -> (a -> Ptr Word8 -> IO ()) -> FixedPrim afixedPrim156,4146
emptyF :: FixedPrim aemptyF170,4564
emptyB :: BoundedPrim aemptyB264,8177
eitherB :: BoundedPrim a -> BoundedPrim b -> BoundedPrim (Either a b)eitherB285,9009
contramapF :: (b -> a) -> FixedPrim a -> FixedPrim bcontramapF189,5237
contramapB :: (b -> a) -> BoundedPrim a -> BoundedPrim bcontramapB259,7964
condB :: (a -> Bool) -> BoundedPrim a -> BoundedPrim a -> BoundedPrim acondB298,9524
boundedPrim :: Int -> (a -> Ptr Word8 -> IO (Ptr Word8)) -> BoundedPrim aboundedPrim238,7266
boudedPrim :: Int -> (a -> Ptr Word8 -> IO (Ptr Word8)) -> BoundedPrim aboudedPrim242,7416
#define CONLIKECONLIKE76,1809
(>*<) :: Monoidal f => f a -> f b -> f (a, b)>*<140,3648
(>$<) :: Contravariant f => (b -> a) -> f a -> f b>$<106,2855

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Builder/Prim/Internal/Base16.hs,541
module Data.ByteString.Builder.Prim.Internal.Base16 (Base1621,616
newtype EncodingTable = EncodingTable (ForeignPtr Word8)EncodingTable48,1303
unsafeIndex :: EncodingTable -> Int -> IO Word8unsafeIndex53,1473
tableFromList :: [Word8] -> EncodingTabletableFromList50,1361
lowerTable :: EncodingTablelowerTable71,2114
lowerAlphabet :: EncodingTablelowerAlphabet64,1867
encode8_as_16h :: EncodingTable -> Word8 -> IO Word16encode8_as_16h78,2446
base16EncodingTable :: EncodingTable -> IO EncodingTablebase16EncodingTable56,1600

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Builder/Prim/Internal/Floating.hs,254
module Data.ByteString.Builder.Prim.Internal.FloatingFloating17,391
encodeFloatViaWord32F :: FixedPrim Word32 -> FixedPrim FloatencodeFloatViaWord32F38,954
encodeDoubleViaWord64F :: FixedPrim Word64 -> FixedPrim DoubleencodeDoubleViaWord64F51,1446

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Builder/Prim/Internal/UncheckedShifts.hs,392
module Data.ByteString.Builder.Prim.Internal.UncheckedShifts (UncheckedShifts25,617
shiftr_w64 :: Word64 -> Int -> Word64shiftr_w6462,1364
shiftr_w32 :: Word32 -> Int -> Word32shiftr_w3258,1267
shiftr_w16 :: Word16 -> Int -> Word16shiftr_w1654,1170
shiftr_w :: Word -> Int -> Wordshiftr_w66,1457
caseWordSize_32_64 :: a -- Value to use for 32-bit 'Word'scaseWordSize_32_6494,2260

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Char8.hs,5065
module Data.ByteString.Char8 (Char845,1434
zipWith :: (Char -> Char -> a) -> ByteString -> ByteString -> [a]zipWith788,31602
zip :: ByteString -> ByteString -> [(Char,Char)]zip779,31183
words :: ByteString -> [ByteString]words919,36344
unzip :: [(Char,Char)] -> (ByteString,ByteString)unzip793,31838
unwords :: [ByteString] -> ByteStringunwords924,36539
unsnoc :: ByteString -> Maybe (ByteString, Char)unsnoc319,14679
unsafeHead :: ByteString -> CharunsafeHead801,32203
unpack :: ByteString -> [Char]unpack290,13782
unlines :: [ByteString] -> ByteStringunlines912,36060
unfoldrN :: Int -> (a -> Maybe (Char, a)) -> a -> (ByteString, Maybe a)unfoldrN491,21670
unfoldr :: (a -> Maybe (Char, a)) -> a -> ByteStringunfoldr479,21169
uncons :: ByteString -> Maybe (Char, ByteString)uncons311,14389
takeWhileEnd :: (Char -> Bool) -> ByteString -> ByteStringtakeWhileEnd508,22299
takeWhile :: (Char -> Bool) -> ByteString -> ByteStringtakeWhile499,21999
strip :: ByteString -> ByteStringstrip856,34087
splitWith :: (Char -> Bool) -> ByteString -> [ByteString]splitWith621,25818
split :: Char -> ByteString -> [ByteString]split610,25396
spanEnd :: (Char -> Bool) -> ByteString -> (ByteString, ByteString)spanEnd583,24521
span :: (Char -> Bool) -> ByteString -> (ByteString, ByteString)span568,24137
snoc :: ByteString -> Char -> ByteStringsnoc305,14211
singleton :: Char -> ByteStringsingleton277,13434
scanr1 :: (Char -> Char -> Char) -> ByteString -> ByteStringscanr1456,20224
scanr :: (Char -> Char -> Char) -> Char -> ByteString -> ByteStringscanr452,20018
scanl1 :: (Char -> Char -> Char) -> ByteString -> ByteStringscanl1448,19855
scanl :: (Char -> Char -> Char) -> Char -> ByteString -> ByteStringscanl442,19594
replicate :: Int -> Char -> ByteStringreplicate465,20558
readInteger :: ByteString -> Maybe (Integer, ByteString)readInteger963,38143
readInt :: ByteString -> Maybe (Int, ByteString)readInt936,37023
putStrLn :: ByteString -> IO ()putStrLn1014,40272
partition :: (Char -> Bool) -> ByteString -> (ByteString, ByteString)partition713,28970
pack :: String -> ByteStringpack285,13664
notElem :: Char -> ByteString -> BoolnotElem701,28604
minimum :: ByteString -> Charminimum416,18382
maximum :: ByteString -> Charmaximum411,18241
mapAccumR :: (acc -> Char -> (acc, Char)) -> acc -> ByteString -> (acc, ByteString)mapAccumR431,19186
mapAccumL :: (acc -> Char -> (acc, Char)) -> acc -> ByteString -> (acc, ByteString)mapAccumL424,18735
map :: (Char -> Char) -> ByteString -> ByteStringmap336,15263
lines :: ByteString -> [ByteString]lines885,35114
last :: ByteString -> Charlast331,15103
intersperse :: Char -> ByteString -> ByteStringintersperse343,15568
index :: ByteString -> Int -> Charindex642,26510
head :: ByteString -> Charhead326,14953
hPutStrLn :: Handle -> ByteString -> IO ()hPutStrLn1008,40024
groupBy :: (Char -> Char -> Bool) -> ByteString -> [ByteString]groupBy638,26325
foldr1' :: (Char -> Char -> Char) -> ByteString -> Charfoldr1'389,17411
foldr1 :: (Char -> Char -> Char) -> ByteString -> Charfoldr1384,17235
foldr' :: (Char -> a -> a) -> a -> ByteString -> afoldr'367,16532
foldr :: (Char -> a -> a) -> a -> ByteString -> afoldr362,16377
foldl1' :: (Char -> Char -> Char) -> ByteString -> Charfoldl1'378,16957
foldl1 :: (Char -> Char -> Char) -> ByteString -> Charfoldl1373,16779
foldl' :: (a -> Char -> a) -> a -> ByteString -> afoldl'355,16052
foldl :: (a -> Char -> a) -> a -> ByteString -> afoldl350,15880
firstspace :: Ptr Word8 -> Int -> Int -> IO Intfirstspace828,33031
firstnonspace :: Ptr Word8 -> Int -> Int -> IO Intfirstnonspace847,33766
findIndices :: (Char -> Bool) -> ByteString -> [Int]findIndices679,27982
findIndex :: (Char -> Bool) -> ByteString -> Maybe IntfindIndex673,27722
find :: (Char -> Bool) -> ByteString -> Maybe Charfind742,29899
filter :: (Char -> Bool) -> ByteString -> ByteStringfilter708,28842
elemIndices :: Char -> ByteString -> [Int]elemIndices667,27460
elemIndexEnd :: Char -> ByteString -> Maybe IntelemIndexEnd661,27195
elemIndex :: Char -> ByteString -> Maybe IntelemIndex649,26792
elem :: Char -> ByteString -> Boolelem696,28474
dropWhileEnd :: (Char -> Bool) -> ByteString -> ByteStringdropWhileEnd526,22844
dropWhile :: (Char -> Bool) -> ByteString -> ByteStringdropWhile513,22508
dropSpace :: ByteString -> ByteStringdropSpace841,33514
count :: Char -> ByteString -> Intcount691,28310
cons :: Char -> ByteString -> ByteStringcons299,14018
concatMap :: (Char -> ByteString) -> ByteString -> ByteStringconcatMap394,17627
breakSpace :: ByteString -> (ByteString,ByteString)breakSpace818,32655
breakEnd :: (Char -> Bool) -> ByteString -> (ByteString, ByteString)breakEnd590,24755
breakChar :: Char -> ByteString -> (ByteString, ByteString)breakChar560,23814
break :: (Char -> Bool) -> ByteString -> (ByteString, ByteString)break531,23030
any :: (Char -> Bool) -> ByteString -> Boolany400,17877
all :: (Char -> Bool) -> ByteString -> Boolall406,18092

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Internal.hs,4195
module Data.ByteString.Internal (Internal27,1032
data ByteString = PS {-# UNPACK #-} !(ForeignPtr Word8) -- payloadByteString167,6338
data ByteString = PS {-# UNPACK #-} !(ForeignPtr Word8) -- payloadPS167,6338
foreign import ccall unsafe "string.h strlen" c_strlenc_strlen642,24355
foreign import ccall unsafe "static stdlib.h &free" c_free_finalizerc_free_finalizer645,24438
foreign import ccall unsafe "string.h memchr" c_memchrc_memchr648,24543
foreign import ccall unsafe "string.h memcmp" c_memcmpc_memcmp654,24753
foreign import ccall unsafe "string.h memcpy" c_memcpyc_memcpy660,24956
foreign import ccall unsafe "string.h memset" c_memsetc_memset675,25415
foreign import ccall unsafe "static fpstring.h fps_reverse" c_reversec_reverse686,25724
foreign import ccall unsafe "static fpstring.h fps_intersperse" c_interspersec_intersperse689,25844
foreign import ccall unsafe "static fpstring.h fps_maximum" c_maximumc_maximum692,25981
foreign import ccall unsafe "static fpstring.h fps_minimum" c_minimumc_minimum695,26091
foreign import ccall unsafe "static fpstring.h fps_count" c_countc_count698,26201
w2c :: Word8 -> Charw2c563,21515
unsafeWithForeignPtr :: ForeignPtr a -> (Ptr a -> IO b) -> IO bunsafeWithForeignPtr150,5821
unsafePackLenChars :: Int -> [Char] -> ByteStringunsafePackLenChars244,8501
unsafePackLenBytes :: Int -> [Word8] -> ByteStringunsafePackLenBytes237,8292
unsafePackAddress :: Addr# -> IO ByteStringunsafePackAddress273,9784
unsafeCreateUptoN' :: Int -> (Ptr Word8 -> IO (Int, a)) -> (ByteString, a)unsafeCreateUptoN'402,14987
unsafeCreateUptoN :: Int -> (Ptr Word8 -> IO Int) -> ByteStringunsafeCreateUptoN397,14802
unsafeCreate :: Int -> (Ptr Word8 -> IO ()) -> ByteStringunsafeCreate389,14393
unpackChars :: ByteString -> [Char]unpackChars314,11239
unpackBytes :: ByteString -> [Word8]unpackBytes311,11156
unpackAppendCharsStrict :: ByteString -> [Char] -> [Char]unpackAppendCharsStrict350,12847
unpackAppendCharsLazy :: ByteString -> [Char] -> [Char]unpackAppendCharsLazy328,11844
unpackAppendBytesStrict :: ByteString -> [Word8] -> [Word8]unpackAppendBytesStrict340,12433
unpackAppendBytesLazy :: ByteString -> [Word8] -> [Word8]unpackAppendBytesLazy317,11321
toForeignPtr :: ByteString -> (ForeignPtr Word8, Int, Int) -- ^ (ptr, offset, length)toForeignPtr383,14121
packUptoLenChars :: Int -> [Char] -> (ByteString, [Char])packUptoLenChars292,10328
packUptoLenBytes :: Int -> [Word8] -> (ByteString, [Word8])packUptoLenBytes284,10040
packChars :: [Char] -> ByteStringpackChars227,8026
packBytes :: [Word8] -> ByteStringpackBytes224,7936
overflowError :: String -> aoverflowError599,22471
nullForeignPtr :: ForeignPtr Word8nullForeignPtr363,13396
memset :: Ptr Word8 -> Word8 -> CSize -> IO (Ptr Word8)memset678,25523
memcpy :: Ptr Word8 -> Ptr Word8 -> Int -> IO ()memcpy663,25069
memcmp :: Ptr Word8 -> Ptr Word8 -> Int -> IO CIntmemcmp657,24859
memchr :: Ptr Word8 -> Word8 -> CSize -> IO (Ptr Word8)memchr651,24651
mallocByteString :: Int -> IO (ForeignPtr a)mallocByteString466,17472
isSpaceWord8 :: Word8 -> BoolisSpaceWord8576,21939
isSpaceChar8 :: Char -> BoolisSpaceChar8588,22260
inlinePerformIO :: IO a -> ainlinePerformIO632,23841
fromForeignPtr :: ForeignPtr Word8fromForeignPtr375,13883
eq :: ByteString -> ByteString -> Booleq473,17722
createUptoN' :: Int -> (Ptr Word8 -> IO (Int, a)) -> IO (ByteString, a)createUptoN'428,15959
createUptoN :: Int -> (Ptr Word8 -> IO Int) -> IO ByteStringcreateUptoN417,15625
createAndTrim' :: Int -> (Ptr Word8 -> IO (Int, Int, a)) -> IO (ByteString, a)createAndTrim'453,16959
createAndTrim :: Int -> (Ptr Word8 -> IO Int) -> IO ByteStringcreateAndTrim443,16637
create :: Int -> (Ptr Word8 -> IO ()) -> IO ByteStringcreate407,15240
concat :: [ByteString] -> ByteStringconcat501,18984
compareBytes :: ByteString -> ByteString -> OrderingcompareBytes481,18030
checkedAdd :: String -> Int -> Int -> IntcheckedAdd553,21212
c2w :: Char -> Word8c2w570,21768
append :: ByteString -> ByteString -> ByteStringappend492,18535
accursedUnutterablePerformIO :: IO a -> aaccursedUnutterablePerformIO629,23723

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Lazy.hs,6726
module Data.ByteString.Lazy (Lazy52,2057
zipWith :: (Word8 -> Word8 -> a) -> ByteString -> ByteString -> [a]zipWith1119,46516
zip :: ByteString -> ByteString -> [(Word8,Word8)]zip1112,46212
writeFile :: FilePath -> ByteString -> IO ()writeFile1286,52962
unzip :: [(Word8,Word8)] -> (ByteString,ByteString)unzip1137,47422
unsnoc :: ByteString -> Maybe (ByteString, Word8)unsnoc429,18965
unpack :: ByteString -> [Word8]unpack263,12692
unfoldr :: (a -> Maybe (Word8, a)) -> a -> ByteStringunfoldr662,28197
uncons :: ByteString -> Maybe (Word8, ByteString)uncons392,17596
transpose :: [ByteString] -> [ByteString]transpose475,20708
toStrict :: ByteString -> S.ByteStringtoStrict285,13537
toChunks :: ByteString -> [P.ByteString]toChunks271,12979
takeWhile :: (Word8 -> Bool) -> ByteString -> ByteStringtakeWhile715,30348
take :: Int64 -> ByteString -> ByteStringtake676,28734
tails :: ByteString -> [ByteString]tails1152,48032
tail :: ByteString -> ByteStringtail401,17904
stripSuffix :: ByteString -> ByteString -> Maybe ByteStringstripSuffix1101,45724
stripPrefix :: ByteString -> ByteString -> Maybe ByteStringstripPrefix1077,44723
splitWith :: (Word8 -> Bool) -> ByteString -> [ByteString]splitWith798,33669
splitAt :: Int64 -> ByteString -> (ByteString, ByteString)splitAt699,29655
split :: Word8 -> ByteString -> [ByteString]split824,34726
span :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)span787,33184
snoc :: ByteString -> Word8 -> ByteStringsnoc380,17190
singleton :: Word8 -> ByteStringsingleton254,12438
scanl :: (Word8 -> Word8 -> Word8) -> Word8 -> ByteString -> ByteStringscanl610,26245
reverse :: ByteString -> ByteStringreverse454,19744
revNonEmptyChunks :: [P.ByteString] -> ByteStringrevNonEmptyChunks1364,55828
revChunks :: [P.ByteString] -> ByteStringrevChunks1368,55999
replicate :: Int64 -> Word8 -> ByteStringreplicate636,27085
repeat :: Word8 -> ByteStringrepeat630,26886
readFile :: FilePath -> IO ByteStringreadFile1278,52711
putStrLn :: ByteString -> IO ()putStrLn1334,54666
putStr :: ByteString -> IO ()putStr1329,54551
partition :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)partition1050,43647
pack :: [Word8] -> ByteStringpack259,12592
null :: ByteString -> Boolnull342,15927
notElem :: Word8 -> ByteString -> BoolnotElem997,41954
moduleError :: String -> String -> amoduleError1358,55623
modifyFile :: IOMode -> FilePath -> ByteString -> IO ()modifyFile1281,52806
minimum :: ByteString -> Word8minimum569,24550
maximum :: ByteString -> Word8maximum562,24260
mapAccumR :: (acc -> Word8 -> (acc, Word8)) -> acc -> ByteString -> (acc, ByteString)mapAccumR591,25610
mapAccumL :: (acc -> Word8 -> (acc, Word8)) -> acc -> ByteString -> (acc, ByteString)mapAccumL579,25053
map :: (Word8 -> Word8) -> ByteString -> ByteStringmap443,19428
length :: ByteString -> Int64length348,16082
last :: ByteString -> Word8last410,18189
iterate :: (Word8 -> Word8) -> Word8 -> ByteStringiterate624,26685
isSuffixOf :: ByteString -> ByteString -> BoolisSuffixOf1094,45426
isPrefixOf :: ByteString -> ByteString -> BoolisPrefixOf1062,44102
intersperse :: Word8 -> ByteString -> ByteStringintersperse463,20123
intercalate :: ByteString -> [ByteString] -> ByteStringintercalate882,37226
interact :: (ByteString -> ByteString) -> IO ()interact1346,55190
inits :: ByteString -> [ByteString]inits1145,47724
init :: ByteString -> ByteStringinit418,18532
index :: ByteString -> Int64 -> Word8index889,37492
illegalBufferSize :: Handle -> String -> Int -> IO aillegalBufferSize1240,51223
head :: ByteString -> Word8head385,17380
hPutStr :: Handle -> ByteString -> IO ()hPutStr1325,54460
hPutNonBlocking :: Handle -> ByteString -> IO ByteStringhPutNonBlocking1314,54075
hPut :: Handle -> ByteString -> IO ()hPut1303,53537
hGetNonBlockingN :: Int -> Handle -> Int -> IO ByteStringhGetNonBlockingN1227,50799
hGetNonBlocking :: Handle -> Int -> IO ByteStringhGetNonBlocking1272,52492
hGetN :: Int -> Handle -> Int -> IO ByteStringhGetN1210,50208
hGetContentsN :: Int -> Handle -> IO ByteStringhGetContentsN1195,49728
hGetContents :: Handle -> IO ByteStringhGetContents1256,51851
hGet :: Handle -> Int -> IO ByteStringhGet1261,52020
groupBy :: (Word8 -> Word8 -> Bool) -> ByteString -> [ByteString]groupBy862,36314
group :: ByteString -> [ByteString]group843,35561
getContents :: IO ByteStringgetContents1296,53238
fromStrict :: P.ByteString -> ByteStringfromStrict275,13124
fromChunks :: [P.ByteString] -> ByteStringfromChunks267,12821
foldr1 :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8foldr1519,22615
foldr :: (Word8 -> a -> a) -> a -> ByteString -> afoldr502,21797
foldl1' :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8foldl1'513,22295
foldl1 :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8foldl1508,22046
foldl' :: (a -> Word8 -> a) -> a -> ByteString -> afoldl'493,21418
foldl :: (a -> Word8 -> a) -> a -> ByteString -> afoldl486,21186
findIndices :: (Word8 -> Bool) -> ByteString -> [Int64]findIndices983,41345
findIndexOrEnd :: (Word8 -> Bool) -> P.ByteString -> IntfindIndexOrEnd1373,56223
findIndexEnd :: (Word8 -> Bool) -> ByteString -> Maybe Int64findIndexEnd957,40366
findIndex :: (Word8 -> Bool) -> ByteString -> Maybe Int64findIndex943,39830
find :: (Word8 -> Bool) -> ByteString -> Maybe Word8find973,40958
filter :: (Word8 -> Bool) -> ByteString -> ByteStringfilter1003,42171
errorEmptyList :: String -> aerrorEmptyList1354,55504
empty :: ByteStringempty249,12332
elemIndices :: Word8 -> ByteString -> [Int64]elemIndices926,39083
elemIndexEnd :: Word8 -> ByteString -> Maybe Int64elemIndexEnd919,38777
elemIndex :: Word8 -> ByteString -> Maybe Int64elemIndex902,38140
elem :: Word8 -> ByteString -> Boolelem993,41806
dropWhile :: (Word8 -> Bool) -> ByteString -> ByteStringdropWhile725,30794
drop  :: Int64 -> ByteString -> ByteStringdrop688,29228
cycle :: ByteString -> ByteStringcycle652,27703
count :: Word8 -> ByteString -> Int64count937,39560
copy :: ByteString -> ByteStringcopy1166,48632
cons' :: Word8 -> ByteString -> ByteStringcons'374,16938
cons :: Word8 -> ByteString -> ByteStringcons357,16328
concatMap :: (Word8 -> ByteString) -> ByteString -> ByteStringconcatMap533,23117
concat :: [ByteString] -> ByteStringconcat529,22994
break :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)break734,31164
appendFile :: FilePath -> ByteString -> IO ()appendFile1291,53082
append :: ByteString -> ByteString -> ByteStringappend434,19150
any :: (Word8 -> Bool) -> ByteString -> Boolany549,23777
all :: (Word8 -> Bool) -> ByteString -> Boolall556,24052

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Lazy/Builder.hs,50
module Data.ByteString.Lazy.BuilderBuilder6,165

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Lazy/Builder/ASCII.hs,206
module Data.ByteString.Lazy.Builder.ASCIIASCII9,267
lazyByteStringHexFixed :: L.ByteString -> BuilderlazyByteStringHexFixed24,724
byteStringHexFixed :: S.ByteString -> BuilderbyteStringHexFixed20,576

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Lazy/Builder/Extras.hs,56
module Data.ByteString.Lazy.Builder.ExtrasExtras6,165

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Lazy/Char8.hs,3907
module Data.ByteString.Lazy.Char8 (Char833,1087
zipWith :: (Char -> Char -> a) -> ByteString -> ByteString -> [a]zipWith660,26631
zip :: ByteString -> ByteString -> [(Char,Char)]zip651,26236
words :: ByteString -> [ByteString]words753,30054
unwords :: [ByteString] -> ByteStringunwords758,30252
unsnoc :: ByteString -> Maybe (ByteString, Char)unsnoc292,13027
unpack :: ByteString -> [Char]unpack243,11445
unlines :: [ByteString] -> ByteStringunlines743,29732
unfoldr :: (a -> Maybe (Char, a)) -> a -> ByteStringunfoldr434,18756
uncons :: ByteString -> Maybe (Char, ByteString)uncons284,12734
takeWhile :: (Char -> Bool) -> ByteString -> ByteStringtakeWhile444,19211
splitWith :: (Char -> Bool) -> ByteString -> [ByteString]splitWith517,21578
split :: Char -> ByteString -> [ByteString]split506,21156
span :: (Char -> Bool) -> ByteString -> (ByteString, ByteString)span460,19820
snoc :: ByteString -> Char -> ByteStringsnoc273,12408
singleton :: Char -> ByteStringsingleton234,11207
scanl :: (Char -> Char -> Char) -> Char -> ByteString -> ByteStringscanl388,16689
revChunks :: [S.ByteString] -> ByteStringrevChunks867,34636
replicate :: Int64 -> Char -> ByteStringreplicate425,18309
repeat :: Char -> ByteStringrepeat419,18152
readInteger :: ByteString -> Maybe (Integer, ByteString)readInteger803,32112
readInt :: ByteString -> Maybe (Int, ByteString)readInt769,30638
putStrLn :: ByteString -> IO ()putStrLn860,34413
partition :: (Char -> Bool) -> ByteString -> (ByteString, ByteString)partition582,23999
pack :: [Char] -> ByteStringpack239,11347
notElem :: Char -> ByteString -> BoolnotElem570,23633
minimum :: ByteString -> Charminimum373,16250
maximum :: ByteString -> Charmaximum368,16109
mapAccumR :: (acc -> Char -> (acc, Char)) -> acc -> ByteString -> (acc, ByteString)mapAccumR402,17541
mapAccumL :: (acc -> Char -> (acc, Char)) -> acc -> ByteString -> (acc, ByteString)mapAccumL395,17099
map :: (Char -> Char) -> ByteString -> ByteStringmap304,13463
lines :: ByteString -> [ByteString]lines671,27043
last :: ByteString -> Charlast299,13303
iterate :: (Char -> Char) -> Char -> ByteStringiterate413,17971
intersperse :: Char -> ByteString -> ByteStringintersperse311,13768
index :: ByteString -> Int64 -> Charindex526,21953
head :: ByteString -> Charhead278,12574
hPutStrLn :: Handle -> ByteString -> IO ()hPutStrLn855,34250
groupBy :: (Char -> Char -> Bool) -> ByteString -> [ByteString]groupBy522,21768
foldr1 :: (Char -> Char -> Char) -> ByteString -> Charfoldr1346,15283
foldr :: (Char -> a -> a) -> a -> ByteString -> afoldr330,14577
foldl1' :: (Char -> Char -> Char) -> ByteString -> Charfoldl1'341,15028
foldl1 :: (Char -> Char -> Char) -> ByteString -> Charfoldl1336,14820
foldl' :: (a -> Char -> a) -> a -> ByteString -> afoldl'323,14252
foldl :: (a -> Char -> a) -> a -> ByteString -> afoldl318,14080
findIndices :: (Char -> Bool) -> ByteString -> [Int64]findIndices551,23018
findIndex :: (Char -> Bool) -> ByteString -> Maybe Int64findIndex545,22756
find :: (Char -> Bool) -> ByteString -> Maybe Charfind614,24952
filter :: (Char -> Bool) -> ByteString -> ByteStringfilter577,23871
elemIndices :: Char -> ByteString -> [Int64]elemIndices539,22492
elemIndex :: Char -> ByteString -> Maybe Int64elemIndex533,22237
elem :: Char -> ByteString -> Boolelem565,23506
dropWhile :: (Char -> Bool) -> ByteString -> ByteStringdropWhile449,19408
count :: Char -> ByteString -> Int64count560,23340
cons' :: Char -> ByteString -> ByteStringcons'267,12211
cons :: Char -> ByteString -> ByteStringcons250,11619
concatMap :: (Char -> ByteString) -> ByteString -> ByteStringconcatMap351,15495
break :: (Char -> Bool) -> ByteString -> (ByteString, ByteString)break454,19582
any :: (Char -> Bool) -> ByteString -> Boolany357,15745
all :: (Char -> Bool) -> ByteString -> Boolall363,15960

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Lazy/Internal.hs,1259
module Data.ByteString.Lazy.Internal (Internal24,788
data ByteString = Empty | Chunk {-# UNPACK #-} !S.ByteString ByteStringByteString83,2452
data ByteString = Empty | Chunk {-# UNPACK #-} !S.ByteString ByteStringEmpty83,2452
data ByteString = Empty | Chunk {-# UNPACK #-} !S.ByteString ByteStringChunk83,2452
unpackChars :: ByteString -> [Char]unpackChars159,4643
unpackBytes :: ByteString -> [Word8]unpackBytes155,4505
smallChunkSize :: IntsmallChunkSize224,7245
packChars :: [Char] -> ByteStringpackChars148,4266
packBytes :: [Word8] -> ByteStringpackBytes140,4022
invariant :: ByteString -> Boolinvariant169,5042
foldrChunks :: (S.ByteString -> a -> a) -> a -> ByteString -> afoldrChunks190,5882
foldlChunks :: (a -> S.ByteString -> a) -> a -> ByteString -> afoldlChunks198,6164
eq :: ByteString -> ByteString -> Booleq235,7594
defaultChunkSize :: IntdefaultChunkSize219,7070
concat :: [ByteString] -> ByteStringconcat264,8642
cmp :: ByteString -> ByteString -> Orderingcmp245,7988
chunkOverhead :: IntchunkOverhead229,7400
chunk :: S.ByteString -> ByteString -> ByteStringchunk184,5644
checkInvariant :: ByteString -> ByteStringcheckInvariant174,5229
append :: ByteString -> ByteString -> ByteStringappend261,8553

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Short.hs,44
module Data.ByteString.Short (Short29,855

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Short/Internal.hs,4920
module Data.ByteString.Short.Internal (Internal22,610
data ShortByteString = SBS ByteArray#ShortByteString126,3855
data ShortByteString = SBS ByteArray#SBS126,3855
data BA    = BA# ByteArray#BA465,15047
data BA    = BA# ByteArray#BA#465,15047
data MBA s = MBA# (MutableByteArray# s)MBA466,15075
data MBA s = MBA# (MutableByteArray# s)MBA#466,15075
  c_memcmp_ByteArray :: ByteArray# -> ByteArray# -> CSize -> IO CIntc_memcmp_ByteArray525,17254
  memcpy_AddrToByteArray :: MutableByteArray# s -> CLong -> Addr# -> CLong -> CSize -> IO ()memcpy_AddrToByteArray570,18778
  memcpy_AddrToByteArray0 :: MutableByteArray# s -> Addr# -> CSize -> IO ()memcpy_AddrToByteArray0573,18918
  memcpy_ByteArrayToAddr :: Addr# -> CLong -> ByteArray# -> CLong -> CSize -> IO ()memcpy_ByteArrayToAddr591,19595
  memcpy_ByteArrayToAddr0 :: Addr# -> ByteArray# -> CSize -> IO ()memcpy_ByteArrayToAddr0594,19726
  memcpy_ByteArray :: MutableByteArray# s -> CLongmemcpy_ByteArray618,20385
writeWord8Array :: MBA s -> Int -> Word8 -> ST s ()writeWord8Array496,16052
writeCharArray :: MBA s -> Int -> Char -> ST s ()writeCharArray491,15874
useAsCStringLen :: ShortByteString -> (CStringLen -> IO a) -> IO auseAsCStringLen663,22144
useAsCString :: ShortByteString -> (CString -> IO a) -> IO auseAsCString650,21638
unsafeIndex :: ShortByteString -> Int -> Word8unsafeIndex218,6707
unsafeFreezeByteArray :: MBA s -> ST s BAunsafeFreezeByteArray486,15692
unpackChars :: ShortByteString -> [Char]unpackChars336,10514
unpackBytes :: ShortByteString -> [Word8]unpackBytes339,10601
unpackAppendCharsStrict :: ShortByteString -> Int -> Int -> [Char] -> [Char]unpackAppendCharsStrict371,11879
unpackAppendCharsLazy :: ShortByteString -> [Char] -> [Char]unpackAppendCharsLazy346,10901
unpackAppendBytesStrict :: ShortByteString -> Int -> Int -> [Word8] -> [Word8]unpackAppendBytesStrict379,12202
unpackAppendBytesLazy :: ShortByteString -> [Word8] -> [Word8]unpackAppendBytesLazy356,11246
unpack :: ShortByteString -> [Word8]unpack296,9204
unIO_ :: IO () -> State# RealWorld -> State# RealWorldunIO_597,19795
toShortIO :: ByteString -> IO ShortByteStringtoShortIO252,7722
toShort :: ByteString -> ShortByteStringtoShort249,7628
packLenChars :: Int -> [Char] -> ShortByteStringpackLenChars305,9440
packLenBytes :: Int -> [Word8] -> ShortByteStringpackLenBytes315,9715
packChars :: [Char] -> ShortByteStringpackChars299,9263
packCStringLen :: CStringLen -> IO ShortByteStringpackCStringLen639,21170
packCString :: CString -> IO ShortByteStringpackCString628,20765
packBytes :: [Word8] -> ShortByteStringpackBytes302,9351
pack :: [Word8] -> ShortByteStringpack292,9097
null :: ShortByteString -> Boolnull209,6421
newPinnedByteArray :: Int -> ST s (MBA s)newPinnedByteArray480,15508
newByteArray :: Int -> ST s (MBA s)newByteArray474,15321
moduleErrorMsg :: String -> String -> StringmoduleErrorMsg677,22594
moduleErrorIO :: String -> String -> IO amoduleErrorIO673,22451
memcmp_ByteArray :: BA -> BA -> Int -> IO CIntmemcmp_ByteArray520,17065
length :: ShortByteString -> Intlength201,6217
indexWord8Array :: BA -> Int -> Word8indexWord8Array471,15216
indexError :: ShortByteString -> Int -> aindexError221,6800
indexCharArray :: BA -> Int -> CharindexCharArray468,15116
index :: ShortByteString -> Int -> Word8index213,6556
fromShortIO :: ShortByteString -> IO ByteStringfromShortIO267,8216
fromShort :: ShortByteString -> ByteStringfromShort264,8114
equateBytes :: ShortByteString -> ShortByteString -> BoolequateBytes391,12634
empty :: ShortByteStringempty197,6109
csize :: Int# -> CSizecsize603,19954
createFromPtr :: Ptr a   -- ^ source datacreateFromPtr451,14634
create :: Int -> (forall s. MBA s -> ST s ()) -> ShortByteStringcreate233,7149
copyToPtr :: ShortByteString  -- ^ source datacopyToPtr442,14317
copyByteArrayToAddr0 :: ByteArray# -> Addr# -> Int#copyByteArrayToAddr0579,19115
copyByteArrayToAddr# :: ByteArray# -> Int#copyByteArrayToAddr#536,17603
copyByteArrayToAddr :: BA -> Int -> Ptr a -> Int -> ST RealWorld ()copyByteArrayToAddr506,16488
copyByteArray#       :: ByteArray# -> Int#copyByteArray#541,17767
copyByteArray :: BA -> Int -> MBA s -> Int -> Int -> ST s ()copyByteArray511,16729
copyAddrToByteArray0 :: Addr# -> MutableByteArray# s -> Int#copyAddrToByteArray0558,18289
copyAddrToByteArray# :: Addr#copyAddrToByteArray#531,17422
copyAddrToByteArray :: Ptr a -> MBA RealWorld -> Int -> Int -> ST RealWorld ()copyAddrToByteArray501,16235
concat :: [ShortByteString] -> ShortByteStringconcat424,13723
compareBytes :: ShortByteString -> ShortByteString -> OrderingcompareBytes399,12899
clong :: Int# -> CLongclong600,19898
asBA :: ShortByteString -> BAasBA230,7088
append :: ShortByteString -> ShortByteString -> ShortByteStringappend416,13447
 /* empty */_len134,4265
 LEN(x) (x)LEN132,4233

/home/effectfully/.fastdogs/bytestring-0.10.12.1/Data/ByteString/Unsafe.hs,1244
module Data.ByteString.Unsafe (Unsafe22,668
unsafeUseAsCStringLen :: ByteString -> (CStringLen -> IO a) -> IO aunsafeUseAsCStringLen286,12238
unsafeUseAsCString :: ByteString -> (CString -> IO a) -> IO aunsafeUseAsCString267,11214
unsafeTake :: Int -> ByteString -> ByteStringunsafeTake115,4772
unsafeTail :: ByteString -> ByteStringunsafeTail85,3323
unsafePackMallocCStringLen :: CStringLen -> IO ByteStringunsafePackMallocCStringLen235,9692
unsafePackMallocCString :: CString -> IO ByteStringunsafePackMallocCString218,8974
unsafePackCStringLen :: CStringLen -> IO ByteStringunsafePackCStringLen202,8299
unsafePackCStringFinalizer :: Ptr Word8 -> Int -> IO () -> IO ByteStringunsafePackCStringFinalizer158,6453
unsafePackCString :: CString -> IO ByteStringunsafePackCString187,7668
unsafePackAddressLen :: Int -> Addr# -> IO ByteStringunsafePackAddressLen143,5852
unsafeLast :: ByteString -> Word8unsafeLast99,3987
unsafeInit :: ByteString -> ByteStringunsafeInit92,3657
unsafeIndex :: ByteString -> Int -> Word8unsafeIndex108,4417
unsafeHead :: ByteString -> Word8unsafeHead77,2937
unsafeFinalize :: ByteString -> IO ()unsafeFinalize172,7040
unsafeDrop  :: Int -> ByteString -> ByteStringunsafeDrop121,5059

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Cont.hs,41
module Control.Monad.Cont (Cont51,1896

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Cont/Class.hs,157
module Control.Monad.Cont.Class (Class52,1923
class Monad m => MonadCont m whereMonadCont74,2694
    callCC :: ((a -> m b) -> m a) -> m acallCC93,3659

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Error.hs,41
module Control.Monad.ErrorError35,1191

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Error/Class.hs,296
module Control.Monad.Error.Class (Class41,1389
class (Monad m) => MonadError e m | m -> e whereMonadError91,3405
    throwError :: e -> m athrowError93,3531
    catchError :: m a -> (e -> m a) -> m acatchError104,3870
liftEither :: MonadError e m => Either e a -> m aliftEither118,4173

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Except.hs,43
module Control.Monad.ExceptExcept34,1078

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Identity.hs,49
module Control.Monad.Identity (Identity35,1184

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/List.hs,40
module Control.Monad.List (List16,494

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/RWS.hs,38
module Control.Monad.RWS (RWS20,792

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/RWS/Class.hs,112
module Control.Monad.RWS.Class (Class26,1012
   => MonadRWS r w s m | m -> r, m -> w, m -> sMonadRWS48,1704

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/RWS/Lazy.hs,44
module Control.Monad.RWS.Lazy (Lazy20,778

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/RWS/Strict.hs,48
module Control.Monad.RWS.Strict (Strict20,782

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Reader.hs,45
module Control.Monad.Reader (Reader38,1388

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Reader/Class.hs,359
module Control.Monad.Reader.Class (Class44,1628
class Monad m => MonadReader r m | m -> r whereMonadReader75,2799
    ask   :: m rask80,2969
    local :: (r -> r) -- ^ The function to modify the environment.local84,3066
    reader :: (r -> a) -- ^ The selector function to apply to the environment.reader89,3281
asks :: MonadReader r masks96,3485

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/State.hs,42
module Control.Monad.State (State21,789

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/State/Class.hs,401
module Control.Monad.State.Class (Class28,1034
class Monad m => MonadState s m | m -> s whereMonadState56,2036
    get :: m sget58,2142
    put :: s -> m ()put62,2234
    state :: (s -> (a, s)) -> m astate66,2343
modify' :: MonadState s m => (s -> s) -> m ()modify'94,3093
modify :: MonadState s m => (s -> s) -> m ()modify87,2912
gets :: MonadState s m => (s -> a) -> m agets101,3265

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/State/Lazy.hs,46
module Control.Monad.State.Lazy (Lazy21,799

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/State/Strict.hs,50
module Control.Monad.State.Strict (Strict21,803

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Trans.hs,43
module Control.Monad.Trans (Trans28,1154

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Writer.hs,44
module Control.Monad.Writer (Writer20,805

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Writer/Class.hs,444
module Control.Monad.Writer.Class (Class27,1046
class (Monoid w, Monad m) => MonadWriter w m | m -> w whereMonadWriter65,2403
    writer :: (a,w) -> m awriter70,2608
    tell   :: w -> m ()tell76,2751
    listen :: m a -> m (a, w)listen81,2927
    pass   :: m (a, w -> w) -> m apass85,3132
listens :: MonadWriter w m => (w -> b) -> m a -> m (a, b)listens91,3375
censor :: MonadWriter w m => (w -> w) -> m a -> m acensor101,3702

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Writer/Lazy.hs,47
module Control.Monad.Writer.Lazy (Lazy20,807

/home/effectfully/.fastdogs/mtl-2.2.2/Control/Monad/Writer/Strict.hs,51
module Control.Monad.Writer.Strict (Strict20,811

/home/effectfully/.fastdogs/mtl-2.2.2/dist-newstyle-dante/build/x86_64-linux/ghc-8.10.7/mtl-2.2.2/build/autogen/Paths_mtl.hs,1563
module Paths_mtl (Paths_mtl5,131
version :: Versionversion32,730
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathsysconfdir44,999
pathSeparator :: CharpathSeparator70,2201
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathlibexecdir44,999
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathlibdir44,999
joinFileName :: String -> String -> FilePathjoinFileName62,1923
isPathSeparator :: Char -> BoolisPathSeparator73,2244
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetSysconfDir40,904
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetLibexecDir40,904
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetLibDir40,904
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetDynLibDir40,904
getDataFileName :: FilePath -> IO FilePathgetDataFileName35,779
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetDataDir40,904
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetBinDir40,904
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathdynlibdir44,999
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathdatadir44,999
catchIO :: IO a -> (Exception.IOException -> IO a) -> IO acatchIO22,501
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathbindir44,999

/home/effectfully/.fastdogs/text-1.2.5.0/Setup.lhs,31
> main = defaultMainmain3,55

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks.hs,49
module MainMain4,83
main :: IO ()main35,1387

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/Builder.hs,199
module Benchmarks.BuilderBuilder8,173
texts :: [T.Text]texts61,1977
strings :: [String]strings71,2290
byteStrings :: [SB.ByteString]byteStrings66,2121
benchmark :: Benchmarkbenchmark24,673

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/Concat.hs,333
module Benchmarks.Concat (benchmark) whereConcat3,36
append4, concat4, write4 :: Text -> Text -> Text -> Text -> Textwrite416,466
append4, concat4, write4 :: Text -> Text -> Text -> Text -> Textconcat416,466
benchmark :: Benchmarkbenchmark9,194
append4, concat4, write4 :: Text -> Text -> Text -> Text -> Textappend416,466

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/DecodeUtf8.hs,399
module Benchmarks.DecodeUtf8DecodeUtf818,336
type Env = (B.ByteString, BL.ByteString)Env39,993
foreign import ccall unsafe time_iconv :: Ptr Word8 -> CSize -> IO CInttime_iconv82,2726
initEnv :: FilePath -> IO EnvinitEnv41,1035
iconv :: B.ByteString -> IO CInticonv78,2566
benchmarkASCII :: Env -> BenchmarkbenchmarkASCII67,2101
benchmark :: String -> Env -> Benchmarkbenchmark47,1154

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/EncodeUtf8.hs,106
module Benchmarks.EncodeUtf8EncodeUtf89,133
benchmark :: String -> String -> Benchmarkbenchmark21,489

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/Equality.hs,174
module Benchmarks.EqualityEquality8,175
type Env = (T.Text, TL.Text)Env21,555
initEnv :: FilePath -> IO EnvinitEnv23,585
benchmark :: Env -> Benchmarkbenchmark29,722

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/FileRead.hs,95
module Benchmarks.FileReadFileRead10,131
benchmark :: FilePath -> Benchmarkbenchmark24,564

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/FoldLines.hs,170
module Benchmarks.FoldLinesFoldLines9,248
foldLinesT :: (a -> T.Text -> a) -> a -> Handle -> IO afoldLinesT32,804
benchmark :: FilePath -> Benchmarkbenchmark18,449

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/Mul.hs,349
module Benchmarks.MulMul1,0
type Env = (U.Vector (Int32,Int32), U.Vector (Int64,Int64))Env18,404
testVector64 :: U.Vector (Int64,Int64)testVector6435,927
testVector32 :: U.Vector (Int32,Int32)testVector32105,5810
oldMul :: Int64 -> Int64 -> Int64oldMul12,240
initEnv :: IO EnvinitEnv20,465
benchmark :: Env -> Benchmarkbenchmark26,577

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/Multilang.hs,141
module Benchmarks.Multilang (benchmark) whereMultilang3,62
readYiwiki :: IO TextreadYiwiki11,306
benchmark :: Benchmarkbenchmark14,410

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/Programs/BigTable.hs,230
module Benchmarks.Programs.BigTableBigTable10,213
makeTable :: Int -> BuildermakeTable32,892
makeCol :: Int -> BuildermakeCol35,991
fromInt :: Int -> BuilderfromInt40,1174
benchmark :: Handle -> Benchmarkbenchmark20,485

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/Programs/Cut.hs,426
module Benchmarks.Programs.CutCut15,273
textByteString :: FilePath -> Handle -> Int -> Int -> IO ()textByteString56,1543
text :: FilePath -> Handle -> Int -> Int -> IO ()text40,1058
lazyTextByteString :: FilePath -> Handle -> Int -> Int -> IO ()lazyTextByteString63,1804
lazyText :: FilePath -> Handle -> Int -> Int -> IO ()lazyText47,1264
benchmark :: FilePath -> Handle -> Int -> Int -> Benchmarkbenchmark30,735

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/Programs/Fold.hs,320
module Benchmarks.Programs.FoldFold16,354
type Paragraph = [T.Text]Paragraph36,921
paragraphs :: T.Text -> [Paragraph]paragraphs61,1636
foldParagraph :: Int -> Paragraph -> TLB.BuilderfoldParagraph46,1137
fold :: Int -> T.Text -> TL.Textfold40,968
benchmark :: FilePath -> Handle -> Benchmarkbenchmark30,743

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/Programs/Sort.hs,245
module Benchmarks.Programs.SortSort16,291
textBuilder :: T.Text -> TL.TexttextBuilder53,1626
text :: T.Text -> T.Texttext45,1418
lazyText :: TL.Text -> TL.TextlazyText48,1480
benchmark :: FilePath -> Handle -> Benchmarkbenchmark33,833

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/Programs/StripTags.hs,200
module Benchmarks.Programs.StripTagsStripTags14,313
text :: T.Text -> T.Texttext32,878
step :: Int -> Char -> (Int, Char)step35,936
benchmark :: FilePath -> Handle -> Benchmarkbenchmark25,611

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/Programs/Throughput.hs,118
module Benchmarks.Programs.ThroughputThroughput17,538
benchmark :: FilePath -> Handle -> Benchmarkbenchmark30,937

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/Pure.hs,879
module Benchmarks.PurePure10,288
data Env = EnvEnv30,923
    { bsa :: !BS.ByteStringbsa31,938
    , ta :: !T.Textta32,966
    , tb :: !T.Texttb33,986
    , tla :: !TL.Texttla34,1006
    , tlb :: !TL.Texttlb35,1028
    , bla :: !BL.ByteStringbla36,1050
    , bsa_len :: !Intbsa_len37,1078
    , ta_len :: !Intta_len38,1100
    , bla_len :: !Int64bla_len39,1121
    , tla_len :: !Int64tla_len40,1145
    , tl :: [T.Text]tl41,1169
    , tll :: [TL.Text]tll42,1190
data B whereB305,10835
mappendNText :: T.Text -> Int -> TB.BuildermappendNText340,11768
mappendNChar :: Char -> Int -> TB.BuildermappendNChar322,11187
mappend8Char :: Char -> TB.Buildermappend8Char332,11444
initEnv :: FilePath -> IO EnvinitEnv47,1260
chunksOf :: Int -> BS.ByteString -> [BS.ByteString]chunksOf313,10961
benchmark :: String -> Env -> Benchmarkbenchmark75,2041

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/ReadNumbers.hs,462
module Benchmarks.ReadNumbersReadNumbers19,448
type Env = ([String], [T.Text], [TL.Text], [B.ByteString], [BL.ByteString])Env37,1023
text :: (Ord a, Num a) => (t -> Either String (a,t)) -> [t] -> atext90,2985
string :: (Ord a, Num a) => (t -> [(a, t)]) -> [t] -> astring84,2792
initEnv :: FilePath -> IO EnvinitEnv39,1100
byteString :: (Ord a, Num a) => (t -> Maybe (a,t)) -> [t] -> abyteString96,3193
benchmark :: Env -> Benchmarkbenchmark50,1462

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/Replace.hs,221
module Benchmarks.ReplaceReplace8,155
type Env = (T.Text, B.ByteString, TL.Text, BL.ByteString)Env24,663
initEnv :: FilePath -> IO EnvinitEnv26,722
benchmark :: String -> String -> Env -> Benchmarkbenchmark34,901

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/Search.hs,456
module Benchmarks.SearchSearch7,171
type Env = (B.ByteString, BL.ByteString, T.Text, TL.Text)Env23,662
text :: T.Text -> T.Text -> Inttext51,1560
lazyText :: TL.Text -> TL.Text -> IntlazyText54,1608
lazyByteString :: B.ByteString -> BL.ByteString -> IntlazyByteString48,1453
initEnv :: FilePath -> IO EnvinitEnv25,721
byteString :: B.ByteString -> B.ByteString -> IntbyteString45,1356
benchmark :: T.Text -> Env -> Benchmarkbenchmark33,892

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/Stream.hs,729
module Benchmarks.StreamStream11,274
data Env = EnvEnv44,1488
    { t :: !T.Textt45,1503
    , utf8 :: !B.ByteStringutf846,1522
    , utf16le :: !B.ByteStringutf16le47,1550
    , utf16be :: !B.ByteStringutf16be48,1581
    , utf32le :: !B.ByteStringutf32le49,1612
    , utf32be :: !B.ByteStringutf32be50,1643
    , tl :: !TL.Texttl51,1674
    , utf8L :: !BL.ByteStringutf8L52,1695
    , utf16leL :: !BL.ByteStringutf16leL53,1725
    , utf16beL :: !BL.ByteStringutf16beL54,1758
    , utf32leL :: !BL.ByteStringutf32leL55,1791
    , utf32beL :: !BL.ByteStringutf32beL56,1824
    , s :: T.Stream Chars57,1857
initEnv :: FilePath -> IO EnvinitEnv62,1929
benchmark :: Env -> Benchmarkbenchmark84,2564

/home/effectfully/.fastdogs/text-1.2.5.0/benchmarks/haskell/Benchmarks/WordFrequencies.hs,263
module Benchmarks.WordFrequenciesWordFrequencies11,193
type Env = (String, B.ByteString, T.Text)Env25,545
initEnv :: FilePath -> IO EnvinitEnv27,588
frequencies :: Ord a => [a] -> Map a Intfrequencies42,1050
benchmark :: Env -> Benchmarkbenchmark34,723

/home/effectfully/.fastdogs/text-1.2.5.0/scripts/ApiCompare.hs,22
main = domain10,223

/home/effectfully/.fastdogs/text-1.2.5.0/scripts/Arsec.hs,249
module ArsecArsec1,0
type Comment = StringComment27,711
unichars :: Parser [Char]unichars32,814
unichar :: Parser Charunichar29,734
showC :: Char -> StringshowC41,1039
semi :: Parser ()semi35,886
comment :: Parser Commentcomment38,942

/home/effectfully/.fastdogs/text-1.2.5.0/scripts/CaseFolding.hs,718
module CaseFoldingCaseFolding5,111
data Fold = Fold {Fold15,226
      code :: Charcode16,245
    , status :: Charstatus17,264
    , mapping :: [Char]mapping18,285
    , name :: Stringname19,309
data CaseFolding = CF { cfComments :: [Comment], cfFolding :: [Fold] }CaseFolding22,362
data CaseFolding = CF { cfComments :: [Comment], cfFolding :: [Fold] }CF22,362
data CaseFolding = CF { cfComments :: [Comment], cfFolding :: [Fold] }cfComments22,362
data CaseFolding = CF { cfComments :: [Comment], cfFolding :: [Fold] }cfFolding22,362
parseCF :: FilePath -> IO (Either ParseError CaseFolding)parseCF33,746
mapCF :: CaseFolding -> [String]mapCF36,857
entries :: Parser CaseFoldingentries25,467

/home/effectfully/.fastdogs/text-1.2.5.0/scripts/CaseMapping.hs,20
main = domain8,98

/home/effectfully/.fastdogs/text-1.2.5.0/scripts/SpecialCasing.hs,893
module SpecialCasingSpecialCasing5,113
data SpecialCasing = SC { scComments :: [Comment], scCasing :: [Case] }SpecialCasing15,232
data SpecialCasing = SC { scComments :: [Comment], scCasing :: [Case] }SC15,232
data SpecialCasing = SC { scComments :: [Comment], scCasing :: [Case] }scComments15,232
data SpecialCasing = SC { scComments :: [Comment], scCasing :: [Case] }scCasing15,232
data Case = Case {Case18,340
      code :: Charcode19,359
    , lower :: [Char]lower20,378
    , title :: [Char]title21,400
    , upper :: [Char]upper22,422
    , conditions :: Stringconditions23,444
    , name :: Stringname24,471
ucFirst (c:cs) = toUpper c : csucFirst55,1713
parseSC :: FilePath -> IO (Either ParseError SpecialCasing)parseSC37,859
mapSC :: String -> (Case -> String) -> (Char -> Char) -> SpecialCasingmapSC40,972
entries :: Parser SpecialCasingentries27,524

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text.hs,5746
module Data.TextText35,1142
zipWith :: (Char -> Char -> Char) -> Text -> Text -> TextzipWith1656,53822
zip :: Text -> Text -> [(Char,Char)]zip1649,53520
words :: Text -> [Text]words1663,54103
unwords :: [Text] -> Textunwords1717,56080
unsnoc :: Text -> Maybe (Text, Char)unsnoc567,16827
unlines :: [Text] -> Textunlines1712,55936
unfoldrN     :: Int -> (a -> Maybe (Char,a)) -> a -> TextunfoldrN1136,36320
unfoldr     :: (a -> Maybe (Char,a)) -> a -> Textunfoldr1126,35788
uncons :: Text -> Maybe (Char, Text)uncons501,14740
transpose :: [Text] -> [Text]transpose927,28341
toUpper :: Text -> TexttoUpper826,25279
toTitle :: Text -> TexttoTitle850,26235
toLower :: Text -> TexttoLower816,24929
toCaseFold :: Text -> TexttoCaseFold805,24469
textDataType :: DataTypetextDataType422,12056
takeWhileEnd :: (Char -> Bool) -> Text -> TexttakeWhileEnd1253,39851
takeWhile :: (Char -> Bool) -> Text -> TexttakeWhile1229,39126
takeEnd :: Int -> Text -> TexttakeEnd1176,37505
take :: Int -> Text -> Texttake1146,36748
tails :: Text -> [Text]tails1386,44521
tail :: Text -> Texttail532,15747
sumP :: String -> [Int] -> IntsumP1853,60312
stripSuffix :: Text -> Text -> Maybe TextstripSuffix1847,60056
stripStart :: Text -> TextstripStart1304,41749
stripPrefix :: Text -> Text -> Maybe TextstripPrefix1791,58348
stripEnd :: Text -> TextstripEnd1311,41934
strip :: Text -> Textstrip1319,42132
splitOn :: TextsplitOn1420,45467
splitAt :: Int -> Text -> (Text, Text)splitAt1326,42407
split :: (Char -> Bool) -> Text -> [Text]split1450,46439
span :: (Char -> Bool) -> Text -> (Text, Text)span1340,42913
snoc :: Text -> Char -> Textsnoc464,13602
second :: (b -> c) -> (a,b) -> (a,c)second509,15016
scanr1 :: (Char -> Char -> Char) -> Text -> Textscanr11058,33021
scanr :: (Char -> Char -> Char) -> Char -> Text -> Textscanr1051,32721
scanl1 :: (Char -> Char -> Char) -> Text -> Textscanl11042,32388
scanl :: (Char -> Char -> Char) -> Char -> Text -> Textscanl1033,32044
reverse ::reverse705,20851
replicateChar :: Int -> Char -> TextreplicateChar1115,35201
replicate :: Int -> Text -> Textreplicate1088,34331
replace :: Textreplace738,21719
partition :: (Char -> Bool) -> Text -> (Text, Text)partition1500,48155
packConstr :: ConstrpackConstr419,11982
pack :: String -> Textpack444,12874
overflowError :: String -> aoverflowError1864,60608
null :: Text -> Boolnull578,17273
minimum :: Text -> Charminimum1017,31547
maximum :: Text -> Charmaximum1011,31356
mapAccumR :: (a -> Char -> (a,Char)) -> a -> Text -> (a, Text)mapAccumR1078,33919
mapAccumL :: (a -> Char -> (a,Char)) -> a -> Text -> (a, Text)mapAccumL1067,33416
map :: (Char -> Char) -> Text -> Textmap668,19788
lines :: Text -> [Text]lines1680,54691
length ::length601,17825
last :: Text -> Charlast514,15181
justifyRight :: Int -> Char -> Text -> TextjustifyRight890,27318
justifyLeft :: Int -> Char -> Text -> TextjustifyLeft865,26615
iterNEnd :: Int -> Text -> IntiterNEnd1183,37680
iterN :: Int -> Text -> IntiterN1153,36916
isSuffixOf :: Text -> Text -> BoolisSuffixOf1735,56713
isSingleton :: Text -> BoolisSingleton595,17652
isPrefixOf :: Text -> Text -> BoolisPrefixOf1723,56307
isInfixOf ::isInfixOf1749,57223
intersperse     :: Char -> Text -> Textintersperse693,20561
intercalate :: Text -> [Text] -> Textintercalate680,20200
inits :: Text -> [Text]inits1379,44280
init :: Text -> Textinit548,16203
index :: Text -> Int -> Charindex1607,51974
head :: Text -> Charhead495,14564
groupBy :: (Char -> Char -> Bool) -> Text -> [Text]groupBy1355,43367
group :: Text -> [Text]group1374,44154
foldr1 :: (Char -> Char -> Char) -> Text -> Charfoldr1968,29928
foldr :: (Char -> a -> a) -> a -> Text -> afoldr961,29681
foldl1' :: (Char -> Char -> Char) -> Text -> Charfoldl1'953,29346
foldl1 :: (Char -> Char -> Char) -> Text -> Charfoldl1948,29177
foldl' :: (a -> Char -> a) -> a -> Text -> afoldl'942,28929
foldl :: (a -> Char -> a) -> a -> Text -> afoldl937,28765
findIndex :: (Char -> Bool) -> Text -> Maybe IntfindIndex1614,52234
findAIndexOrEnd :: (Char -> Bool) -> Text -> IntfindAIndexOrEnd1367,43856
find :: (Char -> Bool) -> Text -> Maybe Charfind1491,47815
filter :: (Char -> Bool) -> Text -> Textfilter1507,48420
emptyError :: String -> aemptyError1861,60515
elem :: Char -> Text -> Boolelem1484,47545
dropWhileEnd :: (Char -> Bool) -> Text -> TextdropWhileEnd1286,41024
dropWhile :: (Char -> Bool) -> Text -> TextdropWhile1263,40288
dropEnd :: Int -> Text -> TextdropEnd1220,38807
dropAround :: (Char -> Bool) -> Text -> TextdropAround1297,41533
drop :: Int -> Text -> Textdrop1194,38117
countChar :: Char -> Text -> IntcountChar1638,53094
count :: Text -> Text -> Intcount1624,52630
copy :: Text -> Textcopy1875,61160
cons :: Char -> Text -> Textcons455,13300
concatMap :: (Char -> Text) -> Text -> TextconcatMap993,30705
concat :: [Text] -> Textconcat976,30180
compareText :: Text -> Text -> OrderingcompareText426,12195
compareLength :: Text -> Int -> OrderingcompareLength617,18377
commonPrefixes :: Text -> Text -> Maybe (Text,Text,Text)commonPrefixes1813,59001
chunksOf :: Int -> Text -> [Text]chunksOf1467,46985
center :: Int -> Char -> Text -> Textcenter905,27718
breakOnEnd :: Text -> Text -> (Text, Text)breakOnEnd1552,49920
breakOnAll :: Text              -- ^ @needle@ to search forbreakOnAll1576,50628
breakOn :: Text -> Text -> (Text, Text)breakOn1535,49299
break :: (Char -> Bool) -> Text -> (Text, Text)break1350,43205
append :: Text -> Text -> Textappend470,13811
any :: (Char -> Bool) -> Text -> Boolany999,30945
all :: (Char -> Bool) -> Text -> Boolall1005,31159

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Array.hs,1216
module Data.Text.ArrayArray24,798
data Array = Array { aBA :: ByteArray# }Array63,1795
data Array = Array { aBA :: ByteArray# }aBA63,1795
data MArray s = MArray { maBA :: MutableByteArray# s }MArray68,1950
data MArray s = MArray { maBA :: MutableByteArray# s }maBA68,1950
foreign import ccall unsafe "_hs_text_memcpy" memcpyImemcpyI206,6833
foreign import ccall unsafe "_hs_text_memcmp" memcmpmemcmp209,6965
foreign import ccall unsafe "_hs_text_memcpy" memcpyMmemcpyM212,7089
unsafeWrite ::unsafeWrite116,3532
unsafeIndex ::unsafeIndex99,2999
unsafeFreeze :: MArray s -> ST s ArrayunsafeFreeze85,2534
toList :: Array -> Int -> Int -> [Word16]toList131,4067
run2 :: (forall s. ST s (MArray s, a)) -> (Array, a)run2147,4617
run :: (forall s. ST s (MArray s)) -> Arrayrun142,4409
new :: forall s. Int -> ST s (MArray s)new71,2050
intToCSize :: Int -> CSizeintToCSize203,6779
equal :: Array                  -- ^ Firstequal191,6316
empty :: Arrayempty137,4271
copyM :: MArray s               -- ^ DestinationcopyM155,4860
copyI :: MArray s               -- ^ DestinationcopyI174,5616
bytesInArray :: Int -> IntbytesInArray93,2810
array_size_error :: aarray_size_error81,2381

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Encoding.hs,2308
module Data.Text.EncodingEncoding21,675
data Decoding = Some Text ByteString (ByteString -> Decoding)Decoding267,9763
data Decoding = Some Text ByteString (ByteString -> Decoding)Some267,9763
newtype CodePoint = CodePoint Word32 deriving (Eq, Show, Num, Storable)CodePoint276,10140
newtype DecoderState = DecoderState Word32 deriving (Eq, Show, Num, Storable)DecoderState277,10212
foreign import ccall unsafe "_hs_text_decode_utf8" c_decode_utf8c_decode_utf8564,22275
foreign import ccall unsafe "_hs_text_decode_utf8_state" c_decode_utf8_with_statec_decode_utf8_with_state568,22429
foreign import ccall unsafe "_hs_text_decode_latin1" c_decode_latin1c_decode_latin1573,22647
foreign import ccall unsafe "_hs_text_encode_utf8" c_encode_utf8c_encode_utf8576,22779
word16ToWord8 :: Word16 -> Word8word16ToWord8561,22212
streamDecodeUtf8With ::streamDecodeUtf8With299,10935
streamDecodeUtf8 ::streamDecodeUtf8288,10676
intToCSize :: Int -> CSizeintToCSize558,22158
encodeUtf8BuilderEscaped :: BP.BoundedPrim Word8 -> Text -> B.BuilderencodeUtf8BuilderEscaped409,15946
encodeUtf8Builder :: Text -> B.BuilderencodeUtf8Builder396,15448
encodeUtf8 :: Text -> ByteStringencodeUtf8461,18444
encodeUtf32LE :: Text -> ByteStringencodeUtf32LE546,21789
encodeUtf32BE :: Text -> ByteStringencodeUtf32BE551,21972
encodeUtf16LE :: Text -> ByteStringencodeUtf16LE508,20315
encodeUtf16BE :: Text -> ByteStringencodeUtf16BE513,20498
decodeUtf8With ::decodeUtf8With142,4678
decodeUtf8' ::decodeUtf8'385,15142
decodeUtf8 :: ByteString -> TextdecodeUtf8375,14733
decodeUtf32LEWith :: OnDecodeError -> ByteString -> TextdecodeUtf32LEWith518,20683
decodeUtf32LE :: ByteString -> TextdecodeUtf32LE527,21074
decodeUtf32BEWith :: OnDecodeError -> ByteString -> TextdecodeUtf32BEWith532,21237
decodeUtf32BE :: ByteString -> TextdecodeUtf32BE541,21622
decodeUtf16LEWith :: OnDecodeError -> ByteString -> TextdecodeUtf16LEWith480,19209
decodeUtf16LE :: ByteString -> TextdecodeUtf16LE489,19600
decodeUtf16BEWith :: OnDecodeError -> ByteString -> TextdecodeUtf16BEWith494,19763
decodeUtf16BE :: ByteString -> TextdecodeUtf16BE503,20148
decodeLatin1 ::decodeLatin1121,3884
decodeASCII :: ByteString -> TextdecodeASCII113,3588
cSizeToInt :: CSize -> IntcSizeToInt555,22104

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Encoding/Error.hs,716
module Data.Text.Encoding.ErrorError22,786
type OnError a b = String -> Maybe a -> Maybe bOnError60,1976
type OnDecodeError = OnError Word8 CharOnDecodeError63,2062
type OnEncodeError = OnError Char Word8OnEncodeError67,2239
data UnicodeException =UnicodeException70,2345
    DecodeError String (Maybe Word8)DecodeError71,2369
  | EncodeError String (Maybe Char)EncodeError74,2539
strictEncode :: OnEncodeErrorstrictEncode111,3985
strictDecode :: OnDecodeErrorstrictDecode101,3606
showUnicodeException :: UnicodeException -> StringshowUnicodeException81,2826
replace :: b -> OnError a breplace119,4226
lenientDecode :: OnDecodeErrorlenientDecode106,3771
ignore :: OnError a bignore115,4131

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Foreign.hs,611
module Data.Text.ForeignForeign13,340
newtype I16 = I16 IntI1665,2102
withCStringLen :: Text -> (CStringLen -> IO a) -> IO awithCStringLen172,5964
useAsPtr :: Text -> (Ptr Word16 -> I16 -> IO a) -> IO auseAsPtr140,4791
unsafeCopyToPtr :: Text -> Ptr Word16 -> IO ()unsafeCopyToPtr129,4395
takeWord16 :: I16 -> Text -> TexttakeWord16101,3372
peekCStringLen :: CStringLen -> IO TextpeekCStringLen158,5413
fromPtr :: Ptr Word16           -- ^ source arrayfromPtr70,2291
dropWord16 :: I16 -> Text -> TextdropWord16117,3956
asForeignPtr :: Text -> IO (ForeignPtr Word16, I16)asForeignPtr147,5038

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/IO.hs,1450
module Data.Text.IOIO16,489
writeLines :: Handle -> Newline -> Buffer CharBufElem -> Stream Char -> IO ()writeLines211,8125
writeFile :: FilePath -> Text -> IO ()writeFile89,3205
writeBlocksRaw :: Handle -> Buffer CharBufElem -> Stream Char -> IO ()writeBlocksRaw247,9665
writeBlocksCRLF :: Handle -> Buffer CharBufElem -> Stream Char -> IO ()writeBlocksCRLF231,8987
readFile :: FilePath -> IO TextreadFile84,3021
readChunkEof :: Handle__ -> CharBuffer -> IO (Text, Bool)readChunkEof109,4090
putStrLn :: Text -> IO ()putStrLn313,12096
putStr :: Text -> IO ()putStr309,11991
interact :: (Text -> Text) -> IO ()interact297,11671
hPutStrLn :: Handle -> Text -> IO ()hPutStrLn290,11333
hPutStr :: Handle -> Text -> IO ()hPutStr178,6825
hPutChars :: Handle -> Stream Char -> IO ()hPutChars193,7409
hGetLine :: Handle -> IO TexthGetLine174,6728
hGetContents :: Handle -> IO TexthGetContents139,5401
hGetChunk :: Handle -> IO TexthGetChunk120,4587
getSpareBuffer :: Handle__ -> IO (BufferMode, CharBuffer)getSpareBuffer262,10274
getLine :: IO TextgetLine305,11913
getContents :: IO TextgetContents301,11804
commitBuffer :: Handle -> RawCharBuffer -> Int -> Int -> Bool -> BoolcommitBuffer282,11001
chooseGoodBuffering :: Handle -> IO ()chooseGoodBuffering161,6231
catchError :: String -> Handle -> Handle__ -> IOError -> IO (Text, Bool)catchError96,3427
appendFile :: FilePath -> Text -> IO ()appendFile93,3334

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal.hs,851
module Data.Text.InternalInternal23,781
data Text = TextText57,1469
text_ ::text_64,1751
textP :: A.Array -> Int -> Int -> TexttextP100,2575
text ::text91,2382
showText :: Text -> StringshowText105,2731
safe :: Char -> Charsafe118,3274
mul64_ :: Int64 -> Int64 -> Int64mul64_151,4206
mul64 :: Int64 -> Int64 -> Int64mul64142,3972
mul32 :: Int32 -> Int32 -> Int32mul32165,4736
mul :: Int -> Int -> Intmul131,3675
intToInt64 :: Int -> Int64intToInt64174,5052
intToInt32 :: Int -> Int32intToInt32180,5160
int64ToInt32 :: Int64 -> Int32int64ToInt32189,5328
int64ToInt :: Int64 -> Intint64ToInt177,5106
int32ToInt64 :: Int32 -> Int64int32ToInt64186,5268
int32ToInt :: Int32 -> Intint32ToInt183,5214
firstf :: (a -> c) -> Maybe (a,b) -> Maybe (c,b)firstf125,3476
empty_ :: Textempty_85,2202
empty :: Textempty80,2098

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Builder.hs,1354
module Data.Text.Internal.BuilderBuilder38,1332
newtype Builder = Builder {Builder91,2840
     runBuilder :: forall s. (Buffer s -> ST s [S.Text])runBuilder94,2955
data Buffer s = Buffer {-# UNPACK #-} !(A.MArray s)Buffer213,6339
writeN :: Int -> (forall s. A.MArray s -> Int -> ST s ()) -> BuilderwriteN283,9037
writeBuffer :: (A.MArray s -> Int -> ST s Int) -> Buffer s -> ST s (Buffer s)writeBuffer287,9185
writeAtMost :: Int -> (forall s. A.MArray s -> Int -> ST s Int) -> BuilderwriteAtMost277,8752
withSize :: (Int -> Builder) -> BuilderwithSize258,8147
withBuffer :: (forall s. Buffer s -> ST s (Buffer s)) -> BuilderwithBuffer253,7976
toLazyTextWith :: Int -> Builder -> L.TexttoLazyTextWith232,7211
toLazyText :: Builder -> L.TexttoLazyText223,6820
singleton ::singleton138,4003
newBuffer :: Int -> ST s (Buffer s)newBuffer293,9383
mapBuilder :: ([S.Text] -> [S.Text]) -> BuildermapBuilder264,8328
fromText :: S.Text -> BuilderfromText168,4904
fromString :: String -> BuilderfromString184,5360
fromLazyText :: L.Text -> BuilderfromLazyText206,6111
flush :: Builderflush238,7505
ensureFree :: Int -> BuilderensureFree270,8550
empty :: Builderempty130,3805
copyLimit :: IntcopyLimit158,4614
append' :: Builder -> Builder -> Builderappend'305,9797
append :: Builder -> Builder -> Builderappend153,4449

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Builder/Functions.hs,139
module Data.Text.Internal.Builder.FunctionsFunctions18,491
i2d :: Int -> Chari2d31,775
(<>) :: Builder -> Builder -> Builder<>36,917

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Builder/Int/Digits.hs,109
module Data.Text.Internal.Builder.Int.Digits (digits) whereDigits17,614
digits :: ByteStringdigits21,718

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Builder/RealFloat/Functions.hs,125
module Data.Text.Internal.Builder.RealFloat.FunctionsFunctions12,389
roundTo :: Int -> [Int] -> (Int,[Int])roundTo17,476

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/ByteStringCompat.hs,295
module Data.Text.Internal.ByteStringCompat (mkBS, withBS) whereByteStringCompat4,78
withBS :: ByteString -> (ForeignPtr Word8 -> Int -> r) -> rwithBS28,647
plusForeignPtr :: ForeignPtr a -> Int -> ForeignPtr bplusForeignPtr47,1474
mkBS :: ForeignPtr Word8 -> Int -> ByteStringmkBS20,486

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Encoding/Fusion.hs,788
module Data.Text.Internal.Encoding.FusionFusion21,665
word8ToWord32 :: Word8 -> Word32word8ToWord32215,7935
word8ToWord16 :: Word8 -> Word16word8ToWord16212,7872
unstream :: Stream Word8 -> ByteStringunstream170,6364
streamUtf8 :: OnDecodeError -> ByteString -> Stream CharstreamUtf874,2381
streamUtf32LE :: OnDecodeError -> ByteString -> Stream CharstreamUtf32LE151,5614
streamUtf32BE :: OnDecodeError -> ByteString -> Stream CharstreamUtf32BE131,4825
streamUtf16LE :: OnDecodeError -> ByteString -> Stream CharstreamUtf16LE95,3217
streamUtf16BE :: OnDecodeError -> ByteString -> Stream CharstreamUtf16BE113,4021
streamASCII :: ByteString -> Stream CharstreamASCII59,1921
decodeError :: forall s. String -> String -> OnDecodeError -> Maybe Word8decodeError203,7536

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Encoding/Fusion/Common.hs,395
module Data.Text.Internal.Encoding.Fusion.CommonCommon21,608
restreamUtf32LE :: Stream Char -> Stream Word8restreamUtf32LE106,3569
restreamUtf32BE :: Stream Char -> Stream Word8restreamUtf32BE87,2902
restreamUtf16LE :: Stream Char -> Stream Word8restreamUtf16LE63,2027
restreamUtf16BE :: Stream Char -> Stream Word8restreamUtf16BE39,1128
intToWord8 :: Int -> Word8intToWord8125,4236

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Encoding/Utf16.hs,211
module Data.Text.Internal.Encoding.Utf16Utf1621,643
validate2       ::  Word16 -> Word16 -> Boolvalidate249,1344
validate1    :: Word16 -> Boolvalidate145,1245
chr2 :: Word16 -> Word16 -> Charchr236,947

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Encoding/Utf32.hs,100
module Data.Text.Internal.Encoding.Utf32Utf3217,548
validate    :: Word32 -> Boolvalidate24,650

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Encoding/Utf8.hs,724
module Data.Text.Internal.Encoding.Utf8Utf819,615
validate4 :: Word8 -> Word8 -> Word8 -> Word8 -> Boolvalidate4151,4709
validate3 :: Word8 -> Word8 -> Word8 -> Boolvalidate3134,4078
validate2 :: Word8 -> Word8 -> Boolvalidate2130,3953
validate1 :: Word8 -> Boolvalidate1126,3874
ord4 :: Char -> (Word8,Word8,Word8,Word8)ord479,2208
ord3 :: Char -> (Word8,Word8,Word8)ord367,1778
ord2 :: Char -> (Word8,Word8)ord256,1415
intToWord8 :: Int -> Word8intToWord8168,5338
chr4             :: Word8 -> Word8 -> Word8 -> Word8 -> Charchr4112,3351
chr3 :: Word8 -> Word8 -> Word8 -> Charchr3101,2962
chr2 :: Word8 -> Word8 -> Charchr292,2691
between :: Word8                -- ^ byte to checkbetween49,1193

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Functions.hs,196
module Data.Text.Internal.FunctionsFunctions18,459
unsafeWithForeignPtr :: ForeignPtr a -> (Ptr a -> IO b) -> IO bunsafeWithForeignPtr42,1045
intersperse :: a -> [a] -> [a]intersperse34,865

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Fusion.hs,699
module Data.Text.Internal.FusionFusion20,634
unstream :: Stream Char -> Textunstream108,3020
unfoldrN :: Int -> (a -> Maybe (Char,a)) -> a -> Stream CharunfoldrN207,6972
stream ::stream75,1884
reverseStream :: Text -> Stream CharreverseStream94,2472
reverseScanr :: (Char -> Char -> Char) -> Char -> Stream Char -> Stream CharreverseScanr191,6181
reverse ::reverse151,4609
mapAccumL ::mapAccumL235,7993
length :: Stream Char -> Intlength146,4487
intToWord16 :: Int -> Word16intToWord16263,9057
index :: Stream Char -> Int -> Charindex215,7257
findIndex :: (Char -> Bool) -> Stream Char -> Maybe IntfindIndex222,7486
countChar :: Char -> Stream Char -> IntcountChar228,7708

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Fusion/CaseMapping.hs,380
module Data.Text.Internal.Fusion.CaseMapping whereCaseMapping9,231
upperMapping :: forall s. Char -> s -> Step (CC s) CharupperMapping13,339
titleMapping :: forall s. Char -> s -> Step (CC s) ChartitleMapping225,13085
lowerMapping :: forall s. Char -> s -> Step (CC s) CharlowerMapping220,12838
foldMapping :: forall s. Char -> s -> Step (CC s) CharfoldMapping324,18537

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Fusion/Common.hs,4921
module Data.Text.Internal.Fusion.CommonCommon17,531
data C s = C0 !sC173,4444
data C s = C0 !sC0173,4444
         | C1 !sC1174,4461
data Snoc a = NSnoc187,4910
data Snoc a = NN187,4910
            | J !aJ188,4926
data E l r = L !lE201,5310
data E l r = L !lL201,5310
           | R !rR202,5328
data Init s = Init0 !sInit275,8126
data Init s = Init0 !sInit0275,8126
            | Init1 {-# UNPACK #-} !Char !sInit1276,8149
data I s = I1 !sI368,11743
data I s = I1 !sI1368,11743
         | I2 !s {-# UNPACK #-} !CharI2369,11760
         | I3 !sI3370,11798
data Justify i s = Just1 !i !sJustify483,16321
data Justify i s = Just1 !i !sJust1483,16321
                 | Just2 !i !sJust2484,16352
data RI s = RI !s {-# UNPACK #-} !Int64RI687,24440
data Drop a s = NS !sDrop751,27047
data Drop a s = NS !sNS751,27047
              | JS !a !sJS752,27069
data Zip a b m = Z1 !a !bZip911,33206
data Zip a b m = Z1 !a !bZ1911,33206
               | Z2 !a !b !mZ2912,33232
zipWith :: (a -> a -> b) -> Stream a -> Stream a -> Stream bzipWith916,33385
unstreamList :: Stream a -> [a]unstreamList131,2750
unfoldrNI :: Integral a => a -> (b -> Maybe (Char,b)) -> b -> Stream CharunfoldrNI720,25811
unfoldr :: (a -> Maybe (Char,a)) -> a -> Stream Charunfoldr707,25288
uncons :: Stream Char -> Maybe (Char, Stream Char)uncons236,6572
toUpper :: Stream Char -> Stream ChartoUpper435,14288
toTitle :: Stream Char -> Stream ChartoTitle466,15614
toLower :: Stream Char -> Stream ChartoLower444,14689
toCaseFold :: Stream Char -> Stream ChartoCaseFold427,13963
takeWhile :: (Char -> Bool) -> Stream Char -> Stream ChartakeWhile778,27980
take :: Integral a => a -> Stream Char -> Stream Chartake737,26520
tail :: Stream Char -> Stream Chartail262,7613
streamList :: [a] -> Stream astreamList125,2579
streamError :: String -> String -> astreamError943,34458
streamCString# :: Addr# -> Stream CharstreamCString#146,3353
snoc :: Stream Char -> Char -> Stream Charsnoc191,4999
singleton :: Char -> Stream Charsingleton119,2401
scanl :: (Char -> Char -> Char) -> Char -> Stream Char -> Stream Charscanl663,23508
replicateI :: Int64 -> Stream Char -> Stream CharreplicateI689,24481
replicateCharI :: Integral a => a -> Char -> Stream CharreplicateCharI678,24151
null :: Stream Char -> Boolnull294,8918
minimum :: Stream Char -> Charminimum645,22726
maximum :: Stream Char -> Charmaximum628,21959
map :: (Char -> Char) -> Stream Char -> Stream Charmap354,11351
lengthI :: Integral a => Stream Char -> alengthI304,9248
last :: Stream Char -> Charlast247,7020
justifyLeftI :: Integral a => a -> Char -> Stream Char -> Stream CharjustifyLeftI486,16384
isSingleton :: Stream Char -> BoolisSingleton338,10753
isPrefixOf :: (Eq a) => Stream a -> Stream a -> BoolisPrefixOf807,29119
intersperse :: Char -> Stream Char -> Stream Charintersperse374,11912
internalError :: String -> ainternalError949,34666
intercalate :: Stream Char -> [Stream Char] -> Stream Charintercalate584,20273
int64ToSize :: Int64 -> Sizeint64ToSize952,34751
init :: Stream Char -> Stream Charinit280,8287
indexI :: Integral a => Stream Char -> a -> CharindexI854,31015
head_empty :: ahead_empty230,6354
head :: Stream Char -> Charhead221,6082
foldr1 :: (Char -> Char -> Char) -> Stream Char -> Charfoldr1570,19837
foldr :: (Char -> b -> b) -> b -> Stream Char -> bfoldr558,19373
foldl1' :: (Char -> Char -> Char) -> Stream Char -> Charfoldl1'542,18617
foldl1 :: (Char -> Char -> Char) -> Stream Char -> Charfoldl1528,18043
foldl' :: (b -> Char -> b) -> b -> Stream Char -> bfoldl'517,17579
foldl :: (b -> Char -> b) -> b -> Stream Char -> bfoldl507,17218
findIndicesI :: Integral a => (Char -> Bool) -> Stream Char -> [a]findIndicesI897,32651
findIndexI :: Integral a => (Char -> Bool) -> Stream Char -> Maybe afindIndexI888,32290
findBy :: (Char -> Bool) -> Stream Char -> Maybe CharfindBy843,30580
filter :: (Char -> Bool) -> Stream Char -> Stream Charfilter869,31601
emptyError :: String -> aemptyError946,34588
elem :: Char -> Stream Char -> Boolelem826,29946
dropWhile :: (Char -> Bool) -> Stream Char -> Stream ChardropWhile790,28461
drop :: Integral a => a -> Stream Char -> Stream Chardrop757,27280
countCharI :: Integral a => Char -> Stream Char -> acountCharI933,34123
cons :: Char -> Stream Char -> Stream Charcons177,4539
concatMap :: (Char -> Stream Char) -> Stream Char -> Stream CharconcatMap598,20763
concat :: [Stream Char] -> Stream Charconcat592,20576
compareLengthI :: Integral a => Stream Char -> a -> OrderingcompareLengthI320,9943
caseConvert :: (forall s. Char -> s -> Step (CC s) Char)caseConvert401,12930
append :: Stream Char -> Stream Char -> Stream Charappend205,5392
any :: (Char -> Bool) -> Stream Char -> Boolany604,20999
all :: (Char -> Bool) -> Stream Char -> Boolall616,21485

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Fusion/Size.hs,1286
module Data.Text.Internal.Fusion.SizeSize19,559
data Size = Between {-# UNPACK #-} !Int {-# UNPACK #-} !Int -- ^ Lower and upper bounds on size.Size47,1047
data Size = Between {-# UNPACK #-} !Int {-# UNPACK #-} !Int -- ^ Lower and upper bounds on size.Between47,1047
          | Unknown                                         -- ^ Unknown size.Unknown48,1144
upperBound :: Int -> Size -> IntupperBound158,4080
unknownSize :: SizeunknownSize100,2247
unionSize :: Size -> Size -> SizeunionSize96,2120
subtractSize :: Size -> Size -> SizesubtractSize123,2804
smaller :: Size -> Size -> Sizesmaller136,3333
overflowError :: IntoverflowError186,4849
mulSize :: Size -> Size -> SizemulSize130,3121
maxSize :: Int -> SizemaxSize79,1833
lowerBound :: Int -> Size -> IntlowerBound164,4263
larger :: Size -> Size -> Sizelarger149,3807
isEmpty :: Size -> BoolisEmpty181,4740
exactly :: Size -> Maybe Intexactly51,1256
exactSize :: Int -> SizeexactSize71,1704
compareSize :: Size -> Size -> Maybe OrderingcompareSize171,4490
codePointsSize :: Int -> SizecodePointsSize63,1556
charSize :: Char -> SizecharSize57,1415
betweenSize :: Int -> Int -> SizebetweenSize87,1956
addSize :: Size -> Size -> SizeaddSize118,2624
add :: Int -> Int -> Intadd112,2499

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Fusion/Types.hs,959
module Data.Text.Internal.Fusion.TypesTypes20,658
data CC s = CC !s {-# UNPACK #-} !Char {-# UNPACK #-} !CharCC35,925
data RS sRS38,1010
    = RS0 !sRS039,1020
    | RS1 !s {-# UNPACK #-} !Word8RS140,1033
    | RS2 !s {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8RS241,1068
    | RS3 !s {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8RS342,1125
data PairS a b = !a :*: !bPairS45,1223
data PairS a b = !a :*: !b:*:45,1223
data Scan s = Scan1 {-# UNPACK #-} !Char !sScan50,1348
data Scan s = Scan1 {-# UNPACK #-} !Char !sScan150,1348
            | Scan2 {-# UNPACK #-} !Char !sScan251,1392
data Step s a = DoneStep54,1488
data Step s a = DoneDone54,1488
              | Skip !sSkip55,1509
              | Yield !a !sYield56,1533
data Stream a =Stream83,2458
eq :: (Eq a) => Stream a -> Stream a -> Booleq90,2705
empty :: Stream aempty119,4013
cmp :: (Ord a) => Stream a -> Stream a -> Orderingcmp103,3335

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/IO.hs,630
module Data.Text.Internal.IOIO17,539
unpack_nl :: RawCharBuffer -> Int -> Int -> IO (Text, Int)unpack_nl104,3893
unpack :: RawCharBuffer -> Int -> Int -> IO Textunpack92,3508
sizeError :: String -> asizeError165,6242
readChunk :: Handle__ -> CharBuffer -> IO TextreadChunk155,5895
maybeFillReadBuffer :: Handle__ -> CharBuffer -> IO (Maybe CharBuffer)maybeFillReadBuffer85,3271
hGetLineWith :: ([Text] -> t) -> Handle -> IO thGetLineWith43,1563
hGetLineLoop :: Handle__ -> [Text] -> CharBuffer -> IO [Text]hGetLineLoop48,1755
getSomeCharacters :: Handle__ -> CharBuffer -> IO CharBuffergetSomeCharacters129,4764

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Lazy.hs,687
module Data.Text.Internal.LazyLazy21,705
data Text = EmptyText47,1238
data Text = EmptyEmpty47,1238
          | Chunk {-# UNPACK #-} !T.Text TextChunk48,1256
strictInvariant :: Text -> BoolstrictInvariant58,1578
smallChunkSize :: IntsmallChunkSize112,3451
showStructure :: Text -> StringshowStructure74,2166
lazyInvariant :: Text -> TextlazyInvariant66,1859
foldrChunks :: (T.Text -> a -> a) -> a -> Text -> afoldrChunks92,2773
foldlChunks :: (a -> T.Text -> a) -> a -> Text -> afoldlChunks100,3039
empty :: Textempty87,2651
defaultChunkSize :: IntdefaultChunkSize107,3283
chunkOverhead :: IntchunkOverhead117,3616
chunk :: T.Text -> Text -> Textchunk81,2464

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Lazy/Encoding/Fusion.hs,1227
module Data.Text.Internal.Lazy.Encoding.FusionFusion19,588
data S = S0S58,1899
data S = S0S058,1899
       | S1 {-# UNPACK #-} !Word8S159,1911
       | S2 {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8S260,1945
       | S3 {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8S361,2001
       | S4 {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8S462,2079
data T = T !ByteString !S {-# UNPACK #-} !IntT64,2180
word8ToWord32 :: Word8 -> Word32word8ToWord32330,13671
word8ToWord16 :: Word8 -> Word16word8ToWord16327,13608
unstreamChunks :: Int -> Stream Word8 -> ByteStringunstreamChunks277,11482
unstream :: Stream Word8 -> ByteStringunstream315,13193
streamUtf8 :: OnDecodeError -> ByteString -> Stream CharstreamUtf868,2314
streamUtf32LE :: OnDecodeError -> ByteString -> Stream CharstreamUtf32LE234,9648
streamUtf32BE :: OnDecodeError -> ByteString -> Stream CharstreamUtf32BE190,7780
streamUtf16LE :: OnDecodeError -> ByteString -> Stream CharstreamUtf16LE110,4144
streamUtf16BE :: OnDecodeError -> ByteString -> Stream CharstreamUtf16BE150,5962
decodeError :: forall s. String -> String -> OnDecodeError -> Maybe Word8decodeError318,13276

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Lazy/Fusion.hs,390
module Data.Text.Internal.Lazy.FusionFusion17,500
unstreamChunks ::unstreamChunks63,1726
unstream ::unstream102,3219
unfoldrN :: Int64 -> (a -> Maybe (Char,a)) -> a -> Stream CharunfoldrN122,3845
stream ::stream47,1283
length :: Stream Char -> Int64length111,3427
index :: Stream Char -> Int64 -> Charindex127,4028
countChar :: Char -> Stream Char -> Int64countChar133,4220

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Lazy/Search.hs,512
module Data.Text.Internal.Lazy.SearchSearch20,620
wordLength :: Text -> Int64wordLength135,5125
word16ToInt :: Word16 -> Intword16ToInt150,5502
intToInt64 :: Int -> Int64intToInt64144,5394
int64ToInt :: Int64 -> Intint64ToInt147,5448
indicesOne :: Word16 -> Int64 -> T.Text -> Text -> [Int64]indicesOne121,4582
indices :: Text              -- ^ Substring to search for (@needle@)indices42,1305
index :: T.Text -> Text -> Int64 -> Word16index108,4021
emptyError :: String -> aemptyError141,5291

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/PrimCompat.hs,459
module Data.Text.Internal.PrimCompatPrimCompat4,49
wordToWord8#,  word8ToWord#  :: Word# -> Word#wordToWord8#23,284
wordToWord32#, word32ToWord# :: Word# -> Word#wordToWord32#25,378
wordToWord16#, word16ToWord# :: Word# -> Word#wordToWord16#24,331
wordToWord8#,  word8ToWord#  :: Word# -> Word#word8ToWord#23,284
wordToWord32#, word32ToWord# :: Word# -> Word#word32ToWord#25,378
wordToWord16#, word16ToWord# :: Word# -> Word#word16ToWord#24,331

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Private.hs,140
module Data.Text.Internal.PrivatePrivate12,273
span_ :: (Char -> Bool) -> Text -> (# Text, Text #)span_27,572
runText ::runText37,902

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Read.hs,406
module Data.Text.Internal.ReadRead11,264
type IReader t a = t -> Either String (a,t)IReader26,540
newtype IParser t a = P {IParser28,585
newtype IParser t a = P {P28,585
      runP :: IReader t arunP29,611
data T = T !Integer !IntT55,1322
perhaps :: a -> IParser t a -> IParser t aperhaps57,1348
hexDigitToInt :: Char -> InthexDigitToInt62,1537
digitToInt :: Char -> IntdigitToInt68,1732

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Search.hs,305
module Data.Text.Internal.SearchSearch29,839
data T = {-# UNPACK #-} !Word64 :* {-# UNPACK #-} !IntT40,1095
{-# UNPACK #-} !Word64 :* {-# UNPACK #-} !Int:*40,1104
word16ToInt :: Word16 -> Intword16ToInt94,3333
indices :: Text                -- ^ Substring to search for (@needle@)indices49,1464

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Unsafe.hs,166
module Data.Text.Internal.UnsafeUnsafe18,612
inlinePerformIO :: IO a -> ainlinePerformIO34,1052
inlineInterleaveST :: ST s a -> ST s ainlineInterleaveST46,1546

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Unsafe/Char.hs,308
module Data.Text.Internal.Unsafe.CharChar19,587
unsafeWrite ::unsafeWrite57,1646
unsafeChr8 :: Word8 -> CharunsafeChr847,1302
unsafeChr32 :: Word32 -> CharunsafeChr3251,1419
unsafeChr :: Word16 -> CharunsafeChr43,1185
ord :: Char -> Intord39,1119
intToWord16 :: Int -> Word16intToWord1676,2143

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Internal/Unsafe/Shift.hs,184
module Data.Text.Internal.Unsafe.ShiftShift20,550
class UnsafeShift a whereUnsafeShift34,1004
    shiftL :: a -> Int -> ashiftL35,1030
    shiftR :: a -> Int -> ashiftR40,1167

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Lazy.hs,6202
module Data.Text.LazyLazy38,1429
zipWith :: (Char -> Char -> Char) -> Text -> Text -> TextzipWith1748,57342
zip :: Text -> Text -> [(Char,Char)]zip1741,57036
words :: Text -> [Text]words1537,49830
unwords :: [Text] -> Textunwords1548,50141
unsnoc :: Text -> Maybe (Text, Char)unsnoc574,16009
unpackCString# :: Addr# -> TextunpackCString#430,11491
unpack ::unpack421,11304
unlines :: [Text] -> Textunlines1543,49997
unfoldrN :: Int64 -> (a -> Maybe (Char,a)) -> a -> TextunfoldrN1065,33216
unfoldr :: (a -> Maybe (Char,a)) -> a -> Textunfoldr1054,32686
uncons :: Text -> Maybe (Char, Text)uncons525,14503
transpose :: [Text] -> [Text]transpose724,20850
toUpper :: Text -> TexttoUpper821,24199
toTitle :: Text -> TexttoTitle846,25157
toStrict :: Text -> T.TexttoStrict472,12849
toLower :: Text -> TexttoLower811,23865
toChunks :: Text -> [T.Text]toChunks468,12725
toCaseFold :: Text -> TexttoCaseFold800,23435
textDataType :: DataTypetextDataType405,10890
takeWhileEnd :: (Char -> Bool) -> Text -> TexttakeWhileEnd1201,37695
takeWhile :: (Char -> Bool) -> Text -> TexttakeWhile1177,36866
takeEnd :: Int64 -> Text -> TexttakeEnd1100,34325
take :: Int64 -> Text -> Texttake1072,33544
tails :: Text -> [Text]tails1440,46392
tail :: Text -> Texttail540,15036
stripSuffix :: Text -> Text -> Maybe TextstripSuffix1674,54546
stripStart :: Text -> TextstripStart1258,39755
stripPrefix :: Text -> Text -> Maybe TextstripPrefix1623,52696
stripEnd :: Text -> TextstripEnd1265,39940
strip :: Text -> Textstrip1273,40138
splitOn :: TextsplitOn1475,47513
splitAtWord :: Int64 -> Text -> PairS Text TextsplitAtWord1296,41079
splitAt :: Int64 -> Text -> (Text, Text)splitAt1280,40413
split :: (Char -> Bool) -> Text -> [Text]split1504,48561
span :: (Char -> Bool) -> Text -> (Text, Text)span1405,45072
snoc :: Text -> Char -> Textsnoc500,13702
singleton :: Char -> Textsingleton452,12226
scanr1 :: (Char -> Char -> Char) -> Text -> Textscanr1964,29292
scanr :: (Char -> Char -> Char) -> Char -> Text -> Textscanr958,29029
scanl1 :: (Char -> Char -> Char) -> Text -> Textscanl1948,28681
scanl :: (Char -> Char -> Char) -> Char -> Text -> Textscanl939,28336
reverse ::reverse730,21084
revChunks :: [T.Text] -> TextrevChunks1753,57524
replicateChar :: Int64 -> Char -> TextreplicateChar1035,31824
replicate :: Int64 -> Text -> Textreplicate1005,30864
replace :: Textreplace762,22003
repeat :: Char -> Textrepeat999,30654
partition :: (Char -> Bool) -> Text -> (Text, Text)partition1703,55675
packConstr :: ConstrpackConstr402,10816
pack ::pack411,11096
null :: Text -> Boolnull581,16224
minimum :: Text -> Charminimum926,27943
maximum :: Text -> Charmaximum920,27752
mapAccumR :: (a -> Char -> (a,Char)) -> a -> Text -> (a, Text)mapAccumR986,30276
mapAccumL :: (a -> Char -> (a,Char)) -> a -> Text -> (a, Text)mapAccumL972,29665
map :: (Char -> Char) -> Text -> Textmap648,18269
lines :: Text -> [Text]lines1529,49568
length :: Text -> Int64length617,17191
last :: Text -> Charlast601,16753
justifyRight :: Int64 -> Char -> Text -> TextjustifyRight696,19974
justifyLeft :: Int64 -> Char -> Text -> TextjustifyLeft674,19263
iterate :: (Char -> Char) -> Char -> Textiterate1029,31579
isSuffixOf :: Text -> Text -> BoolisSuffixOf1576,51147
isSingleton :: Text -> BoolisSingleton595,16557
isPrefixOf :: Text -> Text -> BoolisPrefixOf1554,50368
isInfixOf :: Text -> Text -> BoolisInfixOf1590,51622
intersperse :: Char -> Text -> Textintersperse662,18851
intercalate :: Text -> [Text] -> Textintercalate655,18561
intToInt64 :: Exts.Int -> Int64intToInt641762,57805
int64ToInt :: Int64 -> Exts.Intint64ToInt1765,57864
inits :: Text -> [Text]inits1432,46091
init :: Text -> Textinit554,15454
index :: Text -> Int64 -> Charindex1709,55888
impossibleError :: String -> aimpossibleError1759,57693
head :: Text -> Charhead534,14856
groupBy :: (Char -> Char -> Bool) -> Text -> [Text]groupBy1423,45705
group :: Text -> [Text]group1418,45567
fromStrict :: T.Text -> TextfromStrict477,12998
fromChunks :: [T.Text] -> TextfromChunks464,12587
foldr1 :: (Char -> Char -> Char) -> Text -> Charfoldr1886,26637
foldr :: (Char -> a -> a) -> a -> Text -> afoldr879,26390
foldl1' :: (Char -> Char -> Char) -> Text -> Charfoldl1'871,26055
foldl1 :: (Char -> Char -> Char) -> Text -> Charfoldl1866,25886
foldl' :: (a -> Char -> a) -> a -> Text -> afoldl'860,25638
foldl :: (a -> Char -> a) -> a -> Text -> afoldl854,25472
find :: (Char -> Bool) -> Text -> Maybe Charfind1687,55094
filter :: (Char -> Bool) -> Text -> Textfilter1680,54796
equal :: Text -> Text -> Boolequal298,7855
emptyError :: String -> aemptyError1756,57595
elem :: Char -> Text -> Boolelem1694,55349
dropWords :: Int64 -> Text -> TextdropWords1160,36275
dropWhileEnd :: (Char -> Bool) -> Text -> TextdropWhileEnd1236,38934
dropWhile :: (Char -> Bool) -> Text -> TextdropWhile1213,38194
dropEnd :: Int64 -> Text -> TextdropEnd1144,35703
dropAround :: (Char -> Bool) -> Text -> TextdropAround1251,39539
drop :: Int64 -> Text -> Textdrop1115,34931
cycle :: Text -> Textcycle1018,31298
countChar :: Char -> Text -> Int64countChar1734,56727
count :: Text -> Text -> Int64count1719,56254
cons :: Char -> Text -> Textcons485,13265
concatMap :: (Char -> Text) -> Text -> TextconcatMap902,27101
concat :: [Text] -> Textconcat891,26787
compareText :: Text -> Text -> OrderingcompareText319,8433
compareLength :: Text -> Int64 -> OrderingcompareLength637,17825
commonPrefixes :: Text -> Text -> Maybe (Text,Text,Text)commonPrefixes1642,53385
chunksOf :: Int64 -> Text -> [Text]chunksOf1519,49248
center :: Int64 -> Char -> Text -> Textcenter710,20373
breakOnEnd :: Text -> Text -> (Text, Text)breakOnEnd1344,42903
breakOnAll :: Text              -- ^ @needle@ to search forbreakOnAll1370,43718
breakOn :: Text -> Text -> (Text, Text)breakOn1329,42298
break :: (Char -> Bool) -> Text -> (Text, Text)break1387,44333
append :: Text -> Text -> Textappend512,14062
any :: (Char -> Bool) -> Text -> Boolany908,27341
all :: (Char -> Bool) -> Text -> Boolall914,27555

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Lazy/Builder.hs,46
module Data.Text.Lazy.BuilderBuilder39,1259

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Lazy/Builder/Int.hs,899
module Data.Text.Lazy.Builder.IntInt14,417
data T = T !Integer !IntT179,6701
minus, zero :: Word16zero107,4258
word8ToWord16 :: Word8 -> Word16word8ToWord16246,8952
positive :: (Integral a) => a -> Builderpositive74,2923
posDecimal :: (Integral a) =>posDecimal90,3636
minus, zero :: Word16minus107,4258
integer :: Int -> Integer -> Builderinteger181,6727
i2w :: (Integral a) => a -> Word16i2w113,4343
hexadecimal :: Integral a => a -> Builderhexadecimal144,5451
hexInteger :: Integer -> BuilderhexInteger165,6300
hexErrMsg :: StringhexErrMsg170,6412
hexDigit :: Integral a => a -> BuilderhexDigit173,6514
decimal' :: (Integral a) => (a -> Bool) -> a -> Builderdecimal'57,2235
decimal :: Integral a => a -> Builderdecimal34,965
countDigits :: (Integral a) => a -> IntcountDigits117,4428
boundedDecimal :: (Integral a, Bounded a) => a -> BuilderboundedDecimal49,1865

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Lazy/Builder/RealFloat.hs,710
module Data.Text.Lazy.Builder.RealFloatRealFloat11,269
data FPFormat = ExponentFPFormat30,790
data FPFormat = ExponentExponent30,790
              | FixedFixed32,872
              | GenericGeneric34,940
realFloat :: (RealFloat a) => a -> BuilderrealFloat42,1343
minExpt, maxExpt :: IntminExpt234,8590
maxExpt10 :: IntmaxExpt10247,8984
minExpt, maxExpt :: IntmaxExpt234,8590
intToFloat :: Int -> FloatintToFloat253,9125
formatRealFloat :: (RealFloat a) =>formatRealFloat55,2018
floatToDigits :: (RealFloat a) => a -> ([Int], Int)floatToDigits141,5211
expts10 :: Array Int Integerexpts10250,9018
expts :: Array Int Integerexpts244,8886
expt :: Integer -> Int -> Integerexpt238,8642

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Lazy/Encoding.hs,1433
module Data.Text.Lazy.EncodingEncoding17,503
encodeUtf8BuilderEscaped :: BP.BoundedPrim Word8 -> Text -> B.BuilderencodeUtf8BuilderEscaped173,6059
encodeUtf8Builder :: Text -> B.BuilderencodeUtf8Builder161,5655
encodeUtf8 :: Text -> B.ByteStringencodeUtf8145,4909
encodeUtf32LE :: Text -> B.ByteStringencodeUtf32LE244,8921
encodeUtf32BE :: Text -> B.ByteStringencodeUtf32BE249,9119
encodeUtf16LE :: Text -> B.ByteStringencodeUtf16LE206,7409
encodeUtf16BE :: Text -> B.ByteStringencodeUtf16BE211,7607
decodeUtf8With :: OnDecodeError -> B.ByteString -> TextdecodeUtf8With92,2948
decodeUtf8' :: B.ByteString -> Either UnicodeException TextdecodeUtf8'135,4582
decodeUtf8 :: B.ByteString -> TextdecodeUtf8119,3925
decodeUtf32LEWith :: OnDecodeError -> B.ByteString -> TextdecodeUtf32LEWith216,7807
decodeUtf32LE :: B.ByteString -> TextdecodeUtf32LE225,8200
decodeUtf32BEWith :: OnDecodeError -> B.ByteString -> TextdecodeUtf32BEWith230,8365
decodeUtf32BE :: B.ByteString -> TextdecodeUtf32BE239,8752
decodeUtf16LEWith :: OnDecodeError -> B.ByteString -> TextdecodeUtf16LEWith178,6295
decodeUtf16LE :: B.ByteString -> TextdecodeUtf16LE187,6688
decodeUtf16BEWith :: OnDecodeError -> B.ByteString -> TextdecodeUtf16BEWith192,6853
decodeUtf16BE :: B.ByteString -> TextdecodeUtf16BE201,7240
decodeLatin1 :: B.ByteString -> TextdecodeLatin188,2786
decodeASCII :: B.ByteString -> TextdecodeASCII83,2591

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Lazy/IO.hs,833
module Data.Text.Lazy.IOIO16,478
writeFile :: FilePath -> Text -> IO ()writeFile83,2840
readFile :: FilePath -> IO TextreadFile78,2656
putStrLn :: Text -> IO ()putStrLn162,5651
putStr :: Text -> IO ()putStr158,5546
lazyReadBuffered :: Handle -> Handle__ -> IO (Handle__, Text)lazyReadBuffered117,4089
lazyRead :: Handle -> IO TextlazyRead107,3685
interact :: (Text -> Text) -> IO ()interact146,5219
hPutStrLn :: Handle -> Text -> IO ()hPutStrLn139,4872
hPutStr :: Handle -> Text -> IO ()hPutStr135,4735
hGetLine :: Handle -> IO TexthGetLine131,4634
hGetContents :: Handle -> IO TexthGetContents92,3188
getLine :: IO TextgetLine154,5468
getContents :: IO TextgetContents150,5359
chooseGoodBuffering :: Handle -> IO ()chooseGoodBuffering101,3494
appendFile :: FilePath -> Text -> IO ()appendFile87,2969

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Lazy/Internal.hs,47
module Data.Text.Lazy.InternalInternal14,393

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Lazy/Read.hs,670
module Data.Text.Lazy.ReadRead13,300
type Reader a = IReader Text aReader33,798
type Parser = IParser TextParser34,829
signed :: Num a => Reader a -> Reader asigned105,3849
signa :: Num a => Parser a -> Parser asigna151,5595
rational :: Fractional a => Reader arational129,4691
int64ToInt :: Int64 -> Intint64ToInt190,7154
hexadecimal :: Integral a => Reader ahexadecimal77,2696
hex :: Integral a => Reader ahex85,2952
floaty :: Fractional a => (Integer -> Integer -> Integer -> a) -> Reader afloaty167,6298
double :: Reader Doubledouble146,5430
decimal :: Integral a => Reader adecimal47,1371
char :: (Char -> Bool) -> Parser Charchar162,6092

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Read.hs,622
module Data.Text.ReadRead13,317
type Reader a = IReader Text aReader34,847
type Parser a = IParser Text aParser35,878
signed :: Num a => Reader a -> Reader asigned115,4244
signa :: Num a => Parser a -> Parser asigna161,6027
rational :: Fractional a => Reader arational139,5123
hexadecimal :: Integral a => Reader ahexadecimal78,2752
hex :: Integral a => Reader ahex95,3432
floaty :: Fractional a => (Integer -> Integer -> Integer -> a) -> Reader afloaty177,6730
double :: Reader Doubledouble156,5862
decimal :: Integral a => Reader adecimal48,1424
char :: (Char -> Bool) -> Parser Charchar172,6524

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Show.hs,177
module Data.Text.ShowShow15,304
unpackCString# :: Addr# -> TextunpackCString#53,1209
unpack ::unpack40,936
singleton_ ::singleton_88,2231
singleton ::singleton75,1940

/home/effectfully/.fastdogs/text-1.2.5.0/src/Data/Text/Unsafe.hs,540
module Data.Text.UnsafeUnsafe11,335
data Iter = Iter {-# UNPACK #-} !Char {-# UNPACK #-} !IntIter62,1837
unsafeTail :: Text -> TextunsafeTail53,1646
unsafeHead :: Text -> CharunsafeHead42,1196
takeWord16 :: Int -> Text -> TexttakeWord16122,3936
reverseIter_ :: Text -> Int -> IntreverseIter_107,3400
reverseIter :: Text -> Int -> (Char,Int)reverseIter92,2912
lengthWord16 :: Text -> IntlengthWord16117,3767
iter_ :: Text -> Int -> Intiter_83,2520
iter ::iter67,2067
dropWord16 :: Int -> Text -> TextdropWord16127,4119

/home/effectfully/.fastdogs/text-1.2.5.0/tests/LiteralRuleTest.hs,156
module LiteralRuleTest whereLiteralRuleTest3,36
utf8Strings :: [Text]utf8Strings12,319
strings :: [Text]strings8,151
empties :: [Text]empties16,507

/home/effectfully/.fastdogs/text-1.2.5.0/tests/Tests.hs,48
module MainMain3,65
main :: IO ()main16,401

/home/effectfully/.fastdogs/text-1.2.5.0/tests/Tests/Inspection/Lazy.hs,10220
module Tests.Inspection.Lazy (tests) whereLazy4,221
unpack_toUpper_snoc_singleton = T.unpack . T.toUpper . snoc . T.singletonunpack_toUpper_snoc_singleton88,4678
unpack_take_pack = T.unpack . take . T.packunpack_take_pack20,926
unpack_append_pack = T.unpack . append . T.packunpack_append_pack104,5462
unfoldrN      x = T.unfoldrN i (\c -> if c  == 'z' then Nothing else Just (c, succ c)) xunfoldrN168,10092
unfoldr       x = T.unfoldr    (\c -> if c  == 'z' then Nothing else Just (c, succ c)) xunfoldr166,9980
tests :: TestTreetests115,5895
takeWhile     x = T.takeWhile isAscii xtakeWhile170,10205
take          x = T.take i xtake128,8644
snoc          x = x `T.snoc` 'x'snoc134,8795
scanl         x = T.scanl  (\c1 c2 -> toEnum $ fromEnum c1 + fromEnum c2) 'x' xscanl164,9879
replicate     x = T.replicate i xreplicate178,10449
null_unfoldrN = T.null . unfoldrNnull_unfoldrN41,2110
null_singleton = T.null . T.singletonnull_singleton57,3084
null_pack = T.null . T.packnull_pack97,5136
null_map_unfoldr = T.null . map . unfoldrnull_map_unfoldr28,1334
null_empty = T.null . emptynull_empty89,4752
minimum_unfoldr = T.minimum . unfoldrminimum_unfoldr92,4886
minimum_toLower_unfoldrN = T.minimum . T.toLower . unfoldrNminimum_toLower_unfoldrN96,5076
minimum_tail_singleton = T.minimum . T.tail . T.singletonminimum_tail_singleton67,3578
minimum_tail_pack = T.minimum . T.tail . T.packminimum_tail_pack47,2466
minimum_singleton = T.minimum . T.singletonminimum_singleton107,5576
minimum_pack = T.minimum . T.packminimum_pack48,2514
minimum_justifyLeft_drop_unfoldrN = T.minimum . justifyLeft . drop . unfoldrNminimum_justifyLeft_drop_unfoldrN56,3006
minimum_filter_toUpper_singleton = T.minimum . filter . T.toUpper . T.singletonminimum_filter_toUpper_singleton99,5218
maximum_unfoldrN = T.maximum . unfoldrNmaximum_unfoldrN109,5690
maximum_unfoldr = T.maximum . unfoldrmaximum_unfoldr14,604
maximum_take_unfoldrN = T.maximum . take . unfoldrNmaximum_take_unfoldrN60,3238
maximum_singleton = T.maximum . T.singletonmaximum_singleton90,4780
map           x = T.map succ xmap136,8848
length_unfoldrN = T.length . unfoldrNlength_unfoldrN106,5538
length_takeWhile_singleton = T.length . takeWhile . T.singletonlength_takeWhile_singleton49,2548
length_singleton = T.length . T.singletonlength_singleton63,3410
length_pack = T.length . T.packlength_pack69,3660
length_justifyLeft_unfoldr = T.length . justifyLeft . unfoldrlength_justifyLeft_unfoldr80,4246
last_toUpper_toLower_unfoldrN = T.last . T.toUpper . T.toLower . unfoldrNlast_toUpper_toLower_unfoldrN27,1260
last_tail_unfoldrN = T.last . T.tail . unfoldrNlast_tail_unfoldrN39,2016
last_map_justifyLeft_pack = T.last . map . justifyLeft . T.packlast_map_justifyLeft_pack58,3122
last_map_append_unfoldrN = T.last . map . append . unfoldrNlast_map_append_unfoldrN53,2824
justifyLeft   x = T.justifyLeft 42 'x' xjustifyLeft138,8898
isPrefixOf_unfoldrN = isPrefixOf . unfoldrNisPrefixOf_unfoldrN103,5418
isPrefixOf_unfoldr = isPrefixOf . unfoldrisPrefixOf_unfoldr15,642
isPrefixOf_pack = isPrefixOf . T.packisPrefixOf_pack111,5766
isPrefixOf_intersperse_unfoldr = isPrefixOf . intersperse . unfoldrisPrefixOf_intersperse_unfoldr17,738
isPrefixOf_init_singleton = isPrefixOf . T.init . T.singletonisPrefixOf_init_singleton91,4824
isPrefixOf    x = unfoldrN 'a' `T.isPrefixOf` xisPrefixOf144,9097
intersperse   x = T.intersperse 'x' xintersperse140,8966
index_toCaseFold_singleton = index . T.toCaseFold . T.singletonindex_toCaseFold_singleton19,862
index_dropWhile_unfoldr = index . dropWhile . unfoldrindex_dropWhile_unfoldr98,5164
index         x = x `T.index` iindex180,10508
i = 42i123,8570
head_unfoldrN = T.head . unfoldrNhead_unfoldrN70,3692
head_snoc_toUpper_singleton = T.head . snoc . T.toUpper . T.singletonhead_snoc_toUpper_singleton108,5620
head_singleton = T.head . T.singletonhead_singleton83,4430
head_replicate_singleton = T.head . replicate . T.singletonhead_replicate_singleton87,4618
head_pack = T.head . T.packhead_pack100,5298
head_map_pack = T.head . map . T.packhead_map_pack71,3726
head_filter_pack = T.head . filter . T.packhead_filter_pack30,1440
head_append_unfoldr = T.head . append . unfoldrhead_append_unfoldr55,2958
head_append_toTitle_singleton = T.head . append . T.toTitle . T.singletonhead_append_toTitle_singleton44,2266
foldr_stripStart_toCaseFold_singleton = foldr . T.stripStart . T.toCaseFold . T.singletonfoldr_stripStart_toCaseFold_singleton72,3764
foldr_scanl_unfoldrN = foldr . scanl . unfoldrNfoldr_scanl_unfoldrN36,1874
foldr_map_toTitle_unfoldrN = foldr . map . T.toTitle . unfoldrNfoldr_map_toTitle_unfoldrN82,4366
foldr_intersperse_singleton = foldr . intersperse . T.singletonfoldr_intersperse_singleton51,2682
foldr_init_pack = foldr . T.init . T.packfoldr_init_pack112,5804
foldr_filter_singleton = foldr . filter . T.singletonfoldr_filter_singleton22,1008
foldr_cons_singleton = foldr . cons . T.singletonfoldr_cons_singleton38,1966
foldr1_toTitle_stripStart_singleton = foldr1 . T.toTitle . T.stripStart . T.singletonfoldr1_toTitle_stripStart_singleton31,1484
foldr1_take_unfoldr = foldr1 . take . unfoldrfoldr1_take_unfoldr40,2064
foldr1_stripStart_singleton = foldr1 . T.stripStart . T.singletonfoldr1_stripStart_singleton23,1062
foldr1_scanl_singleton = foldr1 . scanl . T.singletonfoldr1_scanl_singleton66,3524
foldr1_pack = foldr1 . T.packfoldr1_pack64,3452
foldr1_init_singleton = foldr1 . T.init . T.singletonfoldr1_init_singleton42,2144
foldr1_drop_singleton = foldr1 . drop . T.singletonfoldr1_drop_singleton46,2414
foldr1_dropWhile_intersperse_pack = foldr1 . dropWhile . intersperse . T.packfoldr1_dropWhile_intersperse_pack85,4508
foldr1_cons_pack = foldr1 . cons . T.packfoldr1_cons_pack78,4120
foldr1        x = T.foldr1  (\c1 c2 -> toEnum $ fromEnum c1 + fromEnum c2) xfoldr1158,9674
foldr         x = T.foldr   (\c x -> x + fromEnum c) 0 xfoldr156,9596
foldl_take_toCaseFold_unfoldr = foldl . take . T.toCaseFold . unfoldrfoldl_take_toCaseFold_unfoldr50,2612
foldl_stripStart_snoc_singleton = foldl . T.stripStart . snoc . T.singletonfoldl_stripStart_snoc_singleton93,4924
foldl_singleton = foldl . T.singletonfoldl_singleton21,970
foldl_pack = foldl . T.packfoldl_pack26,1232
foldl_drop_singleton = foldl . drop . T.singletonfoldl_drop_singleton24,1128
foldl1_tail_intersperse_unfoldr = foldl1 . T.tail . intersperse . unfoldrfoldl1_tail_intersperse_unfoldr45,2340
foldl1'_toTitle_singleton = foldl1' . T.toTitle . T.singletonfoldl1'_toTitle_singleton101,5326
foldl1'_toTitle_dropWhile_singleton = foldl1' . T.toTitle . dropWhile . T.singletonfoldl1'_toTitle_dropWhile_singleton79,4162
foldl1'_tail_unfoldrN = foldl1' . T.tail . unfoldrNfoldl1'_tail_unfoldrN59,3186
foldl1'_singleton = foldl1' . T.singletonfoldl1'_singleton65,3482
foldl1'_pack = foldl1' . T.packfoldl1'_pack86,4586
foldl1'_justifyLeft_pack = foldl1' . justifyLeft . T.packfoldl1'_justifyLeft_pack81,4308
foldl1'_filter_pack = foldl1' . filter . T.packfoldl1'_filter_pack113,5846
foldl1'_filter_intersperse_singleton = foldl1' . filter . intersperse . T.singletonfoldl1'_filter_intersperse_singleton62,3326
foldl1'_filter_filter_unfoldr = foldl1' . filter . filter . unfoldrfoldl1'_filter_filter_unfoldr75,3956
foldl1'       x = T.foldl1' (\c1 c2 -> toEnum $ fromEnum c1 + fromEnum c2) xfoldl1'154,9496
foldl1        x = T.foldl1  (\c1 c2 -> toEnum $ fromEnum c1 + fromEnum c2) xfoldl1152,9397
foldl'_unfoldrN = foldl' . unfoldrNfoldl'_unfoldrN61,3290
foldl'_singleton = foldl' . T.singletonfoldl'_singleton84,4468
foldl'        x = T.foldl'  (\x c -> x + fromEnum c) 0 xfoldl'150,9318
foldl         x = T.foldl   (\x c -> x + fromEnum c) 0 xfoldl148,9240
find_unfoldr = find . unfoldrfind_unfoldr102,5388
find_justifyLeft_takeWhile_pack = find . justifyLeft . takeWhile . T.packfind_justifyLeft_takeWhile_pack54,2884
find          x = T.find isAscii xfind176,10394
filter        x = T.filter isAscii xfilter174,10335
empty         _ = T.emptyempty126,8597
dropWhile     x = T.dropWhile isAscii xdropWhile172,10270
drop          x = T.drop i xdrop130,8693
cons          x = 'x' `T.cons` xcons132,8742
compareLength_take_pack = compareLength . take . T.packcompareLength_take_pack18,806
compareLength_takeWhile_intersperse_unfoldr = compareLength . takeWhile . intersperse . unfoldrcompareLength_takeWhile_intersperse_unfoldr34,1724
compareLength_snoc_unfoldr = compareLength . snoc . unfoldrcompareLength_snoc_unfoldr32,1570
compareLength_pack = compareLength . T.packcompareLength_pack37,1922
compareLength_intersperse_toUpper_unfoldr = compareLength . intersperse . T.toUpper . unfoldrcompareLength_intersperse_toUpper_unfoldr33,1630
compareLength_cons_snoc_singleton = compareLength . cons . snoc . T.singletoncompareLength_cons_snoc_singleton52,2746
compareLength x = x `T.compareLength` icompareLength146,9171
append        x = unfoldrN 'y' `T.append` xappend142,9031
any_unfoldr = any . unfoldrany_unfoldr105,5510
any_toUpper_unfoldr = any . T.toUpper . unfoldrany_toUpper_unfoldr94,5000
any_toTitle_tail_unfoldrN = any . T.toTitle . T.tail . unfoldrNany_toTitle_tail_unfoldrN29,1376
any_toTitle_scanl_unfoldr = any . T.toTitle . scanl . unfoldrany_toTitle_scanl_unfoldr77,4058
any_singleton = any . T.singletonany_singleton76,4024
any_pack = any . T.packany_pack68,3636
any_filter_init_pack = any . filter . T.init . T.packany_filter_init_pack16,684
any_append_pack = any . append . T.packany_append_pack73,3854
any           x = T.any isAscii xany160,9773
all_unfoldr = all . unfoldrall_unfoldr95,5048
all_toCaseFold_unfoldr = all . T.toCaseFold . unfoldrall_toCaseFold_unfoldr25,1178
all_take_pack = all . take . T.packall_take_pack110,5730
all_init_map_unfoldrN = all . T.init . map . unfoldrNall_init_map_unfoldrN35,1820
all_drop_toUpper_unfoldrN = all . drop . T.toUpper . unfoldrNall_drop_toUpper_unfoldrN74,3894
all_cons_dropWhile_singleton = all . cons . dropWhile . T.singletonall_cons_dropWhile_singleton43,2198
all           x = T.all isAscii xall162,9826

/home/effectfully/.fastdogs/text-1.2.5.0/tests/Tests/Inspection/Strict.hs,11884
module Tests.Inspection.Strict (tests) whereStrict5,242
unpack_unfoldr = T.unpack . unfoldrunpack_unfoldr115,6582
unpack_toUpper_snoc_singleton = T.unpack . T.toUpper . snoc . T.singletonunpack_toUpper_snoc_singleton114,6508
unpack_toCaseFold_scanr_singleton = T.unpack . T.toCaseFold . scanr . T.singletonunpack_toCaseFold_scanr_singleton113,6426
unpack_stripEnd_takeWhileEnd_singleton = T.unpack . T.stripEnd . takeWhileEnd . T.singletonunpack_stripEnd_takeWhileEnd_singleton112,6334
unpack_map_pack = T.unpack . map . T.packunpack_map_pack111,6292
unpack_justifyLeft_take_empty = T.unpack . justifyLeft . take . emptyunpack_justifyLeft_take_empty110,6222
unpack_empty = T.unpack . emptyunpack_empty109,6190
unfoldrN      x = T.unfoldrN i (\c -> if c  == 'z' then Nothing else Just (c, succ c)) xunfoldrN193,11891
unfoldr       x = T.unfoldr    (\c -> if c  == 'z' then Nothing else Just (c, succ c)) xunfoldr191,11779
tests :: TestTreetests117,6619
takeWhileEnd  x = T.takeWhileEnd isAscii xtakeWhileEnd199,12134
takeWhile     x = T.takeWhile isAscii xtakeWhile195,12004
takeEnd       x = T.takeEnd i xtakeEnd141,9950
take          x = T.take i xtake139,9901
snoc          x = x `T.snoc` 'x'snoc149,10162
scanr1        x = T.scanr1 (\c1 c2 -> toEnum $ fromEnum c1 + fromEnum c2)     xscanr1189,11677
scanr         x = T.scanr  (\c1 c2 -> toEnum $ fromEnum c1 + fromEnum c2) 'x' xscanr187,11576
scanl1        x = T.scanl1 (\c1 c2 -> toEnum $ fromEnum c1 + fromEnum c2)     xscanl1185,11474
scanl         x = T.scanl  (\c1 c2 -> toEnum $ fromEnum c1 + fromEnum c2) 'x' xscanl183,11373
null_toCaseFold_dropAround_singleton = T.null . T.toCaseFold . dropAround . T.singletonnull_toCaseFold_dropAround_singleton108,6102
null_map_empty = T.null . map . emptynull_map_empty107,6064
null_init_drop_decodeUtf8 = T.null . T.init . drop . T.decodeUtf8null_init_drop_decodeUtf8106,5998
null_cons_singleton = T.null . cons . T.singletonnull_cons_singleton105,5948
minimum_unfoldrN = T.minimum . unfoldrNminimum_unfoldrN104,5908
minimum_tail_map_singleton = T.minimum . T.tail . map . T.singletonminimum_tail_map_singleton103,5840
minimum_scanl1_takeWhile_singleton = T.minimum . scanl1 . takeWhile . T.singletonminimum_scanl1_takeWhile_singleton102,5758
minimum_map_singleton = T.minimum . map . T.singletonminimum_map_singleton101,5704
minimum_intersperse_toTitle_singleton = T.minimum . intersperse . T.toTitle . T.singletonminimum_intersperse_toTitle_singleton100,5614
minimum_init_singleton = T.minimum . T.init . T.singletonminimum_init_singleton99,5556
maximum_toLower_empty = T.maximum . T.toLower . emptymaximum_toLower_empty98,5502
maximum_take_unfoldrN = T.maximum . take . unfoldrNmaximum_take_unfoldrN97,5450
maximum_justifyRight_singleton = T.maximum . justifyRight . T.singletonmaximum_justifyRight_singleton96,5378
maximum_justifyLeft_filter_singleton = T.maximum . justifyLeft . filter . T.singletonmaximum_justifyLeft_filter_singleton95,5292
map           x = T.map succ xmap151,10215
length_toTitle_empty = T.length . T.toTitle . emptylength_toTitle_empty94,5240
length_takeWhile_singleton = T.length . takeWhile . T.singletonlength_takeWhile_singleton93,5176
length_takeWhile_intersperse_singleton = T.length . takeWhile . intersperse . T.singletonlength_takeWhile_intersperse_singleton92,5086
length_reverse_singleton = T.length . T.reverse . T.singletonlength_reverse_singleton91,5024
length_pack = T.length . T.packlength_pack90,4992
length_justifyLeft_decodeUtf8 = T.length . justifyLeft . T.decodeUtf8length_justifyLeft_decodeUtf889,4922
length_intersperse_center_singleton = T.length . intersperse . center . T.singletonlength_intersperse_center_singleton88,4838
length_empty = T.length . emptylength_empty87,4806
last_toUpper_toLower_unfoldrN = T.last . T.toUpper . T.toLower . unfoldrNlast_toUpper_toLower_unfoldrN86,4732
last_toUpper_stripStart_singleton = T.last . T.toUpper . T.stripStart . T.singletonlast_toUpper_stripStart_singleton85,4648
last_tail_unfoldrN = T.last . T.tail . unfoldrNlast_tail_unfoldrN84,4600
last_map_take_pack = T.last . map . take . T.packlast_map_take_pack83,4550
last_dropWhile_unfoldrN = T.last . dropWhile . unfoldrNlast_dropWhile_unfoldrN82,4494
justifyRight  x = T.justifyRight 42 'x' xjustifyRight155,10333
justifyLeft   x = T.justifyLeft 42 'x' xjustifyLeft153,10265
isPrefixOf_take_singleton = isPrefixOf . take . T.singletonisPrefixOf_take_singleton81,4434
isPrefixOf_take_empty = isPrefixOf . take . emptyisPrefixOf_take_empty80,4384
isPrefixOf_snoc_stripStart_pack = isPrefixOf . snoc . T.stripStart . T.packisPrefixOf_snoc_stripStart_pack79,4308
isPrefixOf_init_take_unfoldrN = isPrefixOf . T.init . take . unfoldrNisPrefixOf_init_take_unfoldrN78,4238
isPrefixOf_dropWhile_dropWhile_pack = isPrefixOf . dropWhile . dropWhile . T.packisPrefixOf_dropWhile_dropWhile_pack77,4156
isPrefixOf    x = unfoldrN 'a' `T.isPrefixOf` xisPrefixOf163,10591
intersperse   x = T.intersperse 'x' xintersperse159,10460
index_justifyLeft_stripEnd_singleton = index . justifyLeft . T.stripEnd . T.singletonindex_justifyLeft_stripEnd_singleton76,4070
index_dropWhile_unfoldr = index . dropWhile . unfoldrindex_dropWhile_unfoldr74,3960
index_dropWhileEnd_empty = index . dropWhileEnd . emptyindex_dropWhileEnd_empty75,4014
index         x = x `T.index` iindex209,12457
i = 42i134,9827
head_takeEnd_take_singleton = T.head . takeEnd . take . T.singletonhead_takeEnd_take_singleton73,3892
head_strip_take_empty = T.head . T.strip . take . emptyhead_strip_take_empty72,3836
head_singleton = T.head . T.singletonhead_singleton71,3798
head_drop_decodeUtf8 = T.head . drop . T.decodeUtf8head_drop_decodeUtf870,3746
head_cons_unfoldr = T.head . cons . unfoldrhead_cons_unfoldr69,3702
head_append_toTitle_singleton = T.head . append . T.toTitle . T.singletonhead_append_toTitle_singleton68,3628
foldr_scanl_unfoldr = foldr . scanl . unfoldrfoldr_scanl_unfoldr61,3246
foldr_intersperse_singleton = foldr . intersperse . T.singletonfoldr_intersperse_singleton60,3182
foldr_intersperse_dropWhile_unfoldr = foldr . intersperse . dropWhile . unfoldrfoldr_intersperse_dropWhile_unfoldr59,3102
foldr_empty = foldr . emptyfoldr_empty58,3074
foldr_append_singleton = foldr . append . T.singletonfoldr_append_singleton57,3020
foldr1_unfoldrN = foldr1 . unfoldrNfoldr1_unfoldrN67,3592
foldr1_take_drop_pack = foldr1 . take . drop . T.packfoldr1_take_drop_pack66,3538
foldr1_singleton = foldr1 . T.singletonfoldr1_singleton65,3498
foldr1_reverse_unfoldrN = foldr1 . T.reverse . unfoldrNfoldr1_reverse_unfoldrN64,3442
foldr1_justifyLeft_scanl1_empty = foldr1 . justifyLeft . scanl1 . emptyfoldr1_justifyLeft_scanl1_empty63,3370
foldr1_dropWhile_intersperse_pack = foldr1 . dropWhile . intersperse . T.packfoldr1_dropWhile_intersperse_pack62,3292
foldr1        x = T.foldr1  (\c1 c2 -> toEnum $ fromEnum c1 + fromEnum c2) xfoldr1177,11168
foldr         x = T.foldr   (\c x -> x + fromEnum c) 0 xfoldr175,11090
foldl_scanl_dropWhile_empty = foldl . scanl . dropWhile . emptyfoldl_scanl_dropWhile_empty47,2400
foldl_pack = foldl . T.packfoldl_pack46,2372
foldl_justifyLeft_decodeUtf8 = foldl . justifyLeft . T.decodeUtf8foldl_justifyLeft_decodeUtf845,2306
foldl_justifyLeft_cons_empty = foldl . justifyLeft . cons . emptyfoldl_justifyLeft_cons_empty44,2240
foldl_center_empty = foldl . center . emptyfoldl_center_empty43,2196
foldl1_tail_singleton = foldl1 . T.tail . T.singletonfoldl1_tail_singleton56,2966
foldl1_scanr_singleton = foldl1 . scanr . T.singletonfoldl1_scanr_singleton55,2912
foldl1_intersperse_empty = foldl1 . intersperse . emptyfoldl1_intersperse_empty54,2856
foldl1'_take_unfoldr = foldl1' . take . unfoldrfoldl1'_take_unfoldr53,2808
foldl1'_singleton = foldl1' . T.singletonfoldl1'_singleton52,2766
foldl1'_scanl_justifyLeft_unfoldr = foldl1' . scanl . justifyLeft . unfoldrfoldl1'_scanl_justifyLeft_unfoldr51,2690
foldl1'_scanl_decodeUtf8 = foldl1' . scanl . T.decodeUtf8foldl1'_scanl_decodeUtf850,2632
foldl1'_dropWhile_dropWhileEnd_singleton = foldl1' . dropWhile . dropWhileEnd . T.singletonfoldl1'_dropWhile_dropWhileEnd_singleton49,2540
foldl1'_append_append_decodeUtf8 = foldl1' . append . append . T.decodeUtf8foldl1'_append_append_decodeUtf848,2464
foldl1'       x = T.foldl1' (\c1 c2 -> toEnum $ fromEnum c1 + fromEnum c2) xfoldl1'173,10990
foldl1        x = T.foldl1  (\c1 c2 -> toEnum $ fromEnum c1 + fromEnum c2) xfoldl1171,10891
foldl'_toCaseFold_intersperse_unfoldrN = foldl' . T.toCaseFold . intersperse . unfoldrNfoldl'_toCaseFold_intersperse_unfoldrN42,2108
foldl'_scanr1_singleton = foldl' . scanr1 . T.singletonfoldl'_scanr1_singleton41,2052
foldl'_cons_pack = foldl' . cons . T.packfoldl'_cons_pack40,2010
foldl'        x = T.foldl'  (\x c -> x + fromEnum c) 0 xfoldl'169,10812
foldl         x = T.foldl   (\x c -> x + fromEnum c) 0 xfoldl167,10734
find_take_unfoldrN = find . take . unfoldrNfind_take_unfoldrN39,1966
find_decodeUtf8 = find . T.decodeUtf8find_decodeUtf838,1928
find          x = T.find isAscii xfind207,12402
filter        x = T.filter isAscii xfilter205,12343
empty         _ = T.emptyempty137,9854
dropWhileEnd  x = T.dropWhileEnd isAscii xdropWhileEnd201,12205
dropWhile     x = T.dropWhile isAscii xdropWhile197,12069
dropEnd       x = T.dropEnd i xdropEnd145,10054
dropAround    x = T.dropAround isAscii xdropAround203,12276
drop          x = T.drop i xdrop143,10005
cons          x = 'x' `T.cons` xcons147,10109
compareLength_unfoldr = compareLength . unfoldrcompareLength_unfoldr37,1880
compareLength_toTitle_unfoldrN = compareLength . T.toTitle . unfoldrNcompareLength_toTitle_unfoldrN36,1810
compareLength_toTitle_singleton = compareLength . T.toTitle . T.singletoncompareLength_toTitle_singleton35,1736
compareLength_takeWhile_intersperse_unfoldr = compareLength . takeWhile . intersperse . unfoldrcompareLength_takeWhile_intersperse_unfoldr34,1640
compareLength_snoc_unfoldr = compareLength . snoc . unfoldrcompareLength_snoc_unfoldr33,1580
compareLength_singleton = compareLength . T.singletoncompareLength_singleton32,1526
compareLength_pack = compareLength . T.packcompareLength_pack31,1482
compareLength_empty = compareLength . emptycompareLength_empty30,1438
compareLength_drop_unfoldr = compareLength . drop . unfoldrcompareLength_drop_unfoldr29,1378
compareLength_cons_snoc_singleton = compareLength . cons . snoc . T.singletoncompareLength_cons_snoc_singleton28,1300
compareLength x = x `T.compareLength` icompareLength165,10665
center        x = T.center i 'x' xcenter157,10403
append        x = unfoldrN 'y' `T.append` xappend161,10525
any_unfoldrN = any . unfoldrNany_unfoldrN27,1270
any_toCaseFold_unfoldr = any . T.toCaseFold . unfoldrany_toCaseFold_unfoldr26,1216
any_stripStart_singleton = any . T.stripStart . T.singletonany_stripStart_singleton25,1156
any_singleton = any . T.singletonany_singleton24,1122
any_justifyRight_dropEnd_singleton = any . justifyRight . dropEnd . T.singletonany_justifyRight_dropEnd_singleton23,1042
any_filter_init_pack = any . filter . T.init . T.packany_filter_init_pack22,988
any           x = T.any isAscii xany179,11267
all_stripEnd_stripStart_singleton = all . T.stripEnd . T.stripStart . T.singletonall_stripEnd_stripStart_singleton21,906
all_scanl_init_unfoldrN = all . scanl . T.init . unfoldrNall_scanl_init_unfoldrN20,848
all_justifyRight_singleton = all . justifyRight . T.singletonall_justifyRight_singleton19,786
all_drop_pack = all . drop . T.packall_drop_pack17,688
all_dropWhileEnd_singleton = all . dropWhileEnd . T.singletonall_dropWhileEnd_singleton18,724
all_cons_pack = all . cons . T.packall_cons_pack16,652
all           x = T.all isAscii xall181,11320

/home/effectfully/.fastdogs/text-1.2.5.0/tests/Tests/Lift.hs,59
module Tests.LiftLift3,68
tests :: TestTreetests14,308

/home/effectfully/.fastdogs/text-1.2.5.0/tests/Tests/Properties.hs,72
module Tests.PropertiesProperties4,125
tests :: TestTreetests20,637

/home/effectfully/.fastdogs/text-1.2.5.0/tests/Tests/Properties/Basics.hs,3731
module Tests.Properties.BasicsBasics4,107
unsnoc xs@(_:_) = Just (init xs, last xs)unsnoc44,1857
uncons (x:xs) = Just (x,xs)uncons35,1476
tl_unsnoc         = unsnoc   `eqP` (fmap (first unpackS) . TL.unsnoc)tl_unsnoc48,1995
tl_uncons         = uncons   `eqP` (fmap (second unpackS) . TL.uncons)tl_uncons42,1785
tl_tail           = tail   `eqP` (unpackS . TL.tail)tl_tail62,2691
tl_snoc x         = (++ [x]) `eqP` (unpackS . (flip TL.snoc) x)tl_snoc27,1052
tl_null           = null   `eqP` TL.nulltl_null71,3192
tl_length         = L.genericLength `eqP` TL.lengthtl_length76,3449
tl_last           = last   `eqP` TL.lasttl_last57,2403
tl_init           = init   `eqP` (unpackS . TL.init)tl_init67,2991
tl_head           = head   `eqP` TL.headtl_head53,2214
tl_cons x         = (x:)     `eqP` (unpackS . TL.cons x)tl_cons24,869
tl_compareLength t= (compare (TL.length t)) `eq` TL.compareLength ttl_compareLength78,3567
testBasics :: TestTreetestBasics85,3773
t_unsnoc          = unsnoc   `eqP` (fmap (first unpackS) . T.unsnoc)t_unsnoc47,1926
t_uncons          = uncons   `eqP` (fmap (second unpackS) . T.uncons)t_uncons41,1715
t_tail            = tail   `eqP` (unpackS . T.tail)t_tail61,2639
t_snoc x          = (++ [x]) `eqP` (unpackS . (flip T.snoc) x)t_snoc26,989
t_null            = null   `eqP` T.nullt_null70,3152
t_length          = length `eqP` T.lengtht_length75,3407
t_last            = last   `eqP` T.lastt_last56,2363
t_init            = init   `eqP` (unpackS . T.init)t_init66,2939
t_head            = head   `eqP` T.headt_head52,2174
t_cons x          = (x:)     `eqP` (unpackS . T.cons x)t_cons23,813
t_compareLength t = (compare (T.length t)) `eq` T.compareLength tt_compareLength77,3501
t_append s        = (s++)    `eqP` (unpackS . T.append (packS s))t_append33,1409
sl_length         = (fromIntegral . length) `eqP` SL.lengthsl_length74,3347
sf_uncons p       = (uncons . L.filter p) `eqP`sf_uncons39,1599
sf_tail p         = (tail . L.filter p) `eqP` (unpackS . S.tail . S.filter p)sf_tail60,2561
sf_null p         = (null . L.filter p) `eqP` (S.null . S.filter p)sf_null69,3084
sf_length p       = (length . L.filter p) `eqP` (S.length . S.filter p)sf_length73,3275
sf_last p         = (last . L.filter p) `eqP` (S.last . S.filter p)sf_last55,2295
sf_init p         = (init . L.filter p) `eqP` (unpackS . S.init . S.filter p)sf_init65,2861
sf_head p         = (head . L.filter p) `eqP` (S.head . S.filter p)sf_head51,2106
sf_cons p x       = ((x:) . L.filter p) `eqP` (unpackS . S.cons x . S.filter p)sf_cons22,733
sf_append p s     = (L.filter p s++) `eqP`sf_append31,1295
s_uncons          = uncons   `eqP` (fmap (second unpackS) . S.uncons)s_uncons38,1529
s_tail_s          = tail   `eqP` (unpackS . S.unstream . S.tail)s_tail_s59,2496
s_tail            = tail   `eqP` (unpackS . S.tail)s_tail58,2444
s_snoc x          = (++ [x]) `eqP` (unpackS . (flip S.snoc) x)s_snoc25,926
s_null            = null   `eqP` S.nulls_null68,3044
s_length          = length `eqP` S.lengths_length72,3233
s_last            = last   `eqP` S.lasts_last54,2255
s_init_s          = init   `eqP` (unpackS . S.unstream . S.init)s_init_s64,2796
s_init            = init   `eqP` (unpackS . S.init)s_init63,2744
s_head            = head   `eqP` S.heads_head50,2066
s_filter_eq s = S.filter p t == S.streamList (filter p s)s_filter_eq81,3657
s_cons_s x        = (x:)     `eqP` (unpackS . S.unstream . S.cons x)s_cons_s21,664
s_cons x          = (x:)     `eqP` (unpackS . S.cons x)s_cons20,608
s_append_s s      = (s++)    `eqP`s_append_s29,1189
s_append s        = (s++)    `eqP` (unpackS . S.append (S.streamList s))s_append28,1116

/home/effectfully/.fastdogs/text-1.2.5.0/tests/Tests/Properties/Builder.hs,2939
module Tests.Properties.BuilderBuilder6,154
testBuilder :: TestTreetestBuilder103,3738
tb_singleton = id `eqP`tb_singleton26,741
tb_realfloat_float (a::Float) = tb_realfloat atb_realfloat_float79,2818
tb_realfloat_double (a::Double) = tb_realfloat atb_realfloat_double80,2865
tb_realfloat :: (RealFloat a, Show a) => a -> Booltb_realfloat76,2698
tb_hexadecimal_word8 (a::Word8) = tb_hex atb_hexadecimal_word871,2519
tb_hexadecimal_word64 (a::Word64) = tb_hex atb_hexadecimal_word6474,2652
tb_hexadecimal_word32 (a::Word32) = tb_hex atb_hexadecimal_word3273,2607
tb_hexadecimal_word16 (a::Word16) = tb_hex atb_hexadecimal_word1672,2562
tb_hexadecimal_word (a::Word) = tb_hex atb_hexadecimal_word70,2478
tb_hexadecimal_integer (a::Integer) = tb_hex atb_hexadecimal_integer64,2222
tb_hexadecimal_int8 (a::Int8) = tb_hex atb_hexadecimal_int866,2308
tb_hexadecimal_int64 (a::Int64) = tb_hex atb_hexadecimal_int6469,2435
tb_hexadecimal_int32 (a::Int32) = tb_hex atb_hexadecimal_int3268,2392
tb_hexadecimal_int16 (a::Int16) = tb_hex atb_hexadecimal_int1667,2349
tb_hexadecimal_int (a::Int) = tb_hex atb_hexadecimal_int65,2269
tb_hex :: (Integral a, Show a) => a -> Booltb_hex61,2102
tb_fromText = L.concat `eq` (unpackS . TB.toLazyText . mconcat .tb_fromText28,835
tb_formatRealFloat_float (a::Float) = tb_formatRealFloat atb_formatRealFloat_float100,3617
tb_formatRealFloat_double (a::Double) = tb_formatRealFloat atb_formatRealFloat_double101,3676
tb_formatRealFloat :: (RealFloat a, Show a) =>tb_formatRealFloat88,3169
tb_decimal_word8 (a::Word8) = tb_decimal atb_decimal_word851,1686
tb_decimal_word64 (a::Word64) = tb_decimal atb_decimal_word6454,1819
tb_decimal_word32 (a::Word32) = tb_decimal atb_decimal_word3253,1774
tb_decimal_word16 (a::Word16) = tb_decimal atb_decimal_word1652,1729
tb_decimal_word (a::Word) = tb_decimal atb_decimal_word50,1645
tb_decimal_integer_big (Big a) = tb_decimal atb_decimal_integer_big44,1390
tb_decimal_integer (a::Integer) = tb_decimal atb_decimal_integer43,1343
tb_decimal_int8 (a::Int8) = tb_decimal atb_decimal_int846,1475
tb_decimal_int64 (a::Int64) = tb_decimal atb_decimal_int6449,1602
tb_decimal_int32 (a::Int32) = tb_decimal atb_decimal_int3248,1559
tb_decimal_int16 (a::Int16) = tb_decimal atb_decimal_int1647,1516
tb_decimal_int (a::Int) = tb_decimal atb_decimal_int45,1436
tb_decimal_big_word64 (BigBounded (a::Word64)) = tb_decimal atb_decimal_big_word6459,2039
tb_decimal_big_word (BigBounded (a::Word)) = tb_decimal atb_decimal_big_word58,1981
tb_decimal_big_int64 (BigBounded (a::Int64)) = tb_decimal atb_decimal_big_int6457,1921
tb_decimal_big_int (BigBounded (a::Int)) = tb_decimal atb_decimal_big_int56,1865
tb_decimal :: (Integral a, Show a) => a -> Booltb_decimal40,1230
tb_associative s1 s2 s3 =tb_associative31,963
showFloat :: (RealFloat a) => TB.FPFormat -> Maybe Int -> a -> ShowSshowFloat82,2915

/home/effectfully/.fastdogs/text-1.2.5.0/tests/Tests/Properties/Folds.hs,4648
module Tests.Properties.FoldsFolds4,112
unf :: Int -> Char -> Maybe (Char, Char)unf131,5864
tl_unfoldrN n m   = (L.take i . L.unfoldr (unf j)) `eq`tl_unfoldrN143,6422
tl_unfoldr n      = L.unfoldr (unf m) `eq` (unpackS . TL.unfoldr (unf m))tl_unfoldr137,6111
tl_scanr1 f       = L.scanr1 f    `eqP` (unpackS . TL.scanr1 f)tl_scanr195,4325
tl_scanr f z      = L.scanr f z   `eqP` (unpackS . TL.scanr f z)tl_scanr93,4197
tl_scanl1 f       = L.scanl1 f    `eqP` (unpackS . TL.scanl1 f)tl_scanl191,4069
tl_scanl f z      = L.scanl f z   `eqP` (unpackS . TL.scanl f z)tl_scanl89,3941
tl_replicate n    = any_replicate m `eq`tl_replicate119,5386
tl_repeat n       = (L.take m . L.repeat) `eq`tl_repeat108,4917
tl_minimum        = L.minimum     `eqP` TL.minimumtl_minimum82,3705
tl_maximum        = L.maximum     `eqP` TL.maximumtl_maximum79,3528
tl_mapAccumR f z  = L.mapAccumR f z `eqP` (second unpackS . TL.mapAccumR f z)tl_mapAccumR103,4775
tl_mapAccumL f z  = L.mapAccumL f z `eqP` (second unpackS . TL.mapAccumL f z)tl_mapAccumL99,4518
tl_iterate f n    = (L.take m . L.iterate f) `eq`tl_iterate127,5701
tl_foldr1 f       = unsquare $tl_foldr151,2136
tl_foldr f z      = unsquare $tl_foldr45,1848
tl_foldl1' f      = L.foldl1' f  `eqP` TL.foldl1' ftl_foldl1'40,1573
tl_foldl1 f       = L.foldl1 f   `eqP` TL.foldl1 ftl_foldl137,1391
tl_foldl' f z     = L.foldl' f z `eqP` TL.foldl' f ztl_foldl'33,1164
tl_foldl f z      = L.foldl f z  `eqP` (TL.foldl f z)tl_foldl26,818
tl_cycle n        = (L.take m . L.cycle) `eq`tl_cycle123,5538
tl_concatMap f    = unsquare $tl_concatMap69,2954
tl_concat         = unsquare $tl_concat63,2600
tl_any p          = L.any p       `eqP` TL.any ptl_any73,3184
tl_all p          = L.all p       `eqP` TL.all ptl_all76,3353
testFolds :: TestTreetestFolds148,6635
t_unfoldrN n m    = (L.take i . L.unfoldr (unf j)) `eq`t_unfoldrN139,6226
t_unfoldr n       = L.unfoldr (unf m) `eq` (unpackS . T.unfoldr (unf m))t_unfoldr135,5997
t_scanr1 f        = L.scanr1 f    `eqP` (unpackS . T.scanr1 f)t_scanr194,4262
t_scanr f z       = L.scanr f z   `eqP` (unpackS . T.scanr f z)t_scanr92,4133
t_scanl1 f        = L.scanl1 f    `eqP` (unpackS . T.scanl1 f)t_scanl190,4006
t_scanl f z       = L.scanl f z   `eqP` (unpackS . T.scanl f z)t_scanl88,3877
t_replicate n     = any_replicate m `eq` (unpackS . T.replicate m . packS)t_replicate117,5271
t_minimum         = L.minimum     `eqP` T.minimumt_minimum81,3655
t_maximum         = L.maximum     `eqP` T.maximumt_maximum78,3478
t_mapAccumR f z   = L.mapAccumR f z `eqP` (second unpackS . T.mapAccumR f z)t_mapAccumR101,4647
t_mapAccumL f z   = L.mapAccumL f z `eqP` (second unpackS . T.mapAccumL f z)t_mapAccumL97,4390
t_foldr1 f        = L.foldr1 f   `eqP` T.foldr1 ft_foldr150,2086
t_foldr f z       = L.foldr f z  `eqP` T.foldr f zt_foldr43,1751
t_foldl1' f       = L.foldl1' f  `eqP` T.foldl1' ft_foldl1'39,1522
t_foldl1 f        = L.foldl1 f   `eqP` T.foldl1 ft_foldl136,1341
t_foldl' f z      = L.foldl' f z `eqP` T.foldl' f zt_foldl'31,1066
t_foldl f z       = L.foldl f z  `eqP` (T.foldl f z)t_foldl24,719
t_concatMap f     = unsquare $t_concatMap67,2847
t_concat          = unsquare $t_concat61,2502
t_any p           = L.any p       `eqP` T.any pt_any72,3136
t_all p           = L.all p       `eqP` T.all pt_all75,3305
sf_scanl p f z    = (L.scanl f z . L.filter p) `eqP`sf_scanl86,3767
sf_minimum p      = (L.minimum . L.filter p) `eqP` (S.minimum . S.filter p)sf_minimum80,3579
sf_maximum p      = (L.maximum . L.filter p) `eqP` (S.maximum . S.filter p)sf_maximum77,3402
sf_foldr1 p f     = unsquare $sf_foldr148,1977
sf_foldr p f z    = (L.foldr f z . L.filter p) `eqP` (S.foldr f z . S.filter p)sf_foldr41,1625
sf_foldl1' p f    = (L.foldl1' f . L.filter p) `eqP` (S.foldl1' f . S.filter p)sf_foldl1'38,1442
sf_foldl1 p f     = (L.foldl1 f . L.filter p) `eqP` (S.foldl1 f . S.filter p)sf_foldl135,1263
sf_foldl' p f z   = (L.foldl' f z . L.filter p) `eqP`sf_foldl'28,918
sf_foldl p f z    = (L.foldl f z . L.filter p) `eqP` (S.foldl f z . S.filter p)sf_foldl22,593
sf_concatMap p f  = unsquare $ (L.concatMap f . L.filter p) `eqP`sf_concatMap65,2701
sf_concat p       = unsquare $sf_concat58,2348
sf_any q p        = (L.any p . L.filter q) `eqP` (S.any p . S.filter q)sf_any71,3064
sf_all q p        = (L.all p . L.filter q) `eqP` (S.all p . S.filter q)sf_all74,3233
s_replicate n     = any_replicate m `eq`s_replicate114,5120
s_concat_s        = unsquare $s_concat_s56,2237
any_replicate n l = concat (L.replicate n l)any_replicate112,5074

/home/effectfully/.fastdogs/text-1.2.5.0/tests/Tests/Properties/Instances.hs,1504
module Tests.Properties.InstancesInstances5,117
tl_mempty         = mempty === (unpackS (mempty :: TL.Text))tl_mempty45,1882
tl_mconcat        = unsquare $tl_mconcat42,1722
tl_mappend s      = mappend s`eqP` (unpackS . mappend (TL.pack s))tl_mappend39,1556
tl_Show           = show     `eq` (show . TL.pack)tl_Show37,1439
tl_Read           = id       `eq` (TL.unpack . read . show)tl_Read35,1329
tl_Ord s          = (compare s) `eq` (compare (TL.pack s) . TL.pack)tl_Ord33,1201
tl_IsString       = fromString  `eqP` (TL.unpack . fromString)tl_IsString47,2005
tl_Eq s           = (s==)    `eq` ((TL.pack s==) . TL.pack)tl_Eq26,830
testInstances :: TestTreetestInstances49,2069
t_mempty          = mempty === (unpackS (mempty :: T.Text))t_mempty44,1822
t_mconcat         = unsquare $t_mconcat40,1623
t_mappend s       = mappend s`eqP` (unpackS . mappend (T.pack s))t_mappend38,1490
t_Show            = show     `eq` (show . T.pack)t_Show36,1389
t_Read            = id       `eq` (T.unpack . read . show)t_Read34,1270
t_Ord s           = (compare s) `eq` (compare (T.pack s) . T.pack)t_Ord32,1134
t_IsString        = fromString  `eqP` (T.unpack . fromString)t_IsString46,1943
t_Eq s            = (s==)    `eq` ((T.pack s==) . T.pack)t_Eq25,772
sf_Ord p s =sf_Ord29,1000
sf_Eq p s =sf_Eq22,651
s_Ord s           = (compare s) `eq` (compare (S.streamList s) . S.streamList)s_Ord27,890
s_Eq s            = (s==)    `eq` ((S.streamList s==) . S.streamList)s_Eq20,550

/home/effectfully/.fastdogs/text-1.2.5.0/tests/Tests/Properties/LowLevel.hs,1714
module Tests.Properties.LowLevel (testLowLevel) whereLowLevel6,170
tl_write_read_line e m b t = write_read head TL.filter TL.hPutStrLntl_write_read_line88,3269
tl_write_read = write_read TL.unlines TL.filter TL.hPutStr TL.hGetContentstl_write_read84,3079
testLowLevel :: TestTreetestLowLevel92,3390
t_write_read_line e m b t = write_read head T.filter T.hPutStrLnt_write_read_line86,3155
t_write_read = write_read T.unlines T.filter T.hPutStr T.hGetContentst_write_read83,3009
t_use_from t = monadicIO $ assert . (==t) =<< run (useAsPtr t fromPtr)t_use_from71,2553
t_take_drop_16 m t = T.append (takeWord16 n t) (dropWord16 n t) === tt_take_drop_1669,2463
t_takeWord16 m t = takeWord16 m t `T.isPrefixOf` tt_takeWord1668,2412
t_mul64 :: Int64 -> Int64 -> Propertyt_mul6444,1552
t_mul32 :: Int32 -> Int32 -> Propertyt_mul3241,1469
t_mul :: Int -> Int -> Propertyt_mul47,1635
t_dropWord16 m t = dropWord16 m t `T.isSuffixOf` tt_dropWord1667,2361
t_copy t = T.copy t === tt_copy73,2625
shiftR_Word32 = shiftR :: Word32 -> PropertyshiftR_Word3263,2305
shiftR_Word16 = shiftR :: Word16 -> PropertyshiftR_Word1662,2260
shiftR_Int    = shiftR :: Int -> PropertyshiftR_Int61,2218
shiftR w = forAll (choose (0,width-1)) $ \k -> Bits.shiftR w k == U.shiftR w kshiftR54,1904
shiftL_Word32 = shiftL :: Word32 -> PropertyshiftL_Word3260,2173
shiftL_Word16 = shiftL :: Word16 -> PropertyshiftL_Word1659,2128
shiftL_Int    = shiftL :: Int -> PropertyshiftL_Int58,2086
shiftL w = forAll (choose (0,width-1)) $ \k -> Bits.shiftL w k == U.shiftL w kshiftL51,1723
mulRef :: (Integral a, Bounded a) => a -> a -> Maybe amulRef29,994
eval :: (a -> b -> c) -> a -> b -> Maybe ceval37,1316

/home/effectfully/.fastdogs/text-1.2.5.0/tests/Tests/Properties/Read.hs,702
module Tests.Properties.ReadRead5,155
tl_read_rational p tol (n::Double) s =tl_read_rational48,1554
tl_rational = tl_read_rational TL.rational 1e-16tl_rational57,1893
tl_hexadecimal m s ox =tl_hexadecimal34,1083
tl_double = tl_read_rational TL.double 1e-13tl_double55,1802
tl_decimal (n::Int) s =tl_decimal26,738
testRead :: TestTreetestRead60,1944
t_read_rational p tol (n::Double) s =t_read_rational42,1352
t_rational = t_read_rational T.rational 1e-16t_rational56,1847
t_hexadecimal m s ox =t_hexadecimal29,873
t_double = t_read_rational T.double 1e-13t_double54,1760
t_decimal (n::Int) s =t_decimal23,609
isFloaty c = c `elem` ("+-.0123456789eE" :: String)isFloaty40,1299

/home/effectfully/.fastdogs/text-1.2.5.0/tests/Tests/Properties/Substrings.hs,8494
module Tests.Properties.SubstringsSubstrings4,148
tl_words          = L.words       `eqP` (map unpackS . TL.words)tl_words181,8758
tl_unwords        = unsquare $tl_unwords188,9124
tl_unlines        = unsquare $tl_unlines184,8923
tl_takeWhileEnd_null t = forAll noMatch $ \(c,d) -> TL.null $tl_takeWhileEnd_null66,3037
tl_takeWhileEnd p = (L.reverse . L.takeWhile p . L.reverse) `eqP`tl_takeWhileEnd64,2921
tl_takeWhile p    = L.takeWhile p `eqP` (unpackS . TL.takeWhile p)tl_takeWhile59,2625
tl_takeEnd n      = (L.reverse . L.take (fromIntegral n) . L.reverse) `eqP`tl_takeEnd32,1255
tl_take n         = L.take n      `eqP` (unpackS . TL.take (fromIntegral n))tl_take31,1178
tl_tails          = unsquare $tl_tails120,6031
tl_stripSuffix s     = (fmap packS . stripSuffix s) `eqP` TL.stripSuffix (packS s)tl_stripSuffix208,10174
tl_stripStart     = TL.dropWhile isSpace `eq` TL.stripStarttl_stripStart83,4094
tl_stripPrefix s     = (fmap packS . L.stripPrefix s) `eqP` TL.stripPrefix (packS s)tl_stripPrefix203,9934
tl_stripEnd       = TL.dropWhileEnd isSpace `eq` TL.stripEndtl_stripEnd85,4213
tl_strip          = TL.dropAround isSpace `eq` TL.striptl_strip87,4328
tl_splitOn_split s = unsquare $tl_splitOn_split138,6981
tl_splitOn_i (NotEmpty t) = id `eq` (TL.intercalate t . TL.splitOn t)tl_splitOn_i142,7230
tl_splitAt n      = L.splitAt n   `eqP` (unpack2 . TL.splitAt (fromIntegral n))tl_splitAt89,4448
tl_split p      = split p `eqP` (map unpackS . TL.split p)tl_split148,7525
tl_span p       = L.span p      `eqP` (unpack2 . TL.span p)tl_span91,4587
tl_lines          = L.lines       `eqP` (map unpackS . TL.lines)tl_lines168,8239
tl_isSuffixOf s   = L.isSuffixOf s`eqP` TL.isSuffixOf (packS s)tl_isSuffixOf198,9660
tl_isPrefixOf s   = L.isPrefixOf s`eqP` TL.isPrefixOf (packS s)tl_isPrefixOf196,9533
tl_isInfixOf s    = L.isInfixOf s `eqP` TL.isInfixOf (packS s)tl_isInfixOf200,9786
tl_inits          = L.inits       `eqP` (map unpackS . TL.inits)tl_inits118,5902
tl_groupBy p      = L.groupBy p   `eqP` (map unpackS . TL.groupBy p)tl_groupBy116,5769
tl_group          = L.group       `eqP` (map unpackS . TL.group)tl_group114,5636
tl_findCount s    = (L.genericLength . TL.breakOnAll s) `eq` TL.count stl_findCount134,6803
tl_findContains = unsquare $ \(NotEmpty s) -> all (TL.isPrefixOf s . snd) .tl_findContains130,6522
tl_findAppendId = unsquare $ \(NotEmpty s) ts ->tl_findAppendId125,6267
tl_dropWhileEnd p = (L.reverse . L.dropWhile p . L.reverse) `eqP`tl_dropWhileEnd76,3661
tl_dropWhile p    = L.dropWhile p `eqP` (unpackS . S.dropWhile p)tl_dropWhile73,3480
tl_dropEnd n      = (L.reverse . L.drop n . L.reverse) `eqP`tl_dropEnd43,1878
tl_dropAround p   = (L.dropWhile p . L.reverse . L.dropWhile p . L.reverse)tl_dropAround80,3906
tl_drop n         = L.drop n      `eqP` (unpackS . TL.drop (fromIntegral n))tl_drop42,1801
tl_commonPrefixes a b (NonEmpty p)tl_commonPrefixes223,10678
tl_chunksOf k = T.chunksOf k `eq` (map (T.concat . TL.toChunks) .tl_chunksOf164,8027
tl_breakOn_start (NotEmpty s) t =tl_breakOn_start102,5060
tl_breakOn_id s     = squid `eq` (uncurry TL.append . TL.breakOn s)tl_breakOn_id96,4790
tl_breakOnEnd_end (NotEmpty s) t =tl_breakOnEnd_end108,5317
tl_break p      = L.break p     `eqP` (unpack2 . TL.break p)tl_break112,5511
testSubstrings :: TestTreetestSubstrings230,10901
t_words           = L.words       `eqP` (map unpackS . T.words)t_words179,8693
t_unwords         = unsquare $t_unwords186,9024
t_unlines         = unsquare $t_unlines182,8823
t_takeWhileEnd_null t = forAll noMatch $ \(c,d) -> T.null $t_takeWhileEnd_null62,2807
t_takeWhileEnd p  = (L.reverse . L.takeWhile p . L.reverse) `eqP`t_takeWhileEnd60,2692
t_takeWhile p     = L.takeWhile p `eqP` (unpackS . T.takeWhile p)t_takeWhile58,2559
t_takeEnd n       = (L.reverse . L.take n . L.reverse) `eqP`t_takeEnd29,1073
t_take n          = L.take n      `eqP` (unpackS . T.take n)t_take28,1012
t_tails           = L.tails       `eqP` (map unpackS . T.tails)t_tails119,5967
t_stripSuffix s      = (fmap packS . stripSuffix s) `eqP` T.stripSuffix (packS s)t_stripSuffix207,10092
t_stripStart      = T.dropWhile isSpace `eq` T.stripStartt_stripStart82,4036
t_stripPrefix s      = (fmap packS . L.stripPrefix s) `eqP` T.stripPrefix (packS s)t_stripPrefix202,9850
t_stripEnd        = T.dropWhileEnd isSpace `eq` T.stripEndt_stripEnd84,4154
t_strip           = T.dropAround isSpace `eq` T.stript_strip86,4274
t_split_splitOn c = T.split (==c) `eq` T.splitOn (T.singleton c)t_split_splitOn147,7460
t_split_count c = (L.length . T.split (==c)) `eq`t_split_count145,7359
t_splitOn_split s  = unsquare $t_splitOn_split136,6876
t_splitOn_i (NotEmpty t)  = id `eq` (T.intercalate t . T.splitOn t)t_splitOn_i141,7162
t_splitAt n       = L.splitAt n   `eqP` (unpack2 . T.splitAt n)t_splitAt88,4384
t_split p       = split p `eqP` (map unpackS . T.split p)t_split144,7301
t_span p        = L.span p      `eqP` (unpack2 . T.span p)t_span90,4528
t_lines           = L.lines       `eqP` (map unpackS . T.lines)t_lines167,8175
t_isSuffixOf s    = L.isSuffixOf s`eqP` T.isSuffixOf (packS s)t_isSuffixOf197,9597
t_isPrefixOf s    = L.isPrefixOf s`eqP` T.isPrefixOf (packS s)t_isPrefixOf195,9470
t_isInfixOf s     = L.isInfixOf s `eqP` T.isInfixOf (packS s)t_isInfixOf199,9724
t_inits           = L.inits       `eqP` (map unpackS . T.inits)t_inits117,5838
t_groupBy p       = L.groupBy p   `eqP` (map unpackS . T.groupBy p)t_groupBy115,5701
t_group           = L.group       `eqP` (map unpackS . T.group)t_group113,5572
t_findCount s     = (L.length . T.breakOnAll s) `eq` T.count st_findCount133,6740
t_findContains = unsquare $ \(NotEmpty s) ->t_findContains128,6411
t_findAppendId = unsquare $ \(NotEmpty s) ts ->t_findAppendId122,6127
t_dropWhileEnd p  = (L.reverse . L.dropWhile p . L.reverse) `eqP`t_dropWhileEnd74,3546
t_dropWhile p     = L.dropWhile p `eqP` (unpackS . T.dropWhile p)t_dropWhile72,3414
t_dropEnd n       = (L.reverse . L.drop n . L.reverse) `eqP`t_dropEnd40,1696
t_dropAround p    = (L.dropWhile p . L.reverse . L.dropWhile p . L.reverse)t_dropAround78,3777
t_drop n          = L.drop n      `eqP` (unpackS . T.drop n)t_drop39,1635
t_commonPrefixes a b (NonEmpty p)t_commonPrefixes216,10457
t_chunksOf_same_lengths k = all ((==k) . T.length) . ini . T.chunksOf kt_chunksOf_same_lengths157,7788
t_chunksOf_length k t = len == T.length t || (k <= 0 && len == 0)t_chunksOf_length161,7906
t_breakOn_start (NotEmpty s) t =t_breakOn_start99,4935
t_breakOn_id s      = squid `eq` (uncurry T.append . T.breakOn s)t_breakOn_id93,4648
t_breakOnEnd_end (NotEmpty s) t =t_breakOnEnd_end105,5188
t_break p       = L.break p     `eqP` (unpack2 . T.break p)t_break111,5451
stripSuffix p t = reverse `fmap` L.stripPrefix (reverse p) (reverse t)stripSuffix205,10020
split :: (a -> Bool) -> [a] -> [[a]]split150,7585
sl_filterCount c  = (L.genericLength . L.filter (==c)) `eqP` SL.countChar csl_filterCount132,6664
sf_takeWhile q p  = (L.takeWhile p . L.filter q) `eqP`sf_takeWhile52,2377
sf_take p n       = (L.take n . L.filter p) `eqP`sf_take26,908
sf_isPrefixOf p s = (L.isPrefixOf s . L.filter p) `eqP`sf_isPrefixOf193,9334
sf_dropWhile q p  = (L.dropWhile p . L.filter q) `eqP`sf_dropWhile70,3300
sf_drop p n       = (L.drop n . L.filter p) `eqP`sf_drop37,1531
s_take_s m        = L.take n      `eqP` (unpackS . S.unstream . S.take n)s_take_s24,814
s_take_drop_s m   = (L.take n . L.drop n) `eqP`s_take_drop_s47,2099
s_take_drop m     = (L.take n . L.drop n) `eqP` (unpackS . S.take n . S.drop n)s_take_drop45,1999
s_takeWhile_s p   = L.takeWhile p `eqP` (unpackS . S.unstream . S.takeWhile p)s_takeWhile_s51,2298
s_takeWhile p     = L.takeWhile p `eqP` (unpackS . S.takeWhile p)s_takeWhile50,2232
s_take n          = L.take n      `eqP` (unpackS . S.take n)s_take23,753
s_isPrefixOf s    = L.isPrefixOf s `eqP`s_isPrefixOf191,9226
s_drop_s m        = L.drop n      `eqP` (unpackS . S.unstream . S.drop n)s_drop_s35,1437
s_dropWhile_s p   = L.dropWhile p `eqP` (unpackS . S.unstream . S.dropWhile p)s_dropWhile_s69,3221
s_dropWhile p     = L.dropWhile p `eqP` (unpackS . S.dropWhile p)s_dropWhile68,3155
s_drop n          = L.drop n      `eqP` (unpackS . S.drop n)s_drop34,1376
noMatch = donoMatch54,2491
commonPrefixes a0@(_:_) b0@(_:_) = Just (go a0 b0 [])commonPrefixes210,10258

/home/effectfully/.fastdogs/text-1.2.5.0/tests/Tests/Properties/Text.hs,6243
module Tests.Properties.TextText5,189
tl_zipWith c s    = L.zipWith c s `eqP` (unpackS . TL.zipWith c (packS s))tl_zipWith191,8852
tl_zip s          = L.zip s `eqP` TL.zip (packS s)tl_zip187,8579
tl_unstreamChunks x = f 11 x === f 1000 xtl_unstreamChunks36,1396
tl_transpose      = unsquare $tl_transpose68,2964
tl_toUpper_upper t = p (TL.toUpper t) >= p ttl_toUpper_upper107,4634
tl_toLower_lower t = p (TL.toLower t) >= p ttl_toLower_lower102,4402
tl_toCaseFold_length t = TL.length (TL.toCaseFold t) >= TL.length ttl_toCaseFold_length98,4191
tl_stream_unstream  = (SL.unstream . SL.stream) `eq` idtl_stream_unstream32,1164
tl_singleton c      = [c] === (TL.unpack . TL.singleton) ctl_singleton35,1337
tl_reverse        = L.reverse `eqP` (unpackS . TL.reverse)tl_reverse71,3133
tl_replace s d     = (L.intercalate d . splitOn s) `eqP`tl_replace76,3394
tl_partition p    = L.partition p `eqP` (unpack2 . TL.partition p)tl_partition170,7824
tl_pack_unpack      = (TL.unpack . TL.pack) `eq` idtl_pack_unpack30,1058
tl_map f          = map f  `eqP` (unpackS . TL.map f)tl_map46,1864
tl_justifyRight k c = justifyRight j c `eqP`tl_justifyRight151,6819
tl_justifyLeft k c = justifyLeft j c `eqP`tl_justifyLeft146,6554
tl_intersperse c  = unsquare $tl_intersperse64,2754
tl_intercalate c  = unsquare $tl_intercalate53,2198
tl_indices (NotEmpty s) = lazyIndices s `eq` S.indices stl_indices194,8986
tl_index s        = forAll (choose (-l,l*2))tl_index178,8145
tl_from_to_strict   = (TL.fromStrict . TL.toStrict) `eq` idtl_from_to_strict39,1549
tl_find p         = L.find p      `eqP` TL.find ptl_find168,7708
tl_filter p       = L.filter p    `eqP` (unpackS . TL.filter p)tl_filter165,7519
tl_elem c         = L.elem c `eqP` TL.elem ctl_elem160,7229
tl_count (NotEmpty t) = (subtract 1 . L.genericLength . TL.splitOn t) `eq`tl_count184,8419
tl_chunk_unchunk    = (TL.fromChunks . TL.toChunks) `eq` idtl_chunk_unchunk38,1489
tl_center k c = center j c `eqP` (unpackS . TL.center (fromIntegral j) c)tl_center156,7070
testText :: TestTreetestText209,9590
t_zipWith c s     = L.zipWith c s `eqP` (unpackS . T.zipWith c (packS s))t_zipWith190,8778
t_zip s           = L.zip s `eqP` T.zip (packS s)t_zip186,8529
t_transpose       = unsquare $t_transpose66,2856
t_toUpper_upper t = p (T.toUpper t) >= p tt_toUpper_upper105,4549
t_toUpper_length t = T.length (T.toUpper t) >= T.length tt_toUpper_length104,4491
t_toTitle_title t = all (<= 1) (caps w)t_toTitle_title109,4723
t_toTitle_1stNotLower = and . notLow . T.toTitle . T.filter stable . T.filter (not . isGeorgian)t_toTitle_1stNotLower113,4970
t_toLower_lower t = p (T.toLower t) >= p tt_toLower_lower100,4317
t_toLower_length t = T.length (T.toLower t) >= T.length tt_toLower_length99,4259
t_toCaseFold_length t = T.length (T.toCaseFold t) >= T.length tt_toCaseFold_length97,4127
t_stream_unstream   = (S.unstream . S.stream) `eq` idt_stream_unstream31,1110
t_singleton c       = [c] === (T.unpack . T.singleton) ct_singleton34,1280
t_reverse_stream t  = (S.reverse . S.reverseStream) t === tt_reverse_stream33,1220
t_reverse_short n = L.reverse `eqP` (unpackS . S.reverse . shorten n . S.stream)t_reverse_short72,3192
t_reverse         = L.reverse `eqP` (unpackS . T.reverse)t_reverse70,3075
t_replace s d     = (L.intercalate d . splitOn s) `eqP`t_replace74,3274
t_partition p     = L.partition p `eqP` (unpack2 . T.partition p)t_partition169,7758
t_pack_unpack       = (T.unpack . T.pack) `eq` idt_pack_unpack29,1008
t_map f           = map f  `eqP` (unpackS . T.map f)t_map45,1811
t_justifyRight k c = justifyRight j c `eqP` (unpackS . T.justifyRight j c)t_justifyRight149,6704
t_justifyLeft k c = justifyLeft j c `eqP` (unpackS . T.justifyLeft j c)t_justifyLeft144,6442
t_intersperse c   = unsquare $t_intersperse62,2653
t_intercalate c   = unsquare $t_intercalate50,2058
t_indices_occurs = unsquare $ \(NotEmpty t) ts ->t_indices_occurs197,9163
t_indices  (NotEmpty s) = Slow.indices s `eq` T.indices st_indices193,8928
t_index s         = forAll (choose (-l,l*2)) ((s L.!!) `eq` T.index (packS s))t_index175,8040
t_findIndex p     = L.findIndex p `eqP` T.findIndex pt_findIndex182,8288
t_find p          = L.find p      `eqP` T.find pt_find167,7659
t_filter p        = L.filter p    `eqP` (unpackS . T.filter p)t_filter164,7456
t_elem c          = L.elem c `eqP` T.elem ct_elem159,7185
t_count (NotEmpty t)  = (subtract 1 . L.length . T.splitOn t) `eq` T.count tt_count183,8342
t_center k c = center j c `eqP` (unpackS . T.center j c)t_center154,6973
splitOn :: (Eq a) => [a] -> [a] -> [[a]]splitOn79,3520
shorten :: Int -> S.Stream a -> S.Stream ashorten204,9428
sf_zipWith p c s  = (L.zipWith c (L.filter p s) . L.filter p) `eqP`sf_zipWith188,8630
sf_toCaseFold_length p xs =sf_toCaseFold_length94,3992
sf_map p f        = (map f . L.filter p)  `eqP` (unpackS . S.map f . S.filter p)sf_map44,1730
sf_justifyLeft p k c = (justifyLeft j c . L.filter p) `eqP`sf_justifyLeft141,6275
sf_intersperse p c= (L.intersperse c . L.filter p) `eqP`sf_intersperse60,2536
sf_index p s      = forAll (choose (-l,l*2))sf_index172,7892
sf_findBy q p     = (L.find p . L.filter q) `eqP` (S.findBy p . S.filter q)sf_findBy166,7583
sf_filter q p     = (L.filter p . L.filter q) `eqP`sf_filter162,7348
sf_elem p c       = (L.elem c . L.filter p) `eqP` (S.elem c . S.filter p)sf_elem161,7274
s_toCaseFold_length xs = S.length (S.toCaseFold s) >= length xss_toCaseFold_length92,3898
s_map_s f         = map f  `eqP` (unpackS . S.unstream . S.map f)s_map_s43,1664
s_map f           = map f  `eqP` (unpackS . S.map f)s_map42,1611
s_justifyLeft_s k c = justifyLeft j c `eqP`s_justifyLeft_s138,6125
s_justifyLeft k c = justifyLeft j c `eqP` (unpackS . S.justifyLeftI j c)s_justifyLeft136,6012
s_intersperse_s c = L.intersperse c `eqP`s_intersperse_s58,2433
s_intersperse c   = L.intersperse c `eqP`s_intersperse56,2343
s_intercalate c   = unsquare $s_intercalate47,1918
justifyRight m n xs = L.replicate (m - length xs) n ++ xsjustifyRight127,5765
justifyLeft k c xs  = xs ++ L.replicate (k - length xs) cjustifyLeft126,5707
center k c xscenter128,5823

/home/effectfully/.fastdogs/text-1.2.5.0/tests/Tests/Properties/Transcoding.hs,2888
module Tests.Properties.TranscodingTranscoding5,217
data Badness = Solo | Leading | TrailingBadness76,3527
data Badness = Solo | Leading | TrailingSolo76,3527
data Badness = Solo | Leading | TrailingLeading76,3527
data Badness = Solo | Leading | TrailingTrailing76,3527
tl_utf8'     = forAll genUnicode $ (EL.decodeUtf8' . EL.encodeUtf8) `eq` (id . Right)tl_utf8'48,2067
tl_utf8      = forAll genUnicode $ (EL.decodeUtf8 . EL.encodeUtf8) `eq` idtl_utf847,1992
tl_utf32LE   = forAll genUnicode $ (EL.decodeUtf32LE . EL.encodeUtf32LE) `eq` idtl_utf32LE54,2552
tl_utf32BE   = forAll genUnicode $ (EL.decodeUtf32BE . EL.encodeUtf32BE) `eq` idtl_utf32BE56,2712
tl_utf16LE   = forAll genUnicode $ (EL.decodeUtf16LE . EL.encodeUtf16LE) `eq` idtl_utf16LE50,2232
tl_utf16BE   = forAll genUnicode $ (EL.decodeUtf16BE . EL.encodeUtf16BE) `eq` idtl_utf16BE52,2392
tl_latin1 t  = EL.decodeLatin1 (encodeLazyL1 a) === atl_latin143,1727
tl_ascii t   = EL.decodeASCII (EL.encodeUtf8 a) === atl_ascii39,1517
testTranscoding :: TestTreetestTranscoding196,8448
t_utf8_undecoded = forAll genUnicode $ \t ->t_utf8_undecoded70,3264
t_utf8_incr = forAll genUnicode $ \s (Positive n) -> (recode n `eq` id) st_utf8_incr58,2794
t_utf8_err' :: B.ByteString -> Propertyt_utf8_err'115,5017
t_utf8_err :: Badness -> Maybe DecodeErr -> Propertyt_utf8_err82,3687
t_utf8'      = forAll genUnicode $ (E.decodeUtf8' . E.encodeUtf8) `eq` (id . Right)t_utf8'46,1908
t_utf8       = forAll genUnicode $ (E.decodeUtf8 . E.encodeUtf8) `eq` idt_utf845,1835
t_utf32LE    = forAll genUnicode $ (E.decodeUtf32LE . E.encodeUtf32LE) `eq` idt_utf32LE53,2473
t_utf32BE    = forAll genUnicode $ (E.decodeUtf32BE . E.encodeUtf32BE) `eq` idt_utf32BE55,2633
t_utf16LE    = forAll genUnicode $ (E.decodeUtf16LE . E.encodeUtf16LE) `eq` idt_utf16LE49,2153
t_utf16BE    = forAll genUnicode $ (E.decodeUtf16BE . E.encodeUtf16BE) `eq` idt_utf16BE51,2313
t_latin1 t   = E.decodeLatin1 (encodeL1 a) === at_latin141,1625
t_infix_concat bs1 text bs2 =t_infix_concat191,8284
t_decode_with_error4' =t_decode_with_error4'187,8146
t_decode_with_error4 =t_decode_with_error4178,7786
t_decode_with_error3' =t_decode_with_error3'184,8014
t_decode_with_error3 =t_decode_with_error3176,7691
t_decode_with_error2' =t_decode_with_error2'181,7887
t_decode_with_error2 =t_decode_with_error2174,7601
t_decode_utf8_lenient :: Propertyt_decode_utf8_lenient164,7040
t_ascii t    = E.decodeASCII (E.encodeUtf8 a) === at_ascii37,1412
genInvalidUTF8 :: Gen B.ByteStringgenInvalidUTF8120,5264
feedChunksOf :: Int -> (B.ByteString -> E.Decoding) -> B.ByteStringfeedChunksOf62,2981
encodeLazyL1 :: TL.Text -> BL.ByteStringencodeLazyL134,1312
encodeL1 :: T.Text -> B.ByteStringencodeL132,1216
decodeLL :: BL.ByteString -> TL.TextdecodeLL156,6724
decodeL :: B.ByteString -> T.TextdecodeL159,6807

/home/effectfully/.fastdogs/text-1.2.5.0/tests/Tests/QuickCheckUtils.hs,4526
module Tests.QuickCheckUtilsQuickCheckUtils7,293
newtype BigInt = Big IntegerBigInt111,3351
newtype BigInt = Big IntegerBig111,3351
newtype BigBounded a = BigBounded aBigBounded119,3664
newtype NotEmpty a = NotEmpty { notEmpty :: a }NotEmpty125,3880
newtype NotEmpty a = NotEmpty { notEmpty :: a }notEmpty125,3880
data Small = S0  | S1  | S2  | S3  | S4  | S5  | S6  | S7Small154,4849
data Small = S0  | S1  | S2  | S3  | S4  | S5  | S6  | S7S0154,4849
data Small = S0  | S1  | S2  | S3  | S4  | S5  | S6  | S7S1154,4849
data Small = S0  | S1  | S2  | S3  | S4  | S5  | S6  | S7S2154,4849
data Small = S0  | S1  | S2  | S3  | S4  | S5  | S6  | S7S3154,4849
data Small = S0  | S1  | S2  | S3  | S4  | S5  | S6  | S7S4154,4849
data Small = S0  | S1  | S2  | S3  | S4  | S5  | S6  | S7S5154,4849
data Small = S0  | S1  | S2  | S3  | S4  | S5  | S6  | S7S6154,4849
data Small = S0  | S1  | S2  | S3  | S4  | S5  | S6  | S7S7154,4849
           | S8  | S9  | S10 | S11 | S12 | S13 | S14 | S15S8155,4907
           | S8  | S9  | S10 | S11 | S12 | S13 | S14 | S15S9155,4907
           | S8  | S9  | S10 | S11 | S12 | S13 | S14 | S15S10155,4907
           | S8  | S9  | S10 | S11 | S12 | S13 | S14 | S15S11155,4907
           | S8  | S9  | S10 | S11 | S12 | S13 | S14 | S15S12155,4907
           | S8  | S9  | S10 | S11 | S12 | S13 | S14 | S15S13155,4907
           | S8  | S9  | S10 | S11 | S12 | S13 | S14 | S15S14155,4907
           | S8  | S9  | S10 | S11 | S12 | S13 | S14 | S15S15155,4907
           | S16 | S17 | S18 | S19 | S20 | S21 | S22 | S23S16156,4966
           | S16 | S17 | S18 | S19 | S20 | S21 | S22 | S23S17156,4966
           | S16 | S17 | S18 | S19 | S20 | S21 | S22 | S23S18156,4966
           | S16 | S17 | S18 | S19 | S20 | S21 | S22 | S23S19156,4966
           | S16 | S17 | S18 | S19 | S20 | S21 | S22 | S23S20156,4966
           | S16 | S17 | S18 | S19 | S20 | S21 | S22 | S23S21156,4966
           | S16 | S17 | S18 | S19 | S20 | S21 | S22 | S23S22156,4966
           | S16 | S17 | S18 | S19 | S20 | S21 | S22 | S23S23156,4966
           | S24 | S25 | S26 | S27 | S28 | S29 | S30 | S31S24157,5025
           | S24 | S25 | S26 | S27 | S28 | S29 | S30 | S31S25157,5025
           | S24 | S25 | S26 | S27 | S28 | S29 | S30 | S31S26157,5025
           | S24 | S25 | S26 | S27 | S28 | S29 | S30 | S31S27157,5025
           | S24 | S25 | S26 | S27 | S28 | S29 | S30 | S31S28157,5025
           | S24 | S25 | S26 | S27 | S28 | S29 | S30 | S31S29157,5025
           | S24 | S25 | S26 | S27 | S28 | S29 | S30 | S31S30157,5025
           | S24 | S25 | S26 | S27 | S28 | S29 | S30 | S31S31157,5025
data DecodeErr = Lenient | Ignore | Strict | ReplaceDecodeErr201,6301
data DecodeErr = Lenient | Ignore | Strict | ReplaceLenient201,6301
data DecodeErr = Lenient | Ignore | Strict | ReplaceIgnore201,6301
data DecodeErr = Lenient | Ignore | Strict | ReplaceStrict201,6301
data DecodeErr = Lenient | Ignore | Strict | ReplaceReplace201,6301
class Stringy s whereStringy216,6789
    packS    :: String -> spackS217,6811
    unpackS  :: s -> StringunpackS218,6839
    splitAtS :: Int -> s -> (s,s)splitAtS219,6867
    packSChunkSize :: Int -> String -> spackSChunkSize220,6901
newtype Precision a = Precision (Maybe Int)Precision274,8583
data Encoding = E String IO.TextEncodingEncoding296,9284
data Encoding = E String IO.TextEncodingE296,9284
write_read :: (NFData a, Eq a)write_read337,10736
windowsNewlineMode :: IO.NewlineModewindowsNewlineMode307,9639
unsquare :: (Arbitrary a, Show a, Testable b) => (a -> b) -> Propertyunsquare96,2798
unpack2 :: (Stringy s) => (s,s) -> (String,String)unpack2245,7561
smallArbitrary :: (Arbitrary a, Show a) => Gen asmallArbitrary99,2902
small :: Integral a => Small -> asmall160,5123
shrinkNotEmpty :: Arbitrary a => (a -> Bool) -> NotEmpty a -> [NotEmpty a]shrinkNotEmpty150,4679
precision :: a -> Precision a -> Maybe Intprecision277,8668
intf :: (Int -> Int -> Int) -> Small -> Small -> Smallintf163,5190
integralRandomR :: (Integral a, RandomGen g) => (a,a) -> g -> (a,g)integralRandomR196,6034
genWord8 :: Gen Word8genWord865,1707
genUnicode :: IsString a => Gen agenUnicode62,1637
genDecodeErr :: DecodeErr -> Gen T.OnDecodeErrorgenDecodeErr204,6390
eqP :: (Eq a, Show a, Stringy s) =>eqP253,7803
eq :: (Eq a, Show a) => (t -> a) -> (t -> a) -> t -> Booleq249,7685
arbitraryPrecision :: Int -> Gen (Precision a)arbitraryPrecision280,8748

/home/effectfully/.fastdogs/text-1.2.5.0/tests/Tests/Regressions.hs,577
module Tests.RegressionsRegressions7,144
utf8_decode_unsafe :: IO ()utf8_decode_unsafe71,2488
tests :: F.TestTreetests147,5302
t330 :: IO ()t330140,5005
t301 :: IO ()t301127,4493
t280_singleton :: IO ()t280_singleton116,4002
t280_fromString :: IO ()t280_fromString110,3788
t227 :: IO ()t227104,3595
t221 :: IO ()t22198,3435
t197 :: IO ()t19789,3214
replicate_crash :: IO ()replicate_crash60,2018
mapAccumL_resize :: IO ()mapAccumL_resize78,2786
lazy_encode_crash :: IO ()lazy_encode_crash39,1221
hGetContents_crash :: IO ()hGetContents_crash46,1508

/home/effectfully/.fastdogs/text-1.2.5.0/tests/Tests/SlowFunctions.hs,201
module Tests.SlowFunctionsSlowFunctions2,30
splitOn :: T.Text               -- ^ Text to split onsplitOn25,726
indices :: T.Text              -- ^ Substring to search for (@needle@)indices12,230

/home/effectfully/.fastdogs/text-1.2.5.0/tests/Tests/Utils.hs,227
module Tests.UtilsUtils4,77
withTempFile :: (FilePath -> Handle -> IO a) -> IO awithTempFile34,1070
withRedirect :: Handle -> Handle -> IO a -> IO awithRedirect42,1312
(=^=) :: (Eq a, Show a) => a -> a -> Bool=^=22,682

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Applicative/Backwards.hs,199
module Control.Applicative.Backwards (Backwards25,726
newtype Backwards f a = Backwards { forwards :: f a }Backwards41,1139
newtype Backwards f a = Backwards { forwards :: f a }forwards41,1139

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Applicative/Lift.hs,611
module Control.Applicative.Lift (Lift21,624
data Lift f a = Pure a | Other (f a)Lift44,1142
data Lift f a = Pure a | Other (f a)Pure44,1142
data Lift f a = Pure a | Other (f a)Other44,1142
type Errors e = Lift (Constant e)Errors145,4545
unLift :: (Applicative f) => Lift f a -> f aunLift110,3490
runErrors :: Errors e a -> Either e arunErrors153,4733
mapLift :: (f a -> g a) -> Lift f a -> Lift g amapLift116,3658
failure :: e -> Errors e afailure159,4888
elimLift :: (a -> r) -> (f a -> r) -> Lift f a -> relimLift127,3900
eitherToErrors :: Either e a -> Errors e aeitherToErrors164,5035

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Signatures.hs,275
module Control.Monad.Signatures (Signatures22,693
type CallCC m a b = ((a -> m b) -> m a) -> m aCallCC32,989
type Catch e m a = m a -> (e -> m a) -> m aCatch40,1243
type Listen w m a = m a -> m (a, w)Listen48,1484
type Pass w m a =  m (a, w -> w) -> m aPass56,1709

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Accum.hs,1638
module Control.Monad.Trans.Accum (Accum26,860
type Accum w = AccumT w IdentityAccum79,2160
newtype AccumT w m a = AccumT (w -> m (a, w))AccumT132,3997
writerToAccumT :: WriterT w m a -> AccumT w m awriterToAccumT283,9435
runAccumT :: AccumT w m a -> w -> m (a, w)runAccumT135,4085
runAccum :: Accum w a -> w -> (a, w)runAccum89,2509
readerToAccumT :: (Functor m, Monoid w) => ReaderT w m a -> AccumT w m areaderToAccumT278,9186
mapAccumT :: (m (a, w) -> n (b, w)) -> AccumT w m a -> AccumT w n bmapAccumT162,4941
mapAccum :: ((a, w) -> (b, w)) -> Accum w a -> Accum w bmapAccum112,3257
looks :: (Monoid w, Monad m) => (w -> a) -> AccumT w m alooks231,7356
look :: (Monoid w, Monad m) => AccumT w m wlook227,7178
liftPass :: (Monad m) => Pass w m (a, s) -> Pass w (AccumT s m) aliftPass271,8921
liftListen :: (Monad m) => Listen w m (a, s) -> Listen w (AccumT s m) aliftListen264,8666
liftCatch :: Catch e m (a, w) -> Catch e (AccumT w m) aliftCatch258,8444
liftCallCC' :: CallCC m (a, w) (b, w) -> CallCC (AccumT w m) a bliftCallCC'251,8187
liftCallCC :: CallCC m (a, w) (b, w) -> CallCC (AccumT w m) a bliftCallCC242,7762
execAccumT :: (Monad m) => AccumT w m a -> w -> m wexecAccumT142,4298
execAccum :: Accum w a -> w -> wexecAccum96,2719
evalAccumT :: (Monad m, Monoid w) => AccumT w m a -> w -> m aevalAccumT152,4642
evalAccum :: (Monoid w) => Accum w a -> w -> aevalAccum104,3004
add :: (Monad m) => w -> AccumT w m ()add235,7519
accumToStateT :: (Functor m, Monoid s) => AccumT s m a -> StateT s m aaccumToStateT289,9655
accum :: (Monad m) => (w -> (a, w)) -> AccumT w m aaccum83,2299

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Class.hs,144
module Control.Monad.Trans.Class (Class28,1019
class MonadTrans t whereMonadTrans56,1574
    lift :: (Monad m) => m a -> t m alift58,1677

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Cont.hs,1141
module Control.Monad.Trans.Cont (Cont29,877
type Cont r = ContT r IdentityCont70,1833
newtype ContT r m a = ContT { runContT :: (a -> m r) -> m r }ContT136,4000
newtype ContT r m a = ContT { runContT :: (a -> m r) -> m r }runContT136,4000
withContT :: ((b -> m r) -> (a -> m r)) -> ContT r m a -> ContT r m bwithContT160,4861
withCont :: ((b -> r) -> (a -> r)) -> Cont r a -> Cont r bwithCont108,3084
shiftT :: (Monad m) => ((a -> m r) -> ContT r m r) -> ContT r m ashiftT230,7358
shift :: ((a -> r) -> Cont r r) -> Cont r ashift125,3587
runContrunCont80,2179
resetT :: (Monad m) => ContT r m r -> ContT r' m rresetT221,7078
reset :: Cont r r -> Cont r' rreset116,3345
mapContT :: (m r -> m r) -> ContT r m a -> ContT r m amapContT152,4601
mapCont :: (r -> r) -> Cont r a -> Cont r amapCont100,2827
liftLocal :: (Monad m) => m r' -> ((r' -> r') -> m r -> m r) ->liftLocal235,7554
evalContT :: (Monad m) => ContT r m r -> m revalContT142,4189
evalCont :: Cont r r -> revalCont92,2595
cont :: ((a -> r) -> r) -> Cont r acont74,1962
callCC :: ((a -> ContT r m b) -> ContT r m a) -> ContT r m acallCC213,6809

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Error.hs,938
module Control.Monad.Trans.ErrorError39,1397
class Error a whereError133,3669
    noMsg  :: anoMsg136,3792
    strMsg :: String -> astrMsg139,3916
class ErrorList a whereErrorList152,4230
    listMsg :: String -> [a]listMsg153,4254
newtype ErrorT e m a = ErrorT { runErrorT :: m (Either e a) }ErrorT169,4684
newtype ErrorT e m a = ErrorT { runErrorT :: m (Either e a) }runErrorT169,4684
throwError :: (Monad m) => e -> ErrorT e m athrowError281,8404
mapErrorT :: (m (Either e a) -> n (Either e' b))mapErrorT201,5911
liftPass :: (Monad m) => Pass w m (Either e a) -> Pass w (ErrorT e m) aliftPass313,9471
liftListen :: (Monad m) => Listen w m (Either e a) -> Listen w (ErrorT e m) aliftListen307,9243
liftCallCC :: CallCC m (Either e a) (Either e b) -> CallCC (ErrorT e m) a bliftCallCC301,9018
catchIOError :: IO a -> (IOError -> IO a) -> IO acatchIOError93,2740
catchError :: (Monad m) =>catchError289,8607

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Except.hs,1037
module Control.Monad.Trans.Except (Except29,1016
type Except e = ExceptT e IdentityExcept79,2282
newtype ExceptT e m a = ExceptT (m (Either e a))ExceptT119,3565
withExceptT :: (Functor m) => (e -> e') -> ExceptT e m a -> ExceptT e' m awithExceptT169,5259
withExcept :: (e -> e') -> Except e a -> Except e' awithExcept104,3109
throwE :: (Monad m) => e -> ExceptT e m athrowE274,8616
runExceptT :: ExceptT e m a -> m (Either e a)runExceptT154,4778
runExcept :: Except e a -> Either e arunExcept89,2599
mapExceptT :: (m (Either e a) -> n (Either e' b))mapExceptT161,5002
mapExcept :: (Either e a -> Either e' b)mapExcept96,2822
liftPass :: (Monad m) => Pass w m (Either e a) -> Pass w (ExceptT e m) aliftPass310,9768
liftListen :: (Monad m) => Listen w m (Either e a) -> Listen w (ExceptT e m) aliftListen303,9512
liftCallCC :: CallCC m (Either e a) (Either e b) -> CallCC (ExceptT e m) a bliftCallCC296,9257
except :: (Monad m) => Either e a -> ExceptT e m aexcept83,2409
catchE :: (Monad m) =>catchE283,8823

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Identity.hs,482
module Control.Monad.Trans.Identity (Identity26,735
newtype IdentityT f a = IdentityT { runIdentityT :: f a }IdentityT57,1649
newtype IdentityT f a = IdentityT { runIdentityT :: f a }runIdentityT57,1649
mapIdentityT :: (m a -> n b) -> IdentityT m a -> IdentityT n bmapIdentityT169,5179
liftCatch :: Catch e m a -> Catch e (IdentityT m) aliftCatch186,5826
liftCallCC :: CallCC m a b -> CallCC (IdentityT m) a bliftCallCC180,5608
lift2IdentityT ::lift2IdentityT174,5364

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/List.hs,387
module Control.Monad.Trans.ListList23,733
newtype ListT m a = ListT { runListT :: m [a] }ListT56,1630
newtype ListT m a = ListT { runListT :: m [a] }runListT56,1630
mapListT :: (m [a] -> n [b]) -> ListT m a -> ListT n bmapListT88,2777
liftCatch :: Catch e m [a] -> Catch e (ListT m) aliftCatch182,5512
liftCallCC :: CallCC m [a] [b] -> CallCC (ListT m) a bliftCallCC175,5291

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Maybe.hs,801
module Control.Monad.Trans.Maybe (Maybe29,960
newtype MaybeT m a = MaybeT { runMaybeT :: m (Maybe a) }MaybeT73,2217
newtype MaybeT m a = MaybeT { runMaybeT :: m (Maybe a) }runMaybeT73,2217
maybeToExceptT :: (Functor m) => e -> MaybeT m a -> ExceptT e m amaybeToExceptT111,3621
mapMaybeT :: (m (Maybe a) -> n (Maybe b)) -> MaybeT m a -> MaybeT n bmapMaybeT105,3403
liftPass :: (Monad m) => Pass w m (Maybe a) -> Pass w (MaybeT m) aliftPass235,7559
liftListen :: (Monad m) => Listen w m (Maybe a) -> Listen w (MaybeT m) aliftListen228,7310
liftCatch :: Catch e m (Maybe a) -> Catch e (MaybeT m) aliftCatch223,7119
liftCallCC :: CallCC m (Maybe a) (Maybe b) -> CallCC (MaybeT m) a bliftCallCC217,6890
exceptToMaybeT :: (Functor m) => ExceptT e m a -> MaybeT m aexceptToMaybeT117,3880

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/RWS.hs,44
module Control.Monad.Trans.RWS (RWS21,754

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/RWS/CPS.hs,2429
module Control.Monad.Trans.RWS.CPS (CPS27,943
type RWS r w s = RWST r w s IdentityRWS86,1989
newtype RWST r w s m a = RWST { unRWST :: r -> s -> w -> m (a, s, w) }RWST145,4233
newtype RWST r w s m a = RWST { unRWST :: r -> s -> w -> m (a, s, w) }unRWST145,4233
writer :: (Monoid w, Monad m) => (a, w) -> RWST r w s m awriter297,9444
withRWST :: (r' -> s -> (r, s)) -> RWST r w s m a -> RWST r' w s m awithRWST200,6478
withRWS :: (r' -> s -> (r, s)) -> RWS r w s a -> RWS r' w s awithRWS137,3886
tell :: (Monoid w, Monad m) => w -> RWST r w s m ()tell302,9673
state :: (Monad m) => (s -> (a, s)) -> RWST r w s m astate357,11840
rwsT :: (Functor m, Monoid w) => (r -> s -> m (a, s, w)) -> RWST r w s m arwsT149,4388
rws :: (Monoid w) => (r -> s -> (a, s, w)) -> RWS r w s arws90,2108
runRWST :: (Monoid w) => RWST r w s m a -> r -> s -> m (a, s, w)runRWST156,4668
runRWS :: (Monoid w) => RWS r w s a -> r -> s -> (a, s, w)runRWS97,2365
reader :: (Monad m) => (r -> a) -> RWST r w s m areader270,8637
put :: (Monad m) =>s -> RWST r w s m ()put367,12166
pass :: (Monoid w, Monoid w', Monad m) => RWST r w s m (a, w -> w') -> RWST r w' s m apass332,10897
modify :: (Monad m) =>(s -> s) -> RWST r w s m ()modify375,12424
mapRWST :: (Monad n, Monoid w, Monoid w') =>mapRWST188,6022
mapRWS :: (Monoid w, Monoid w') => ((a, s, w) -> (b, s, w')) -> RWS r w s a -> RWS r w' s bmapRWS129,3543
local :: (r -> r) -> RWST r w s m a -> RWST r w s m alocal282,8947
listens :: (Monoid w, Monad m) => (w -> b) -> RWST r w s m a -> RWST r w s m (a, b)listens320,10398
listen :: (Monoid w, Monad m) => RWST r w s m a -> RWST r w s m (a, w)listen310,9980
liftCatch :: Catch e m (a,s,w) -> Catch e (RWST r w s m) aliftCatch403,13535
liftCallCC' :: CallCC m (a,s,w) (b,s,w) -> CallCC (RWST r w s m) a bliftCallCC'397,13270
liftCallCC :: CallCC m (a,s,w) (b,s,w) -> CallCC (RWST r w s m) a bliftCallCC390,12927
gets :: (Monad m) =>(s -> a) -> RWST r w s m agets383,12668
get :: (Monad m) =>RWST r w s m sget362,12043
execRWST :: (Monad m, Monoid w)execRWST174,5450
execRWS :: (Monoid w)execRWS115,3081
evalRWST :: (Monad m, Monoid w)evalRWST162,4936
evalRWS :: (Monoid w)evalRWS103,2633
censor :: (Monoid w, Monad m) => (w -> w) -> RWST r w s m a -> RWST r w s m acensor346,11434
asks :: (Monad m) => (r -> a) -> RWST r w s m aasks289,9162
ask :: (Monad m) => RWST r w s m rask275,8765

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/RWS/Lazy.hs,2207
module Control.Monad.Trans.RWS.Lazy (Lazy24,833
type RWS r w s = RWST r w s IdentityRWS81,1892
newtype RWST r w s m a = RWST { runRWST :: r -> s -> m (a, s, w) }RWST137,3974
newtype RWST r w s m a = RWST { runRWST :: r -> s -> m (a, s, w) }runRWST137,3974
writer :: (Monad m) => (a, w) -> RWST r w s m awriter277,8947
withRWST :: (r' -> s -> (r, s)) -> RWST r w s m a -> RWST r' w s m awithRWST174,5507
withRWS :: (r' -> s -> (r, s)) -> RWS r w s a -> RWS r' w s awithRWS129,3627
tell :: (Monad m) => w -> RWST r w s m ()tell282,9126
state :: (Monoid w, Monad m) => (s -> (a,s)) -> RWST r w s m astate336,11194
rws :: (r -> s -> (a, s, w)) -> RWS r w s arws85,2011
runRWS :: RWS r w s a -> r -> s -> (a, s, w)runRWS91,2189
reader :: (Monoid w, Monad m) => (r -> a) -> RWST r w s m areader250,8080
put :: (Monoid w, Monad m) => s -> RWST r w s m ()put346,11574
pass :: (Monad m) => RWST r w s m (a, w -> w) -> RWST r w s m apass313,10364
modify :: (Monoid w, Monad m) => (s -> s) -> RWST r w s m ()modify354,11846
mapRWST :: (m (a, s, w) -> n (b, s, w')) -> RWST r w s m a -> RWST r w' s n bmapRWST166,5173
mapRWS :: ((a, s, w) -> (b, s, w')) -> RWS r w s a -> RWS r w' s bmapRWS121,3309
local :: (r -> r) -> RWST r w s m a -> RWST r w s m alocal262,8440
listens :: (Monad m) => (w -> b) -> RWST r w s m a -> RWST r w s m (a, b)listens302,9916
listen :: (Monad m) => RWST r w s m a -> RWST r w s m (a, w)listen290,9438
liftCatch :: Catch e m (a,s,w) -> Catch e (RWST r w s m) aliftCatch386,13029
liftCallCC' :: (Monoid w) =>liftCallCC'378,12742
liftCallCC :: (Monoid w) =>liftCallCC369,12377
gets :: (Monoid w, Monad m) => (s -> a) -> RWST r w s m agets362,12104
get :: (Monoid w, Monad m) => RWST r w s m sget341,11410
execRWST :: (Monad m)execRWST153,4690
execRWS :: RWS r w s a  -- ^RWS computation to executeexecRWS108,2869
evalRWST :: (Monad m)evalRWST141,4185
evalRWS :: RWS r w s a  -- ^RWS computation to executeevalRWS97,2443
censor :: (Monad m) => (w -> w) -> RWST r w s m a -> RWST r w s m acensor326,10838
asks :: (Monoid w, Monad m) => (r -> a) -> RWST r w s m aasks269,8652
ask :: (Monoid w, Monad m) => RWST r w s m rask255,8218

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/RWS/Strict.hs,2214
module Control.Monad.Trans.RWS.Strict (Strict27,1000
type RWS r w s = RWST r w s IdentityRWS84,2061
newtype RWST r w s m a = RWST { runRWST :: r -> s -> m (a, s, w) }RWST140,4143
newtype RWST r w s m a = RWST { runRWST :: r -> s -> m (a, s, w) }runRWST140,4143
writer :: (Monad m) => (a, w) -> RWST r w s m awriter280,9107
withRWST :: (r' -> s -> (r, s)) -> RWST r w s m a -> RWST r' w s m awithRWST177,5674
withRWS :: (r' -> s -> (r, s)) -> RWS r w s a -> RWS r' w s awithRWS132,3796
tell :: (Monad m) => w -> RWST r w s m ()tell285,9286
state :: (Monoid w, Monad m) => (s -> (a,s)) -> RWST r w s m astate339,11350
rws :: (r -> s -> (a, s, w)) -> RWS r w s arws88,2180
runRWS :: RWS r w s a -> r -> s -> (a, s, w)runRWS94,2358
reader :: (Monoid w, Monad m) => (r -> a) -> RWST r w s m areader253,8240
put :: (Monoid w, Monad m) => s -> RWST r w s m ()put349,11730
pass :: (Monad m) => RWST r w s m (a, w -> w) -> RWST r w s m apass316,10522
modify :: (Monoid w, Monad m) => (s -> s) -> RWST r w s m ()modify357,12002
mapRWST :: (m (a, s, w) -> n (b, s, w')) -> RWST r w s m a -> RWST r w' s n bmapRWST169,5340
mapRWS :: ((a, s, w) -> (b, s, w')) -> RWS r w s a -> RWS r w' s bmapRWS124,3478
local :: (r -> r) -> RWST r w s m a -> RWST r w s m alocal265,8600
listens :: (Monad m) => (w -> b) -> RWST r w s m a -> RWST r w s m (a, b)listens305,10075
listen :: (Monad m) => RWST r w s m a -> RWST r w s m (a, w)listen293,9598
liftCatch :: Catch e m (a,s,w) -> Catch e (RWST r w s m) aliftCatch389,13185
liftCallCC' :: (Monoid w) =>liftCallCC'381,12898
liftCallCC :: (Monoid w) =>liftCallCC372,12533
gets :: (Monoid w, Monad m) => (s -> a) -> RWST r w s m agets365,12260
get :: (Monoid w, Monad m) => RWST r w s m sget344,11566
execRWST :: (Monad m)execRWST156,4858
execRWS :: RWS r w s a  -- ^RWS computation to executeexecRWS111,3038
evalRWST :: (Monad m)evalRWST144,4354
evalRWS :: RWS r w s a  -- ^RWS computation to executeevalRWS100,2612
censor :: (Monad m) => (w -> w) -> RWST r w s m a -> RWST r w s m acensor329,10995
asks :: (Monoid w, Monad m) => (r -> a) -> RWST r w s m aasks272,8812
ask :: (Monoid w, Monad m) => RWST r w s m rask258,8378

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Reader.hs,863
module Control.Monad.Trans.Reader (Reader26,845
type Reader r = ReaderT r IdentityReader76,2022
newtype ReaderT r m a = ReaderT { runReaderT :: r -> m a }ReaderT115,3356
newtype ReaderT r m a = ReaderT { runReaderT :: r -> m a }runReaderT115,3356
withReaderTwithReaderT128,3819
withReaderwithReader103,2909
runReaderrunReader85,2329
reader :: (Monad m) => (r -> a) -> ReaderT r m areader79,2136
mapReaderT :: (m a -> n b) -> ReaderT r m a -> ReaderT r n bmapReaderT120,3530
mapReader :: (a -> b) -> Reader r a -> Reader r bmapReader95,2625
locallocal235,7003
liftReaderT :: m a -> ReaderT r m aliftReaderT222,6638
liftCatch :: Catch e m a -> Catch e (ReaderT r m) aliftCatch259,7760
liftCallCC :: CallCC m a b -> CallCC (ReaderT r m) a bliftCallCC252,7527
asks :: (Monad m)asks245,7308
ask :: (Monad m) => ReaderT r m rask227,6777

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Select.hs,661
module Control.Monad.Trans.Select (Select32,1078
type Select r = SelectT r IdentitySelect59,1642
newtype SelectT r m a = SelectT ((a -> m r) -> m a)SelectT83,2527
selectToContT :: (Monad m) => SelectT r m a -> ContT r m aselectToContT154,4793
selectToCont :: (Monad m) => SelectT r m a -> ContT r m aselectToCont160,5036
select :: ((a -> r) -> a) -> Select r aselect62,1736
runSelectT :: SelectT r m a -> (a -> m r) -> m arunSelectT87,2715
runSelect :: Select r a -> (a -> r) -> arunSelect68,1992
mapSelectT :: (m a -> m a) -> SelectT r m a -> SelectT r m amapSelectT97,3123
mapSelect :: (a -> a) -> Select r a -> Select r amapSelect75,2251

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/State.hs,48
module Control.Monad.Trans.State (State29,991

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/State/Lazy.hs,1694
module Control.Monad.Trans.State.Lazy (Lazy38,1275
type State s = StateT s IdentityState97,2549
newtype StateT s m a = StateT { runStateT :: s -> m (a,s) }StateT161,4810
newtype StateT s m a = StateT { runStateT :: s -> m (a,s) }runStateT161,4810
withStateT :: (s -> s) -> StateT s m a -> StateT s m awithStateT195,5938
withState :: (s -> s) -> State s a -> State s awithState147,4369
state :: (Monad m)state101,2673
runState :: State s a   -- ^state-passing computation to executerunState109,2942
put :: (Monad m) => s -> StateT s m ()put274,8329
modify' :: (Monad m) => (s -> s) -> StateT s m ()modify'290,8817
modify :: (Monad m) => (s -> s) -> StateT s m ()modify282,8573
mapStateT :: (m (a, s) -> n (b, s)) -> StateT s m a -> StateT s n bmapStateT187,5674
mapState :: ((a, s) -> (b, s)) -> State s a -> State s bmapState139,4108
liftPass :: (Monad m) => Pass w m (a,s) -> Pass w (StateT s m) aliftPass336,10445
liftListen :: (Monad m) => Listen w m (a,s) -> Listen w (StateT s m) aliftListen329,10191
liftCatch :: Catch e m (a,s) -> Catch e (StateT s m) aliftCatch323,9970
liftCallCC' :: CallCC m (a,s) (b,s) -> CallCC (StateT s m) a bliftCallCC'316,9715
liftCallCC :: CallCC m (a,s) (b,s) -> CallCC (StateT s m) a bliftCallCC307,9301
gets :: (Monad m) => (s -> a) -> StateT s m agets300,9056
get :: (Monad m) => StateT s m sget269,8193
execStateT :: (Monad m) => StateT s m a -> s -> m sexecStateT177,5378
execState :: State s a  -- ^state-passing computation to executeexecState129,3750
evalStateT :: (Monad m) => StateT s m a -> s -> m aevalStateT167,5054
evalState :: State s a  -- ^state-passing computation to executeevalState119,3343

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/State/Strict.hs,1697
module Control.Monad.Trans.State.Strict (Strict35,1225
type State s = StateT s IdentityState94,2501
newtype StateT s m a = StateT { runStateT :: s -> m (a,s) }StateT158,4762
newtype StateT s m a = StateT { runStateT :: s -> m (a,s) }runStateT158,4762
withStateT :: (s -> s) -> StateT s m a -> StateT s m awithStateT192,5888
withState :: (s -> s) -> State s a -> State s awithState144,4321
state :: (Monad m)state98,2625
runState :: State s a   -- ^state-passing computation to executerunState106,2894
put :: (Monad m) => s -> StateT s m ()put271,8274
modify' :: (Monad m) => (s -> s) -> StateT s m ()modify'287,8762
modify :: (Monad m) => (s -> s) -> StateT s m ()modify279,8518
mapStateT :: (m (a, s) -> n (b, s)) -> StateT s m a -> StateT s n bmapStateT184,5624
mapState :: ((a, s) -> (b, s)) -> State s a -> State s bmapState136,4060
liftPass :: (Monad m) => Pass w m (a,s) -> Pass w (StateT s m) aliftPass333,10389
liftListen :: (Monad m) => Listen w m (a,s) -> Listen w (StateT s m) aliftListen326,10136
liftCatch :: Catch e m (a,s) -> Catch e (StateT s m) aliftCatch320,9915
liftCallCC' :: CallCC m (a,s) (b,s) -> CallCC (StateT s m) a bliftCallCC'313,9660
liftCallCC :: CallCC m (a,s) (b,s) -> CallCC (StateT s m) a bliftCallCC304,9246
gets :: (Monad m) => (s -> a) -> StateT s m agets297,9001
get :: (Monad m) => StateT s m sget266,8138
execStateT :: (Monad m) => StateT s m a -> s -> m sexecStateT174,5329
execState :: State s a  -- ^state-passing computation to executeexecState126,3702
evalStateT :: (Monad m) => StateT s m a -> s -> m aevalStateT164,5006
evalState :: State s a  -- ^state-passing computation to executeevalState116,3295

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Writer.hs,50
module Control.Monad.Trans.Writer (Writer21,739

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Writer/CPS.hs,1333
module Control.Monad.Trans.Writer.CPS (CPS32,1198
type Writer w = WriterT w IdentityWriter77,2232
newtype WriterT w m a = WriterT { unWriterT :: w -> m (a, w) }WriterT118,3594
newtype WriterT w m a = WriterT { unWriterT :: w -> m (a, w) }unWriterT118,3594
writerT :: (Functor m, Monoid w) => m (a, w) -> WriterT w m awriterT122,3765
writer :: (Monoid w, Monad m) => (a, w) -> WriterT w m awriter81,2367
tell :: (Monoid w, Monad m) => w -> WriterT w m ()tell218,6612
runWriterT :: (Monoid w) => WriterT w m a -> m (a, w)runWriterT129,4014
runWriter :: (Monoid w) => Writer w a -> (a, w)runWriter88,2627
pass :: (Monoid w, Monoid w', Monad m) =>pass249,7817
mapWriterT :: (Monad n, Monoid w, Monoid w') =>mapWriterT146,4536
mapWriter :: (Monoid w, Monoid w') =>mapWriter103,3096
listens :: (Monoid w, Monad m) =>listens236,7328
listen :: (Monoid w, Monad m) => WriterT w m a -> WriterT w m (a, w)listen226,6914
liftCatch :: Catch e m (a, w) -> Catch e (WriterT w m) aliftCatch280,8958
liftCallCC :: CallCC m (a, w) (b, w) -> CallCC (WriterT w m) a bliftCallCC274,8707
execWriterT :: (Monad m, Monoid w) => WriterT w m a -> m wexecWriterT136,4239
execWriter :: (Monoid w) => Writer w a -> wexecWriter95,2838
censor :: (Monoid w, Monad m) => (w -> w) -> WriterT w m a -> WriterT w m acensor264,8344

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Writer/Lazy.hs,1216
module Control.Monad.Trans.Writer.Lazy (Lazy30,1086
type Writer w = WriterT w IdentityWriter80,2342
newtype WriterT w m a = WriterT { runWriterT :: m (a, w) }WriterT118,3567
newtype WriterT w m a = WriterT { runWriterT :: m (a, w) }runWriterT118,3567
writer :: (Monad m) => (a, w) -> WriterT w m awriter84,2477
tell :: (Monad m) => w -> WriterT w m ()tell252,8144
runWriter :: Writer w a -> (a, w)runWriter90,2664
pass :: (Monad m) => WriterT w m (a, w -> w) -> WriterT w m apass283,9324
mapWriterT :: (m (a, w) -> n (b, w')) -> WriterT w m a -> WriterT w' n bmapWriterT163,5252
mapWriter :: ((a, w) -> (b, w')) -> Writer w a -> Writer w' bmapWriter105,3099
listens :: (Monad m) => (w -> b) -> WriterT w m a -> WriterT w m (a, b)listens272,8895
listen :: (Monad m) => WriterT w m a -> WriterT w m (a, w)listen260,8436
liftCatch :: Catch e m (a,w) -> Catch e (WriterT w m) aliftCatch310,10248
liftCallCC :: (Monoid w) => CallCC m (a,w) (b,w) -> CallCC (WriterT w m) a bliftCallCC303,9991
execWriterT :: (Monad m) => WriterT w m a -> m wexecWriterT153,4964
execWriter :: Writer w a -> wexecWriter97,2861
censor :: (Monad m) => (w -> w) -> WriterT w m a -> WriterT w m acensor296,9779

/home/effectfully/.fastdogs/transformers-0.5.6.2/Control/Monad/Trans/Writer/Strict.hs,1222
module Control.Monad.Trans.Writer.Strict (Strict33,1258
type Writer w = WriterT w IdentityWriter83,2516
newtype WriterT w m a = WriterT { runWriterT :: m (a, w) }WriterT121,3741
newtype WriterT w m a = WriterT { runWriterT :: m (a, w) }runWriterT121,3741
writer :: (Monad m) => (a, w) -> WriterT w m awriter87,2651
tell :: (Monad m) => w -> WriterT w m ()tell255,8309
runWriter :: Writer w a -> (a, w)runWriter93,2838
pass :: (Monad m) => WriterT w m (a, w -> w) -> WriterT w m apass286,9487
mapWriterT :: (m (a, w) -> n (b, w')) -> WriterT w m a -> WriterT w' n bmapWriterT166,5425
mapWriter :: ((a, w) -> (b, w')) -> Writer w a -> Writer w' bmapWriter108,3273
listens :: (Monad m) => (w -> b) -> WriterT w m a -> WriterT w m (a, b)listens275,9059
listen :: (Monad m) => WriterT w m a -> WriterT w m (a, w)listen263,8601
liftCatch :: Catch e m (a,w) -> Catch e (WriterT w m) aliftCatch313,10409
liftCallCC :: (Monoid w) => CallCC m (a,w) (b,w) -> CallCC (WriterT w m) a bliftCallCC306,10152
execWriterT :: (Monad m) => WriterT w m a -> m wexecWriterT156,5138
execWriter :: Writer w a -> wexecWriter100,3035
censor :: (Monad m) => (w -> w) -> WriterT w m a -> WriterT w m acensor299,9941

/home/effectfully/.fastdogs/transformers-0.5.6.2/Data/Functor/Constant.hs,190
module Data.Functor.Constant (Constant24,643
newtype Constant a b = Constant { getConstant :: a }Constant50,1259
newtype Constant a b = Constant { getConstant :: a }getConstant50,1259

/home/effectfully/.fastdogs/transformers-0.5.6.2/Data/Functor/Reverse.hs,184
module Data.Functor.Reverse (Reverse25,720
newtype Reverse f a = Reverse { getReverse :: f a }Reverse47,1295
newtype Reverse f a = Reverse { getReverse :: f a }getReverse47,1295

/home/effectfully/.fastdogs/transformers-0.5.6.2/legacy/pre709/Data/Functor/Identity.hs,187
module Data.Functor.Identity (Identity44,1473
newtype Identity a = Identity { runIdentity :: a }Identity69,2134
newtype Identity a = Identity { runIdentity :: a }runIdentity69,2134

/home/effectfully/.fastdogs/transformers-0.5.6.2/legacy/pre711/Control/Monad/IO/Class.hs,137
module Control.Monad.IO.Class (Class23,701
class (Monad m) => MonadIO m whereMonadIO42,1207
    liftIO :: IO a -> m aliftIO44,1291

/home/effectfully/.fastdogs/transformers-0.5.6.2/legacy/pre711/Data/Functor/Classes.hs,2938
module Data.Functor.Classes (Classes41,1454
class Eq1 f whereEq181,2399
    liftEq :: (a -> b -> Bool) -> f a -> f b -> BoolliftEq88,2713
class (Eq1 f) => Ord1 f whereOrd199,3030
    liftCompare :: (a -> b -> Ordering) -> f a -> f b -> OrderingliftCompare106,3361
class Read1 f whereRead1117,3718
    liftReadsPrec :: (Int -> ReadS a) -> ReadS [a] -> Int -> ReadS (f a)liftReadsPrec120,3887
    liftReadList :: (Int -> ReadS a) -> ReadS [a] -> ReadS [f a]liftReadList126,4204
class Show1 f whereShow1150,5104
    liftShowsPrec :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->liftShowsPrec153,5273
    liftShowList :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->liftShowList160,5607
class Eq2 f whereEq2174,6081
    liftEq2 :: (a -> b -> Bool) -> (c -> d -> Bool) -> f a c -> f b d -> BoolliftEq2181,6393
class (Eq2 f) => Ord2 f whereOrd2192,6752
    liftCompare2 :: (a -> b -> Ordering) -> (c -> d -> Ordering) ->liftCompare2199,7083
class Read2 f whereRead2211,7498
    liftReadsPrec2 :: (Int -> ReadS a) -> ReadS [a] ->liftReadsPrec2214,7668
    liftReadList2 :: (Int -> ReadS a) -> ReadS [a] ->liftReadList2221,8030
class Show2 f whereShow2235,8571
    liftShowsPrec2 :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->liftShowsPrec2238,8741
    liftShowList2 :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->liftShowList2245,9120
showsUnaryWith :: (Int -> a -> ShowS) -> String -> Int -> a -> ShowSshowsUnaryWith444,15749
showsUnary1 :: (Show1 f, Show a) => String -> Int -> f a -> ShowSshowsUnary1491,18100
showsUnary :: (Show a) => String -> Int -> a -> ShowSshowsUnary484,17722
showsPrec2 :: (Show2 f, Show a, Show b) => Int -> f a b -> ShowSshowsPrec2255,9487
showsPrec1 :: (Show1 f, Show a) => Int -> f a -> ShowSshowsPrec1170,5919
showsBinaryWith :: (Int -> a -> ShowS) -> (Int -> b -> ShowS) ->showsBinaryWith451,16093
showsBinary1 :: (Show1 f, Show1 g, Show a) =>showsBinary1499,18510
readsUnaryWith :: (Int -> ReadS a) -> String -> (a -> t) -> String -> ReadS treadsUnaryWith429,15048
readsUnary1 :: (Read1 f, Read a) => String -> (f a -> t) -> String -> ReadS treadsUnary1468,16904
readsUnary :: (Read a) => String -> (a -> t) -> String -> ReadS treadsUnary461,16553
readsPrec2 :: (Read2 f, Read a, Read b) => Int -> ReadS (f a b)readsPrec2231,8378
readsPrec1 :: (Read1 f, Read a) => Int -> ReadS (f a)readsPrec1146,4942
readsData :: (String -> ReadS a) -> Int -> ReadS areadsData423,14776
readsBinaryWith :: (Int -> ReadS a) -> (Int -> ReadS b) ->readsBinaryWith436,15368
readsBinary1 :: (Read1 f, Read1 g, Read a) =>readsBinary1475,17274
readListWith :: ReadS a -> ReadS [a]readListWith135,4499
eq2 :: (Eq2 f, Eq a, Eq b) => f a b -> f a b -> Booleq2188,6613
eq1 :: (Eq1 f, Eq a) => f a -> f a -> Booleq195,2908
compare2 :: (Ord2 f, Ord a, Ord b) => f a b -> f a b -> Orderingcompare2207,7330
compare1 :: (Ord1 f, Ord a) => f a -> f a -> Orderingcompare1113,3571

/home/effectfully/.fastdogs/transformers-0.5.6.2/legacy/pre711/Data/Functor/Compose.hs,295
module Data.Functor.Compose (Compose33,941
newtype Compose f g a = Compose { getCompose :: f (g a) }Compose57,1514
newtype Compose f g a = Compose { getCompose :: f (g a) }getCompose57,1514
data MDComposeMDCompose70,1931
data MCComposeMCCompose71,1946
data MSComposeMSCompose72,1961

/home/effectfully/.fastdogs/transformers-0.5.6.2/legacy/pre711/Data/Functor/Product.hs,210
module Data.Functor.Product (Product33,946
data Product f g a = Pair (f a) (g a)Product58,1552
data Product f g a = Pair (f a) (g a)Pair58,1552
data MDProductMDProduct71,1959
data MCPairMCPair72,1974

/home/effectfully/.fastdogs/transformers-0.5.6.2/legacy/pre711/Data/Functor/Sum.hs,265
module Data.Functor.Sum (Sum33,938
data Sum f g a = InL (f a) | InR (g a)Sum53,1374
data Sum f g a = InL (f a) | InR (g a)InL53,1374
data Sum f g a = InL (f a) | InR (g a)InR53,1374
data MDSumMDSum67,1834
data MCInLMCInL68,1845
data MCInRMCInR69,1856

dist-newstyle-dante/build/x86_64-linux/ghc-8.10.7/registry-0.1.0.0/build/autogen/Paths_registry.hs,1579
module Paths_registry (Paths_registry5,131
version :: Versionversion32,735
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathsysconfdir44,1006
pathSeparator :: CharpathSeparator70,2259
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathlibexecdir44,1006
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathlibdir44,1006
joinFileName :: String -> String -> FilePathjoinFileName62,1981
isPathSeparator :: Char -> BoolisPathSeparator73,2302
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetSysconfDir40,911
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetLibexecDir40,911
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetLibDir40,911
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetDynLibDir40,911
getDataFileName :: FilePath -> IO FilePathgetDataFileName35,786
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetDataDir40,911
getBinDir, getLibDir, getDynLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePathgetBinDir40,911
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathdynlibdir44,1006
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathdatadir44,1006
catchIO :: IO a -> (Exception.IOException -> IO a) -> IO acatchIO22,506
bindir, libdir, dynlibdir, datadir, libexecdir, sysconfdir :: FilePathbindir44,1006

src/Lib.hs,19
module LibLib1,0
